
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc8  08004cc8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd0  08004cd0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  2000005c  08004d34  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08004d34  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd89  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000216f  00000000  00000000  0002fe58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00031fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9c  00000000  00000000  00032d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261fd  00000000  00000000  000337fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011120  00000000  00000000  000599f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efe52  00000000  00000000  0006ab19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e18  00000000  00000000  0015a96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0015e784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c50 	.word	0x08004c50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004c50 	.word	0x08004c50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b970 	b.w	8000920 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9e08      	ldr	r6, [sp, #32]
 800065e:	460d      	mov	r5, r1
 8000660:	4604      	mov	r4, r0
 8000662:	460f      	mov	r7, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d14a      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000668:	428a      	cmp	r2, r1
 800066a:	4694      	mov	ip, r2
 800066c:	d965      	bls.n	800073a <__udivmoddi4+0xe2>
 800066e:	fab2 f382 	clz	r3, r2
 8000672:	b143      	cbz	r3, 8000686 <__udivmoddi4+0x2e>
 8000674:	fa02 fc03 	lsl.w	ip, r2, r3
 8000678:	f1c3 0220 	rsb	r2, r3, #32
 800067c:	409f      	lsls	r7, r3
 800067e:	fa20 f202 	lsr.w	r2, r0, r2
 8000682:	4317      	orrs	r7, r2
 8000684:	409c      	lsls	r4, r3
 8000686:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800068a:	fa1f f58c 	uxth.w	r5, ip
 800068e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000692:	0c22      	lsrs	r2, r4, #16
 8000694:	fb0e 7711 	mls	r7, lr, r1, r7
 8000698:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800069c:	fb01 f005 	mul.w	r0, r1, r5
 80006a0:	4290      	cmp	r0, r2
 80006a2:	d90a      	bls.n	80006ba <__udivmoddi4+0x62>
 80006a4:	eb1c 0202 	adds.w	r2, ip, r2
 80006a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006ac:	f080 811c 	bcs.w	80008e8 <__udivmoddi4+0x290>
 80006b0:	4290      	cmp	r0, r2
 80006b2:	f240 8119 	bls.w	80008e8 <__udivmoddi4+0x290>
 80006b6:	3902      	subs	r1, #2
 80006b8:	4462      	add	r2, ip
 80006ba:	1a12      	subs	r2, r2, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb2 f0fe 	udiv	r0, r2, lr
 80006c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006ca:	fb00 f505 	mul.w	r5, r0, r5
 80006ce:	42a5      	cmp	r5, r4
 80006d0:	d90a      	bls.n	80006e8 <__udivmoddi4+0x90>
 80006d2:	eb1c 0404 	adds.w	r4, ip, r4
 80006d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006da:	f080 8107 	bcs.w	80008ec <__udivmoddi4+0x294>
 80006de:	42a5      	cmp	r5, r4
 80006e0:	f240 8104 	bls.w	80008ec <__udivmoddi4+0x294>
 80006e4:	4464      	add	r4, ip
 80006e6:	3802      	subs	r0, #2
 80006e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ec:	1b64      	subs	r4, r4, r5
 80006ee:	2100      	movs	r1, #0
 80006f0:	b11e      	cbz	r6, 80006fa <__udivmoddi4+0xa2>
 80006f2:	40dc      	lsrs	r4, r3
 80006f4:	2300      	movs	r3, #0
 80006f6:	e9c6 4300 	strd	r4, r3, [r6]
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d908      	bls.n	8000714 <__udivmoddi4+0xbc>
 8000702:	2e00      	cmp	r6, #0
 8000704:	f000 80ed 	beq.w	80008e2 <__udivmoddi4+0x28a>
 8000708:	2100      	movs	r1, #0
 800070a:	e9c6 0500 	strd	r0, r5, [r6]
 800070e:	4608      	mov	r0, r1
 8000710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000714:	fab3 f183 	clz	r1, r3
 8000718:	2900      	cmp	r1, #0
 800071a:	d149      	bne.n	80007b0 <__udivmoddi4+0x158>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d302      	bcc.n	8000726 <__udivmoddi4+0xce>
 8000720:	4282      	cmp	r2, r0
 8000722:	f200 80f8 	bhi.w	8000916 <__udivmoddi4+0x2be>
 8000726:	1a84      	subs	r4, r0, r2
 8000728:	eb65 0203 	sbc.w	r2, r5, r3
 800072c:	2001      	movs	r0, #1
 800072e:	4617      	mov	r7, r2
 8000730:	2e00      	cmp	r6, #0
 8000732:	d0e2      	beq.n	80006fa <__udivmoddi4+0xa2>
 8000734:	e9c6 4700 	strd	r4, r7, [r6]
 8000738:	e7df      	b.n	80006fa <__udivmoddi4+0xa2>
 800073a:	b902      	cbnz	r2, 800073e <__udivmoddi4+0xe6>
 800073c:	deff      	udf	#255	; 0xff
 800073e:	fab2 f382 	clz	r3, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8090 	bne.w	8000868 <__udivmoddi4+0x210>
 8000748:	1a8a      	subs	r2, r1, r2
 800074a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074e:	fa1f fe8c 	uxth.w	lr, ip
 8000752:	2101      	movs	r1, #1
 8000754:	fbb2 f5f7 	udiv	r5, r2, r7
 8000758:	fb07 2015 	mls	r0, r7, r5, r2
 800075c:	0c22      	lsrs	r2, r4, #16
 800075e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000762:	fb0e f005 	mul.w	r0, lr, r5
 8000766:	4290      	cmp	r0, r2
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0x124>
 800076a:	eb1c 0202 	adds.w	r2, ip, r2
 800076e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x122>
 8000774:	4290      	cmp	r0, r2
 8000776:	f200 80cb 	bhi.w	8000910 <__udivmoddi4+0x2b8>
 800077a:	4645      	mov	r5, r8
 800077c:	1a12      	subs	r2, r2, r0
 800077e:	b2a4      	uxth	r4, r4
 8000780:	fbb2 f0f7 	udiv	r0, r2, r7
 8000784:	fb07 2210 	mls	r2, r7, r0, r2
 8000788:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800078c:	fb0e fe00 	mul.w	lr, lr, r0
 8000790:	45a6      	cmp	lr, r4
 8000792:	d908      	bls.n	80007a6 <__udivmoddi4+0x14e>
 8000794:	eb1c 0404 	adds.w	r4, ip, r4
 8000798:	f100 32ff 	add.w	r2, r0, #4294967295
 800079c:	d202      	bcs.n	80007a4 <__udivmoddi4+0x14c>
 800079e:	45a6      	cmp	lr, r4
 80007a0:	f200 80bb 	bhi.w	800091a <__udivmoddi4+0x2c2>
 80007a4:	4610      	mov	r0, r2
 80007a6:	eba4 040e 	sub.w	r4, r4, lr
 80007aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007ae:	e79f      	b.n	80006f0 <__udivmoddi4+0x98>
 80007b0:	f1c1 0720 	rsb	r7, r1, #32
 80007b4:	408b      	lsls	r3, r1
 80007b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80007be:	fa05 f401 	lsl.w	r4, r5, r1
 80007c2:	fa20 f307 	lsr.w	r3, r0, r7
 80007c6:	40fd      	lsrs	r5, r7
 80007c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007cc:	4323      	orrs	r3, r4
 80007ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80007d2:	fa1f fe8c 	uxth.w	lr, ip
 80007d6:	fb09 5518 	mls	r5, r9, r8, r5
 80007da:	0c1c      	lsrs	r4, r3, #16
 80007dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007e0:	fb08 f50e 	mul.w	r5, r8, lr
 80007e4:	42a5      	cmp	r5, r4
 80007e6:	fa02 f201 	lsl.w	r2, r2, r1
 80007ea:	fa00 f001 	lsl.w	r0, r0, r1
 80007ee:	d90b      	bls.n	8000808 <__udivmoddi4+0x1b0>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007f8:	f080 8088 	bcs.w	800090c <__udivmoddi4+0x2b4>
 80007fc:	42a5      	cmp	r5, r4
 80007fe:	f240 8085 	bls.w	800090c <__udivmoddi4+0x2b4>
 8000802:	f1a8 0802 	sub.w	r8, r8, #2
 8000806:	4464      	add	r4, ip
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	b29d      	uxth	r5, r3
 800080c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000810:	fb09 4413 	mls	r4, r9, r3, r4
 8000814:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000818:	fb03 fe0e 	mul.w	lr, r3, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x1da>
 8000820:	eb1c 0404 	adds.w	r4, ip, r4
 8000824:	f103 35ff 	add.w	r5, r3, #4294967295
 8000828:	d26c      	bcs.n	8000904 <__udivmoddi4+0x2ac>
 800082a:	45a6      	cmp	lr, r4
 800082c:	d96a      	bls.n	8000904 <__udivmoddi4+0x2ac>
 800082e:	3b02      	subs	r3, #2
 8000830:	4464      	add	r4, ip
 8000832:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000836:	fba3 9502 	umull	r9, r5, r3, r2
 800083a:	eba4 040e 	sub.w	r4, r4, lr
 800083e:	42ac      	cmp	r4, r5
 8000840:	46c8      	mov	r8, r9
 8000842:	46ae      	mov	lr, r5
 8000844:	d356      	bcc.n	80008f4 <__udivmoddi4+0x29c>
 8000846:	d053      	beq.n	80008f0 <__udivmoddi4+0x298>
 8000848:	b156      	cbz	r6, 8000860 <__udivmoddi4+0x208>
 800084a:	ebb0 0208 	subs.w	r2, r0, r8
 800084e:	eb64 040e 	sbc.w	r4, r4, lr
 8000852:	fa04 f707 	lsl.w	r7, r4, r7
 8000856:	40ca      	lsrs	r2, r1
 8000858:	40cc      	lsrs	r4, r1
 800085a:	4317      	orrs	r7, r2
 800085c:	e9c6 7400 	strd	r7, r4, [r6]
 8000860:	4618      	mov	r0, r3
 8000862:	2100      	movs	r1, #0
 8000864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000868:	f1c3 0120 	rsb	r1, r3, #32
 800086c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000870:	fa20 f201 	lsr.w	r2, r0, r1
 8000874:	fa25 f101 	lsr.w	r1, r5, r1
 8000878:	409d      	lsls	r5, r3
 800087a:	432a      	orrs	r2, r5
 800087c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000880:	fa1f fe8c 	uxth.w	lr, ip
 8000884:	fbb1 f0f7 	udiv	r0, r1, r7
 8000888:	fb07 1510 	mls	r5, r7, r0, r1
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000892:	fb00 f50e 	mul.w	r5, r0, lr
 8000896:	428d      	cmp	r5, r1
 8000898:	fa04 f403 	lsl.w	r4, r4, r3
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x258>
 800089e:	eb1c 0101 	adds.w	r1, ip, r1
 80008a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008a6:	d22f      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008a8:	428d      	cmp	r5, r1
 80008aa:	d92d      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008ac:	3802      	subs	r0, #2
 80008ae:	4461      	add	r1, ip
 80008b0:	1b49      	subs	r1, r1, r5
 80008b2:	b292      	uxth	r2, r2
 80008b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008b8:	fb07 1115 	mls	r1, r7, r5, r1
 80008bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c0:	fb05 f10e 	mul.w	r1, r5, lr
 80008c4:	4291      	cmp	r1, r2
 80008c6:	d908      	bls.n	80008da <__udivmoddi4+0x282>
 80008c8:	eb1c 0202 	adds.w	r2, ip, r2
 80008cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80008d0:	d216      	bcs.n	8000900 <__udivmoddi4+0x2a8>
 80008d2:	4291      	cmp	r1, r2
 80008d4:	d914      	bls.n	8000900 <__udivmoddi4+0x2a8>
 80008d6:	3d02      	subs	r5, #2
 80008d8:	4462      	add	r2, ip
 80008da:	1a52      	subs	r2, r2, r1
 80008dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008e0:	e738      	b.n	8000754 <__udivmoddi4+0xfc>
 80008e2:	4631      	mov	r1, r6
 80008e4:	4630      	mov	r0, r6
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xa2>
 80008e8:	4639      	mov	r1, r7
 80008ea:	e6e6      	b.n	80006ba <__udivmoddi4+0x62>
 80008ec:	4610      	mov	r0, r2
 80008ee:	e6fb      	b.n	80006e8 <__udivmoddi4+0x90>
 80008f0:	4548      	cmp	r0, r9
 80008f2:	d2a9      	bcs.n	8000848 <__udivmoddi4+0x1f0>
 80008f4:	ebb9 0802 	subs.w	r8, r9, r2
 80008f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008fc:	3b01      	subs	r3, #1
 80008fe:	e7a3      	b.n	8000848 <__udivmoddi4+0x1f0>
 8000900:	4645      	mov	r5, r8
 8000902:	e7ea      	b.n	80008da <__udivmoddi4+0x282>
 8000904:	462b      	mov	r3, r5
 8000906:	e794      	b.n	8000832 <__udivmoddi4+0x1da>
 8000908:	4640      	mov	r0, r8
 800090a:	e7d1      	b.n	80008b0 <__udivmoddi4+0x258>
 800090c:	46d0      	mov	r8, sl
 800090e:	e77b      	b.n	8000808 <__udivmoddi4+0x1b0>
 8000910:	3d02      	subs	r5, #2
 8000912:	4462      	add	r2, ip
 8000914:	e732      	b.n	800077c <__udivmoddi4+0x124>
 8000916:	4608      	mov	r0, r1
 8000918:	e70a      	b.n	8000730 <__udivmoddi4+0xd8>
 800091a:	4464      	add	r4, ip
 800091c:	3802      	subs	r0, #2
 800091e:	e742      	b.n	80007a6 <__udivmoddi4+0x14e>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <HCSR04_Init>:
*@brief: The sensor initiliazing settings.
*@retval: None
*/

void HCSR04_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	htim_echo        = htim1;         // htim Echo pin.
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <HCSR04_Init+0x7c>)
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <HCSR04_Init+0x80>)
 800092c:	4610      	mov	r0, r2
 800092e:	4619      	mov	r1, r3
 8000930:	234c      	movs	r3, #76	; 0x4c
 8000932:	461a      	mov	r2, r3
 8000934:	f003 fd3c 	bl	80043b0 <memcpy>
	  TIM_Echo         = TIM1;          // TIM Echo pin.
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HCSR04_Init+0x84>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <HCSR04_Init+0x88>)
 800093c:	601a      	str	r2, [r3, #0]
		htim_delay       = htim2;	        // htim delay for Trig
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <HCSR04_Init+0x8c>)
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HCSR04_Init+0x90>)
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	234c      	movs	r3, #76	; 0x4c
 8000948:	461a      	mov	r2, r3
 800094a:	f003 fd31 	bl	80043b0 <memcpy>
		TIM_Delay        = TIM2;          // TIM2 delay for Trig
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HCSR04_Init+0x94>)
 8000950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000954:	601a      	str	r2, [r3, #0]

		GPIO_Trigger     = GPIOA;          // Trigger Port.
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HCSR04_Init+0x98>)
 8000958:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <HCSR04_Init+0x9c>)
 800095a:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Trigger = GPIO_PIN_6;    //  Trigger Pin.
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HCSR04_Init+0xa0>)
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	801a      	strh	r2, [r3, #0]
		GPIO_Echo        = GPIOE;         // Echo Port.
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <HCSR04_Init+0xa4>)
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <HCSR04_Init+0xa8>)
 8000966:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Echo    = GPIO_PIN_9;   // Echo Pin.
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <HCSR04_Init+0xac>)
 800096a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096e:	801a      	strh	r2, [r3, #0]
	
	HAL_GPIO_WritePin(GPIO_Trigger, GPIO_PIN_Trigger, GPIO_PIN_RESET);
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HCSR04_Init+0x98>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <HCSR04_Init+0xa0>)
 8000976:	8811      	ldrh	r1, [r2, #0]
 8000978:	2200      	movs	r2, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f001 f91c 	bl	8001bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_RESET);
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HCSR04_Init+0xa4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <HCSR04_Init+0xac>)
 8000986:	8811      	ldrh	r1, [r2, #0]
 8000988:	2200      	movs	r2, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f914 	bl	8001bb8 <HAL_GPIO_WritePin>
	 
  HAL_TIM_Base_Start_IT(&htim_echo);
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <HCSR04_Init+0x7c>)
 8000992:	f002 fa9d 	bl	8002ed0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim_delay);
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <HCSR04_Init+0x8c>)
 8000998:	f002 fa9a 	bl	8002ed0 <HAL_TIM_Base_Start_IT>
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000078 	.word	0x20000078
 80009a4:	2000012c 	.word	0x2000012c
 80009a8:	20000110 	.word	0x20000110
 80009ac:	40010000 	.word	0x40010000
 80009b0:	200000c4 	.word	0x200000c4
 80009b4:	20000178 	.word	0x20000178
 80009b8:	20000114 	.word	0x20000114
 80009bc:	20000118 	.word	0x20000118
 80009c0:	40020000 	.word	0x40020000
 80009c4:	20000120 	.word	0x20000120
 80009c8:	2000011c 	.word	0x2000011c
 80009cc:	40021000 	.word	0x40021000
 80009d0:	20000122 	.word	0x20000122

080009d4 <HCSR04_TIM_PEC>:
*@brief: HC-SR04 HAL_TIM_PeriodElapsedCallback function
*@param: htim pointer to a TIM_HandleTypeDef structure that contains the configuration information for TIM module.
*@retval: None
*/
void HCSR04_TIM_PEC(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	htim_echo        = htim1;         // htim Echo pin.
 80009dc:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <HCSR04_TIM_PEC+0x98>)
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <HCSR04_TIM_PEC+0x9c>)
 80009e0:	4610      	mov	r0, r2
 80009e2:	4619      	mov	r1, r3
 80009e4:	234c      	movs	r3, #76	; 0x4c
 80009e6:	461a      	mov	r2, r3
 80009e8:	f003 fce2 	bl	80043b0 <memcpy>
	  TIM_Echo         = TIM1;          // TIM Echo pin.
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <HCSR04_TIM_PEC+0xa0>)
 80009ee:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <HCSR04_TIM_PEC+0xa4>)
 80009f0:	601a      	str	r2, [r3, #0]
		htim_delay       = htim2;	        // htim delay for Trig
 80009f2:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <HCSR04_TIM_PEC+0xa8>)
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <HCSR04_TIM_PEC+0xac>)
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	234c      	movs	r3, #76	; 0x4c
 80009fc:	461a      	mov	r2, r3
 80009fe:	f003 fcd7 	bl	80043b0 <memcpy>
		TIM_Delay        = TIM2;          // TIM2 delay for Trig
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HCSR04_TIM_PEC+0xb0>)
 8000a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a08:	601a      	str	r2, [r3, #0]

		GPIO_Trigger     = GPIOA;          // Trigger Port.
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <HCSR04_TIM_PEC+0xb4>)
 8000a0c:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <HCSR04_TIM_PEC+0xb8>)
 8000a0e:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Trigger = GPIO_PIN_6;    //  Trigger Pin.
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HCSR04_TIM_PEC+0xbc>)
 8000a12:	2240      	movs	r2, #64	; 0x40
 8000a14:	801a      	strh	r2, [r3, #0]
		GPIO_Echo        = GPIOE;         // Echo Port.
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <HCSR04_TIM_PEC+0xc0>)
 8000a18:	4a1f      	ldr	r2, [pc, #124]	; (8000a98 <HCSR04_TIM_PEC+0xc4>)
 8000a1a:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Echo    = GPIO_PIN_9;   // Echo Pin.
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HCSR04_TIM_PEC+0xc8>)
 8000a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a22:	801a      	strh	r2, [r3, #0]
	
	if(htim->Instance == TIM_Delay)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HCSR04_TIM_PEC+0xb0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d105      	bne.n	8000a3c <HCSR04_TIM_PEC+0x68>
		__HAL_TIM_CLEAR_FLAG(&htim_delay, TIM_FLAG_UPDATE);            //Clear TIM_Delay UPDATE event Flag.
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HCSR04_TIM_PEC+0xa8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f06f 0201 	mvn.w	r2, #1
 8000a38:	611a      	str	r2, [r3, #16]
	else if(htim->Instance == TIM_Echo)
		{
			HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_RESET); //Reset Echo led (default:blue)  
	    __HAL_TIM_CLEAR_FLAG(&htim_echo, TIM_FLAG_UPDATE);           //Clear TIM_Echo UPDATE event Flag.
	  }
}
 8000a3a:	e012      	b.n	8000a62 <HCSR04_TIM_PEC+0x8e>
	else if(htim->Instance == TIM_Echo)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HCSR04_TIM_PEC+0xa0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d10c      	bne.n	8000a62 <HCSR04_TIM_PEC+0x8e>
			HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_RESET); //Reset Echo led (default:blue)  
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HCSR04_TIM_PEC+0xc0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <HCSR04_TIM_PEC+0xc8>)
 8000a4e:	8811      	ldrh	r1, [r2, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 f8b0 	bl	8001bb8 <HAL_GPIO_WritePin>
	    __HAL_TIM_CLEAR_FLAG(&htim_echo, TIM_FLAG_UPDATE);           //Clear TIM_Echo UPDATE event Flag.
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <HCSR04_TIM_PEC+0x98>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f06f 0201 	mvn.w	r2, #1
 8000a60:	611a      	str	r2, [r3, #16]
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000078 	.word	0x20000078
 8000a70:	2000012c 	.word	0x2000012c
 8000a74:	20000110 	.word	0x20000110
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	200000c4 	.word	0x200000c4
 8000a80:	20000178 	.word	0x20000178
 8000a84:	20000114 	.word	0x20000114
 8000a88:	20000118 	.word	0x20000118
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	20000120 	.word	0x20000120
 8000a94:	2000011c 	.word	0x2000011c
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	20000122 	.word	0x20000122

08000aa0 <HCSR04_GetInfo>:
*@param: HCSR04_DATA pointer to hcsr04_data_t structure that contains data for the sensor.
         HCSR04_DATA -> duration: ms, us, distance: mm, cm, m, inch.   
*@retval: None
*/
void HCSR04_GetInfo(hcsr04_data_t *HCSR04_DATA)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	static volatile float duration = 0, distance = 0;

	htim_echo        = htim1;         // htim Echo pin.
 8000aa8:	4a5a      	ldr	r2, [pc, #360]	; (8000c14 <HCSR04_GetInfo+0x174>)
 8000aaa:	4b5b      	ldr	r3, [pc, #364]	; (8000c18 <HCSR04_GetInfo+0x178>)
 8000aac:	4610      	mov	r0, r2
 8000aae:	4619      	mov	r1, r3
 8000ab0:	234c      	movs	r3, #76	; 0x4c
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f003 fc7c 	bl	80043b0 <memcpy>
	  TIM_Echo         = TIM1;          // TIM Echo pin.
 8000ab8:	4b58      	ldr	r3, [pc, #352]	; (8000c1c <HCSR04_GetInfo+0x17c>)
 8000aba:	4a59      	ldr	r2, [pc, #356]	; (8000c20 <HCSR04_GetInfo+0x180>)
 8000abc:	601a      	str	r2, [r3, #0]
		htim_delay       = htim2;	        // htim delay for Trig
 8000abe:	4a59      	ldr	r2, [pc, #356]	; (8000c24 <HCSR04_GetInfo+0x184>)
 8000ac0:	4b59      	ldr	r3, [pc, #356]	; (8000c28 <HCSR04_GetInfo+0x188>)
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	234c      	movs	r3, #76	; 0x4c
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f003 fc71 	bl	80043b0 <memcpy>
		TIM_Delay        = TIM2;          // TIM2 delay for Trig
 8000ace:	4b57      	ldr	r3, [pc, #348]	; (8000c2c <HCSR04_GetInfo+0x18c>)
 8000ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad4:	601a      	str	r2, [r3, #0]

		GPIO_Trigger     = GPIOA;          // Trigger Port.
 8000ad6:	4b56      	ldr	r3, [pc, #344]	; (8000c30 <HCSR04_GetInfo+0x190>)
 8000ad8:	4a56      	ldr	r2, [pc, #344]	; (8000c34 <HCSR04_GetInfo+0x194>)
 8000ada:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Trigger = GPIO_PIN_6;    //  Trigger Pin.
 8000adc:	4b56      	ldr	r3, [pc, #344]	; (8000c38 <HCSR04_GetInfo+0x198>)
 8000ade:	2240      	movs	r2, #64	; 0x40
 8000ae0:	801a      	strh	r2, [r3, #0]
		GPIO_Echo        = GPIOE;         // Echo Port.
 8000ae2:	4b56      	ldr	r3, [pc, #344]	; (8000c3c <HCSR04_GetInfo+0x19c>)
 8000ae4:	4a56      	ldr	r2, [pc, #344]	; (8000c40 <HCSR04_GetInfo+0x1a0>)
 8000ae6:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Echo    = GPIO_PIN_9;   // Echo Pin.
 8000ae8:	4b56      	ldr	r3, [pc, #344]	; (8000c44 <HCSR04_GetInfo+0x1a4>)
 8000aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aee:	801a      	strh	r2, [r3, #0]
		//The sensor trigger pulse width= 10us 
	  
		//Blinking blue led shows that the sensor is seeking an object or has not dedected it exactly (it doesn't send the echo signal well).
		//if blue led is on and not blinking, it shows that the sensor has found an object (it sends the echo signal well).
	  //Blue led also indicates that TIM_Echo(default:TIM1) works and counts.		
		HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_SET);        //Set blue led. 
 8000af0:	4b52      	ldr	r3, [pc, #328]	; (8000c3c <HCSR04_GetInfo+0x19c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a53      	ldr	r2, [pc, #332]	; (8000c44 <HCSR04_GetInfo+0x1a4>)
 8000af6:	8811      	ldrh	r1, [r2, #0]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 f85c 	bl	8001bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Trigger, GPIO_PIN_Trigger, GPIO_PIN_SET);  //Set trigger pin, orange led.
 8000b00:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <HCSR04_GetInfo+0x190>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a4c      	ldr	r2, [pc, #304]	; (8000c38 <HCSR04_GetInfo+0x198>)
 8000b06:	8811      	ldrh	r1, [r2, #0]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 f854 	bl	8001bb8 <HAL_GPIO_WritePin>
	  //Default: Timer2 Parameter Settings;
	  //10us delay is enough and the sensor sends 8 pulses at 40kHz.
	  //APB1 timer clocks (MHz): 84, Prescaler:83, AutoReload Register(ARR):9
	  //84 MHz / (83+1) = 1 MHz equals 1 us, (ARR+1) x 1us equals 10us delay.
	  /*----10us delay by default:TIM2-----------------------------*/
    __HAL_TIM_SetCounter(&htim_delay, 0);
 8000b10:	4b44      	ldr	r3, [pc, #272]	; (8000c24 <HCSR04_GetInfo+0x184>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24
	  while(__HAL_TIM_GET_FLAG(&htim_delay, TIM_FLAG_UPDATE) != SET)
 8000b18:	bf00      	nop
 8000b1a:	4b42      	ldr	r3, [pc, #264]	; (8000c24 <HCSR04_GetInfo+0x184>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d1f8      	bne.n	8000b1a <HCSR04_GetInfo+0x7a>
	  {	
			
	  }
    /*-----------------------------------------------------------*/

    HAL_GPIO_WritePin(GPIO_Trigger, GPIO_PIN_Trigger, GPIO_PIN_RESET); //Reset trigger pin, orange led.
 8000b28:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <HCSR04_GetInfo+0x190>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a42      	ldr	r2, [pc, #264]	; (8000c38 <HCSR04_GetInfo+0x198>)
 8000b2e:	8811      	ldrh	r1, [r2, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f840 	bl	8001bb8 <HAL_GPIO_WritePin>
    
	
		while(__HAL_TIM_GET_FLAG(&htim_echo,TIM_FLAG_TRIGGER) != RESET && __HAL_TIM_GET_FLAG(&htim_echo, TIM_FLAG_UPDATE) != SET)
 8000b38:	e012      	b.n	8000b60 <HCSR04_GetInfo+0xc0>
		{	
			
			duration = __HAL_TIM_GetCounter(&htim_echo);        //Get TIM_Echo(default:TIM1) counter value(default:us) as long as there is Echo signal(rising edge).					
 8000b3a:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <HCSR04_GetInfo+0x174>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b48:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <HCSR04_GetInfo+0x1a8>)
 8000b4a:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SetCounter(&htim_echo, 0);                //Set the counter 0 , reset it.	
 8000b4e:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <HCSR04_GetInfo+0x174>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_CLEAR_FLAG(&htim_echo, TIM_FLAG_TRIGGER); //Clear TIM_Echo Trigger Flag.
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <HCSR04_GetInfo+0x174>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000b5e:	611a      	str	r2, [r3, #16]
		while(__HAL_TIM_GET_FLAG(&htim_echo,TIM_FLAG_TRIGGER) != RESET && __HAL_TIM_GET_FLAG(&htim_echo, TIM_FLAG_UPDATE) != SET)
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <HCSR04_GetInfo+0x174>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	2b40      	cmp	r3, #64	; 0x40
 8000b6c:	d106      	bne.n	8000b7c <HCSR04_GetInfo+0xdc>
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <HCSR04_GetInfo+0x174>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d1de      	bne.n	8000b3a <HCSR04_GetInfo+0x9a>
		
		}
		
				
		//X=V*t, X=distance_cm, V=0.0343cm/us, t=(transmission + reception time)/2 us
		distance = (duration/2)*(float)0.0343; //sound speed = 343m/s = 0.0343cm/us
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <HCSR04_GetInfo+0x1a8>)
 8000b7e:	ed93 7a00 	vldr	s14, [r3]
 8000b82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b8a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000c4c <HCSR04_GetInfo+0x1ac>
 8000b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b92:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <HCSR04_GetInfo+0x1b0>)
 8000b94:	edc3 7a00 	vstr	s15, [r3]
		distance -= zero_point;                //subtract the zero point and then, the distance(default:cm) equals from the zero point to object.
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <HCSR04_GetInfo+0x1b0>)
 8000b9a:	edd3 7a00 	vldr	s15, [r3]
 8000b9e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000c54 <HCSR04_GetInfo+0x1b4>
 8000ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <HCSR04_GetInfo+0x1b0>)
 8000ba8:	edc3 7a00 	vstr	s15, [r3]
	
	  HCSR04_DATA->distance_cm = distance;
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <HCSR04_GetInfo+0x1b0>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]
		HCSR04_DATA->distance_mm = distance*10;
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <HCSR04_GetInfo+0x1b0>)
 8000bb6:	edd3 7a00 	vldr	s15, [r3]
 8000bba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	edc3 7a02 	vstr	s15, [r3, #8]
		HCSR04_DATA->distance_m = distance/100;
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HCSR04_GetInfo+0x1b0>)
 8000bca:	ed93 7a00 	vldr	s14, [r3]
 8000bce:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000c58 <HCSR04_GetInfo+0x1b8>
 8000bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	edc3 7a04 	vstr	s15, [r3, #16]
		HCSR04_DATA->distance_inch = distance/(float)2.54;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HCSR04_GetInfo+0x1b0>)
 8000bde:	ed93 7a00 	vldr	s14, [r3]
 8000be2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000c5c <HCSR04_GetInfo+0x1bc>
 8000be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	edc3 7a05 	vstr	s15, [r3, #20]
		
		HCSR04_DATA->duration_us = duration;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HCSR04_GetInfo+0x1a8>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	605a      	str	r2, [r3, #4]
		HCSR04_DATA->duration_ms = duration/1000;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HCSR04_GetInfo+0x1a8>)
 8000bfa:	ed93 7a00 	vldr	s14, [r3]
 8000bfe:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000c60 <HCSR04_GetInfo+0x1c0>
 8000c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	edc3 7a00 	vstr	s15, [r3]
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000078 	.word	0x20000078
 8000c18:	2000012c 	.word	0x2000012c
 8000c1c:	20000110 	.word	0x20000110
 8000c20:	40010000 	.word	0x40010000
 8000c24:	200000c4 	.word	0x200000c4
 8000c28:	20000178 	.word	0x20000178
 8000c2c:	20000114 	.word	0x20000114
 8000c30:	20000118 	.word	0x20000118
 8000c34:	40020000 	.word	0x40020000
 8000c38:	20000120 	.word	0x20000120
 8000c3c:	2000011c 	.word	0x2000011c
 8000c40:	40021000 	.word	0x40021000
 8000c44:	20000122 	.word	0x20000122
 8000c48:	20000124 	.word	0x20000124
 8000c4c:	3d0c7e28 	.word	0x3d0c7e28
 8000c50:	20000128 	.word	0x20000128
 8000c54:	00000000 	.word	0x00000000
 8000c58:	42c80000 	.word	0x42c80000
 8000c5c:	40228f5c 	.word	0x40228f5c
 8000c60:	447a0000 	.word	0x447a0000

08000c64 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART3_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	HCSR04_TIM_PEC(htim);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff feb1 	bl	80009d4 <HCSR04_TIM_PEC>

}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c80:	f000 fc5b 	bl	800153a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c84:	f000 f840 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c88:	f000 f984 	bl	8000f94 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c8c:	f000 f952 	bl	8000f34 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000c90:	f000 f8a8 	bl	8000de4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c94:	f000 f900 	bl	8000e98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HCSR04_Init();
 8000c98:	f7ff fe44 	bl	8000924 <HCSR04_Init>
  while (1)
  {



		HCSR04_GetInfo(&HCSR04_sensor);
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <main+0x70>)
 8000c9e:	f7ff feff 	bl	8000aa0 <HCSR04_GetInfo>

  tx_us = HCSR04_sensor.duration_us;  //the time duration(us) of the signal obtained from echo pin (transmission + reception).
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <main+0x70>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <main+0x74>)
 8000ca8:	6013      	str	r3, [r2, #0]
		dx_cm = HCSR04_sensor.distance_cm;  //the distance in cm.
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <main+0x70>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <main+0x78>)
 8000cb0:	6013      	str	r3, [r2, #0]
		  len = sprintf(buf, "Distance: %.03u\r", dx_cm);
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <main+0x78>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fc5e 	bl	8000578 <__aeabi_f2d>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <main+0x7c>)
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <main+0x80>)
 8000cc4:	f003 fb20 	bl	8004308 <siprintf>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <main+0x84>)
 8000cce:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart3, buf, len, 20);
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <main+0x84>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	2314      	movs	r3, #20
 8000cd8:	4908      	ldr	r1, [pc, #32]	; (8000cfc <main+0x80>)
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <main+0x88>)
 8000cdc:	f002 fe8c 	bl	80039f8 <HAL_UART_Transmit>


		HAL_Delay(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce4:	f000 fc86 	bl	80015f4 <HAL_Delay>
  {
 8000ce8:	e7d8      	b.n	8000c9c <main+0x20>
 8000cea:	bf00      	nop
 8000cec:	20000274 	.word	0x20000274
 8000cf0:	2000024c 	.word	0x2000024c
 8000cf4:	20000250 	.word	0x20000250
 8000cf8:	08004c68 	.word	0x08004c68
 8000cfc:	20000254 	.word	0x20000254
 8000d00:	20000272 	.word	0x20000272
 8000d04:	200001c4 	.word	0x200001c4

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	2230      	movs	r2, #48	; 0x30
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fb16 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d2c:	f000 ff5e 	bl	8001bec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <SystemClock_Config+0xd4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <SystemClock_Config+0xd4>)
 8000d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <SystemClock_Config+0xd4>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <SystemClock_Config+0xd8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a24      	ldr	r2, [pc, #144]	; (8000de0 <SystemClock_Config+0xd8>)
 8000d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <SystemClock_Config+0xd8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d60:	2301      	movs	r3, #1
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d74:	2304      	movs	r3, #4
 8000d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d78:	23d8      	movs	r3, #216	; 0xd8
 8000d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d80:	2309      	movs	r3, #9
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0320 	add.w	r3, r7, #32
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 ff8f 	bl	8001cac <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d94:	f000 fa20 	bl	80011d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d98:	f000 ff38 	bl	8001c0c <HAL_PWREx_EnableOverDrive>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000da2:	f000 fa19 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	230f      	movs	r3, #15
 8000da8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000daa:	2302      	movs	r3, #2
 8000dac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000db2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000db6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2107      	movs	r1, #7
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fa15 	bl	80021f4 <HAL_RCC_ClockConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000dd0:	f000 fa02 	bl	80011d8 <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3750      	adds	r7, #80	; 0x50
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40007000 	.word	0x40007000

08000de4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <MX_TIM1_Init+0xb0>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e0c:	22d8      	movs	r2, #216	; 0xd8
 8000e0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e30:	4817      	ldr	r0, [pc, #92]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e32:	f001 fff5 	bl	8002e20 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 f9cc 	bl	80011d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000e40:	2305      	movs	r3, #5
 8000e42:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e44:	2350      	movs	r3, #80	; 0x50
 8000e46:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 15;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e58:	f002 fa9c 	bl	8003394 <HAL_TIM_SlaveConfigSynchro>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e62:	f000 f9b9 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <MX_TIM1_Init+0xac>)
 8000e78:	f002 fcc4 	bl	8003804 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e82:	f000 f9a9 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000012c 	.word	0x2000012c
 8000e94:	40010000 	.word	0x40010000

08000e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_TIM2_Init+0x94>)
 8000eb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ebc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_TIM2_Init+0x94>)
 8000ec0:	226b      	movs	r2, #107	; 0x6b
 8000ec2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_TIM2_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199999;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_TIM2_Init+0x94>)
 8000ecc:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <MX_TIM2_Init+0x98>)
 8000ece:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_TIM2_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_TIM2_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000edc:	4813      	ldr	r0, [pc, #76]	; (8000f2c <MX_TIM2_Init+0x94>)
 8000ede:	f001 ff9f 	bl	8002e20 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee8:	f000 f976 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_TIM2_Init+0x94>)
 8000efa:	f002 f981 	bl	8003200 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 f968 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM2_Init+0x94>)
 8000f16:	f002 fc75 	bl	8003804 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f20:	f000 f95a 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000178 	.word	0x20000178
 8000f30:	00030d3f 	.word	0x00030d3f

08000f34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <MX_USART3_UART_Init+0x5c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART3_UART_Init+0x58>)
 8000f78:	f002 fcf0 	bl	800395c <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f000 f929 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001c4 	.word	0x200001c4
 8000f90:	40004800 	.word	0x40004800

08000f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b86      	ldr	r3, [pc, #536]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a85      	ldr	r2, [pc, #532]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b83      	ldr	r3, [pc, #524]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	4b80      	ldr	r3, [pc, #512]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a7f      	ldr	r2, [pc, #508]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b7d      	ldr	r3, [pc, #500]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b7a      	ldr	r3, [pc, #488]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a79      	ldr	r2, [pc, #484]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b74      	ldr	r3, [pc, #464]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a73      	ldr	r2, [pc, #460]	; (80011c4 <MX_GPIO_Init+0x230>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <MX_GPIO_Init+0x230>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	4b6e      	ldr	r3, [pc, #440]	; (80011c4 <MX_GPIO_Init+0x230>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a6d      	ldr	r2, [pc, #436]	; (80011c4 <MX_GPIO_Init+0x230>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <MX_GPIO_Init+0x230>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <MX_GPIO_Init+0x230>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a67      	ldr	r2, [pc, #412]	; (80011c4 <MX_GPIO_Init+0x230>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <MX_GPIO_Init+0x230>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103a:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <MX_GPIO_Init+0x230>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a61      	ldr	r2, [pc, #388]	; (80011c4 <MX_GPIO_Init+0x230>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <MX_GPIO_Init+0x230>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	485c      	ldr	r0, [pc, #368]	; (80011c8 <MX_GPIO_Init+0x234>)
 8001058:	f000 fdae 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001062:	485a      	ldr	r0, [pc, #360]	; (80011cc <MX_GPIO_Init+0x238>)
 8001064:	f000 fda8 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	4858      	ldr	r0, [pc, #352]	; (80011d0 <MX_GPIO_Init+0x23c>)
 800106e:	f000 fda3 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001078:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4852      	ldr	r0, [pc, #328]	; (80011d4 <MX_GPIO_Init+0x240>)
 800108a:	f000 fbe9 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800108e:	2332      	movs	r3, #50	; 0x32
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109e:	230b      	movs	r3, #11
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	484a      	ldr	r0, [pc, #296]	; (80011d4 <MX_GPIO_Init+0x240>)
 80010aa:	f000 fbd9 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010ae:	2386      	movs	r3, #134	; 0x86
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010be:	230b      	movs	r3, #11
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	483f      	ldr	r0, [pc, #252]	; (80011c8 <MX_GPIO_Init+0x234>)
 80010ca:	f000 fbc9 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ce:	2340      	movs	r3, #64	; 0x40
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4838      	ldr	r0, [pc, #224]	; (80011c8 <MX_GPIO_Init+0x234>)
 80010e6:	f000 fbbb 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010ea:	f244 0381 	movw	r3, #16513	; 0x4081
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4832      	ldr	r0, [pc, #200]	; (80011cc <MX_GPIO_Init+0x238>)
 8001104:	f000 fbac 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800111a:	230b      	movs	r3, #11
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	4829      	ldr	r0, [pc, #164]	; (80011cc <MX_GPIO_Init+0x238>)
 8001126:	f000 fb9b 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800112a:	2340      	movs	r3, #64	; 0x40
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4823      	ldr	r0, [pc, #140]	; (80011d0 <MX_GPIO_Init+0x23c>)
 8001142:	f000 fb8d 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	481d      	ldr	r0, [pc, #116]	; (80011d0 <MX_GPIO_Init+0x23c>)
 800115a:	f000 fb81 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800115e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001170:	230a      	movs	r3, #10
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <MX_GPIO_Init+0x234>)
 800117c:	f000 fb70 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <MX_GPIO_Init+0x234>)
 8001196:	f000 fb63 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800119a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ac:	230b      	movs	r3, #11
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_GPIO_Init+0x23c>)
 80011b8:	f000 fb52 	bl	8001860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	; 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40020800 	.word	0x40020800

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_MspInit+0x44>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <HAL_MspInit+0x44>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_MspInit+0x44>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_MspInit+0x44>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_MspInit+0x44>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_MspInit+0x44>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2c      	ldr	r2, [pc, #176]	; (80012fc <HAL_TIM_Base_MspInit+0xd0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d141      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <HAL_TIM_Base_MspInit+0xd4>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a2b      	ldr	r2, [pc, #172]	; (8001300 <HAL_TIM_Base_MspInit+0xd4>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <HAL_TIM_Base_MspInit+0xd4>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_TIM_Base_MspInit+0xd4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a25      	ldr	r2, [pc, #148]	; (8001300 <HAL_TIM_Base_MspInit+0xd4>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <HAL_TIM_Base_MspInit+0xd4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800127e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001290:	2301      	movs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	481a      	ldr	r0, [pc, #104]	; (8001304 <HAL_TIM_Base_MspInit+0xd8>)
 800129c:	f000 fae0 	bl	8001860 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2019      	movs	r0, #25
 80012a6:	f000 faa4 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012aa:	2019      	movs	r0, #25
 80012ac:	f000 fabd 	bl	800182a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	201a      	movs	r0, #26
 80012b6:	f000 fa9c 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012ba:	201a      	movs	r0, #26
 80012bc:	f000 fab5 	bl	800182a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	201b      	movs	r0, #27
 80012c6:	f000 fa94 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012ca:	201b      	movs	r0, #27
 80012cc:	f000 faad 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012d0:	e010      	b.n	80012f4 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM2)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012da:	d10b      	bne.n	80012f4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_TIM_Base_MspInit+0xd4>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_TIM_Base_MspInit+0xd4>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_TIM_Base_MspInit+0xd4>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40010000 	.word	0x40010000
 8001300:	40023800 	.word	0x40023800
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0aa      	sub	sp, #168	; 0xa8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	2284      	movs	r2, #132	; 0x84
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f003 f80d 	bl	8004348 <memset>
  if(huart->Instance==USART3)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a22      	ldr	r2, [pc, #136]	; (80013bc <HAL_UART_MspInit+0xb4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d13c      	bne.n	80013b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800133e:	2300      	movs	r3, #0
 8001340:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f001 f97a 	bl	8002640 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001352:	f7ff ff41 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_UART_MspInit+0xb8>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_UART_MspInit+0xb8>)
 800135c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_UART_MspInit+0xb8>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_UART_MspInit+0xb8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <HAL_UART_MspInit+0xb8>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_UART_MspInit+0xb8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001386:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001394:	2301      	movs	r3, #1
 8001396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a0:	2307      	movs	r3, #7
 80013a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_UART_MspInit+0xbc>)
 80013ae:	f000 fa57 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	37a8      	adds	r7, #168	; 0xa8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40004800 	.word	0x40004800
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020c00 	.word	0x40020c00

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <NMI_Handler+0x4>

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f8ce 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001422:	f001 fdcd 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000012c 	.word	0x2000012c

08001430 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001436:	f001 fdc3 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000012c 	.word	0x2000012c

08001444 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM1_CC_IRQHandler+0x10>)
 800144a:	f001 fdb9 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000012c 	.word	0x2000012c

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d207      	bcs.n	8001498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001488:	f002 ff66 	bl	8004358 <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20050000 	.word	0x20050000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	2000028c 	.word	0x2000028c
 80014c0:	200003e0 	.word	0x200003e0

080014c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ee:	490e      	ldr	r1, [pc, #56]	; (8001528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f0:	4a0e      	ldr	r2, [pc, #56]	; (800152c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001504:	4c0b      	ldr	r4, [pc, #44]	; (8001534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001512:	f7ff ffd7 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f002 ff25 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff fbaf 	bl	8000c7c <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800152c:	08004cd8 	.word	0x08004cd8
  ldr r2, =_sbss
 8001530:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001534:	200003dc 	.word	0x200003dc

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>

0800153a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153e:	2003      	movs	r0, #3
 8001540:	f000 f94c 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001544:	2000      	movs	r0, #0
 8001546:	f000 f805 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154a:	f7ff fe4b 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f967 	bl	8001846 <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 f92f 	bl	80017f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	20000290 	.word	0x20000290

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000290 	.word	0x20000290

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <__NVIC_SetPriorityGrouping+0x40>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	4313      	orrs	r3, r2
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x40>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	05fa0000 	.word	0x05fa0000

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff8e 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff29 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff3e 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff8e 	bl	8001730 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5d 	bl	80016dc <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff31 	bl	80016a0 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa2 	bl	8001798 <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e175      	b.n	8001b6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8164 	bne.w	8001b66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d005      	beq.n	80018b6 <HAL_GPIO_Init+0x56>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b03      	cmp	r3, #3
 8001922:	d017      	beq.n	8001954 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80be 	beq.w	8001b66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <HAL_GPIO_Init+0x324>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <HAL_GPIO_Init+0x324>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_GPIO_Init+0x324>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a02:	4a61      	ldr	r2, [pc, #388]	; (8001b88 <HAL_GPIO_Init+0x328>)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <HAL_GPIO_Init+0x32c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d037      	beq.n	8001a9e <HAL_GPIO_Init+0x23e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a57      	ldr	r2, [pc, #348]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d031      	beq.n	8001a9a <HAL_GPIO_Init+0x23a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02b      	beq.n	8001a96 <HAL_GPIO_Init+0x236>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a55      	ldr	r2, [pc, #340]	; (8001b98 <HAL_GPIO_Init+0x338>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d025      	beq.n	8001a92 <HAL_GPIO_Init+0x232>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a54      	ldr	r2, [pc, #336]	; (8001b9c <HAL_GPIO_Init+0x33c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01f      	beq.n	8001a8e <HAL_GPIO_Init+0x22e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a53      	ldr	r2, [pc, #332]	; (8001ba0 <HAL_GPIO_Init+0x340>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d019      	beq.n	8001a8a <HAL_GPIO_Init+0x22a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_GPIO_Init+0x344>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x226>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a51      	ldr	r2, [pc, #324]	; (8001ba8 <HAL_GPIO_Init+0x348>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x222>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a50      	ldr	r2, [pc, #320]	; (8001bac <HAL_GPIO_Init+0x34c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x21e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x21a>
 8001a76:	2309      	movs	r3, #9
 8001a78:	e012      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	e010      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a7e:	2308      	movs	r3, #8
 8001a80:	e00e      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e00c      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a86:	2306      	movs	r3, #6
 8001a88:	e00a      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	e008      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e004      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ab0:	4935      	ldr	r1, [pc, #212]	; (8001b88 <HAL_GPIO_Init+0x328>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <HAL_GPIO_Init+0x354>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae2:	4a34      	ldr	r2, [pc, #208]	; (8001bb4 <HAL_GPIO_Init+0x354>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae8:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <HAL_GPIO_Init+0x354>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b0c:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <HAL_GPIO_Init+0x354>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_GPIO_Init+0x354>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_GPIO_Init+0x354>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_GPIO_Init+0x354>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_GPIO_Init+0x354>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	f67f ae86 	bls.w	8001880 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40021400 	.word	0x40021400
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	40021c00 	.word	0x40021c00
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40022400 	.word	0x40022400
 8001bb4:	40013c00 	.word	0x40013c00

08001bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bd4:	e003      	b.n	8001bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40007000 	.word	0x40007000

08001c0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c3a:	f7ff fccf 	bl	80015dc <HAL_GetTick>
 8001c3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c40:	e009      	b.n	8001c56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c42:	f7ff fccb 	bl	80015dc <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c50:	d901      	bls.n	8001c56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e022      	b.n	8001c9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c62:	d1ee      	bne.n	8001c42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c70:	f7ff fcb4 	bl	80015dc <HAL_GetTick>
 8001c74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c76:	e009      	b.n	8001c8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c78:	f7ff fcb0 	bl	80015dc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c86:	d901      	bls.n	8001c8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e007      	b.n	8001c9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c98:	d1ee      	bne.n	8001c78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000

08001cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e291      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8087 	beq.w	8001dde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd0:	4b96      	ldr	r3, [pc, #600]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d00c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cdc:	4b93      	ldr	r3, [pc, #588]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d112      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62>
 8001ce8:	4b90      	ldr	r3, [pc, #576]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf4:	d10b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf6:	4b8d      	ldr	r3, [pc, #564]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d06c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x130>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d168      	bne.n	8001ddc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e26b      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x7a>
 8001d18:	4b84      	ldr	r3, [pc, #528]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a83      	ldr	r2, [pc, #524]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e02e      	b.n	8001d84 <HAL_RCC_OscConfig+0xd8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x9c>
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b7c      	ldr	r3, [pc, #496]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7b      	ldr	r2, [pc, #492]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e01d      	b.n	8001d84 <HAL_RCC_OscConfig+0xd8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0xc0>
 8001d52:	4b76      	ldr	r3, [pc, #472]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a75      	ldr	r2, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a72      	ldr	r2, [pc, #456]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xd8>
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b6c      	ldr	r3, [pc, #432]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6b      	ldr	r2, [pc, #428]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fc26 	bl	80015dc <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fc22 	bl	80015dc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e21f      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe8>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff fc12 	bl	80015dc <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fc0e 	bl	80015dc <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e20b      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x110>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d069      	beq.n	8001ebe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dea:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df6:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x190>
 8001e02:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x17a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e1df      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	493d      	ldr	r1, [pc, #244]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	e040      	b.n	8001ebe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d023      	beq.n	8001e8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff fbc4 	bl	80015dc <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff fbc0 	bl	80015dc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1bd      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4929      	ldr	r1, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
 8001e8a:	e018      	b.n	8001ebe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff fba0 	bl	80015dc <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fb9c 	bl	80015dc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e199      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d038      	beq.n	8001f3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d019      	beq.n	8001f06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed6:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb7d 	bl	80015dc <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fb79 	bl	80015dc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e176      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x23a>
 8001f04:	e01a      	b.n	8001f3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0a:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <HAL_RCC_OscConfig+0x280>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff fb63 	bl	80015dc <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fb5f 	bl	80015dc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d903      	bls.n	8001f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e15c      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
 8001f2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	4b91      	ldr	r3, [pc, #580]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1ee      	bne.n	8001f1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80a4 	beq.w	8002092 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4a:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10d      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a87      	ldr	r2, [pc, #540]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b85      	ldr	r3, [pc, #532]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f72:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_OscConfig+0x4d0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d118      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	; (800217c <HAL_RCC_OscConfig+0x4d0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7e      	ldr	r2, [pc, #504]	; (800217c <HAL_RCC_OscConfig+0x4d0>)
 8001f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fb27 	bl	80015dc <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f92:	f7ff fb23 	bl	80015dc <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b64      	cmp	r3, #100	; 0x64
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e120      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa4:	4b75      	ldr	r3, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0x4d0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x31a>
 8001fb8:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc4:	e02d      	b.n	8002022 <HAL_RCC_OscConfig+0x376>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x33c>
 8001fce:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a69      	ldr	r2, [pc, #420]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a66      	ldr	r2, [pc, #408]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe6:	e01c      	b.n	8002022 <HAL_RCC_OscConfig+0x376>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_OscConfig+0x35e>
 8001ff0:	4b61      	ldr	r3, [pc, #388]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a60      	ldr	r2, [pc, #384]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffc:	4b5e      	ldr	r3, [pc, #376]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a5d      	ldr	r2, [pc, #372]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	e00b      	b.n	8002022 <HAL_RCC_OscConfig+0x376>
 800200a:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	4a5a      	ldr	r2, [pc, #360]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6713      	str	r3, [r2, #112]	; 0x70
 8002016:	4b58      	ldr	r3, [pc, #352]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a57      	ldr	r2, [pc, #348]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 800201c:	f023 0304 	bic.w	r3, r3, #4
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d015      	beq.n	8002056 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7ff fad7 	bl	80015dc <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7ff fad3 	bl	80015dc <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0ce      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ee      	beq.n	8002032 <HAL_RCC_OscConfig+0x386>
 8002054:	e014      	b.n	8002080 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7ff fac1 	bl	80015dc <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff fabd 	bl	80015dc <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	4b40      	ldr	r3, [pc, #256]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ee      	bne.n	800205e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d105      	bne.n	8002092 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002086:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a3b      	ldr	r2, [pc, #236]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80a4 	beq.w	80021e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d06b      	beq.n	8002180 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d149      	bne.n	8002144 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 80020b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff fa8e 	bl	80015dc <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff fa8a 	bl	80015dc <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e087      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	019b      	lsls	r3, r3, #6
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	3b01      	subs	r3, #1
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	061b      	lsls	r3, r3, #24
 8002106:	4313      	orrs	r3, r2
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 800210a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800210e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff fa5e 	bl	80015dc <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fa5a 	bl	80015dc <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e057      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x478>
 8002142:	e04f      	b.n	80021e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff fa44 	bl	80015dc <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff fa40 	bl	80015dc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e03d      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_OscConfig+0x4cc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x4ac>
 8002176:	e035      	b.n	80021e4 <HAL_RCC_OscConfig+0x538>
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x544>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d028      	beq.n	80021e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d121      	bne.n	80021e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d11a      	bne.n	80021e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021b0:	4013      	ands	r3, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d111      	bne.n	80021e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	3b01      	subs	r3, #1
 80021ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0d0      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b67      	ldr	r3, [pc, #412]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	4965      	ldr	r1, [pc, #404]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b8      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 800225a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800225e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002276:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	494d      	ldr	r1, [pc, #308]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d040      	beq.n	8002318 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d115      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e073      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e06b      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4936      	ldr	r1, [pc, #216]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e8:	f7ff f978 	bl	80015dc <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7ff f974 	bl	80015dc <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e053      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d210      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 020f 	bic.w	r2, r3, #15
 800232e:	4922      	ldr	r1, [pc, #136]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e032      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4916      	ldr	r1, [pc, #88]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002386:	f000 f821 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 800238a:	4602      	mov	r2, r0
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	490a      	ldr	r1, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002398:	5ccb      	ldrb	r3, [r1, r3]
 800239a:	fa22 f303 	lsr.w	r3, r2, r3
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1d0>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1d4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f8d4 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00
 80023bc:	40023800 	.word	0x40023800
 80023c0:	08004c7c 	.word	0x08004c7c
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000004 	.word	0x20000004

080023cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d0:	b094      	sub	sp, #80	; 0x50
 80023d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	647b      	str	r3, [r7, #68]	; 0x44
 80023d8:	2300      	movs	r3, #0
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023dc:	2300      	movs	r3, #0
 80023de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e4:	4b79      	ldr	r3, [pc, #484]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d00d      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x40>
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	f200 80e1 	bhi.w	80025b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x34>
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x3a>
 80023fe:	e0db      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b73      	ldr	r3, [pc, #460]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002402:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002404:	e0db      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002406:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800240a:	e0d8      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800240c:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002414:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002416:	4b6d      	ldr	r3, [pc, #436]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002422:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	2200      	movs	r2, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
 800242c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
 8002436:	2300      	movs	r3, #0
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
 800243a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800243e:	4622      	mov	r2, r4
 8002440:	462b      	mov	r3, r5
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	f04f 0100 	mov.w	r1, #0
 800244a:	0159      	lsls	r1, r3, #5
 800244c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002450:	0150      	lsls	r0, r2, #5
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4621      	mov	r1, r4
 8002458:	1a51      	subs	r1, r2, r1
 800245a:	6139      	str	r1, [r7, #16]
 800245c:	4629      	mov	r1, r5
 800245e:	eb63 0301 	sbc.w	r3, r3, r1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002470:	4659      	mov	r1, fp
 8002472:	018b      	lsls	r3, r1, #6
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800247a:	4651      	mov	r1, sl
 800247c:	018a      	lsls	r2, r1, #6
 800247e:	4651      	mov	r1, sl
 8002480:	ebb2 0801 	subs.w	r8, r2, r1
 8002484:	4659      	mov	r1, fp
 8002486:	eb63 0901 	sbc.w	r9, r3, r1
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800249a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800249e:	4690      	mov	r8, r2
 80024a0:	4699      	mov	r9, r3
 80024a2:	4623      	mov	r3, r4
 80024a4:	eb18 0303 	adds.w	r3, r8, r3
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	462b      	mov	r3, r5
 80024ac:	eb49 0303 	adc.w	r3, r9, r3
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024be:	4629      	mov	r1, r5
 80024c0:	024b      	lsls	r3, r1, #9
 80024c2:	4621      	mov	r1, r4
 80024c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024c8:	4621      	mov	r1, r4
 80024ca:	024a      	lsls	r2, r1, #9
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d2:	2200      	movs	r2, #0
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024dc:	f7fe f8a4 	bl	8000628 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4613      	mov	r3, r2
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e8:	e058      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	2200      	movs	r2, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	4611      	mov	r1, r2
 80024f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002504:	4642      	mov	r2, r8
 8002506:	464b      	mov	r3, r9
 8002508:	f04f 0000 	mov.w	r0, #0
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	0159      	lsls	r1, r3, #5
 8002512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002516:	0150      	lsls	r0, r2, #5
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4641      	mov	r1, r8
 800251e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002522:	4649      	mov	r1, r9
 8002524:	eb63 0b01 	sbc.w	fp, r3, r1
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800253c:	ebb2 040a 	subs.w	r4, r2, sl
 8002540:	eb63 050b 	sbc.w	r5, r3, fp
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	00eb      	lsls	r3, r5, #3
 800254e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002552:	00e2      	lsls	r2, r4, #3
 8002554:	4614      	mov	r4, r2
 8002556:	461d      	mov	r5, r3
 8002558:	4643      	mov	r3, r8
 800255a:	18e3      	adds	r3, r4, r3
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	464b      	mov	r3, r9
 8002560:	eb45 0303 	adc.w	r3, r5, r3
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002572:	4629      	mov	r1, r5
 8002574:	028b      	lsls	r3, r1, #10
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800257c:	4621      	mov	r1, r4
 800257e:	028a      	lsls	r2, r1, #10
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002586:	2200      	movs	r2, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	61fa      	str	r2, [r7, #28]
 800258c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002590:	f7fe f84a 	bl	8000628 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80025ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3750      	adds	r7, #80	; 0x50
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200

080025d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_GetHCLKFreq+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0a9b      	lsrs	r3, r3, #10
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	08004c8c 	.word	0x08004c8c

08002618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800261c:	f7ff ffdc 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0b5b      	lsrs	r3, r3, #13
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <HAL_RCC_GetPCLK2Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	08004c8c 	.word	0x08004c8c

08002640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d012      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002668:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	4964      	ldr	r1, [pc, #400]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d017      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800269a:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a8:	4959      	ldr	r1, [pc, #356]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026b8:	d101      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d017      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026d6:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	494a      	ldr	r1, [pc, #296]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f4:	d101      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 808b 	beq.w	800283a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	4a39      	ldr	r2, [pc, #228]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a34      	ldr	r2, [pc, #208]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002748:	f7fe ff48 	bl	80015dc <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7fe ff44 	bl	80015dc <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e357      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002776:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d035      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d02e      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002794:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002796:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d114      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe ff0c 	bl	80015dc <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe ff08 	bl	80015dc <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e319      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ee      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027f6:	d111      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002806:	400b      	ands	r3, r1
 8002808:	4901      	ldr	r1, [pc, #4]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
 800280e:	e00b      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000
 8002818:	0ffffcff 	.word	0x0ffffcff
 800281c:	4baa      	ldr	r3, [pc, #680]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4aa9      	ldr	r2, [pc, #676]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002822:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002826:	6093      	str	r3, [r2, #8]
 8002828:	4ba7      	ldr	r3, [pc, #668]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	49a4      	ldr	r1, [pc, #656]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002836:	4313      	orrs	r3, r2
 8002838:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002846:	4ba0      	ldr	r3, [pc, #640]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284c:	4a9e      	ldr	r2, [pc, #632]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002856:	4b9c      	ldr	r3, [pc, #624]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002858:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	4999      	ldr	r1, [pc, #612]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002874:	4b94      	ldr	r3, [pc, #592]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002882:	4991      	ldr	r1, [pc, #580]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002896:	4b8c      	ldr	r3, [pc, #560]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a4:	4988      	ldr	r1, [pc, #544]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b8:	4b83      	ldr	r3, [pc, #524]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c6:	4980      	ldr	r1, [pc, #512]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028da:	4b7b      	ldr	r3, [pc, #492]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4977      	ldr	r1, [pc, #476]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fc:	4b72      	ldr	r3, [pc, #456]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	496f      	ldr	r1, [pc, #444]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291e:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f023 020c 	bic.w	r2, r3, #12
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	4966      	ldr	r1, [pc, #408]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002940:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	495e      	ldr	r1, [pc, #376]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002962:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002970:	4955      	ldr	r1, [pc, #340]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029a6:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	4944      	ldr	r1, [pc, #272]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029c8:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	493c      	ldr	r1, [pc, #240]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	4933      	ldr	r1, [pc, #204]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a0c:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1a:	492b      	ldr	r1, [pc, #172]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d011      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a3c:	4922      	ldr	r1, [pc, #136]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7c:	4912      	ldr	r1, [pc, #72]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a90:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa0:	4909      	ldr	r1, [pc, #36]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d006      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80d9 	beq.w	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002abc:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a01      	ldr	r2, [pc, #4]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ac6:	e001      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ace:	f7fe fd85 	bl	80015dc <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ad6:	f7fe fd81 	bl	80015dc <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e194      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ae8:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d021      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d11d      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b08:	4b64      	ldr	r3, [pc, #400]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0e:	0c1b      	lsrs	r3, r3, #16
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b16:	4b61      	ldr	r3, [pc, #388]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1c:	0e1b      	lsrs	r3, r3, #24
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	019a      	lsls	r2, r3, #6
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	071b      	lsls	r3, r3, #28
 8002b3c:	4957      	ldr	r1, [pc, #348]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d02e      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6e:	d129      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b70:	4b4a      	ldr	r3, [pc, #296]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b84:	0f1b      	lsrs	r3, r3, #28
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	019a      	lsls	r2, r3, #6
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	071b      	lsls	r3, r3, #28
 8002ba4:	493d      	ldr	r1, [pc, #244]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bac:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb2:	f023 021f 	bic.w	r2, r3, #31
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	4937      	ldr	r1, [pc, #220]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bd0:	4b32      	ldr	r3, [pc, #200]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd6:	0e1b      	lsrs	r3, r3, #24
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be4:	0f1b      	lsrs	r3, r3, #28
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	019a      	lsls	r2, r3, #6
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	071b      	lsls	r3, r3, #28
 8002c04:	4925      	ldr	r1, [pc, #148]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d011      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	019a      	lsls	r2, r3, #6
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	061b      	lsls	r3, r3, #24
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	071b      	lsls	r3, r3, #28
 8002c34:	4919      	ldr	r1, [pc, #100]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c48:	f7fe fcc8 	bl	80015dc <HAL_GetTick>
 8002c4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c50:	f7fe fcc4 	bl	80015dc <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e0d7      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 80cd 	bne.w	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c82:	f7fe fcab 	bl	80015dc <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c8a:	f7fe fca7 	bl	80015dc <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b64      	cmp	r3, #100	; 0x64
 8002c96:	d903      	bls.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0ba      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cac:	d0ed      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d02e      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d12a      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cd6:	4b51      	ldr	r3, [pc, #324]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	0f1b      	lsrs	r3, r3, #28
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	019a      	lsls	r2, r3, #6
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	071b      	lsls	r3, r3, #28
 8002d0a:	4944      	ldr	r1, [pc, #272]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d12:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	493d      	ldr	r1, [pc, #244]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d022      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d40:	d11d      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	0e1b      	lsrs	r3, r3, #24
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d50:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	0f1b      	lsrs	r3, r3, #28
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	019a      	lsls	r2, r3, #6
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	061b      	lsls	r3, r3, #24
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	071b      	lsls	r3, r3, #28
 8002d76:	4929      	ldr	r1, [pc, #164]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d028      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	0e1b      	lsrs	r3, r3, #24
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d98:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	019a      	lsls	r2, r3, #6
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	431a      	orrs	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	071b      	lsls	r3, r3, #28
 8002dbe:	4917      	ldr	r1, [pc, #92]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	4911      	ldr	r1, [pc, #68]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe fbf8 	bl	80015dc <HAL_GetTick>
 8002dec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002df0:	f7fe fbf4 	bl	80015dc <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e007      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0e:	d1ef      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e049      	b.n	8002ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe f9f0 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f000 fb02 	bl	8003468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d001      	beq.n	8002ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e054      	b.n	8002f92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d022      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x80>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f12:	d01d      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x80>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d018      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x80>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d013      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x80>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <HAL_TIM_Base_Start_IT+0xdc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00e      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x80>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x80>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x80>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d115      	bne.n	8002f7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_TIM_Base_Start_IT+0xec>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d015      	beq.n	8002f8e <HAL_TIM_Base_Start_IT+0xbe>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d011      	beq.n	8002f8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7a:	e008      	b.n	8002f8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e000      	b.n	8002f90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800
 8002fac:	40000c00 	.word	0x40000c00
 8002fb0:	40010400 	.word	0x40010400
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40001800 	.word	0x40001800
 8002fbc:	00010007 	.word	0x00010007

08002fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0202 	mvn.w	r2, #2
 8002fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa12 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa04 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fa15 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b04      	cmp	r3, #4
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b04      	cmp	r3, #4
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0204 	mvn.w	r2, #4
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9e8 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9da 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f9eb 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b08      	cmp	r3, #8
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b08      	cmp	r3, #8
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0208 	mvn.w	r2, #8
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2204      	movs	r2, #4
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9be 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f9b0 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f9c1 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0210 	mvn.w	r2, #16
 80030e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2208      	movs	r2, #8
 80030ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f994 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f986 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f997 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0201 	mvn.w	r2, #1
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fd90 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b80      	cmp	r3, #128	; 0x80
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fbe2 	bl	8003934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317e:	d10e      	bne.n	800319e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318a:	2b80      	cmp	r3, #128	; 0x80
 800318c:	d107      	bne.n	800319e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fbd5 	bl	8003948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d10e      	bne.n	80031ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d107      	bne.n	80031ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f945 	bl	8003454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d10e      	bne.n	80031f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d107      	bne.n	80031f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f06f 0220 	mvn.w	r2, #32
 80031ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fb95 	bl	8003920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_TIM_ConfigClockSource+0x1c>
 8003218:	2302      	movs	r3, #2
 800321a:	e0b4      	b.n	8003386 <HAL_TIM_ConfigClockSource+0x186>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	4b56      	ldr	r3, [pc, #344]	; (8003390 <HAL_TIM_ConfigClockSource+0x190>)
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003254:	d03e      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325a:	f200 8087 	bhi.w	800336c <HAL_TIM_ConfigClockSource+0x16c>
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	f000 8086 	beq.w	8003372 <HAL_TIM_ConfigClockSource+0x172>
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326a:	d87f      	bhi.n	800336c <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b70      	cmp	r3, #112	; 0x70
 800326e:	d01a      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003270:	2b70      	cmp	r3, #112	; 0x70
 8003272:	d87b      	bhi.n	800336c <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b60      	cmp	r3, #96	; 0x60
 8003276:	d050      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x11a>
 8003278:	2b60      	cmp	r3, #96	; 0x60
 800327a:	d877      	bhi.n	800336c <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b50      	cmp	r3, #80	; 0x50
 800327e:	d03c      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0xfa>
 8003280:	2b50      	cmp	r3, #80	; 0x50
 8003282:	d873      	bhi.n	800336c <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d058      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x13a>
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d86f      	bhi.n	800336c <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b30      	cmp	r3, #48	; 0x30
 800328e:	d064      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	2b30      	cmp	r3, #48	; 0x30
 8003292:	d86b      	bhi.n	800336c <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b20      	cmp	r3, #32
 8003296:	d060      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	2b20      	cmp	r3, #32
 800329a:	d867      	bhi.n	800336c <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d05c      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x15a>
 80032a0:	2b10      	cmp	r3, #16
 80032a2:	d05a      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x15a>
 80032a4:	e062      	b.n	800336c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032b6:	f000 fa85 	bl	80037c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	609a      	str	r2, [r3, #8]
      break;
 80032d2:	e04f      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032e4:	f000 fa6e 	bl	80037c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f6:	609a      	str	r2, [r3, #8]
      break;
 80032f8:	e03c      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003306:	461a      	mov	r2, r3
 8003308:	f000 f9e2 	bl	80036d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2150      	movs	r1, #80	; 0x50
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fa3b 	bl	800378e <TIM_ITRx_SetConfig>
      break;
 8003318:	e02c      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003326:	461a      	mov	r2, r3
 8003328:	f000 fa01 	bl	800372e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2160      	movs	r1, #96	; 0x60
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fa2b 	bl	800378e <TIM_ITRx_SetConfig>
      break;
 8003338:	e01c      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003346:	461a      	mov	r2, r3
 8003348:	f000 f9c2 	bl	80036d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fa1b 	bl	800378e <TIM_ITRx_SetConfig>
      break;
 8003358:	e00c      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4619      	mov	r1, r3
 8003364:	4610      	mov	r0, r2
 8003366:	f000 fa12 	bl	800378e <TIM_ITRx_SetConfig>
      break;
 800336a:	e003      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      break;
 8003370:	e000      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	fffeff88 	.word	0xfffeff88

08003394 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_TIM_SlaveConfigSynchro+0x18>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e031      	b.n	8003410 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8f2 	bl	80035a8 <TIM_SlaveTimer_SetConfig>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e018      	b.n	8003410 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033fc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a40      	ldr	r2, [pc, #256]	; (800357c <TIM_Base_SetConfig+0x114>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d013      	beq.n	80034a8 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003486:	d00f      	beq.n	80034a8 <TIM_Base_SetConfig+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a3d      	ldr	r2, [pc, #244]	; (8003580 <TIM_Base_SetConfig+0x118>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00b      	beq.n	80034a8 <TIM_Base_SetConfig+0x40>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3c      	ldr	r2, [pc, #240]	; (8003584 <TIM_Base_SetConfig+0x11c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <TIM_Base_SetConfig+0x40>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3b      	ldr	r2, [pc, #236]	; (8003588 <TIM_Base_SetConfig+0x120>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_Base_SetConfig+0x40>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a3a      	ldr	r2, [pc, #232]	; (800358c <TIM_Base_SetConfig+0x124>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d108      	bne.n	80034ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2f      	ldr	r2, [pc, #188]	; (800357c <TIM_Base_SetConfig+0x114>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d02b      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c8:	d027      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <TIM_Base_SetConfig+0x118>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d023      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <TIM_Base_SetConfig+0x11c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01f      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <TIM_Base_SetConfig+0x120>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01b      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a29      	ldr	r2, [pc, #164]	; (800358c <TIM_Base_SetConfig+0x124>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d017      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a28      	ldr	r2, [pc, #160]	; (8003590 <TIM_Base_SetConfig+0x128>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a27      	ldr	r2, [pc, #156]	; (8003594 <TIM_Base_SetConfig+0x12c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00f      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a26      	ldr	r2, [pc, #152]	; (8003598 <TIM_Base_SetConfig+0x130>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00b      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a25      	ldr	r2, [pc, #148]	; (800359c <TIM_Base_SetConfig+0x134>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a24      	ldr	r2, [pc, #144]	; (80035a0 <TIM_Base_SetConfig+0x138>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d003      	beq.n	800351a <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a23      	ldr	r2, [pc, #140]	; (80035a4 <TIM_Base_SetConfig+0x13c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d108      	bne.n	800352c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <TIM_Base_SetConfig+0x114>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_Base_SetConfig+0xf8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a0c      	ldr	r2, [pc, #48]	; (800358c <TIM_Base_SetConfig+0x124>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d103      	bne.n	8003568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	615a      	str	r2, [r3, #20]
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40010000 	.word	0x40010000
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40010400 	.word	0x40010400
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800
 800359c:	40001800 	.word	0x40001800
 80035a0:	40001c00 	.word	0x40001c00
 80035a4:	40002000 	.word	0x40002000

080035a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4b3e      	ldr	r3, [pc, #248]	; (80036cc <TIM_SlaveTimer_SetConfig+0x124>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b70      	cmp	r3, #112	; 0x70
 80035f0:	d01a      	beq.n	8003628 <TIM_SlaveTimer_SetConfig+0x80>
 80035f2:	2b70      	cmp	r3, #112	; 0x70
 80035f4:	d860      	bhi.n	80036b8 <TIM_SlaveTimer_SetConfig+0x110>
 80035f6:	2b60      	cmp	r3, #96	; 0x60
 80035f8:	d054      	beq.n	80036a4 <TIM_SlaveTimer_SetConfig+0xfc>
 80035fa:	2b60      	cmp	r3, #96	; 0x60
 80035fc:	d85c      	bhi.n	80036b8 <TIM_SlaveTimer_SetConfig+0x110>
 80035fe:	2b50      	cmp	r3, #80	; 0x50
 8003600:	d046      	beq.n	8003690 <TIM_SlaveTimer_SetConfig+0xe8>
 8003602:	2b50      	cmp	r3, #80	; 0x50
 8003604:	d858      	bhi.n	80036b8 <TIM_SlaveTimer_SetConfig+0x110>
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d019      	beq.n	800363e <TIM_SlaveTimer_SetConfig+0x96>
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d854      	bhi.n	80036b8 <TIM_SlaveTimer_SetConfig+0x110>
 800360e:	2b30      	cmp	r3, #48	; 0x30
 8003610:	d055      	beq.n	80036be <TIM_SlaveTimer_SetConfig+0x116>
 8003612:	2b30      	cmp	r3, #48	; 0x30
 8003614:	d850      	bhi.n	80036b8 <TIM_SlaveTimer_SetConfig+0x110>
 8003616:	2b20      	cmp	r3, #32
 8003618:	d051      	beq.n	80036be <TIM_SlaveTimer_SetConfig+0x116>
 800361a:	2b20      	cmp	r3, #32
 800361c:	d84c      	bhi.n	80036b8 <TIM_SlaveTimer_SetConfig+0x110>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d04d      	beq.n	80036be <TIM_SlaveTimer_SetConfig+0x116>
 8003622:	2b10      	cmp	r3, #16
 8003624:	d04b      	beq.n	80036be <TIM_SlaveTimer_SetConfig+0x116>
 8003626:	e047      	b.n	80036b8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003638:	f000 f8c4 	bl	80037c4 <TIM_ETR_SetConfig>
      break;
 800363c:	e040      	b.n	80036c0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b05      	cmp	r3, #5
 8003644:	d101      	bne.n	800364a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e03b      	b.n	80036c2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003670:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	4313      	orrs	r3, r2
 800367c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
      break;
 800368e:	e017      	b.n	80036c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369c:	461a      	mov	r2, r3
 800369e:	f000 f817 	bl	80036d0 <TIM_TI1_ConfigInputStage>
      break;
 80036a2:	e00d      	b.n	80036c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b0:	461a      	mov	r2, r3
 80036b2:	f000 f83c 	bl	800372e <TIM_TI2_ConfigInputStage>
      break;
 80036b6:	e003      	b.n	80036c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
      break;
 80036bc:	e000      	b.n	80036c0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80036be:	bf00      	nop
  }

  return status;
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	fffefff8 	.word	0xfffefff8

080036d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f023 0201 	bic.w	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f023 030a 	bic.w	r3, r3, #10
 800370c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372e:	b480      	push	{r7}
 8003730:	b087      	sub	sp, #28
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0210 	bic.w	r2, r3, #16
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	031b      	lsls	r3, r3, #12
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800376a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f043 0307 	orr.w	r3, r3, #7
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	021a      	lsls	r2, r3, #8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003818:	2302      	movs	r3, #2
 800381a:	e06d      	b.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a30      	ldr	r2, [pc, #192]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2f      	ldr	r2, [pc, #188]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d108      	bne.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003856:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003868:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a20      	ldr	r2, [pc, #128]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d022      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d01d      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d018      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00e      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a15      	ldr	r2, [pc, #84]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a16      	ldr	r2, [pc, #88]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a15      	ldr	r2, [pc, #84]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10c      	bne.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40010000 	.word	0x40010000
 8003908:	40010400 	.word	0x40010400
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40014000 	.word	0x40014000
 800391c:	40001800 	.word	0x40001800

08003920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e040      	b.n	80039f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fcc2 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8b0 	bl	8003b00 <UART_SetConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fb08 	bl	8003fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb8f 	bl	800410c <UART_CheckIdleState>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d171      	bne.n	8003af4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Transmit+0x24>
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e06a      	b.n	8003af6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2221      	movs	r2, #33	; 0x21
 8003a2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2e:	f7fd fdd5 	bl	80015dc <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4c:	d108      	bne.n	8003a60 <HAL_UART_Transmit+0x68>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e003      	b.n	8003a68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a68:	e02c      	b.n	8003ac4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fb80 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e038      	b.n	8003af6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1cc      	bne.n	8003a6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2140      	movs	r1, #64	; 0x40
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fb4d 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e005      	b.n	8003af6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4ba6      	ldr	r3, [pc, #664]	; (8003dc4 <UART_SetConfig+0x2c4>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	6979      	ldr	r1, [r7, #20]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a94      	ldr	r2, [pc, #592]	; (8003dc8 <UART_SetConfig+0x2c8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d120      	bne.n	8003bbe <UART_SetConfig+0xbe>
 8003b7c:	4b93      	ldr	r3, [pc, #588]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d816      	bhi.n	8003bb8 <UART_SetConfig+0xb8>
 8003b8a:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0x90>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003ba1 	.word	0x08003ba1
 8003b94:	08003bad 	.word	0x08003bad
 8003b98:	08003ba7 	.word	0x08003ba7
 8003b9c:	08003bb3 	.word	0x08003bb3
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e150      	b.n	8003e48 <UART_SetConfig+0x348>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e14d      	b.n	8003e48 <UART_SetConfig+0x348>
 8003bac:	2304      	movs	r3, #4
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e14a      	b.n	8003e48 <UART_SetConfig+0x348>
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e147      	b.n	8003e48 <UART_SetConfig+0x348>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e144      	b.n	8003e48 <UART_SetConfig+0x348>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a83      	ldr	r2, [pc, #524]	; (8003dd0 <UART_SetConfig+0x2d0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d132      	bne.n	8003c2e <UART_SetConfig+0x12e>
 8003bc8:	4b80      	ldr	r3, [pc, #512]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d828      	bhi.n	8003c28 <UART_SetConfig+0x128>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <UART_SetConfig+0xdc>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003c29 	.word	0x08003c29
 8003be4:	08003c29 	.word	0x08003c29
 8003be8:	08003c29 	.word	0x08003c29
 8003bec:	08003c1d 	.word	0x08003c1d
 8003bf0:	08003c29 	.word	0x08003c29
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003c29 	.word	0x08003c29
 8003bfc:	08003c17 	.word	0x08003c17
 8003c00:	08003c29 	.word	0x08003c29
 8003c04:	08003c29 	.word	0x08003c29
 8003c08:	08003c29 	.word	0x08003c29
 8003c0c:	08003c23 	.word	0x08003c23
 8003c10:	2300      	movs	r3, #0
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e118      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c16:	2302      	movs	r3, #2
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e115      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e112      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c22:	2308      	movs	r3, #8
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e10f      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e10c      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <UART_SetConfig+0x2d4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d120      	bne.n	8003c7a <UART_SetConfig+0x17a>
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c42:	2b30      	cmp	r3, #48	; 0x30
 8003c44:	d013      	beq.n	8003c6e <UART_SetConfig+0x16e>
 8003c46:	2b30      	cmp	r3, #48	; 0x30
 8003c48:	d814      	bhi.n	8003c74 <UART_SetConfig+0x174>
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d009      	beq.n	8003c62 <UART_SetConfig+0x162>
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d810      	bhi.n	8003c74 <UART_SetConfig+0x174>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <UART_SetConfig+0x15c>
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d006      	beq.n	8003c68 <UART_SetConfig+0x168>
 8003c5a:	e00b      	b.n	8003c74 <UART_SetConfig+0x174>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e0f2      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c62:	2302      	movs	r3, #2
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e0ef      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e0ec      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c6e:	2308      	movs	r3, #8
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e0e9      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c74:	2310      	movs	r3, #16
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e0e6      	b.n	8003e48 <UART_SetConfig+0x348>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a56      	ldr	r2, [pc, #344]	; (8003dd8 <UART_SetConfig+0x2d8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d120      	bne.n	8003cc6 <UART_SetConfig+0x1c6>
 8003c84:	4b51      	ldr	r3, [pc, #324]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c90:	d013      	beq.n	8003cba <UART_SetConfig+0x1ba>
 8003c92:	2bc0      	cmp	r3, #192	; 0xc0
 8003c94:	d814      	bhi.n	8003cc0 <UART_SetConfig+0x1c0>
 8003c96:	2b80      	cmp	r3, #128	; 0x80
 8003c98:	d009      	beq.n	8003cae <UART_SetConfig+0x1ae>
 8003c9a:	2b80      	cmp	r3, #128	; 0x80
 8003c9c:	d810      	bhi.n	8003cc0 <UART_SetConfig+0x1c0>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <UART_SetConfig+0x1a8>
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d006      	beq.n	8003cb4 <UART_SetConfig+0x1b4>
 8003ca6:	e00b      	b.n	8003cc0 <UART_SetConfig+0x1c0>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e0cc      	b.n	8003e48 <UART_SetConfig+0x348>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e0c9      	b.n	8003e48 <UART_SetConfig+0x348>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e0c6      	b.n	8003e48 <UART_SetConfig+0x348>
 8003cba:	2308      	movs	r3, #8
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e0c3      	b.n	8003e48 <UART_SetConfig+0x348>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e0c0      	b.n	8003e48 <UART_SetConfig+0x348>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a44      	ldr	r2, [pc, #272]	; (8003ddc <UART_SetConfig+0x2dc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d125      	bne.n	8003d1c <UART_SetConfig+0x21c>
 8003cd0:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cde:	d017      	beq.n	8003d10 <UART_SetConfig+0x210>
 8003ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ce4:	d817      	bhi.n	8003d16 <UART_SetConfig+0x216>
 8003ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cea:	d00b      	beq.n	8003d04 <UART_SetConfig+0x204>
 8003cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf0:	d811      	bhi.n	8003d16 <UART_SetConfig+0x216>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <UART_SetConfig+0x1fe>
 8003cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfa:	d006      	beq.n	8003d0a <UART_SetConfig+0x20a>
 8003cfc:	e00b      	b.n	8003d16 <UART_SetConfig+0x216>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e0a1      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d04:	2302      	movs	r3, #2
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e09e      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	77fb      	strb	r3, [r7, #31]
 8003d0e:	e09b      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d10:	2308      	movs	r3, #8
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e098      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d16:	2310      	movs	r3, #16
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e095      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <UART_SetConfig+0x2e0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d125      	bne.n	8003d72 <UART_SetConfig+0x272>
 8003d26:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d34:	d017      	beq.n	8003d66 <UART_SetConfig+0x266>
 8003d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d3a:	d817      	bhi.n	8003d6c <UART_SetConfig+0x26c>
 8003d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d40:	d00b      	beq.n	8003d5a <UART_SetConfig+0x25a>
 8003d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d46:	d811      	bhi.n	8003d6c <UART_SetConfig+0x26c>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <UART_SetConfig+0x254>
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d50:	d006      	beq.n	8003d60 <UART_SetConfig+0x260>
 8003d52:	e00b      	b.n	8003d6c <UART_SetConfig+0x26c>
 8003d54:	2301      	movs	r3, #1
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e076      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e073      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d60:	2304      	movs	r3, #4
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e070      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d66:	2308      	movs	r3, #8
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e06d      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e06a      	b.n	8003e48 <UART_SetConfig+0x348>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <UART_SetConfig+0x2e4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d138      	bne.n	8003dee <UART_SetConfig+0x2ee>
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d8a:	d017      	beq.n	8003dbc <UART_SetConfig+0x2bc>
 8003d8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d90:	d82a      	bhi.n	8003de8 <UART_SetConfig+0x2e8>
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	d00b      	beq.n	8003db0 <UART_SetConfig+0x2b0>
 8003d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9c:	d824      	bhi.n	8003de8 <UART_SetConfig+0x2e8>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <UART_SetConfig+0x2aa>
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d006      	beq.n	8003db6 <UART_SetConfig+0x2b6>
 8003da8:	e01e      	b.n	8003de8 <UART_SetConfig+0x2e8>
 8003daa:	2300      	movs	r3, #0
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e04b      	b.n	8003e48 <UART_SetConfig+0x348>
 8003db0:	2302      	movs	r3, #2
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e048      	b.n	8003e48 <UART_SetConfig+0x348>
 8003db6:	2304      	movs	r3, #4
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e045      	b.n	8003e48 <UART_SetConfig+0x348>
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e042      	b.n	8003e48 <UART_SetConfig+0x348>
 8003dc2:	bf00      	nop
 8003dc4:	efff69f3 	.word	0xefff69f3
 8003dc8:	40011000 	.word	0x40011000
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40004400 	.word	0x40004400
 8003dd4:	40004800 	.word	0x40004800
 8003dd8:	40004c00 	.word	0x40004c00
 8003ddc:	40005000 	.word	0x40005000
 8003de0:	40011400 	.word	0x40011400
 8003de4:	40007800 	.word	0x40007800
 8003de8:	2310      	movs	r3, #16
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e02c      	b.n	8003e48 <UART_SetConfig+0x348>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a72      	ldr	r2, [pc, #456]	; (8003fbc <UART_SetConfig+0x4bc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d125      	bne.n	8003e44 <UART_SetConfig+0x344>
 8003df8:	4b71      	ldr	r3, [pc, #452]	; (8003fc0 <UART_SetConfig+0x4c0>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e06:	d017      	beq.n	8003e38 <UART_SetConfig+0x338>
 8003e08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e0c:	d817      	bhi.n	8003e3e <UART_SetConfig+0x33e>
 8003e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e12:	d00b      	beq.n	8003e2c <UART_SetConfig+0x32c>
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e18:	d811      	bhi.n	8003e3e <UART_SetConfig+0x33e>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <UART_SetConfig+0x326>
 8003e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e22:	d006      	beq.n	8003e32 <UART_SetConfig+0x332>
 8003e24:	e00b      	b.n	8003e3e <UART_SetConfig+0x33e>
 8003e26:	2300      	movs	r3, #0
 8003e28:	77fb      	strb	r3, [r7, #31]
 8003e2a:	e00d      	b.n	8003e48 <UART_SetConfig+0x348>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	e00a      	b.n	8003e48 <UART_SetConfig+0x348>
 8003e32:	2304      	movs	r3, #4
 8003e34:	77fb      	strb	r3, [r7, #31]
 8003e36:	e007      	b.n	8003e48 <UART_SetConfig+0x348>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e004      	b.n	8003e48 <UART_SetConfig+0x348>
 8003e3e:	2310      	movs	r3, #16
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e001      	b.n	8003e48 <UART_SetConfig+0x348>
 8003e44:	2310      	movs	r3, #16
 8003e46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e50:	d15b      	bne.n	8003f0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e52:	7ffb      	ldrb	r3, [r7, #31]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d828      	bhi.n	8003eaa <UART_SetConfig+0x3aa>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <UART_SetConfig+0x360>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e85 	.word	0x08003e85
 8003e64:	08003e8d 	.word	0x08003e8d
 8003e68:	08003e95 	.word	0x08003e95
 8003e6c:	08003eab 	.word	0x08003eab
 8003e70:	08003e9b 	.word	0x08003e9b
 8003e74:	08003eab 	.word	0x08003eab
 8003e78:	08003eab 	.word	0x08003eab
 8003e7c:	08003eab 	.word	0x08003eab
 8003e80:	08003ea3 	.word	0x08003ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e84:	f7fe fbb4 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8003e88:	61b8      	str	r0, [r7, #24]
        break;
 8003e8a:	e013      	b.n	8003eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e8c:	f7fe fbc4 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003e90:	61b8      	str	r0, [r7, #24]
        break;
 8003e92:	e00f      	b.n	8003eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <UART_SetConfig+0x4c4>)
 8003e96:	61bb      	str	r3, [r7, #24]
        break;
 8003e98:	e00c      	b.n	8003eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9a:	f7fe fa97 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 8003e9e:	61b8      	str	r0, [r7, #24]
        break;
 8003ea0:	e008      	b.n	8003eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ea6:	61bb      	str	r3, [r7, #24]
        break;
 8003ea8:	e004      	b.n	8003eb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	77bb      	strb	r3, [r7, #30]
        break;
 8003eb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d074      	beq.n	8003fa4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	005a      	lsls	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	085b      	lsrs	r3, r3, #1
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2b0f      	cmp	r3, #15
 8003ed4:	d916      	bls.n	8003f04 <UART_SetConfig+0x404>
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	d212      	bcs.n	8003f04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f023 030f 	bic.w	r3, r3, #15
 8003ee6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	89fb      	ldrh	r3, [r7, #14]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	89fa      	ldrh	r2, [r7, #14]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	e04f      	b.n	8003fa4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	77bb      	strb	r3, [r7, #30]
 8003f08:	e04c      	b.n	8003fa4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f0a:	7ffb      	ldrb	r3, [r7, #31]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d828      	bhi.n	8003f62 <UART_SetConfig+0x462>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <UART_SetConfig+0x418>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f45 	.word	0x08003f45
 8003f20:	08003f4d 	.word	0x08003f4d
 8003f24:	08003f63 	.word	0x08003f63
 8003f28:	08003f53 	.word	0x08003f53
 8003f2c:	08003f63 	.word	0x08003f63
 8003f30:	08003f63 	.word	0x08003f63
 8003f34:	08003f63 	.word	0x08003f63
 8003f38:	08003f5b 	.word	0x08003f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f7fe fb58 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8003f40:	61b8      	str	r0, [r7, #24]
        break;
 8003f42:	e013      	b.n	8003f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7fe fb68 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003f48:	61b8      	str	r0, [r7, #24]
        break;
 8003f4a:	e00f      	b.n	8003f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <UART_SetConfig+0x4c4>)
 8003f4e:	61bb      	str	r3, [r7, #24]
        break;
 8003f50:	e00c      	b.n	8003f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f52:	f7fe fa3b 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 8003f56:	61b8      	str	r0, [r7, #24]
        break;
 8003f58:	e008      	b.n	8003f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5e:	61bb      	str	r3, [r7, #24]
        break;
 8003f60:	e004      	b.n	8003f6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	77bb      	strb	r3, [r7, #30]
        break;
 8003f6a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d018      	beq.n	8003fa4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	085a      	lsrs	r2, r3, #1
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b0f      	cmp	r3, #15
 8003f8a:	d909      	bls.n	8003fa0 <UART_SetConfig+0x4a0>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d205      	bcs.n	8003fa0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	e001      	b.n	8003fa4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003fb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40007c00 	.word	0x40007c00
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	00f42400 	.word	0x00f42400

08003fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01a      	beq.n	80040de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c6:	d10a      	bne.n	80040de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af02      	add	r7, sp, #8
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800411c:	f7fd fa5e 	bl	80015dc <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d10e      	bne.n	800414e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f81b 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e011      	b.n	8004172 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b09c      	sub	sp, #112	; 0x70
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418a:	e0a7      	b.n	80042dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	f000 80a3 	beq.w	80042dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fd fa21 	bl	80015dc <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <UART_WaitOnFlagUntilTimeout+0x32>
 80041a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d13f      	bne.n	800422c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041c0:	667b      	str	r3, [r7, #100]	; 0x64
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e6      	bne.n	80041ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3308      	adds	r3, #8
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004200:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800420c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e5      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e068      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d050      	beq.n	80042dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004248:	d148      	bne.n	80042dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004252:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004268:	66fb      	str	r3, [r7, #108]	; 0x6c
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
 8004274:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e6      	bne.n	8004254 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	613b      	str	r3, [r7, #16]
   return(result);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	66bb      	str	r3, [r7, #104]	; 0x68
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042a6:	623a      	str	r2, [r7, #32]
 80042a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	69f9      	ldr	r1, [r7, #28]
 80042ac:	6a3a      	ldr	r2, [r7, #32]
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e5      	bne.n	8004286 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e010      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	f43f af48 	beq.w	800418c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3770      	adds	r7, #112	; 0x70
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <siprintf>:
 8004308:	b40e      	push	{r1, r2, r3}
 800430a:	b500      	push	{lr}
 800430c:	b09c      	sub	sp, #112	; 0x70
 800430e:	ab1d      	add	r3, sp, #116	; 0x74
 8004310:	9002      	str	r0, [sp, #8]
 8004312:	9006      	str	r0, [sp, #24]
 8004314:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004318:	4809      	ldr	r0, [pc, #36]	; (8004340 <siprintf+0x38>)
 800431a:	9107      	str	r1, [sp, #28]
 800431c:	9104      	str	r1, [sp, #16]
 800431e:	4909      	ldr	r1, [pc, #36]	; (8004344 <siprintf+0x3c>)
 8004320:	f853 2b04 	ldr.w	r2, [r3], #4
 8004324:	9105      	str	r1, [sp, #20]
 8004326:	6800      	ldr	r0, [r0, #0]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	a902      	add	r1, sp, #8
 800432c:	f000 f9a0 	bl	8004670 <_svfiprintf_r>
 8004330:	9b02      	ldr	r3, [sp, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	b01c      	add	sp, #112	; 0x70
 8004338:	f85d eb04 	ldr.w	lr, [sp], #4
 800433c:	b003      	add	sp, #12
 800433e:	4770      	bx	lr
 8004340:	20000058 	.word	0x20000058
 8004344:	ffff0208 	.word	0xffff0208

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <__errno>:
 8004358:	4b01      	ldr	r3, [pc, #4]	; (8004360 <__errno+0x8>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000058 	.word	0x20000058

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4d0d      	ldr	r5, [pc, #52]	; (800439c <__libc_init_array+0x38>)
 8004368:	4c0d      	ldr	r4, [pc, #52]	; (80043a0 <__libc_init_array+0x3c>)
 800436a:	1b64      	subs	r4, r4, r5
 800436c:	10a4      	asrs	r4, r4, #2
 800436e:	2600      	movs	r6, #0
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	4d0b      	ldr	r5, [pc, #44]	; (80043a4 <__libc_init_array+0x40>)
 8004376:	4c0c      	ldr	r4, [pc, #48]	; (80043a8 <__libc_init_array+0x44>)
 8004378:	f000 fc6a 	bl	8004c50 <_init>
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	2600      	movs	r6, #0
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f855 3b04 	ldr.w	r3, [r5], #4
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f855 3b04 	ldr.w	r3, [r5], #4
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	08004cd0 	.word	0x08004cd0
 80043a0:	08004cd0 	.word	0x08004cd0
 80043a4:	08004cd0 	.word	0x08004cd0
 80043a8:	08004cd4 	.word	0x08004cd4

080043ac <__retarget_lock_acquire_recursive>:
 80043ac:	4770      	bx	lr

080043ae <__retarget_lock_release_recursive>:
 80043ae:	4770      	bx	lr

080043b0 <memcpy>:
 80043b0:	440a      	add	r2, r1
 80043b2:	4291      	cmp	r1, r2
 80043b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043b8:	d100      	bne.n	80043bc <memcpy+0xc>
 80043ba:	4770      	bx	lr
 80043bc:	b510      	push	{r4, lr}
 80043be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043c6:	4291      	cmp	r1, r2
 80043c8:	d1f9      	bne.n	80043be <memcpy+0xe>
 80043ca:	bd10      	pop	{r4, pc}

080043cc <_free_r>:
 80043cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ce:	2900      	cmp	r1, #0
 80043d0:	d044      	beq.n	800445c <_free_r+0x90>
 80043d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d6:	9001      	str	r0, [sp, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f1a1 0404 	sub.w	r4, r1, #4
 80043de:	bfb8      	it	lt
 80043e0:	18e4      	addlt	r4, r4, r3
 80043e2:	f000 f8df 	bl	80045a4 <__malloc_lock>
 80043e6:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <_free_r+0x94>)
 80043e8:	9801      	ldr	r0, [sp, #4]
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	b933      	cbnz	r3, 80043fc <_free_r+0x30>
 80043ee:	6063      	str	r3, [r4, #4]
 80043f0:	6014      	str	r4, [r2, #0]
 80043f2:	b003      	add	sp, #12
 80043f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043f8:	f000 b8da 	b.w	80045b0 <__malloc_unlock>
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	d908      	bls.n	8004412 <_free_r+0x46>
 8004400:	6825      	ldr	r5, [r4, #0]
 8004402:	1961      	adds	r1, r4, r5
 8004404:	428b      	cmp	r3, r1
 8004406:	bf01      	itttt	eq
 8004408:	6819      	ldreq	r1, [r3, #0]
 800440a:	685b      	ldreq	r3, [r3, #4]
 800440c:	1949      	addeq	r1, r1, r5
 800440e:	6021      	streq	r1, [r4, #0]
 8004410:	e7ed      	b.n	80043ee <_free_r+0x22>
 8004412:	461a      	mov	r2, r3
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	b10b      	cbz	r3, 800441c <_free_r+0x50>
 8004418:	42a3      	cmp	r3, r4
 800441a:	d9fa      	bls.n	8004412 <_free_r+0x46>
 800441c:	6811      	ldr	r1, [r2, #0]
 800441e:	1855      	adds	r5, r2, r1
 8004420:	42a5      	cmp	r5, r4
 8004422:	d10b      	bne.n	800443c <_free_r+0x70>
 8004424:	6824      	ldr	r4, [r4, #0]
 8004426:	4421      	add	r1, r4
 8004428:	1854      	adds	r4, r2, r1
 800442a:	42a3      	cmp	r3, r4
 800442c:	6011      	str	r1, [r2, #0]
 800442e:	d1e0      	bne.n	80043f2 <_free_r+0x26>
 8004430:	681c      	ldr	r4, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	6053      	str	r3, [r2, #4]
 8004436:	440c      	add	r4, r1
 8004438:	6014      	str	r4, [r2, #0]
 800443a:	e7da      	b.n	80043f2 <_free_r+0x26>
 800443c:	d902      	bls.n	8004444 <_free_r+0x78>
 800443e:	230c      	movs	r3, #12
 8004440:	6003      	str	r3, [r0, #0]
 8004442:	e7d6      	b.n	80043f2 <_free_r+0x26>
 8004444:	6825      	ldr	r5, [r4, #0]
 8004446:	1961      	adds	r1, r4, r5
 8004448:	428b      	cmp	r3, r1
 800444a:	bf04      	itt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	6063      	str	r3, [r4, #4]
 8004452:	bf04      	itt	eq
 8004454:	1949      	addeq	r1, r1, r5
 8004456:	6021      	streq	r1, [r4, #0]
 8004458:	6054      	str	r4, [r2, #4]
 800445a:	e7ca      	b.n	80043f2 <_free_r+0x26>
 800445c:	b003      	add	sp, #12
 800445e:	bd30      	pop	{r4, r5, pc}
 8004460:	200003d4 	.word	0x200003d4

08004464 <sbrk_aligned>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	4e0e      	ldr	r6, [pc, #56]	; (80044a0 <sbrk_aligned+0x3c>)
 8004468:	460c      	mov	r4, r1
 800446a:	6831      	ldr	r1, [r6, #0]
 800446c:	4605      	mov	r5, r0
 800446e:	b911      	cbnz	r1, 8004476 <sbrk_aligned+0x12>
 8004470:	f000 fba6 	bl	8004bc0 <_sbrk_r>
 8004474:	6030      	str	r0, [r6, #0]
 8004476:	4621      	mov	r1, r4
 8004478:	4628      	mov	r0, r5
 800447a:	f000 fba1 	bl	8004bc0 <_sbrk_r>
 800447e:	1c43      	adds	r3, r0, #1
 8004480:	d00a      	beq.n	8004498 <sbrk_aligned+0x34>
 8004482:	1cc4      	adds	r4, r0, #3
 8004484:	f024 0403 	bic.w	r4, r4, #3
 8004488:	42a0      	cmp	r0, r4
 800448a:	d007      	beq.n	800449c <sbrk_aligned+0x38>
 800448c:	1a21      	subs	r1, r4, r0
 800448e:	4628      	mov	r0, r5
 8004490:	f000 fb96 	bl	8004bc0 <_sbrk_r>
 8004494:	3001      	adds	r0, #1
 8004496:	d101      	bne.n	800449c <sbrk_aligned+0x38>
 8004498:	f04f 34ff 	mov.w	r4, #4294967295
 800449c:	4620      	mov	r0, r4
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	200003d8 	.word	0x200003d8

080044a4 <_malloc_r>:
 80044a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a8:	1ccd      	adds	r5, r1, #3
 80044aa:	f025 0503 	bic.w	r5, r5, #3
 80044ae:	3508      	adds	r5, #8
 80044b0:	2d0c      	cmp	r5, #12
 80044b2:	bf38      	it	cc
 80044b4:	250c      	movcc	r5, #12
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	4607      	mov	r7, r0
 80044ba:	db01      	blt.n	80044c0 <_malloc_r+0x1c>
 80044bc:	42a9      	cmp	r1, r5
 80044be:	d905      	bls.n	80044cc <_malloc_r+0x28>
 80044c0:	230c      	movs	r3, #12
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	2600      	movs	r6, #0
 80044c6:	4630      	mov	r0, r6
 80044c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045a0 <_malloc_r+0xfc>
 80044d0:	f000 f868 	bl	80045a4 <__malloc_lock>
 80044d4:	f8d8 3000 	ldr.w	r3, [r8]
 80044d8:	461c      	mov	r4, r3
 80044da:	bb5c      	cbnz	r4, 8004534 <_malloc_r+0x90>
 80044dc:	4629      	mov	r1, r5
 80044de:	4638      	mov	r0, r7
 80044e0:	f7ff ffc0 	bl	8004464 <sbrk_aligned>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	4604      	mov	r4, r0
 80044e8:	d155      	bne.n	8004596 <_malloc_r+0xf2>
 80044ea:	f8d8 4000 	ldr.w	r4, [r8]
 80044ee:	4626      	mov	r6, r4
 80044f0:	2e00      	cmp	r6, #0
 80044f2:	d145      	bne.n	8004580 <_malloc_r+0xdc>
 80044f4:	2c00      	cmp	r4, #0
 80044f6:	d048      	beq.n	800458a <_malloc_r+0xe6>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	4631      	mov	r1, r6
 80044fc:	4638      	mov	r0, r7
 80044fe:	eb04 0903 	add.w	r9, r4, r3
 8004502:	f000 fb5d 	bl	8004bc0 <_sbrk_r>
 8004506:	4581      	cmp	r9, r0
 8004508:	d13f      	bne.n	800458a <_malloc_r+0xe6>
 800450a:	6821      	ldr	r1, [r4, #0]
 800450c:	1a6d      	subs	r5, r5, r1
 800450e:	4629      	mov	r1, r5
 8004510:	4638      	mov	r0, r7
 8004512:	f7ff ffa7 	bl	8004464 <sbrk_aligned>
 8004516:	3001      	adds	r0, #1
 8004518:	d037      	beq.n	800458a <_malloc_r+0xe6>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	442b      	add	r3, r5
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	f8d8 3000 	ldr.w	r3, [r8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d038      	beq.n	800459a <_malloc_r+0xf6>
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	42a2      	cmp	r2, r4
 800452c:	d12b      	bne.n	8004586 <_malloc_r+0xe2>
 800452e:	2200      	movs	r2, #0
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	e00f      	b.n	8004554 <_malloc_r+0xb0>
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	1b52      	subs	r2, r2, r5
 8004538:	d41f      	bmi.n	800457a <_malloc_r+0xd6>
 800453a:	2a0b      	cmp	r2, #11
 800453c:	d917      	bls.n	800456e <_malloc_r+0xca>
 800453e:	1961      	adds	r1, r4, r5
 8004540:	42a3      	cmp	r3, r4
 8004542:	6025      	str	r5, [r4, #0]
 8004544:	bf18      	it	ne
 8004546:	6059      	strne	r1, [r3, #4]
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	bf08      	it	eq
 800454c:	f8c8 1000 	streq.w	r1, [r8]
 8004550:	5162      	str	r2, [r4, r5]
 8004552:	604b      	str	r3, [r1, #4]
 8004554:	4638      	mov	r0, r7
 8004556:	f104 060b 	add.w	r6, r4, #11
 800455a:	f000 f829 	bl	80045b0 <__malloc_unlock>
 800455e:	f026 0607 	bic.w	r6, r6, #7
 8004562:	1d23      	adds	r3, r4, #4
 8004564:	1af2      	subs	r2, r6, r3
 8004566:	d0ae      	beq.n	80044c6 <_malloc_r+0x22>
 8004568:	1b9b      	subs	r3, r3, r6
 800456a:	50a3      	str	r3, [r4, r2]
 800456c:	e7ab      	b.n	80044c6 <_malloc_r+0x22>
 800456e:	42a3      	cmp	r3, r4
 8004570:	6862      	ldr	r2, [r4, #4]
 8004572:	d1dd      	bne.n	8004530 <_malloc_r+0x8c>
 8004574:	f8c8 2000 	str.w	r2, [r8]
 8004578:	e7ec      	b.n	8004554 <_malloc_r+0xb0>
 800457a:	4623      	mov	r3, r4
 800457c:	6864      	ldr	r4, [r4, #4]
 800457e:	e7ac      	b.n	80044da <_malloc_r+0x36>
 8004580:	4634      	mov	r4, r6
 8004582:	6876      	ldr	r6, [r6, #4]
 8004584:	e7b4      	b.n	80044f0 <_malloc_r+0x4c>
 8004586:	4613      	mov	r3, r2
 8004588:	e7cc      	b.n	8004524 <_malloc_r+0x80>
 800458a:	230c      	movs	r3, #12
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4638      	mov	r0, r7
 8004590:	f000 f80e 	bl	80045b0 <__malloc_unlock>
 8004594:	e797      	b.n	80044c6 <_malloc_r+0x22>
 8004596:	6025      	str	r5, [r4, #0]
 8004598:	e7dc      	b.n	8004554 <_malloc_r+0xb0>
 800459a:	605b      	str	r3, [r3, #4]
 800459c:	deff      	udf	#255	; 0xff
 800459e:	bf00      	nop
 80045a0:	200003d4 	.word	0x200003d4

080045a4 <__malloc_lock>:
 80045a4:	4801      	ldr	r0, [pc, #4]	; (80045ac <__malloc_lock+0x8>)
 80045a6:	f7ff bf01 	b.w	80043ac <__retarget_lock_acquire_recursive>
 80045aa:	bf00      	nop
 80045ac:	200003d0 	.word	0x200003d0

080045b0 <__malloc_unlock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__malloc_unlock+0x8>)
 80045b2:	f7ff befc 	b.w	80043ae <__retarget_lock_release_recursive>
 80045b6:	bf00      	nop
 80045b8:	200003d0 	.word	0x200003d0

080045bc <__ssputs_r>:
 80045bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	688e      	ldr	r6, [r1, #8]
 80045c2:	461f      	mov	r7, r3
 80045c4:	42be      	cmp	r6, r7
 80045c6:	680b      	ldr	r3, [r1, #0]
 80045c8:	4682      	mov	sl, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	4690      	mov	r8, r2
 80045ce:	d82c      	bhi.n	800462a <__ssputs_r+0x6e>
 80045d0:	898a      	ldrh	r2, [r1, #12]
 80045d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045d6:	d026      	beq.n	8004626 <__ssputs_r+0x6a>
 80045d8:	6965      	ldr	r5, [r4, #20]
 80045da:	6909      	ldr	r1, [r1, #16]
 80045dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045e0:	eba3 0901 	sub.w	r9, r3, r1
 80045e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045e8:	1c7b      	adds	r3, r7, #1
 80045ea:	444b      	add	r3, r9
 80045ec:	106d      	asrs	r5, r5, #1
 80045ee:	429d      	cmp	r5, r3
 80045f0:	bf38      	it	cc
 80045f2:	461d      	movcc	r5, r3
 80045f4:	0553      	lsls	r3, r2, #21
 80045f6:	d527      	bpl.n	8004648 <__ssputs_r+0x8c>
 80045f8:	4629      	mov	r1, r5
 80045fa:	f7ff ff53 	bl	80044a4 <_malloc_r>
 80045fe:	4606      	mov	r6, r0
 8004600:	b360      	cbz	r0, 800465c <__ssputs_r+0xa0>
 8004602:	6921      	ldr	r1, [r4, #16]
 8004604:	464a      	mov	r2, r9
 8004606:	f7ff fed3 	bl	80043b0 <memcpy>
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004614:	81a3      	strh	r3, [r4, #12]
 8004616:	6126      	str	r6, [r4, #16]
 8004618:	6165      	str	r5, [r4, #20]
 800461a:	444e      	add	r6, r9
 800461c:	eba5 0509 	sub.w	r5, r5, r9
 8004620:	6026      	str	r6, [r4, #0]
 8004622:	60a5      	str	r5, [r4, #8]
 8004624:	463e      	mov	r6, r7
 8004626:	42be      	cmp	r6, r7
 8004628:	d900      	bls.n	800462c <__ssputs_r+0x70>
 800462a:	463e      	mov	r6, r7
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	4632      	mov	r2, r6
 8004630:	4641      	mov	r1, r8
 8004632:	f000 faab 	bl	8004b8c <memmove>
 8004636:	68a3      	ldr	r3, [r4, #8]
 8004638:	1b9b      	subs	r3, r3, r6
 800463a:	60a3      	str	r3, [r4, #8]
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	4433      	add	r3, r6
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	2000      	movs	r0, #0
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	462a      	mov	r2, r5
 800464a:	f000 fac9 	bl	8004be0 <_realloc_r>
 800464e:	4606      	mov	r6, r0
 8004650:	2800      	cmp	r0, #0
 8004652:	d1e0      	bne.n	8004616 <__ssputs_r+0x5a>
 8004654:	6921      	ldr	r1, [r4, #16]
 8004656:	4650      	mov	r0, sl
 8004658:	f7ff feb8 	bl	80043cc <_free_r>
 800465c:	230c      	movs	r3, #12
 800465e:	f8ca 3000 	str.w	r3, [sl]
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004668:	81a3      	strh	r3, [r4, #12]
 800466a:	f04f 30ff 	mov.w	r0, #4294967295
 800466e:	e7e9      	b.n	8004644 <__ssputs_r+0x88>

08004670 <_svfiprintf_r>:
 8004670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	4698      	mov	r8, r3
 8004676:	898b      	ldrh	r3, [r1, #12]
 8004678:	061b      	lsls	r3, r3, #24
 800467a:	b09d      	sub	sp, #116	; 0x74
 800467c:	4607      	mov	r7, r0
 800467e:	460d      	mov	r5, r1
 8004680:	4614      	mov	r4, r2
 8004682:	d50e      	bpl.n	80046a2 <_svfiprintf_r+0x32>
 8004684:	690b      	ldr	r3, [r1, #16]
 8004686:	b963      	cbnz	r3, 80046a2 <_svfiprintf_r+0x32>
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	f7ff ff0b 	bl	80044a4 <_malloc_r>
 800468e:	6028      	str	r0, [r5, #0]
 8004690:	6128      	str	r0, [r5, #16]
 8004692:	b920      	cbnz	r0, 800469e <_svfiprintf_r+0x2e>
 8004694:	230c      	movs	r3, #12
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	e0d0      	b.n	8004840 <_svfiprintf_r+0x1d0>
 800469e:	2340      	movs	r3, #64	; 0x40
 80046a0:	616b      	str	r3, [r5, #20]
 80046a2:	2300      	movs	r3, #0
 80046a4:	9309      	str	r3, [sp, #36]	; 0x24
 80046a6:	2320      	movs	r3, #32
 80046a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80046b0:	2330      	movs	r3, #48	; 0x30
 80046b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004858 <_svfiprintf_r+0x1e8>
 80046b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046ba:	f04f 0901 	mov.w	r9, #1
 80046be:	4623      	mov	r3, r4
 80046c0:	469a      	mov	sl, r3
 80046c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046c6:	b10a      	cbz	r2, 80046cc <_svfiprintf_r+0x5c>
 80046c8:	2a25      	cmp	r2, #37	; 0x25
 80046ca:	d1f9      	bne.n	80046c0 <_svfiprintf_r+0x50>
 80046cc:	ebba 0b04 	subs.w	fp, sl, r4
 80046d0:	d00b      	beq.n	80046ea <_svfiprintf_r+0x7a>
 80046d2:	465b      	mov	r3, fp
 80046d4:	4622      	mov	r2, r4
 80046d6:	4629      	mov	r1, r5
 80046d8:	4638      	mov	r0, r7
 80046da:	f7ff ff6f 	bl	80045bc <__ssputs_r>
 80046de:	3001      	adds	r0, #1
 80046e0:	f000 80a9 	beq.w	8004836 <_svfiprintf_r+0x1c6>
 80046e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046e6:	445a      	add	r2, fp
 80046e8:	9209      	str	r2, [sp, #36]	; 0x24
 80046ea:	f89a 3000 	ldrb.w	r3, [sl]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80a1 	beq.w	8004836 <_svfiprintf_r+0x1c6>
 80046f4:	2300      	movs	r3, #0
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295
 80046fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046fe:	f10a 0a01 	add.w	sl, sl, #1
 8004702:	9304      	str	r3, [sp, #16]
 8004704:	9307      	str	r3, [sp, #28]
 8004706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800470a:	931a      	str	r3, [sp, #104]	; 0x68
 800470c:	4654      	mov	r4, sl
 800470e:	2205      	movs	r2, #5
 8004710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004714:	4850      	ldr	r0, [pc, #320]	; (8004858 <_svfiprintf_r+0x1e8>)
 8004716:	f7fb fd7b 	bl	8000210 <memchr>
 800471a:	9a04      	ldr	r2, [sp, #16]
 800471c:	b9d8      	cbnz	r0, 8004756 <_svfiprintf_r+0xe6>
 800471e:	06d0      	lsls	r0, r2, #27
 8004720:	bf44      	itt	mi
 8004722:	2320      	movmi	r3, #32
 8004724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004728:	0711      	lsls	r1, r2, #28
 800472a:	bf44      	itt	mi
 800472c:	232b      	movmi	r3, #43	; 0x2b
 800472e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004732:	f89a 3000 	ldrb.w	r3, [sl]
 8004736:	2b2a      	cmp	r3, #42	; 0x2a
 8004738:	d015      	beq.n	8004766 <_svfiprintf_r+0xf6>
 800473a:	9a07      	ldr	r2, [sp, #28]
 800473c:	4654      	mov	r4, sl
 800473e:	2000      	movs	r0, #0
 8004740:	f04f 0c0a 	mov.w	ip, #10
 8004744:	4621      	mov	r1, r4
 8004746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800474a:	3b30      	subs	r3, #48	; 0x30
 800474c:	2b09      	cmp	r3, #9
 800474e:	d94d      	bls.n	80047ec <_svfiprintf_r+0x17c>
 8004750:	b1b0      	cbz	r0, 8004780 <_svfiprintf_r+0x110>
 8004752:	9207      	str	r2, [sp, #28]
 8004754:	e014      	b.n	8004780 <_svfiprintf_r+0x110>
 8004756:	eba0 0308 	sub.w	r3, r0, r8
 800475a:	fa09 f303 	lsl.w	r3, r9, r3
 800475e:	4313      	orrs	r3, r2
 8004760:	9304      	str	r3, [sp, #16]
 8004762:	46a2      	mov	sl, r4
 8004764:	e7d2      	b.n	800470c <_svfiprintf_r+0x9c>
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	1d19      	adds	r1, r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	9103      	str	r1, [sp, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	bfbb      	ittet	lt
 8004772:	425b      	neglt	r3, r3
 8004774:	f042 0202 	orrlt.w	r2, r2, #2
 8004778:	9307      	strge	r3, [sp, #28]
 800477a:	9307      	strlt	r3, [sp, #28]
 800477c:	bfb8      	it	lt
 800477e:	9204      	strlt	r2, [sp, #16]
 8004780:	7823      	ldrb	r3, [r4, #0]
 8004782:	2b2e      	cmp	r3, #46	; 0x2e
 8004784:	d10c      	bne.n	80047a0 <_svfiprintf_r+0x130>
 8004786:	7863      	ldrb	r3, [r4, #1]
 8004788:	2b2a      	cmp	r3, #42	; 0x2a
 800478a:	d134      	bne.n	80047f6 <_svfiprintf_r+0x186>
 800478c:	9b03      	ldr	r3, [sp, #12]
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	9203      	str	r2, [sp, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	bfb8      	it	lt
 8004798:	f04f 33ff 	movlt.w	r3, #4294967295
 800479c:	3402      	adds	r4, #2
 800479e:	9305      	str	r3, [sp, #20]
 80047a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004868 <_svfiprintf_r+0x1f8>
 80047a4:	7821      	ldrb	r1, [r4, #0]
 80047a6:	2203      	movs	r2, #3
 80047a8:	4650      	mov	r0, sl
 80047aa:	f7fb fd31 	bl	8000210 <memchr>
 80047ae:	b138      	cbz	r0, 80047c0 <_svfiprintf_r+0x150>
 80047b0:	9b04      	ldr	r3, [sp, #16]
 80047b2:	eba0 000a 	sub.w	r0, r0, sl
 80047b6:	2240      	movs	r2, #64	; 0x40
 80047b8:	4082      	lsls	r2, r0
 80047ba:	4313      	orrs	r3, r2
 80047bc:	3401      	adds	r4, #1
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c4:	4825      	ldr	r0, [pc, #148]	; (800485c <_svfiprintf_r+0x1ec>)
 80047c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ca:	2206      	movs	r2, #6
 80047cc:	f7fb fd20 	bl	8000210 <memchr>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d038      	beq.n	8004846 <_svfiprintf_r+0x1d6>
 80047d4:	4b22      	ldr	r3, [pc, #136]	; (8004860 <_svfiprintf_r+0x1f0>)
 80047d6:	bb1b      	cbnz	r3, 8004820 <_svfiprintf_r+0x1b0>
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	3307      	adds	r3, #7
 80047dc:	f023 0307 	bic.w	r3, r3, #7
 80047e0:	3308      	adds	r3, #8
 80047e2:	9303      	str	r3, [sp, #12]
 80047e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e6:	4433      	add	r3, r6
 80047e8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ea:	e768      	b.n	80046be <_svfiprintf_r+0x4e>
 80047ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80047f0:	460c      	mov	r4, r1
 80047f2:	2001      	movs	r0, #1
 80047f4:	e7a6      	b.n	8004744 <_svfiprintf_r+0xd4>
 80047f6:	2300      	movs	r3, #0
 80047f8:	3401      	adds	r4, #1
 80047fa:	9305      	str	r3, [sp, #20]
 80047fc:	4619      	mov	r1, r3
 80047fe:	f04f 0c0a 	mov.w	ip, #10
 8004802:	4620      	mov	r0, r4
 8004804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004808:	3a30      	subs	r2, #48	; 0x30
 800480a:	2a09      	cmp	r2, #9
 800480c:	d903      	bls.n	8004816 <_svfiprintf_r+0x1a6>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0c6      	beq.n	80047a0 <_svfiprintf_r+0x130>
 8004812:	9105      	str	r1, [sp, #20]
 8004814:	e7c4      	b.n	80047a0 <_svfiprintf_r+0x130>
 8004816:	fb0c 2101 	mla	r1, ip, r1, r2
 800481a:	4604      	mov	r4, r0
 800481c:	2301      	movs	r3, #1
 800481e:	e7f0      	b.n	8004802 <_svfiprintf_r+0x192>
 8004820:	ab03      	add	r3, sp, #12
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	462a      	mov	r2, r5
 8004826:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <_svfiprintf_r+0x1f4>)
 8004828:	a904      	add	r1, sp, #16
 800482a:	4638      	mov	r0, r7
 800482c:	f3af 8000 	nop.w
 8004830:	1c42      	adds	r2, r0, #1
 8004832:	4606      	mov	r6, r0
 8004834:	d1d6      	bne.n	80047e4 <_svfiprintf_r+0x174>
 8004836:	89ab      	ldrh	r3, [r5, #12]
 8004838:	065b      	lsls	r3, r3, #25
 800483a:	f53f af2d 	bmi.w	8004698 <_svfiprintf_r+0x28>
 800483e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004840:	b01d      	add	sp, #116	; 0x74
 8004842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004846:	ab03      	add	r3, sp, #12
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	462a      	mov	r2, r5
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <_svfiprintf_r+0x1f4>)
 800484e:	a904      	add	r1, sp, #16
 8004850:	4638      	mov	r0, r7
 8004852:	f000 f879 	bl	8004948 <_printf_i>
 8004856:	e7eb      	b.n	8004830 <_svfiprintf_r+0x1c0>
 8004858:	08004c94 	.word	0x08004c94
 800485c:	08004c9e 	.word	0x08004c9e
 8004860:	00000000 	.word	0x00000000
 8004864:	080045bd 	.word	0x080045bd
 8004868:	08004c9a 	.word	0x08004c9a

0800486c <_printf_common>:
 800486c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004870:	4616      	mov	r6, r2
 8004872:	4699      	mov	r9, r3
 8004874:	688a      	ldr	r2, [r1, #8]
 8004876:	690b      	ldr	r3, [r1, #16]
 8004878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800487c:	4293      	cmp	r3, r2
 800487e:	bfb8      	it	lt
 8004880:	4613      	movlt	r3, r2
 8004882:	6033      	str	r3, [r6, #0]
 8004884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004888:	4607      	mov	r7, r0
 800488a:	460c      	mov	r4, r1
 800488c:	b10a      	cbz	r2, 8004892 <_printf_common+0x26>
 800488e:	3301      	adds	r3, #1
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	0699      	lsls	r1, r3, #26
 8004896:	bf42      	ittt	mi
 8004898:	6833      	ldrmi	r3, [r6, #0]
 800489a:	3302      	addmi	r3, #2
 800489c:	6033      	strmi	r3, [r6, #0]
 800489e:	6825      	ldr	r5, [r4, #0]
 80048a0:	f015 0506 	ands.w	r5, r5, #6
 80048a4:	d106      	bne.n	80048b4 <_printf_common+0x48>
 80048a6:	f104 0a19 	add.w	sl, r4, #25
 80048aa:	68e3      	ldr	r3, [r4, #12]
 80048ac:	6832      	ldr	r2, [r6, #0]
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	42ab      	cmp	r3, r5
 80048b2:	dc26      	bgt.n	8004902 <_printf_common+0x96>
 80048b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048b8:	1e13      	subs	r3, r2, #0
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	bf18      	it	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	0692      	lsls	r2, r2, #26
 80048c2:	d42b      	bmi.n	800491c <_printf_common+0xb0>
 80048c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048c8:	4649      	mov	r1, r9
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d01e      	beq.n	8004910 <_printf_common+0xa4>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	6922      	ldr	r2, [r4, #16]
 80048d6:	f003 0306 	and.w	r3, r3, #6
 80048da:	2b04      	cmp	r3, #4
 80048dc:	bf02      	ittt	eq
 80048de:	68e5      	ldreq	r5, [r4, #12]
 80048e0:	6833      	ldreq	r3, [r6, #0]
 80048e2:	1aed      	subeq	r5, r5, r3
 80048e4:	68a3      	ldr	r3, [r4, #8]
 80048e6:	bf0c      	ite	eq
 80048e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048ec:	2500      	movne	r5, #0
 80048ee:	4293      	cmp	r3, r2
 80048f0:	bfc4      	itt	gt
 80048f2:	1a9b      	subgt	r3, r3, r2
 80048f4:	18ed      	addgt	r5, r5, r3
 80048f6:	2600      	movs	r6, #0
 80048f8:	341a      	adds	r4, #26
 80048fa:	42b5      	cmp	r5, r6
 80048fc:	d11a      	bne.n	8004934 <_printf_common+0xc8>
 80048fe:	2000      	movs	r0, #0
 8004900:	e008      	b.n	8004914 <_printf_common+0xa8>
 8004902:	2301      	movs	r3, #1
 8004904:	4652      	mov	r2, sl
 8004906:	4649      	mov	r1, r9
 8004908:	4638      	mov	r0, r7
 800490a:	47c0      	blx	r8
 800490c:	3001      	adds	r0, #1
 800490e:	d103      	bne.n	8004918 <_printf_common+0xac>
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004918:	3501      	adds	r5, #1
 800491a:	e7c6      	b.n	80048aa <_printf_common+0x3e>
 800491c:	18e1      	adds	r1, r4, r3
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	2030      	movs	r0, #48	; 0x30
 8004922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004926:	4422      	add	r2, r4
 8004928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800492c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004930:	3302      	adds	r3, #2
 8004932:	e7c7      	b.n	80048c4 <_printf_common+0x58>
 8004934:	2301      	movs	r3, #1
 8004936:	4622      	mov	r2, r4
 8004938:	4649      	mov	r1, r9
 800493a:	4638      	mov	r0, r7
 800493c:	47c0      	blx	r8
 800493e:	3001      	adds	r0, #1
 8004940:	d0e6      	beq.n	8004910 <_printf_common+0xa4>
 8004942:	3601      	adds	r6, #1
 8004944:	e7d9      	b.n	80048fa <_printf_common+0x8e>
	...

08004948 <_printf_i>:
 8004948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800494c:	7e0f      	ldrb	r7, [r1, #24]
 800494e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004950:	2f78      	cmp	r7, #120	; 0x78
 8004952:	4691      	mov	r9, r2
 8004954:	4680      	mov	r8, r0
 8004956:	460c      	mov	r4, r1
 8004958:	469a      	mov	sl, r3
 800495a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800495e:	d807      	bhi.n	8004970 <_printf_i+0x28>
 8004960:	2f62      	cmp	r7, #98	; 0x62
 8004962:	d80a      	bhi.n	800497a <_printf_i+0x32>
 8004964:	2f00      	cmp	r7, #0
 8004966:	f000 80d4 	beq.w	8004b12 <_printf_i+0x1ca>
 800496a:	2f58      	cmp	r7, #88	; 0x58
 800496c:	f000 80c0 	beq.w	8004af0 <_printf_i+0x1a8>
 8004970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004978:	e03a      	b.n	80049f0 <_printf_i+0xa8>
 800497a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800497e:	2b15      	cmp	r3, #21
 8004980:	d8f6      	bhi.n	8004970 <_printf_i+0x28>
 8004982:	a101      	add	r1, pc, #4	; (adr r1, 8004988 <_printf_i+0x40>)
 8004984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004988:	080049e1 	.word	0x080049e1
 800498c:	080049f5 	.word	0x080049f5
 8004990:	08004971 	.word	0x08004971
 8004994:	08004971 	.word	0x08004971
 8004998:	08004971 	.word	0x08004971
 800499c:	08004971 	.word	0x08004971
 80049a0:	080049f5 	.word	0x080049f5
 80049a4:	08004971 	.word	0x08004971
 80049a8:	08004971 	.word	0x08004971
 80049ac:	08004971 	.word	0x08004971
 80049b0:	08004971 	.word	0x08004971
 80049b4:	08004af9 	.word	0x08004af9
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	08004ab3 	.word	0x08004ab3
 80049c0:	08004971 	.word	0x08004971
 80049c4:	08004971 	.word	0x08004971
 80049c8:	08004b1b 	.word	0x08004b1b
 80049cc:	08004971 	.word	0x08004971
 80049d0:	08004a21 	.word	0x08004a21
 80049d4:	08004971 	.word	0x08004971
 80049d8:	08004971 	.word	0x08004971
 80049dc:	08004abb 	.word	0x08004abb
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	1d1a      	adds	r2, r3, #4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	602a      	str	r2, [r5, #0]
 80049e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049f0:	2301      	movs	r3, #1
 80049f2:	e09f      	b.n	8004b34 <_printf_i+0x1ec>
 80049f4:	6820      	ldr	r0, [r4, #0]
 80049f6:	682b      	ldr	r3, [r5, #0]
 80049f8:	0607      	lsls	r7, r0, #24
 80049fa:	f103 0104 	add.w	r1, r3, #4
 80049fe:	6029      	str	r1, [r5, #0]
 8004a00:	d501      	bpl.n	8004a06 <_printf_i+0xbe>
 8004a02:	681e      	ldr	r6, [r3, #0]
 8004a04:	e003      	b.n	8004a0e <_printf_i+0xc6>
 8004a06:	0646      	lsls	r6, r0, #25
 8004a08:	d5fb      	bpl.n	8004a02 <_printf_i+0xba>
 8004a0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	da03      	bge.n	8004a1a <_printf_i+0xd2>
 8004a12:	232d      	movs	r3, #45	; 0x2d
 8004a14:	4276      	negs	r6, r6
 8004a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a1a:	485a      	ldr	r0, [pc, #360]	; (8004b84 <_printf_i+0x23c>)
 8004a1c:	230a      	movs	r3, #10
 8004a1e:	e012      	b.n	8004a46 <_printf_i+0xfe>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	6820      	ldr	r0, [r4, #0]
 8004a24:	1d19      	adds	r1, r3, #4
 8004a26:	6029      	str	r1, [r5, #0]
 8004a28:	0605      	lsls	r5, r0, #24
 8004a2a:	d501      	bpl.n	8004a30 <_printf_i+0xe8>
 8004a2c:	681e      	ldr	r6, [r3, #0]
 8004a2e:	e002      	b.n	8004a36 <_printf_i+0xee>
 8004a30:	0641      	lsls	r1, r0, #25
 8004a32:	d5fb      	bpl.n	8004a2c <_printf_i+0xe4>
 8004a34:	881e      	ldrh	r6, [r3, #0]
 8004a36:	4853      	ldr	r0, [pc, #332]	; (8004b84 <_printf_i+0x23c>)
 8004a38:	2f6f      	cmp	r7, #111	; 0x6f
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2308      	moveq	r3, #8
 8004a3e:	230a      	movne	r3, #10
 8004a40:	2100      	movs	r1, #0
 8004a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a46:	6865      	ldr	r5, [r4, #4]
 8004a48:	60a5      	str	r5, [r4, #8]
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	bfa2      	ittt	ge
 8004a4e:	6821      	ldrge	r1, [r4, #0]
 8004a50:	f021 0104 	bicge.w	r1, r1, #4
 8004a54:	6021      	strge	r1, [r4, #0]
 8004a56:	b90e      	cbnz	r6, 8004a5c <_printf_i+0x114>
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	d04b      	beq.n	8004af4 <_printf_i+0x1ac>
 8004a5c:	4615      	mov	r5, r2
 8004a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a62:	fb03 6711 	mls	r7, r3, r1, r6
 8004a66:	5dc7      	ldrb	r7, [r0, r7]
 8004a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a6c:	4637      	mov	r7, r6
 8004a6e:	42bb      	cmp	r3, r7
 8004a70:	460e      	mov	r6, r1
 8004a72:	d9f4      	bls.n	8004a5e <_printf_i+0x116>
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d10b      	bne.n	8004a90 <_printf_i+0x148>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	07de      	lsls	r6, r3, #31
 8004a7c:	d508      	bpl.n	8004a90 <_printf_i+0x148>
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	6861      	ldr	r1, [r4, #4]
 8004a82:	4299      	cmp	r1, r3
 8004a84:	bfde      	ittt	le
 8004a86:	2330      	movle	r3, #48	; 0x30
 8004a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a90:	1b52      	subs	r2, r2, r5
 8004a92:	6122      	str	r2, [r4, #16]
 8004a94:	f8cd a000 	str.w	sl, [sp]
 8004a98:	464b      	mov	r3, r9
 8004a9a:	aa03      	add	r2, sp, #12
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	f7ff fee4 	bl	800486c <_printf_common>
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d14a      	bne.n	8004b3e <_printf_i+0x1f6>
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	b004      	add	sp, #16
 8004aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	f043 0320 	orr.w	r3, r3, #32
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	4833      	ldr	r0, [pc, #204]	; (8004b88 <_printf_i+0x240>)
 8004abc:	2778      	movs	r7, #120	; 0x78
 8004abe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	6829      	ldr	r1, [r5, #0]
 8004ac6:	061f      	lsls	r7, r3, #24
 8004ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004acc:	d402      	bmi.n	8004ad4 <_printf_i+0x18c>
 8004ace:	065f      	lsls	r7, r3, #25
 8004ad0:	bf48      	it	mi
 8004ad2:	b2b6      	uxthmi	r6, r6
 8004ad4:	07df      	lsls	r7, r3, #31
 8004ad6:	bf48      	it	mi
 8004ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8004adc:	6029      	str	r1, [r5, #0]
 8004ade:	bf48      	it	mi
 8004ae0:	6023      	strmi	r3, [r4, #0]
 8004ae2:	b91e      	cbnz	r6, 8004aec <_printf_i+0x1a4>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	f023 0320 	bic.w	r3, r3, #32
 8004aea:	6023      	str	r3, [r4, #0]
 8004aec:	2310      	movs	r3, #16
 8004aee:	e7a7      	b.n	8004a40 <_printf_i+0xf8>
 8004af0:	4824      	ldr	r0, [pc, #144]	; (8004b84 <_printf_i+0x23c>)
 8004af2:	e7e4      	b.n	8004abe <_printf_i+0x176>
 8004af4:	4615      	mov	r5, r2
 8004af6:	e7bd      	b.n	8004a74 <_printf_i+0x12c>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	6826      	ldr	r6, [r4, #0]
 8004afc:	6961      	ldr	r1, [r4, #20]
 8004afe:	1d18      	adds	r0, r3, #4
 8004b00:	6028      	str	r0, [r5, #0]
 8004b02:	0635      	lsls	r5, r6, #24
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	d501      	bpl.n	8004b0c <_printf_i+0x1c4>
 8004b08:	6019      	str	r1, [r3, #0]
 8004b0a:	e002      	b.n	8004b12 <_printf_i+0x1ca>
 8004b0c:	0670      	lsls	r0, r6, #25
 8004b0e:	d5fb      	bpl.n	8004b08 <_printf_i+0x1c0>
 8004b10:	8019      	strh	r1, [r3, #0]
 8004b12:	2300      	movs	r3, #0
 8004b14:	6123      	str	r3, [r4, #16]
 8004b16:	4615      	mov	r5, r2
 8004b18:	e7bc      	b.n	8004a94 <_printf_i+0x14c>
 8004b1a:	682b      	ldr	r3, [r5, #0]
 8004b1c:	1d1a      	adds	r2, r3, #4
 8004b1e:	602a      	str	r2, [r5, #0]
 8004b20:	681d      	ldr	r5, [r3, #0]
 8004b22:	6862      	ldr	r2, [r4, #4]
 8004b24:	2100      	movs	r1, #0
 8004b26:	4628      	mov	r0, r5
 8004b28:	f7fb fb72 	bl	8000210 <memchr>
 8004b2c:	b108      	cbz	r0, 8004b32 <_printf_i+0x1ea>
 8004b2e:	1b40      	subs	r0, r0, r5
 8004b30:	6060      	str	r0, [r4, #4]
 8004b32:	6863      	ldr	r3, [r4, #4]
 8004b34:	6123      	str	r3, [r4, #16]
 8004b36:	2300      	movs	r3, #0
 8004b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b3c:	e7aa      	b.n	8004a94 <_printf_i+0x14c>
 8004b3e:	6923      	ldr	r3, [r4, #16]
 8004b40:	462a      	mov	r2, r5
 8004b42:	4649      	mov	r1, r9
 8004b44:	4640      	mov	r0, r8
 8004b46:	47d0      	blx	sl
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d0ad      	beq.n	8004aa8 <_printf_i+0x160>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	079b      	lsls	r3, r3, #30
 8004b50:	d413      	bmi.n	8004b7a <_printf_i+0x232>
 8004b52:	68e0      	ldr	r0, [r4, #12]
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	4298      	cmp	r0, r3
 8004b58:	bfb8      	it	lt
 8004b5a:	4618      	movlt	r0, r3
 8004b5c:	e7a6      	b.n	8004aac <_printf_i+0x164>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	4632      	mov	r2, r6
 8004b62:	4649      	mov	r1, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	47d0      	blx	sl
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d09d      	beq.n	8004aa8 <_printf_i+0x160>
 8004b6c:	3501      	adds	r5, #1
 8004b6e:	68e3      	ldr	r3, [r4, #12]
 8004b70:	9903      	ldr	r1, [sp, #12]
 8004b72:	1a5b      	subs	r3, r3, r1
 8004b74:	42ab      	cmp	r3, r5
 8004b76:	dcf2      	bgt.n	8004b5e <_printf_i+0x216>
 8004b78:	e7eb      	b.n	8004b52 <_printf_i+0x20a>
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	f104 0619 	add.w	r6, r4, #25
 8004b80:	e7f5      	b.n	8004b6e <_printf_i+0x226>
 8004b82:	bf00      	nop
 8004b84:	08004ca5 	.word	0x08004ca5
 8004b88:	08004cb6 	.word	0x08004cb6

08004b8c <memmove>:
 8004b8c:	4288      	cmp	r0, r1
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	eb01 0402 	add.w	r4, r1, r2
 8004b94:	d902      	bls.n	8004b9c <memmove+0x10>
 8004b96:	4284      	cmp	r4, r0
 8004b98:	4623      	mov	r3, r4
 8004b9a:	d807      	bhi.n	8004bac <memmove+0x20>
 8004b9c:	1e43      	subs	r3, r0, #1
 8004b9e:	42a1      	cmp	r1, r4
 8004ba0:	d008      	beq.n	8004bb4 <memmove+0x28>
 8004ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004baa:	e7f8      	b.n	8004b9e <memmove+0x12>
 8004bac:	4402      	add	r2, r0
 8004bae:	4601      	mov	r1, r0
 8004bb0:	428a      	cmp	r2, r1
 8004bb2:	d100      	bne.n	8004bb6 <memmove+0x2a>
 8004bb4:	bd10      	pop	{r4, pc}
 8004bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bbe:	e7f7      	b.n	8004bb0 <memmove+0x24>

08004bc0 <_sbrk_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4d06      	ldr	r5, [pc, #24]	; (8004bdc <_sbrk_r+0x1c>)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	f7fc fc44 	bl	8001458 <_sbrk>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d102      	bne.n	8004bda <_sbrk_r+0x1a>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	b103      	cbz	r3, 8004bda <_sbrk_r+0x1a>
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	200003cc 	.word	0x200003cc

08004be0 <_realloc_r>:
 8004be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be4:	4680      	mov	r8, r0
 8004be6:	4614      	mov	r4, r2
 8004be8:	460e      	mov	r6, r1
 8004bea:	b921      	cbnz	r1, 8004bf6 <_realloc_r+0x16>
 8004bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	f7ff bc57 	b.w	80044a4 <_malloc_r>
 8004bf6:	b92a      	cbnz	r2, 8004c04 <_realloc_r+0x24>
 8004bf8:	f7ff fbe8 	bl	80043cc <_free_r>
 8004bfc:	4625      	mov	r5, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c04:	f000 f81b 	bl	8004c3e <_malloc_usable_size_r>
 8004c08:	4284      	cmp	r4, r0
 8004c0a:	4607      	mov	r7, r0
 8004c0c:	d802      	bhi.n	8004c14 <_realloc_r+0x34>
 8004c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c12:	d812      	bhi.n	8004c3a <_realloc_r+0x5a>
 8004c14:	4621      	mov	r1, r4
 8004c16:	4640      	mov	r0, r8
 8004c18:	f7ff fc44 	bl	80044a4 <_malloc_r>
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d0ed      	beq.n	8004bfe <_realloc_r+0x1e>
 8004c22:	42bc      	cmp	r4, r7
 8004c24:	4622      	mov	r2, r4
 8004c26:	4631      	mov	r1, r6
 8004c28:	bf28      	it	cs
 8004c2a:	463a      	movcs	r2, r7
 8004c2c:	f7ff fbc0 	bl	80043b0 <memcpy>
 8004c30:	4631      	mov	r1, r6
 8004c32:	4640      	mov	r0, r8
 8004c34:	f7ff fbca 	bl	80043cc <_free_r>
 8004c38:	e7e1      	b.n	8004bfe <_realloc_r+0x1e>
 8004c3a:	4635      	mov	r5, r6
 8004c3c:	e7df      	b.n	8004bfe <_realloc_r+0x1e>

08004c3e <_malloc_usable_size_r>:
 8004c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c42:	1f18      	subs	r0, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bfbc      	itt	lt
 8004c48:	580b      	ldrlt	r3, [r1, r0]
 8004c4a:	18c0      	addlt	r0, r0, r3
 8004c4c:	4770      	bx	lr
	...

08004c50 <_init>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

08004c5c <_fini>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr
