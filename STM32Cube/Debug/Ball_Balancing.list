
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc4  08006bc4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bcc  08006bcc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bcc  08006bcc  00016bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006bd4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000088  08006c5c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08006c5c  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a62  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a8c  00000000  00000000  00032b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  000355f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf2  00000000  00000000  00036558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278de  00000000  00000000  0003714a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fa4  00000000  00000000  0005ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2e2e  00000000  00000000  000729cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042ec  00000000  00000000  001657fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00169ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000088 	.word	0x20000088
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006a90 	.word	0x08006a90

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000008c 	.word	0x2000008c
 8000204:	08006a90 	.word	0x08006a90

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b970 	b.w	8000b6c <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9e08      	ldr	r6, [sp, #32]
 80008aa:	460d      	mov	r5, r1
 80008ac:	4604      	mov	r4, r0
 80008ae:	460f      	mov	r7, r1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d14a      	bne.n	800094a <__udivmoddi4+0xa6>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4694      	mov	ip, r2
 80008b8:	d965      	bls.n	8000986 <__udivmoddi4+0xe2>
 80008ba:	fab2 f382 	clz	r3, r2
 80008be:	b143      	cbz	r3, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008c4:	f1c3 0220 	rsb	r2, r3, #32
 80008c8:	409f      	lsls	r7, r3
 80008ca:	fa20 f202 	lsr.w	r2, r0, r2
 80008ce:	4317      	orrs	r7, r2
 80008d0:	409c      	lsls	r4, r3
 80008d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008d6:	fa1f f58c 	uxth.w	r5, ip
 80008da:	fbb7 f1fe 	udiv	r1, r7, lr
 80008de:	0c22      	lsrs	r2, r4, #16
 80008e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008e8:	fb01 f005 	mul.w	r0, r1, r5
 80008ec:	4290      	cmp	r0, r2
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x62>
 80008f0:	eb1c 0202 	adds.w	r2, ip, r2
 80008f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008f8:	f080 811c 	bcs.w	8000b34 <__udivmoddi4+0x290>
 80008fc:	4290      	cmp	r0, r2
 80008fe:	f240 8119 	bls.w	8000b34 <__udivmoddi4+0x290>
 8000902:	3902      	subs	r1, #2
 8000904:	4462      	add	r2, ip
 8000906:	1a12      	subs	r2, r2, r0
 8000908:	b2a4      	uxth	r4, r4
 800090a:	fbb2 f0fe 	udiv	r0, r2, lr
 800090e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000912:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000916:	fb00 f505 	mul.w	r5, r0, r5
 800091a:	42a5      	cmp	r5, r4
 800091c:	d90a      	bls.n	8000934 <__udivmoddi4+0x90>
 800091e:	eb1c 0404 	adds.w	r4, ip, r4
 8000922:	f100 32ff 	add.w	r2, r0, #4294967295
 8000926:	f080 8107 	bcs.w	8000b38 <__udivmoddi4+0x294>
 800092a:	42a5      	cmp	r5, r4
 800092c:	f240 8104 	bls.w	8000b38 <__udivmoddi4+0x294>
 8000930:	4464      	add	r4, ip
 8000932:	3802      	subs	r0, #2
 8000934:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000938:	1b64      	subs	r4, r4, r5
 800093a:	2100      	movs	r1, #0
 800093c:	b11e      	cbz	r6, 8000946 <__udivmoddi4+0xa2>
 800093e:	40dc      	lsrs	r4, r3
 8000940:	2300      	movs	r3, #0
 8000942:	e9c6 4300 	strd	r4, r3, [r6]
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	428b      	cmp	r3, r1
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0xbc>
 800094e:	2e00      	cmp	r6, #0
 8000950:	f000 80ed 	beq.w	8000b2e <__udivmoddi4+0x28a>
 8000954:	2100      	movs	r1, #0
 8000956:	e9c6 0500 	strd	r0, r5, [r6]
 800095a:	4608      	mov	r0, r1
 800095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000960:	fab3 f183 	clz	r1, r3
 8000964:	2900      	cmp	r1, #0
 8000966:	d149      	bne.n	80009fc <__udivmoddi4+0x158>
 8000968:	42ab      	cmp	r3, r5
 800096a:	d302      	bcc.n	8000972 <__udivmoddi4+0xce>
 800096c:	4282      	cmp	r2, r0
 800096e:	f200 80f8 	bhi.w	8000b62 <__udivmoddi4+0x2be>
 8000972:	1a84      	subs	r4, r0, r2
 8000974:	eb65 0203 	sbc.w	r2, r5, r3
 8000978:	2001      	movs	r0, #1
 800097a:	4617      	mov	r7, r2
 800097c:	2e00      	cmp	r6, #0
 800097e:	d0e2      	beq.n	8000946 <__udivmoddi4+0xa2>
 8000980:	e9c6 4700 	strd	r4, r7, [r6]
 8000984:	e7df      	b.n	8000946 <__udivmoddi4+0xa2>
 8000986:	b902      	cbnz	r2, 800098a <__udivmoddi4+0xe6>
 8000988:	deff      	udf	#255	; 0xff
 800098a:	fab2 f382 	clz	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8090 	bne.w	8000ab4 <__udivmoddi4+0x210>
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2101      	movs	r1, #1
 80009a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009a4:	fb07 2015 	mls	r0, r7, r5, r2
 80009a8:	0c22      	lsrs	r2, r4, #16
 80009aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ae:	fb0e f005 	mul.w	r0, lr, r5
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x124>
 80009b6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x122>
 80009c0:	4290      	cmp	r0, r2
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2b8>
 80009c6:	4645      	mov	r5, r8
 80009c8:	1a12      	subs	r2, r2, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d0:	fb07 2210 	mls	r2, r7, r0, r2
 80009d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x14e>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x14c>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2c2>
 80009f0:	4610      	mov	r0, r2
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009fa:	e79f      	b.n	800093c <__udivmoddi4+0x98>
 80009fc:	f1c1 0720 	rsb	r7, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a12:	40fd      	lsrs	r5, r7
 8000a14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a1e:	fa1f fe8c 	uxth.w	lr, ip
 8000a22:	fb09 5518 	mls	r5, r9, r8, r5
 8000a26:	0c1c      	lsrs	r4, r3, #16
 8000a28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	fa02 f201 	lsl.w	r2, r2, r1
 8000a36:	fa00 f001 	lsl.w	r0, r0, r1
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b0>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2b4>
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2b4>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4464      	add	r4, ip
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	b29d      	uxth	r5, r3
 8000a58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1da>
 8000a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2ac>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2ac>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4464      	add	r4, ip
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fba3 9502 	umull	r9, r5, r3, r2
 8000a86:	eba4 040e 	sub.w	r4, r4, lr
 8000a8a:	42ac      	cmp	r4, r5
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46ae      	mov	lr, r5
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x29c>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x298>
 8000a94:	b156      	cbz	r6, 8000aac <__udivmoddi4+0x208>
 8000a96:	ebb0 0208 	subs.w	r2, r0, r8
 8000a9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000aa2:	40ca      	lsrs	r2, r1
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	e9c6 7400 	strd	r7, r4, [r6]
 8000aac:	4618      	mov	r0, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	f1c3 0120 	rsb	r1, r3, #32
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ac4:	409d      	lsls	r5, r3
 8000ac6:	432a      	orrs	r2, r5
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ad8:	0c11      	lsrs	r1, r2, #16
 8000ada:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ade:	fb00 f50e 	mul.w	r5, r0, lr
 8000ae2:	428d      	cmp	r5, r1
 8000ae4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x258>
 8000aea:	eb1c 0101 	adds.w	r1, ip, r1
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000af4:	428d      	cmp	r5, r1
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4461      	add	r1, ip
 8000afc:	1b49      	subs	r1, r1, r5
 8000afe:	b292      	uxth	r2, r2
 8000b00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b04:	fb07 1115 	mls	r1, r7, r5, r1
 8000b08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b10:	4291      	cmp	r1, r2
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x282>
 8000b14:	eb1c 0202 	adds.w	r2, ip, r2
 8000b18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000b22:	3d02      	subs	r5, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a52      	subs	r2, r2, r1
 8000b28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0xfc>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4630      	mov	r0, r6
 8000b32:	e708      	b.n	8000946 <__udivmoddi4+0xa2>
 8000b34:	4639      	mov	r1, r7
 8000b36:	e6e6      	b.n	8000906 <__udivmoddi4+0x62>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	e6fb      	b.n	8000934 <__udivmoddi4+0x90>
 8000b3c:	4548      	cmp	r0, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f0>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f0>
 8000b4c:	4645      	mov	r5, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x282>
 8000b50:	462b      	mov	r3, r5
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1da>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x258>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b0>
 8000b5c:	3d02      	subs	r5, #2
 8000b5e:	4462      	add	r2, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x124>
 8000b62:	4608      	mov	r0, r1
 8000b64:	e70a      	b.n	800097c <__udivmoddi4+0xd8>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x14e>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <PID>:
 double kp = 2;
 double ki = 2;
 double kd = 9000;

void PID(SERVO_Handle_TypeDef* servo, int average_value , int setP)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	; 0x40
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]

    double setPP = setP;
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fdbf 	bl	8000700 <__aeabi_i2d>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	static double priError = 0;
	static double toError = 0;
	float dis = average_value;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b94:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float error = setPP - dis;
 8000b98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b9a:	f7ff fdc3 	bl	8000724 <__aeabi_f2d>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000ba6:	f7ff fc5d 	bl	8000464 <__aeabi_dsub>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	4610      	mov	r0, r2
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f7ff fe0f 	bl	80007d4 <__aeabi_d2f>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
	//calculating PID values

	double Pvalue = error * kp;
 8000bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bbc:	f7ff fdb2 	bl	8000724 <__aeabi_f2d>
 8000bc0:	4b4d      	ldr	r3, [pc, #308]	; (8000cf8 <PID+0x188>)
 8000bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc6:	f7ff fb1f 	bl	8000208 <__aeabi_dmul>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Ivalue = ki * (error * ki);
 8000bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bd4:	f7ff fda6 	bl	8000724 <__aeabi_f2d>
 8000bd8:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <PID+0x18c>)
 8000bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bde:	f7ff fb13 	bl	8000208 <__aeabi_dmul>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	4610      	mov	r0, r2
 8000be8:	4619      	mov	r1, r3
 8000bea:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <PID+0x18c>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fb0a 	bl	8000208 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dvalue = (error - priError) * kd;
 8000bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bfe:	f7ff fd91 	bl	8000724 <__aeabi_f2d>
 8000c02:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <PID+0x190>)
 8000c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c08:	f7ff fc2c 	bl	8000464 <__aeabi_dsub>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	4610      	mov	r0, r2
 8000c12:	4619      	mov	r1, r3
 8000c14:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <PID+0x194>)
 8000c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1a:	f7ff faf5 	bl	8000208 <__aeabi_dmul>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	460b      	mov	r3, r1
 8000c22:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double PIDvalue = Pvalue + Dvalue + Ivalue;
 8000c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000c2e:	f7ff fc1b 	bl	8000468 <__adddf3>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000c3a:	f7ff fc15 	bl	8000468 <__adddf3>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//Ivalue = PIDvalue + ki*error;



	if (-2 < error && error < 2) {
 8000c46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c4a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c56:	dd20      	ble.n	8000c9a <PID+0x12a>
 8000c58:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000c5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c68:	d517      	bpl.n	8000c9a <PID+0x12a>
	    start_t = clock();
 8000c6a:	f005 fe7d 	bl	8006968 <clock>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <PID+0x198>)
 8000c72:	6013      	str	r3, [r2, #0]
	    Ivalue += ki * error;
 8000c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c76:	f7ff fd55 	bl	8000724 <__aeabi_f2d>
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <PID+0x18c>)
 8000c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c80:	f7ff fac2 	bl	8000208 <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000c8c:	f7ff fbec 	bl	8000468 <__adddf3>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000c98:	e005      	b.n	8000ca6 <PID+0x136>

	    // Limit the integral term to prevent windup

	} else {
	    Ivalue = 0;
 8000c9a:	f04f 0200 	mov.w	r2, #0
 8000c9e:	f04f 0300 	mov.w	r3, #0
 8000ca2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}
	priError = error;//previous error (DValue)
 8000ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ca8:	f7ff fd3c 	bl	8000724 <__aeabi_f2d>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4913      	ldr	r1, [pc, #76]	; (8000d00 <PID+0x190>)
 8000cb2:	e9c1 2300 	strd	r2, r3, [r1]
	toError += error;//total error{IValue}
 8000cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cb8:	f7ff fd34 	bl	8000724 <__aeabi_f2d>
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <PID+0x19c>)
 8000cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc2:	f7ff fbd1 	bl	8000468 <__adddf3>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4910      	ldr	r1, [pc, #64]	; (8000d0c <PID+0x19c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]
	SERVO_WritePosition(servo, PIDvalue);
 8000cd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cd4:	f7ff fd7e 	bl	80007d4 <__aeabi_d2f>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	ee00 3a10 	vmov	s0, r3
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f000 f82c 	bl	8000d3c <SERVO_WritePosition>
	end_t = clock();
 8000ce4:	f005 fe40 	bl	8006968 <clock>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <PID+0x1a0>)
 8000cec:	6013      	str	r3, [r2, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	3740      	adds	r7, #64	; 0x40
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200000b0 	.word	0x200000b0
 8000d04:	20000010 	.word	0x20000010
 8000d08:	200000a4 	.word	0x200000a4
 8000d0c:	200000b8 	.word	0x200000b8
 8000d10:	200000a8 	.word	0x200000a8

08000d14 <SERVO_Init>:
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 60.0f);
 8000d1c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000d38 <SERVO_Init+0x24>
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 f80b 	bl	8000d3c <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f911 	bl	8000f50 <PWM_Init>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	42700000 	.word	0x42700000

08000d3c <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 20.0f, 80.0f);
 8000d48:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000da4 <SERVO_WritePosition+0x68>
 8000d4c:	ed97 0a00 	vldr	s0, [r7]
 8000d50:	f005 fe67 	bl	8006a22 <fminf>
 8000d54:	eef0 7a40 	vmov.f32	s15, s0
 8000d58:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8000d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d60:	f005 fe44 	bl	80069ec <fmaxf>
 8000d64:	eef0 7a40 	vmov.f32	s15, s0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d74:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000da8 <SERVO_WritePosition+0x6c>
 8000d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d84:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d8c:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f8f2 	bl	8000f80 <PWM_WriteDuty>
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	42a00000 	.word	0x42a00000
 8000da8:	43340000 	.word	0x43340000

08000dac <hc_sr04_init>:
/* Public variables ----------------------------------------------------------*/

/*Private functions------------------------------------------------*/

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 ff26 	bl	8003c24 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4610      	mov	r0, r2
 8000de4:	f002 fdc2 	bl	800396c <HAL_TIM_PWM_Start>
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <hc_sr04_convert_us_to_cm>:

float hc_sr04_convert_us_to_cm(float distance_us)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8000dfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dfe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e18 <hc_sr04_convert_us_to_cm+0x28>
 8000e02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e06:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	42680000 	.word	0x42680000

08000e1c <position>:
float position(float dis1, float dis2, float pos)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e26:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e2a:	ed87 1a01 	vstr	s2, [r7, #4]
 pos = 0;
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
if (dis1<29){
 8000e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e38:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	d502      	bpl.n	8000e4c <position+0x30>
    pos = dis1;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e070      	b.n	8000f2e <position+0x112>
}
else if(dis1 >29 )
 8000e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e50:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5c:	dd08      	ble.n	8000e70 <position+0x54>
{
    pos = 60- dis2;
 8000e5e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000f44 <position+0x128>
 8000e62:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e6a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e6e:	e05e      	b.n	8000f2e <position+0x112>
}
else if (dis1>= 29 && dis1 <= 30 && dis2 >= 29 && dis2 <= 30 && dis1>dis2){
 8000e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e74:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	db26      	blt.n	8000ed0 <position+0xb4>
 8000e82:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e86:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e92:	d81d      	bhi.n	8000ed0 <position+0xb4>
 8000e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e98:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea4:	db14      	blt.n	8000ed0 <position+0xb4>
 8000ea6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eaa:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb6:	d80b      	bhi.n	8000ed0 <position+0xb4>
 8000eb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec8:	dd02      	ble.n	8000ed0 <position+0xb4>
    pos = 26;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <position+0x12c>)
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	e02e      	b.n	8000f2e <position+0x112>
}
else if(dis1>= 29 && dis1 <= 30 && dis2 >= 29 && dis2 <= 30 && dis1<dis2){
 8000ed0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed4:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee0:	db25      	blt.n	8000f2e <position+0x112>
 8000ee2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ee6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	d81c      	bhi.n	8000f2e <position+0x112>
 8000ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ef8:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	db13      	blt.n	8000f2e <position+0x112>
 8000f06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f0a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	d80a      	bhi.n	8000f2e <position+0x112>
 8000f18:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f28:	d501      	bpl.n	8000f2e <position+0x112>
	pos = 34;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <position+0x130>)
 8000f2c:	607b      	str	r3, [r7, #4]
}
return pos;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	ee07 3a90 	vmov	s15, r3
}
 8000f34:	eeb0 0a67 	vmov.f32	s0, s15
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	42700000 	.word	0x42700000
 8000f48:	41d00000 	.word	0x41d00000
 8000f4c:	42080000 	.word	0x42080000

08000f50 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f80c 	bl	8000f80 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4610      	mov	r0, r2
 8000f74:	f002 fcfa 	bl	800396c <HAL_TIM_PWM_Start>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8000f8c:	edd7 7a00 	vldr	s15, [r7]
 8000f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f98:	d503      	bpl.n	8000fa2 <PWM_WriteDuty+0x22>
    duty = 0.0;
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	e00a      	b.n	8000fb8 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8000fa2:	edd7 7a00 	vldr	s15, [r7]
 8000fa6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001064 <PWM_WriteDuty+0xe4>
 8000faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	dd01      	ble.n	8000fb8 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <PWM_WriteDuty+0xe8>)
 8000fb6:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fd0:	edd7 7a00 	vldr	s15, [r7]
 8000fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001064 <PWM_WriteDuty+0xe4>
 8000fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe4:	ee17 3a90 	vmov	r3, s15
 8000fe8:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <PWM_WriteDuty+0x7e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ffc:	e02c      	b.n	8001058 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b04      	cmp	r3, #4
 8001004:	d105      	bne.n	8001012 <PWM_WriteDuty+0x92>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001010:	e022      	b.n	8001058 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b08      	cmp	r3, #8
 8001018:	d105      	bne.n	8001026 <PWM_WriteDuty+0xa6>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001024:	e018      	b.n	8001058 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b0c      	cmp	r3, #12
 800102c:	d105      	bne.n	800103a <PWM_WriteDuty+0xba>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001038:	e00e      	b.n	8001058 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b10      	cmp	r3, #16
 8001040:	d105      	bne.n	800104e <PWM_WriteDuty+0xce>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800104c:	e004      	b.n	8001058 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	42c80000 	.word	0x42c80000
 8001068:	42c80000 	.word	0x42c80000

0800106c <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM9_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]


}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_UART_RxCpltCallback+0x48>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d117      	bne.n	80010c0 <HAL_UART_RxCpltCallback+0x40>
  {
	SERVO_WritePosition(&hservo1, 180 - strtol((char*)tx_buffer, 0, 10));
 8001090:	220a      	movs	r2, #10
 8001092:	2100      	movs	r1, #0
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <HAL_UART_RxCpltCallback+0x4c>)
 8001096:	f005 fc55 	bl	8006944 <strtol>
 800109a:	4603      	mov	r3, r0
 800109c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <HAL_UART_RxCpltCallback+0x50>)
 80010ae:	f7ff fe45 	bl	8000d3c <SERVO_WritePosition>
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 80010b2:	2303      	movs	r3, #3
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <HAL_UART_RxCpltCallback+0x4c>)
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <HAL_UART_RxCpltCallback+0x48>)
 80010bc:	f004 f9b6 	bl	800542c <HAL_UART_Receive_IT>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001f0 	.word	0x200001f0
 80010cc:	200002a8 	.word	0x200002a8
 80010d0:	2000001c 	.word	0x2000001c

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f000 feb9 	bl	8001e4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f846 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 fae0 	bl	80016a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010e4:	f000 faae 	bl	8001644 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80010e8:	f000 f8ae 	bl	8001248 <MX_TIM1_Init>
  MX_TIM9_Init();
 80010ec:	f000 fa48 	bl	8001580 <MX_TIM9_Init>
  MX_TIM2_Init();
 80010f0:	f000 f94e 	bl	8001390 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010f4:	f000 f9a6 	bl	8001444 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start Sensor 1 & 2
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 80010f8:	2308      	movs	r3, #8
 80010fa:	4a11      	ldr	r2, [pc, #68]	; (8001140 <main+0x6c>)
 80010fc:	4911      	ldr	r1, [pc, #68]	; (8001144 <main+0x70>)
 80010fe:	4812      	ldr	r0, [pc, #72]	; (8001148 <main+0x74>)
 8001100:	f7ff fe54 	bl	8000dac <hc_sr04_init>
  hc_sr04_init(&distance_sensor2, &htim3, &htim2, TIM_CHANNEL_3);
 8001104:	2308      	movs	r3, #8
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <main+0x6c>)
 8001108:	4910      	ldr	r1, [pc, #64]	; (800114c <main+0x78>)
 800110a:	4811      	ldr	r0, [pc, #68]	; (8001150 <main+0x7c>)
 800110c:	f7ff fe4e 	bl	8000dac <hc_sr04_init>

  SERVO_Init(&hservo1);
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <main+0x80>)
 8001112:	f7ff fdff 	bl	8000d14 <SERVO_Init>
  SERVO_WritePosition(&hservo1, 0.0f);
 8001116:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001158 <main+0x84>
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <main+0x80>)
 800111c:	f7ff fe0e 	bl	8000d3c <SERVO_WritePosition>
 HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8001120:	2303      	movs	r3, #3
 8001122:	b29b      	uxth	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <main+0x88>)
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <main+0x8c>)
 800112a:	f004 f97f 	bl	800542c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    PID(&hservo1,average_distance,setP);
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <main+0x90>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <main+0x94>)
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <main+0x80>)
 800113a:	f7ff fd19 	bl	8000b70 <PID>
 800113e:	e7f6      	b.n	800112e <main+0x5a>
 8001140:	2000010c 	.word	0x2000010c
 8001144:	200000c0 	.word	0x200000c0
 8001148:	20000288 	.word	0x20000288
 800114c:	20000158 	.word	0x20000158
 8001150:	20000298 	.word	0x20000298
 8001154:	2000001c 	.word	0x2000001c
 8001158:	00000000 	.word	0x00000000
 800115c:	200002a8 	.word	0x200002a8
 8001160:	200001f0 	.word	0x200001f0
 8001164:	20000280 	.word	0x20000280
 8001168:	20000018 	.word	0x20000018

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b094      	sub	sp, #80	; 0x50
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	2230      	movs	r2, #48	; 0x30
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f005 fbec 	bl	8006958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001190:	f001 fa24 	bl	80025dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <SystemClock_Config+0xd4>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a29      	ldr	r2, [pc, #164]	; (8001240 <SystemClock_Config+0xd4>)
 800119a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <SystemClock_Config+0xd4>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <SystemClock_Config+0xd8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a24      	ldr	r2, [pc, #144]	; (8001244 <SystemClock_Config+0xd8>)
 80011b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <SystemClock_Config+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d8:	2304      	movs	r3, #4
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011dc:	23d8      	movs	r3, #216	; 0xd8
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011e4:	2309      	movs	r3, #9
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fa55 	bl	800269c <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80011f8:	f000 fbf4 	bl	80019e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011fc:	f001 f9fe 	bl	80025fc <HAL_PWREx_EnableOverDrive>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001206:	f000 fbed 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2302      	movs	r3, #2
 8001210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001216:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800121a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800121c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001220:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2107      	movs	r1, #7
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fcdb 	bl	8002be4 <HAL_RCC_ClockConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001234:	f000 fbd6 	bl	80019e4 <Error_Handler>
  }
}
 8001238:	bf00      	nop
 800123a:	3750      	adds	r7, #80	; 0x50
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b090      	sub	sp, #64	; 0x40
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <MX_TIM1_Init+0x140>)
 8001286:	4a41      	ldr	r2, [pc, #260]	; (800138c <MX_TIM1_Init+0x144>)
 8001288:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 800128a:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <MX_TIM1_Init+0x140>)
 800128c:	226b      	movs	r2, #107	; 0x6b
 800128e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <MX_TIM1_Init+0x140>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <MX_TIM1_Init+0x140>)
 8001298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <MX_TIM1_Init+0x140>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <MX_TIM1_Init+0x140>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <MX_TIM1_Init+0x140>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012b0:	4835      	ldr	r0, [pc, #212]	; (8001388 <MX_TIM1_Init+0x140>)
 80012b2:	f002 faad 	bl	8003810 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80012bc:	f000 fb92 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ca:	4619      	mov	r1, r3
 80012cc:	482e      	ldr	r0, [pc, #184]	; (8001388 <MX_TIM1_Init+0x140>)
 80012ce:	f003 f8c9 	bl	8004464 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012d8:	f000 fb84 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012dc:	482a      	ldr	r0, [pc, #168]	; (8001388 <MX_TIM1_Init+0x140>)
 80012de:	f002 fc3f 	bl	8003b60 <HAL_TIM_IC_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012e8:	f000 fb7c 	bl	80019e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012ec:	2304      	movs	r3, #4
 80012ee:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80012f0:	2350      	movs	r3, #80	; 0x50
 80012f2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4820      	ldr	r0, [pc, #128]	; (8001388 <MX_TIM1_Init+0x140>)
 8001308:	f003 f976 	bl	80045f8 <HAL_TIM_SlaveConfigSynchro>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001312:	f000 fb67 	bl	80019e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800131a:	2301      	movs	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <MX_TIM1_Init+0x140>)
 8001330:	f002 fee7 	bl	8004102 <HAL_TIM_IC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800133a:	f000 fb53 	bl	80019e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800133e:	2302      	movs	r3, #2
 8001340:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001342:	2302      	movs	r3, #2
 8001344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	2204      	movs	r2, #4
 800134c:	4619      	mov	r1, r3
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <MX_TIM1_Init+0x140>)
 8001350:	f002 fed7 	bl	8004102 <HAL_TIM_IC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800135a:	f000 fb43 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM1_Init+0x140>)
 8001370:	f003 ff62 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800137a:	f000 fb33 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3740      	adds	r7, #64	; 0x40
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000c0 	.word	0x200000c0
 800138c:	40010000 	.word	0x40010000

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a2:	463b      	mov	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	615a      	str	r2, [r3, #20]
 80013b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_TIM2_Init+0xac>)
 80013b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_TIM2_Init+0xac>)
 80013be:	226b      	movs	r2, #107	; 0x6b
 80013c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_TIM2_Init+0xac>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_TIM2_Init+0xac>)
 80013ca:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <MX_TIM2_Init+0xb0>)
 80013cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_TIM2_Init+0xac>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_TIM2_Init+0xac>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <MX_TIM2_Init+0xac>)
 80013dc:	f002 fa6f 	bl	80038be <HAL_TIM_PWM_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013e6:	f000 fafd 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <MX_TIM2_Init+0xac>)
 80013fa:	f003 ff1d 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001404:	f000 faee 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001408:	2360      	movs	r3, #96	; 0x60
 800140a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 800140c:	230a      	movs	r3, #10
 800140e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	2208      	movs	r2, #8
 800141c:	4619      	mov	r1, r3
 800141e:	4807      	ldr	r0, [pc, #28]	; (800143c <MX_TIM2_Init+0xac>)
 8001420:	f002 ff0c 	bl	800423c <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800142a:	f000 fadb 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_TIM2_Init+0xac>)
 8001430:	f000 fbba 	bl	8001ba8 <HAL_TIM_MspPostInit>

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000010c 	.word	0x2000010c
 8001440:	00030d3f 	.word	0x00030d3f

08001444 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b090      	sub	sp, #64	; 0x40
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <MX_TIM3_Init+0x134>)
 8001482:	4a3e      	ldr	r2, [pc, #248]	; (800157c <MX_TIM3_Init+0x138>)
 8001484:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8001486:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <MX_TIM3_Init+0x134>)
 8001488:	226b      	movs	r2, #107	; 0x6b
 800148a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <MX_TIM3_Init+0x134>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <MX_TIM3_Init+0x134>)
 8001494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001498:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <MX_TIM3_Init+0x134>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <MX_TIM3_Init+0x134>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a6:	4834      	ldr	r0, [pc, #208]	; (8001578 <MX_TIM3_Init+0x134>)
 80014a8:	f002 f9b2 	bl	8003810 <HAL_TIM_Base_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80014b2:	f000 fa97 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c0:	4619      	mov	r1, r3
 80014c2:	482d      	ldr	r0, [pc, #180]	; (8001578 <MX_TIM3_Init+0x134>)
 80014c4:	f002 ffce 	bl	8004464 <HAL_TIM_ConfigClockSource>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80014ce:	f000 fa89 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014d2:	4829      	ldr	r0, [pc, #164]	; (8001578 <MX_TIM3_Init+0x134>)
 80014d4:	f002 fb44 	bl	8003b60 <HAL_TIM_IC_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014de:	f000 fa81 	bl	80019e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80014e2:	2304      	movs	r3, #4
 80014e4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80014e6:	2350      	movs	r3, #80	; 0x50
 80014e8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	481e      	ldr	r0, [pc, #120]	; (8001578 <MX_TIM3_Init+0x134>)
 80014fe:	f003 f87b 	bl	80045f8 <HAL_TIM_SlaveConfigSynchro>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001508:	f000 fa6c 	bl	80019e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001510:	2301      	movs	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	4814      	ldr	r0, [pc, #80]	; (8001578 <MX_TIM3_Init+0x134>)
 8001526:	f002 fdec 	bl	8004102 <HAL_TIM_IC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001530:	f000 fa58 	bl	80019e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001534:	2302      	movs	r3, #2
 8001536:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2204      	movs	r2, #4
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_TIM3_Init+0x134>)
 8001546:	f002 fddc 	bl	8004102 <HAL_TIM_IC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001550:	f000 fa48 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_TIM3_Init+0x134>)
 8001562:	f003 fe69 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 800156c:	f000 fa3a 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3740      	adds	r7, #64	; 0x40
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000158 	.word	0x20000158
 800157c:	40000400 	.word	0x40000400

08001580 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	; 0x30
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <MX_TIM9_Init+0xbc>)
 80015a8:	4a25      	ldr	r2, [pc, #148]	; (8001640 <MX_TIM9_Init+0xc0>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <MX_TIM9_Init+0xbc>)
 80015ae:	226b      	movs	r2, #107	; 0x6b
 80015b0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_TIM9_Init+0xbc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <MX_TIM9_Init+0xbc>)
 80015ba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80015be:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <MX_TIM9_Init+0xbc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_TIM9_Init+0xbc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80015cc:	481b      	ldr	r0, [pc, #108]	; (800163c <MX_TIM9_Init+0xbc>)
 80015ce:	f002 f91f 	bl	8003810 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80015d8:	f000 fa04 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	4619      	mov	r1, r3
 80015e8:	4814      	ldr	r0, [pc, #80]	; (800163c <MX_TIM9_Init+0xbc>)
 80015ea:	f002 ff3b 	bl	8004464 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80015f4:	f000 f9f6 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <MX_TIM9_Init+0xbc>)
 80015fa:	f002 f960 	bl	80038be <HAL_TIM_PWM_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001604:	f000 f9ee 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001608:	2360      	movs	r3, #96	; 0x60
 800160a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	4619      	mov	r1, r3
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <MX_TIM9_Init+0xbc>)
 8001620:	f002 fe0c 	bl	800423c <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800162a:	f000 f9db 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <MX_TIM9_Init+0xbc>)
 8001630:	f000 faba 	bl	8001ba8 <HAL_TIM_MspPostInit>

}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	; 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200001a4 	.word	0x200001a4
 8001640:	40014000 	.word	0x40014000

08001644 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_USART3_UART_Init+0x58>)
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <MX_USART3_UART_Init+0x5c>)
 800164c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_USART3_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART3_UART_Init+0x58>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART3_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001688:	f003 fe82 	bl	8005390 <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001692:	f000 f9a7 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200001f0 	.word	0x200001f0
 80016a0:	40004800 	.word	0x40004800

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	4b8c      	ldr	r3, [pc, #560]	; (80018ec <MX_GPIO_Init+0x248>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a8b      	ldr	r2, [pc, #556]	; (80018ec <MX_GPIO_Init+0x248>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b89      	ldr	r3, [pc, #548]	; (80018ec <MX_GPIO_Init+0x248>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b86      	ldr	r3, [pc, #536]	; (80018ec <MX_GPIO_Init+0x248>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a85      	ldr	r2, [pc, #532]	; (80018ec <MX_GPIO_Init+0x248>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b83      	ldr	r3, [pc, #524]	; (80018ec <MX_GPIO_Init+0x248>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	4b80      	ldr	r3, [pc, #512]	; (80018ec <MX_GPIO_Init+0x248>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a7f      	ldr	r2, [pc, #508]	; (80018ec <MX_GPIO_Init+0x248>)
 80016f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b7d      	ldr	r3, [pc, #500]	; (80018ec <MX_GPIO_Init+0x248>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b7a      	ldr	r3, [pc, #488]	; (80018ec <MX_GPIO_Init+0x248>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a79      	ldr	r2, [pc, #484]	; (80018ec <MX_GPIO_Init+0x248>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b77      	ldr	r3, [pc, #476]	; (80018ec <MX_GPIO_Init+0x248>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b74      	ldr	r3, [pc, #464]	; (80018ec <MX_GPIO_Init+0x248>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a73      	ldr	r2, [pc, #460]	; (80018ec <MX_GPIO_Init+0x248>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b71      	ldr	r3, [pc, #452]	; (80018ec <MX_GPIO_Init+0x248>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	4b6e      	ldr	r3, [pc, #440]	; (80018ec <MX_GPIO_Init+0x248>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a6d      	ldr	r2, [pc, #436]	; (80018ec <MX_GPIO_Init+0x248>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b6b      	ldr	r3, [pc, #428]	; (80018ec <MX_GPIO_Init+0x248>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800174a:	4b68      	ldr	r3, [pc, #416]	; (80018ec <MX_GPIO_Init+0x248>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a67      	ldr	r2, [pc, #412]	; (80018ec <MX_GPIO_Init+0x248>)
 8001750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b65      	ldr	r3, [pc, #404]	; (80018ec <MX_GPIO_Init+0x248>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	2101      	movs	r1, #1
 8001766:	4862      	ldr	r0, [pc, #392]	; (80018f0 <MX_GPIO_Init+0x24c>)
 8001768:	f000 ff1e 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001772:	4860      	ldr	r0, [pc, #384]	; (80018f4 <MX_GPIO_Init+0x250>)
 8001774:	f000 ff18 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	485e      	ldr	r0, [pc, #376]	; (80018f8 <MX_GPIO_Init+0x254>)
 800177e:	f000 ff13 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001788:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4619      	mov	r1, r3
 8001798:	4855      	ldr	r0, [pc, #340]	; (80018f0 <MX_GPIO_Init+0x24c>)
 800179a:	f000 fd59 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800179e:	2301      	movs	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	484e      	ldr	r0, [pc, #312]	; (80018f0 <MX_GPIO_Init+0x24c>)
 80017b6:	f000 fd4b 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017ba:	2332      	movs	r3, #50	; 0x32
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ca:	230b      	movs	r3, #11
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	4846      	ldr	r0, [pc, #280]	; (80018f0 <MX_GPIO_Init+0x24c>)
 80017d6:	f000 fd3b 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017da:	2386      	movs	r3, #134	; 0x86
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ea:	230b      	movs	r3, #11
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4841      	ldr	r0, [pc, #260]	; (80018fc <MX_GPIO_Init+0x258>)
 80017f6:	f000 fd2b 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fa:	2308      	movs	r3, #8
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	483b      	ldr	r0, [pc, #236]	; (80018fc <MX_GPIO_Init+0x258>)
 800180e:	f000 fd1f 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001812:	f244 0381 	movw	r3, #16513	; 0x4081
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4832      	ldr	r0, [pc, #200]	; (80018f4 <MX_GPIO_Init+0x250>)
 800182c:	f000 fd10 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001842:	230b      	movs	r3, #11
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4829      	ldr	r0, [pc, #164]	; (80018f4 <MX_GPIO_Init+0x250>)
 800184e:	f000 fcff 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001852:	2340      	movs	r3, #64	; 0x40
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	4823      	ldr	r0, [pc, #140]	; (80018f8 <MX_GPIO_Init+0x254>)
 800186a:	f000 fcf1 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	4619      	mov	r1, r3
 8001880:	481d      	ldr	r0, [pc, #116]	; (80018f8 <MX_GPIO_Init+0x254>)
 8001882:	f000 fce5 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001886:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001898:	230a      	movs	r3, #10
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4816      	ldr	r0, [pc, #88]	; (80018fc <MX_GPIO_Init+0x258>)
 80018a4:	f000 fcd4 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	480f      	ldr	r0, [pc, #60]	; (80018fc <MX_GPIO_Init+0x258>)
 80018be:	f000 fcc7 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018d4:	230b      	movs	r3, #11
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MX_GPIO_Init+0x254>)
 80018e0:	f000 fcb6 	bl	8002250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e4:	bf00      	nop
 80018e6:	3730      	adds	r7, #48	; 0x30
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40021800 	.word	0x40021800
 80018fc:	40020000 	.word	0x40020000

08001900 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2c      	ldr	r2, [pc, #176]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d115      	bne.n	800193e <HAL_TIM_IC_CaptureCallback+0x3e>
	{
		uint32_t echo_us;
          // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001912:	2104      	movs	r1, #4
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f002 feb1 	bl	800467c <HAL_TIM_ReadCapturedValue>
 800191a:	60f8      	str	r0, [r7, #12]
		dx_cm = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001926:	eeb0 0a67 	vmov.f32	s0, s15
 800192a:	f7ff fa61 	bl	8000df0 <hc_sr04_convert_us_to_cm>
 800192e:	eef0 7a40 	vmov.f32	s15, s0
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001934:	edc3 7a03 	vstr	s15, [r3, #12]
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800193a:	edc3 7a00 	vstr	s15, [r3]
	}

	if(TIM3 == htim->Instance)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d115      	bne.n	8001974 <HAL_TIM_IC_CaptureCallback+0x74>
	{
		uint32_t echo_us;
        // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001948:	2104      	movs	r1, #4
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f002 fe96 	bl	800467c <HAL_TIM_ReadCapturedValue>
 8001950:	60b8      	str	r0, [r7, #8]
		dx_cm2 = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	f7ff fa46 	bl	8000df0 <hc_sr04_convert_us_to_cm>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800196a:	edc3 7a03 	vstr	s15, [r3, #12]
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001970:	edc3 7a00 	vstr	s15, [r3]
	}

	    // Calculate average distance or perform any other processing
	    average_distance = position(dx_cm, dx_cm2, pos);
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800197c:	ed93 7a00 	vldr	s14, [r3]
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001982:	edd3 6a00 	vldr	s13, [r3]
 8001986:	eeb0 1a66 	vmov.f32	s2, s13
 800198a:	eef0 0a47 	vmov.f32	s1, s14
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	f7ff fa43 	bl	8000e1c <position>
 8001996:	eef0 7a40 	vmov.f32	s15, s0
 800199a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199e:	ee17 2a90 	vmov	r2, s15
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80019a4:	601a      	str	r2, [r3, #0]
	    PID(&hservo1,average_distance,setP);
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <HAL_TIM_IC_CaptureCallback+0xdc>)
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80019b2:	f7ff f8dd 	bl	8000b70 <PID>

	//average_distance = position(dx_cm,dx_cm2,pos);

}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40010000 	.word	0x40010000
 80019c4:	20000288 	.word	0x20000288
 80019c8:	20000278 	.word	0x20000278
 80019cc:	40000400 	.word	0x40000400
 80019d0:	2000027c 	.word	0x2000027c
 80019d4:	20000284 	.word	0x20000284
 80019d8:	20000280 	.word	0x20000280
 80019dc:	20000018 	.word	0x20000018
 80019e0:	2000001c 	.word	0x2000001c

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	e7fe      	b.n	80019ec <Error_Handler+0x8>
	...

080019f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x44>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_MspInit+0x44>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_MspInit+0x44>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_MspInit+0x44>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_MspInit+0x44>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x44>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a3f      	ldr	r2, [pc, #252]	; (8001b54 <HAL_TIM_Base_MspInit+0x11c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d131      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a3e      	ldr	r2, [pc, #248]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	482d      	ldr	r0, [pc, #180]	; (8001b5c <HAL_TIM_Base_MspInit+0x124>)
 8001aa8:	f000 fbd2 	bl	8002250 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	201b      	movs	r0, #27
 8001ab2:	f000 fb04 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ab6:	201b      	movs	r0, #27
 8001ab8:	f000 fb1d 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001abc:	e046      	b.n	8001b4c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <HAL_TIM_Base_MspInit+0x128>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d130      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6313      	str	r3, [r2, #48]	; 0x30
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	4814      	ldr	r0, [pc, #80]	; (8001b64 <HAL_TIM_Base_MspInit+0x12c>)
 8001b14:	f000 fb9c 	bl	8002250 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	201d      	movs	r0, #29
 8001b1e:	f000 face 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b22:	201d      	movs	r0, #29
 8001b24:	f000 fae7 	bl	80020f6 <HAL_NVIC_EnableIRQ>
}
 8001b28:	e010      	b.n	8001b4c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM9)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_TIM_Base_MspInit+0x130>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d10b      	bne.n	8001b4c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_TIM_Base_MspInit+0x120>)
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	3730      	adds	r7, #48	; 0x30
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40014000 	.word	0x40014000

08001b6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7c:	d10b      	bne.n	8001b96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_TIM_PWM_MspInit+0x38>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_TIM_PWM_MspInit+0x38>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_TIM_PWM_MspInit+0x38>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800

08001ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc8:	d11d      	bne.n	8001c06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_TIM_MspPostInit+0xa8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a20      	ldr	r2, [pc, #128]	; (8001c50 <HAL_TIM_MspPostInit+0xa8>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_TIM_MspPostInit+0xa8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4815      	ldr	r0, [pc, #84]	; (8001c54 <HAL_TIM_MspPostInit+0xac>)
 8001c00:	f000 fb26 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001c04:	e020      	b.n	8001c48 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM9)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <HAL_TIM_MspPostInit+0xb0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d11b      	bne.n	8001c48 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_TIM_MspPostInit+0xa8>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <HAL_TIM_MspPostInit+0xa8>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_TIM_MspPostInit+0xa8>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <HAL_TIM_MspPostInit+0xb4>)
 8001c44:	f000 fb04 	bl	8002250 <HAL_GPIO_Init>
}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40014000 	.word	0x40014000
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b0aa      	sub	sp, #168	; 0xa8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	2284      	movs	r2, #132	; 0x84
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 fe69 	bl	8006958 <memset>
  if(huart->Instance==USART3)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <HAL_UART_MspInit+0xc4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d144      	bne.n	8001d1a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 f9c6 	bl	8003030 <HAL_RCCEx_PeriphCLKConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001caa:	f7ff fe9b 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_UART_MspInit+0xc8>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_UART_MspInit+0xc8>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_UART_MspInit+0xc8>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_UART_MspInit+0xc8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_UART_MspInit+0xc8>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_UART_MspInit+0xc8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d02:	4619      	mov	r1, r3
 8001d04:	4809      	ldr	r0, [pc, #36]	; (8001d2c <HAL_UART_MspInit+0xcc>)
 8001d06:	f000 faa3 	bl	8002250 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2027      	movs	r0, #39	; 0x27
 8001d10:	f000 f9d5 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d14:	2027      	movs	r0, #39	; 0x27
 8001d16:	f000 f9ee 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	37a8      	adds	r7, #168	; 0xa8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40004800 	.word	0x40004800
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020c00 	.word	0x40020c00

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <NMI_Handler+0x4>

08001d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <HardFault_Handler+0x4>

08001d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <MemManage_Handler+0x4>

08001d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <BusFault_Handler+0x4>

08001d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <UsageFault_Handler+0x4>

08001d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7c:	f000 f8a4 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <TIM1_CC_IRQHandler+0x10>)
 8001d8a:	f002 f89b 	bl	8003ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200000c0 	.word	0x200000c0

08001d98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM3_IRQHandler+0x10>)
 8001d9e:	f002 f891 	bl	8003ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000158 	.word	0x20000158

08001dac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <USART3_IRQHandler+0x10>)
 8001db2:	f003 fb7f 	bl	80054b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200001f0 	.word	0x200001f0

08001dc0 <_times>:
  errno = ENOENT;
  return -1;
}

int _times(struct tms *buf)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e02:	490e      	ldr	r1, [pc, #56]	; (8001e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e18:	4c0b      	ldr	r4, [pc, #44]	; (8001e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e26:	f7ff ffd7 	bl	8001dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f004 fdbb 	bl	80069a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2e:	f7ff f951 	bl	80010d4 <main>
  bx  lr    
 8001e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001e40:	08006bd4 	.word	0x08006bd4
  ldr r2, =_sbss
 8001e44:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e48:	200003e8 	.word	0x200003e8

08001e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC_IRQHandler>

08001e4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e52:	2003      	movs	r0, #3
 8001e54:	f000 f928 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 f805 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5e:	f7ff fdc7 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f943 	bl	8002112 <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 f90b 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	; (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000002c 	.word	0x2000002c
 8001ec0:	20000034 	.word	0x20000034
 8001ec4:	20000030 	.word	0x20000030

08001ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000034 	.word	0x20000034
 8001eec:	200002ac 	.word	0x200002ac

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	200002ac 	.word	0x200002ac

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <__NVIC_SetPriorityGrouping+0x40>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <__NVIC_SetPriorityGrouping+0x40>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00
 8001f4c:	05fa0000 	.word	0x05fa0000

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	; (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff29 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff3e 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff8e 	bl	8001ffc <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5d 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff31 	bl	8001f6c <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffa2 	bl	8002064 <SysTick_Config>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff feda 	bl	8001ef0 <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d008      	beq.n	800215c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e052      	b.n	8002202 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0216 	bic.w	r2, r2, #22
 800216a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800217a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d103      	bne.n	800218c <HAL_DMA_Abort+0x62>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0208 	bic.w	r2, r2, #8
 800219a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ac:	e013      	b.n	80021d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ae:	f7ff fe9f 	bl	8001ef0 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d90c      	bls.n	80021d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2203      	movs	r2, #3
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e015      	b.n	8002202 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e4      	bne.n	80021ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	223f      	movs	r2, #63	; 0x3f
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d004      	beq.n	8002228 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e00c      	b.n	8002242 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2205      	movs	r2, #5
 800222c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e175      	b.n	800255c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	f040 8164 	bne.w	8002556 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d005      	beq.n	80022a6 <HAL_GPIO_Init+0x56>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d130      	bne.n	8002308 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 0201 	and.w	r2, r3, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b03      	cmp	r3, #3
 8002312:	d017      	beq.n	8002344 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d123      	bne.n	8002398 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80be 	beq.w	8002556 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	4b66      	ldr	r3, [pc, #408]	; (8002574 <HAL_GPIO_Init+0x324>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	4a65      	ldr	r2, [pc, #404]	; (8002574 <HAL_GPIO_Init+0x324>)
 80023e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e4:	6453      	str	r3, [r2, #68]	; 0x44
 80023e6:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_GPIO_Init+0x324>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023f2:	4a61      	ldr	r2, [pc, #388]	; (8002578 <HAL_GPIO_Init+0x328>)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_GPIO_Init+0x32c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d037      	beq.n	800248e <HAL_GPIO_Init+0x23e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a57      	ldr	r2, [pc, #348]	; (8002580 <HAL_GPIO_Init+0x330>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d031      	beq.n	800248a <HAL_GPIO_Init+0x23a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a56      	ldr	r2, [pc, #344]	; (8002584 <HAL_GPIO_Init+0x334>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d02b      	beq.n	8002486 <HAL_GPIO_Init+0x236>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a55      	ldr	r2, [pc, #340]	; (8002588 <HAL_GPIO_Init+0x338>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d025      	beq.n	8002482 <HAL_GPIO_Init+0x232>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a54      	ldr	r2, [pc, #336]	; (800258c <HAL_GPIO_Init+0x33c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <HAL_GPIO_Init+0x22e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a53      	ldr	r2, [pc, #332]	; (8002590 <HAL_GPIO_Init+0x340>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d019      	beq.n	800247a <HAL_GPIO_Init+0x22a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_GPIO_Init+0x344>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0x226>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a51      	ldr	r2, [pc, #324]	; (8002598 <HAL_GPIO_Init+0x348>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00d      	beq.n	8002472 <HAL_GPIO_Init+0x222>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a50      	ldr	r2, [pc, #320]	; (800259c <HAL_GPIO_Init+0x34c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x21e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4f      	ldr	r2, [pc, #316]	; (80025a0 <HAL_GPIO_Init+0x350>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_GPIO_Init+0x21a>
 8002466:	2309      	movs	r3, #9
 8002468:	e012      	b.n	8002490 <HAL_GPIO_Init+0x240>
 800246a:	230a      	movs	r3, #10
 800246c:	e010      	b.n	8002490 <HAL_GPIO_Init+0x240>
 800246e:	2308      	movs	r3, #8
 8002470:	e00e      	b.n	8002490 <HAL_GPIO_Init+0x240>
 8002472:	2307      	movs	r3, #7
 8002474:	e00c      	b.n	8002490 <HAL_GPIO_Init+0x240>
 8002476:	2306      	movs	r3, #6
 8002478:	e00a      	b.n	8002490 <HAL_GPIO_Init+0x240>
 800247a:	2305      	movs	r3, #5
 800247c:	e008      	b.n	8002490 <HAL_GPIO_Init+0x240>
 800247e:	2304      	movs	r3, #4
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x240>
 8002482:	2303      	movs	r3, #3
 8002484:	e004      	b.n	8002490 <HAL_GPIO_Init+0x240>
 8002486:	2302      	movs	r3, #2
 8002488:	e002      	b.n	8002490 <HAL_GPIO_Init+0x240>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_GPIO_Init+0x240>
 800248e:	2300      	movs	r3, #0
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	f002 0203 	and.w	r2, r2, #3
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	4093      	lsls	r3, r2
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024a0:	4935      	ldr	r1, [pc, #212]	; (8002578 <HAL_GPIO_Init+0x328>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_GPIO_Init+0x354>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d2:	4a34      	ldr	r2, [pc, #208]	; (80025a4 <HAL_GPIO_Init+0x354>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_GPIO_Init+0x354>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024fc:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <HAL_GPIO_Init+0x354>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_GPIO_Init+0x354>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002526:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <HAL_GPIO_Init+0x354>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_GPIO_Init+0x354>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <HAL_GPIO_Init+0x354>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	f67f ae86 	bls.w	8002270 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40013800 	.word	0x40013800
 800257c:	40020000 	.word	0x40020000
 8002580:	40020400 	.word	0x40020400
 8002584:	40020800 	.word	0x40020800
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40021400 	.word	0x40021400
 8002594:	40021800 	.word	0x40021800
 8002598:	40021c00 	.word	0x40021c00
 800259c:	40022000 	.word	0x40022000
 80025a0:	40022400 	.word	0x40022400
 80025a4:	40013c00 	.word	0x40013c00

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025c4:	e003      	b.n	80025ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40007000 	.word	0x40007000

080025fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_PWREx_EnableOverDrive+0x98>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_PWREx_EnableOverDrive+0x98>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_PWREx_EnableOverDrive+0x98>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800262a:	f7ff fc61 	bl	8001ef0 <HAL_GetTick>
 800262e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002630:	e009      	b.n	8002646 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002632:	f7ff fc5d 	bl	8001ef0 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002640:	d901      	bls.n	8002646 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e022      	b.n	800268c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002652:	d1ee      	bne.n	8002632 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 800265a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002660:	f7ff fc46 	bl	8001ef0 <HAL_GetTick>
 8002664:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002666:	e009      	b.n	800267c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002668:	f7ff fc42 	bl	8001ef0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002676:	d901      	bls.n	800267c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e007      	b.n	800268c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002688:	d1ee      	bne.n	8002668 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000

0800269c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e291      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8087 	beq.w	80027ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026c0:	4b96      	ldr	r3, [pc, #600]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d00c      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026cc:	4b93      	ldr	r3, [pc, #588]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d112      	bne.n	80026fe <HAL_RCC_OscConfig+0x62>
 80026d8:	4b90      	ldr	r3, [pc, #576]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e4:	d10b      	bne.n	80026fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e6:	4b8d      	ldr	r3, [pc, #564]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d06c      	beq.n	80027cc <HAL_RCC_OscConfig+0x130>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d168      	bne.n	80027cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e26b      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x7a>
 8002708:	4b84      	ldr	r3, [pc, #528]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a83      	ldr	r2, [pc, #524]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e02e      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x9c>
 800271e:	4b7f      	ldr	r3, [pc, #508]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7e      	ldr	r2, [pc, #504]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b7c      	ldr	r3, [pc, #496]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7b      	ldr	r2, [pc, #492]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0xc0>
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b73      	ldr	r3, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a72      	ldr	r2, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 800275c:	4b6f      	ldr	r3, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6e      	ldr	r2, [pc, #440]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b6c      	ldr	r3, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6b      	ldr	r2, [pc, #428]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7ff fbb8 	bl	8001ef0 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7ff fbb4 	bl	8001ef0 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e21f      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b61      	ldr	r3, [pc, #388]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xe8>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7ff fba4 	bl	8001ef0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7ff fba0 	bl	8001ef0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e20b      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	4b57      	ldr	r3, [pc, #348]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x110>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d069      	beq.n	80028ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027da:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11c      	bne.n	800282c <HAL_RCC_OscConfig+0x190>
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x17a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e1df      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	493d      	ldr	r1, [pc, #244]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	e040      	b.n	80028ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d023      	beq.n	800287c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002834:	4b39      	ldr	r3, [pc, #228]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a38      	ldr	r2, [pc, #224]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7ff fb56 	bl	8001ef0 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7ff fb52 	bl	8001ef0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1bd      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4929      	ldr	r1, [pc, #164]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
 800287a:	e018      	b.n	80028ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7ff fb32 	bl	8001ef0 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002890:	f7ff fb2e 	bl	8001ef0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e199      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d038      	beq.n	800292c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d019      	beq.n	80028f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	4a15      	ldr	r2, [pc, #84]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7ff fb0f 	bl	8001ef0 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d6:	f7ff fb0b 	bl	8001ef0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e176      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x23a>
 80028f4:	e01a      	b.n	800292c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7ff faf5 	bl	8001ef0 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290a:	f7ff faf1 	bl	8001ef0 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d903      	bls.n	8002920 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e15c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
 800291c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	4b91      	ldr	r3, [pc, #580]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ee      	bne.n	800290a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a4 	beq.w	8002a82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293a:	4b8b      	ldr	r3, [pc, #556]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a87      	ldr	r2, [pc, #540]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b85      	ldr	r3, [pc, #532]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002962:	4b82      	ldr	r3, [pc, #520]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800296e:	4b7f      	ldr	r3, [pc, #508]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7e      	ldr	r2, [pc, #504]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7ff fab9 	bl	8001ef0 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7ff fab5 	bl	8001ef0 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b64      	cmp	r3, #100	; 0x64
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e120      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002994:	4b75      	ldr	r3, [pc, #468]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x31a>
 80029a8:	4b6f      	ldr	r3, [pc, #444]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a6e      	ldr	r2, [pc, #440]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	e02d      	b.n	8002a12 <HAL_RCC_OscConfig+0x376>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x33c>
 80029be:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a69      	ldr	r2, [pc, #420]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a66      	ldr	r2, [pc, #408]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	e01c      	b.n	8002a12 <HAL_RCC_OscConfig+0x376>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d10c      	bne.n	80029fa <HAL_RCC_OscConfig+0x35e>
 80029e0:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a60      	ldr	r2, [pc, #384]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	4b5e      	ldr	r3, [pc, #376]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a5d      	ldr	r2, [pc, #372]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	e00b      	b.n	8002a12 <HAL_RCC_OscConfig+0x376>
 80029fa:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a5a      	ldr	r2, [pc, #360]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a57      	ldr	r2, [pc, #348]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d015      	beq.n	8002a46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7ff fa69 	bl	8001ef0 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7ff fa65 	bl	8001ef0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0ce      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a38:	4b4b      	ldr	r3, [pc, #300]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ee      	beq.n	8002a22 <HAL_RCC_OscConfig+0x386>
 8002a44:	e014      	b.n	8002a70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7ff fa53 	bl	8001ef0 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7ff fa4f 	bl	8001ef0 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a64:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ee      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d105      	bne.n	8002a82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a76:	4b3c      	ldr	r3, [pc, #240]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a3b      	ldr	r2, [pc, #236]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80a4 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d06b      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d149      	bne.n	8002b34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b31      	ldr	r3, [pc, #196]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a30      	ldr	r2, [pc, #192]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff fa20 	bl	8001ef0 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7ff fa1c 	bl	8001ef0 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e087      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	3b01      	subs	r3, #1
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	4313      	orrs	r3, r2
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002afa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002afe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7ff f9f0 	bl	8001ef0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7ff f9ec 	bl	8001ef0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e057      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x478>
 8002b32:	e04f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7ff f9d6 	bl	8001ef0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7ff f9d2 	bl	8001ef0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e03d      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4ac>
 8002b66:	e035      	b.n	8002bd4 <HAL_RCC_OscConfig+0x538>
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_RCC_OscConfig+0x544>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d028      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d121      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d11a      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ba6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d111      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800

08002be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0d0      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 020f 	bic.w	r2, r3, #15
 8002c12:	4965      	ldr	r1, [pc, #404]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0b8      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c44:	4b59      	ldr	r3, [pc, #356]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a58      	ldr	r2, [pc, #352]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c5c:	4b53      	ldr	r3, [pc, #332]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a52      	ldr	r2, [pc, #328]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b50      	ldr	r3, [pc, #320]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	494d      	ldr	r1, [pc, #308]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d040      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d115      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e07f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e073      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e06b      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b39      	ldr	r3, [pc, #228]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4936      	ldr	r1, [pc, #216]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd8:	f7ff f90a 	bl	8001ef0 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7ff f906 	bl	8001ef0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e053      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d210      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 020f 	bic.w	r2, r3, #15
 8002d1e:	4922      	ldr	r1, [pc, #136]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e032      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4916      	ldr	r1, [pc, #88]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	490e      	ldr	r1, [pc, #56]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d76:	f000 f821 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	490a      	ldr	r1, [pc, #40]	; (8002db0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d88:	5ccb      	ldrb	r3, [r1, r3]
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_RCC_ClockConfig+0x1d4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f866 	bl	8001e68 <HAL_InitTick>

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	08006aa8 	.word	0x08006aa8
 8002db4:	2000002c 	.word	0x2000002c
 8002db8:	20000030 	.word	0x20000030

08002dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc0:	b094      	sub	sp, #80	; 0x50
 8002dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc8:	2300      	movs	r3, #0
 8002dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dcc:	2300      	movs	r3, #0
 8002dce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd4:	4b79      	ldr	r3, [pc, #484]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d00d      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x40>
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	f200 80e1 	bhi.w	8002fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dee:	e0db      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b73      	ldr	r3, [pc, #460]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df4:	e0db      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df6:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002df8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dfa:	e0d8      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dfc:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e06:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e12:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	2200      	movs	r2, #0
 8002e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
 8002e26:	2300      	movs	r3, #0
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e2e:	4622      	mov	r2, r4
 8002e30:	462b      	mov	r3, r5
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	0159      	lsls	r1, r3, #5
 8002e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e40:	0150      	lsls	r0, r2, #5
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4621      	mov	r1, r4
 8002e48:	1a51      	subs	r1, r2, r1
 8002e4a:	6139      	str	r1, [r7, #16]
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e60:	4659      	mov	r1, fp
 8002e62:	018b      	lsls	r3, r1, #6
 8002e64:	4651      	mov	r1, sl
 8002e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e6a:	4651      	mov	r1, sl
 8002e6c:	018a      	lsls	r2, r1, #6
 8002e6e:	4651      	mov	r1, sl
 8002e70:	ebb2 0801 	subs.w	r8, r2, r1
 8002e74:	4659      	mov	r1, fp
 8002e76:	eb63 0901 	sbc.w	r9, r3, r1
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e8e:	4690      	mov	r8, r2
 8002e90:	4699      	mov	r9, r3
 8002e92:	4623      	mov	r3, r4
 8002e94:	eb18 0303 	adds.w	r3, r8, r3
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	462b      	mov	r3, r5
 8002e9c:	eb49 0303 	adc.w	r3, r9, r3
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eae:	4629      	mov	r1, r5
 8002eb0:	024b      	lsls	r3, r1, #9
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eb8:	4621      	mov	r1, r4
 8002eba:	024a      	lsls	r2, r1, #9
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ecc:	f7fd fcd2 	bl	8000874 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed8:	e058      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eda:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	099b      	lsrs	r3, r3, #6
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eea:	623b      	str	r3, [r7, #32]
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	464b      	mov	r3, r9
 8002ef8:	f04f 0000 	mov.w	r0, #0
 8002efc:	f04f 0100 	mov.w	r1, #0
 8002f00:	0159      	lsls	r1, r3, #5
 8002f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f06:	0150      	lsls	r0, r2, #5
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f12:	4649      	mov	r1, r9
 8002f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f30:	eb63 050b 	sbc.w	r5, r3, fp
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	00eb      	lsls	r3, r5, #3
 8002f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f42:	00e2      	lsls	r2, r4, #3
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	4643      	mov	r3, r8
 8002f4a:	18e3      	adds	r3, r4, r3
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	464b      	mov	r3, r9
 8002f50:	eb45 0303 	adc.w	r3, r5, r3
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f62:	4629      	mov	r1, r5
 8002f64:	028b      	lsls	r3, r1, #10
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	028a      	lsls	r2, r1, #10
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f76:	2200      	movs	r2, #0
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	61fa      	str	r2, [r7, #28]
 8002f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f80:	f7fd fc78 	bl	8000874 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	3301      	adds	r3, #1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fa6:	e002      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3750      	adds	r7, #80	; 0x50
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	007a1200 	.word	0x007a1200

08002fc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	2000002c 	.word	0x2000002c

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe4:	f7ff fff0 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0a9b      	lsrs	r3, r3, #10
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	08006ab8 	.word	0x08006ab8

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800300c:	f7ff ffdc 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	0b5b      	lsrs	r3, r3, #13
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4903      	ldr	r1, [pc, #12]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	08006ab8 	.word	0x08006ab8

08003030 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d012      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003058:	4b69      	ldr	r3, [pc, #420]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a68      	ldr	r2, [pc, #416]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003062:	6093      	str	r3, [r2, #8]
 8003064:	4b66      	ldr	r3, [pc, #408]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	4964      	ldr	r1, [pc, #400]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d017      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800308a:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003090:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	4959      	ldr	r1, [pc, #356]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a8:	d101      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80030aa:	2301      	movs	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d017      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030c6:	4b4e      	ldr	r3, [pc, #312]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	494a      	ldr	r1, [pc, #296]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e4:	d101      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003102:	2301      	movs	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 808b 	beq.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003114:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	4a39      	ldr	r2, [pc, #228]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311e:	6413      	str	r3, [r2, #64]	; 0x40
 8003120:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800312c:	4b35      	ldr	r3, [pc, #212]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a34      	ldr	r2, [pc, #208]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fe feda 	bl	8001ef0 <HAL_GetTick>
 800313c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003140:	f7fe fed6 	bl	8001ef0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e357      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003152:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800315e:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d035      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	429a      	cmp	r2, r3
 800317a:	d02e      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003184:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800319e:	4a18      	ldr	r2, [pc, #96]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d114      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fe9e 	bl	8001ef0 <HAL_GetTick>
 80031b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe fe9a 	bl	8001ef0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e319      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ee      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e6:	d111      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031f6:	400b      	ands	r3, r1
 80031f8:	4901      	ldr	r1, [pc, #4]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
 80031fe:	e00b      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003200:	40023800 	.word	0x40023800
 8003204:	40007000 	.word	0x40007000
 8003208:	0ffffcff 	.word	0x0ffffcff
 800320c:	4baa      	ldr	r3, [pc, #680]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4aa9      	ldr	r2, [pc, #676]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003216:	6093      	str	r3, [r2, #8]
 8003218:	4ba7      	ldr	r3, [pc, #668]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003224:	49a4      	ldr	r1, [pc, #656]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003226:	4313      	orrs	r3, r2
 8003228:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003236:	4ba0      	ldr	r3, [pc, #640]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323c:	4a9e      	ldr	r2, [pc, #632]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003242:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003246:	4b9c      	ldr	r3, [pc, #624]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003248:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	4999      	ldr	r1, [pc, #612]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003264:	4b94      	ldr	r3, [pc, #592]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003272:	4991      	ldr	r1, [pc, #580]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003286:	4b8c      	ldr	r3, [pc, #560]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003294:	4988      	ldr	r1, [pc, #544]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032a8:	4b83      	ldr	r3, [pc, #524]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b6:	4980      	ldr	r1, [pc, #512]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032ca:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4977      	ldr	r1, [pc, #476]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ec:	4b72      	ldr	r3, [pc, #456]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	496f      	ldr	r1, [pc, #444]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800330e:	4b6a      	ldr	r3, [pc, #424]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	f023 020c 	bic.w	r2, r3, #12
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331c:	4966      	ldr	r1, [pc, #408]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003330:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	495e      	ldr	r1, [pc, #376]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003352:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	4955      	ldr	r1, [pc, #340]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003374:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	494d      	ldr	r1, [pc, #308]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003396:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4944      	ldr	r1, [pc, #272]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033b8:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	493c      	ldr	r1, [pc, #240]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033da:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	4933      	ldr	r1, [pc, #204]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033fc:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800340a:	492b      	ldr	r1, [pc, #172]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d011      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800341e:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342c:	4922      	ldr	r1, [pc, #136]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800343c:	d101      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800344e:	2301      	movs	r3, #1
 8003450:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346c:	4912      	ldr	r1, [pc, #72]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003490:	4909      	ldr	r1, [pc, #36]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d006      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80d9 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034ac:	4b02      	ldr	r3, [pc, #8]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a01      	ldr	r2, [pc, #4]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034b6:	e001      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034be:	f7fe fd17 	bl	8001ef0 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034c6:	f7fe fd13 	bl	8001ef0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	; 0x64
 80034d2:	d901      	bls.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e194      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034d8:	4b6c      	ldr	r3, [pc, #432]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f0      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d021      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11d      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034f8:	4b64      	ldr	r3, [pc, #400]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003506:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350c:	0e1b      	lsrs	r3, r3, #24
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	019a      	lsls	r2, r3, #6
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	431a      	orrs	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	071b      	lsls	r3, r3, #28
 800352c:	4957      	ldr	r1, [pc, #348]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003552:	2b00      	cmp	r3, #0
 8003554:	d02e      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355e:	d129      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003560:	4b4a      	ldr	r3, [pc, #296]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003566:	0c1b      	lsrs	r3, r3, #16
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003574:	0f1b      	lsrs	r3, r3, #28
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	019a      	lsls	r2, r3, #6
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	431a      	orrs	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	071b      	lsls	r3, r3, #28
 8003594:	493d      	ldr	r1, [pc, #244]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800359c:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a2:	f023 021f 	bic.w	r2, r3, #31
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	3b01      	subs	r3, #1
 80035ac:	4937      	ldr	r1, [pc, #220]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035c0:	4b32      	ldr	r3, [pc, #200]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c6:	0e1b      	lsrs	r3, r3, #24
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035ce:	4b2f      	ldr	r3, [pc, #188]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d4:	0f1b      	lsrs	r3, r3, #28
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	019a      	lsls	r2, r3, #6
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	431a      	orrs	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	071b      	lsls	r3, r3, #28
 80035f4:	4925      	ldr	r1, [pc, #148]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d011      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	019a      	lsls	r2, r3, #6
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	071b      	lsls	r3, r3, #28
 8003624:	4919      	ldr	r1, [pc, #100]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800362c:	4b17      	ldr	r3, [pc, #92]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a16      	ldr	r2, [pc, #88]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fe fc5a 	bl	8001ef0 <HAL_GetTick>
 800363c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003640:	f7fe fc56 	bl	8001ef0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0d7      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b01      	cmp	r3, #1
 8003662:	f040 80cd 	bne.w	8003800 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a08      	ldr	r2, [pc, #32]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003672:	f7fe fc3d 	bl	8001ef0 <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800367a:	f7fe fc39 	bl	8001ef0 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b64      	cmp	r3, #100	; 0x64
 8003686:	d903      	bls.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e0ba      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800368c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003690:	4b5e      	ldr	r3, [pc, #376]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800369c:	d0ed      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02e      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d12a      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036d4:	4b4d      	ldr	r3, [pc, #308]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	0f1b      	lsrs	r3, r3, #28
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	019a      	lsls	r2, r3, #6
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	071b      	lsls	r3, r3, #28
 80036fa:	4944      	ldr	r1, [pc, #272]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003702:	4b42      	ldr	r3, [pc, #264]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003708:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	3b01      	subs	r3, #1
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	493d      	ldr	r1, [pc, #244]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d022      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003730:	d11d      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	0e1b      	lsrs	r3, r3, #24
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003740:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	0f1b      	lsrs	r3, r3, #28
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	019a      	lsls	r2, r3, #6
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	431a      	orrs	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	061b      	lsls	r3, r3, #24
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	071b      	lsls	r3, r3, #28
 8003766:	4929      	ldr	r1, [pc, #164]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d028      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800377a:	4b24      	ldr	r3, [pc, #144]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003780:	0e1b      	lsrs	r3, r3, #24
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	0c1b      	lsrs	r3, r3, #16
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	019a      	lsls	r2, r3, #6
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	431a      	orrs	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	071b      	lsls	r3, r3, #28
 80037ae:	4917      	ldr	r1, [pc, #92]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037b6:	4b15      	ldr	r3, [pc, #84]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4911      	ldr	r1, [pc, #68]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037cc:	4b0f      	ldr	r3, [pc, #60]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0e      	ldr	r2, [pc, #56]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d8:	f7fe fb8a 	bl	8001ef0 <HAL_GetTick>
 80037dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037e0:	f7fe fb86 	bl	8001ef0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e007      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037fe:	d1ef      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800

08003810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e049      	b.n	80038b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe f8fe 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f000 ff76 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e049      	b.n	8003964 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7fe f941 	bl	8001b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f000 ff1f 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_TIM_PWM_Start+0x24>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e03c      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d109      	bne.n	80039aa <HAL_TIM_PWM_Start+0x3e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e02f      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d109      	bne.n	80039c4 <HAL_TIM_PWM_Start+0x58>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e022      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d109      	bne.n	80039de <HAL_TIM_PWM_Start+0x72>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	e015      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b10      	cmp	r3, #16
 80039e2:	d109      	bne.n	80039f8 <HAL_TIM_PWM_Start+0x8c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e008      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e092      	b.n	8003b38 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start+0xb6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a20:	e023      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_PWM_Start+0xc6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a30:	e01b      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d104      	bne.n	8003a42 <HAL_TIM_PWM_Start+0xd6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a40:	e013      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d104      	bne.n	8003a52 <HAL_TIM_PWM_Start+0xe6>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a50:	e00b      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d104      	bne.n	8003a62 <HAL_TIM_PWM_Start+0xf6>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a60:	e003      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	6839      	ldr	r1, [r7, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 fbba 	bl	80051ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a30      	ldr	r2, [pc, #192]	; (8003b40 <HAL_TIM_PWM_Start+0x1d4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_TIM_PWM_Start+0x120>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <HAL_TIM_PWM_Start+0x1d8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_PWM_Start+0x124>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_TIM_PWM_Start+0x126>
 8003a90:	2300      	movs	r3, #0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a25      	ldr	r2, [pc, #148]	; (8003b40 <HAL_TIM_PWM_Start+0x1d4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x18a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d01d      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x18a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <HAL_TIM_PWM_Start+0x1dc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x18a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a20      	ldr	r2, [pc, #128]	; (8003b4c <HAL_TIM_PWM_Start+0x1e0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x18a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_TIM_PWM_Start+0x1e4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x18a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <HAL_TIM_PWM_Start+0x1d8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x18a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_TIM_PWM_Start+0x1e8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x18a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	; (8003b58 <HAL_TIM_PWM_Start+0x1ec>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d115      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_TIM_PWM_Start+0x1f0>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b06      	cmp	r3, #6
 8003b06:	d015      	beq.n	8003b34 <HAL_TIM_PWM_Start+0x1c8>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d011      	beq.n	8003b34 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	e008      	b.n	8003b34 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e000      	b.n	8003b36 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40010400 	.word	0x40010400
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40001800 	.word	0x40001800
 8003b5c:	00010007 	.word	0x00010007

08003b60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e049      	b.n	8003c06 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f841 	bl	8003c0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f000 fdce 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_IC_Start_IT+0x1e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	e023      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x66>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_IC_Start_IT+0x2e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	e01b      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x66>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_IC_Start_IT+0x3e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e013      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x66>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_IC_Start_IT+0x4e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e00b      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x66>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_IC_Start_IT+0x5e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e003      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x66>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <HAL_TIM_IC_Start_IT+0x78>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e013      	b.n	8003cc4 <HAL_TIM_IC_Start_IT+0xa0>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d104      	bne.n	8003cac <HAL_TIM_IC_Start_IT+0x88>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e00b      	b.n	8003cc4 <HAL_TIM_IC_Start_IT+0xa0>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d104      	bne.n	8003cbc <HAL_TIM_IC_Start_IT+0x98>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e003      	b.n	8003cc4 <HAL_TIM_IC_Start_IT+0xa0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cc6:	7bbb      	ldrb	r3, [r7, #14]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d102      	bne.n	8003cd2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ccc:	7b7b      	ldrb	r3, [r7, #13]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0e2      	b.n	8003e9c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_IC_Start_IT+0xc2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce4:	e023      	b.n	8003d2e <HAL_TIM_IC_Start_IT+0x10a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_IC_Start_IT+0xd2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	e01b      	b.n	8003d2e <HAL_TIM_IC_Start_IT+0x10a>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_IC_Start_IT+0xe2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d04:	e013      	b.n	8003d2e <HAL_TIM_IC_Start_IT+0x10a>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b0c      	cmp	r3, #12
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_IC_Start_IT+0xf2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d14:	e00b      	b.n	8003d2e <HAL_TIM_IC_Start_IT+0x10a>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_IC_Start_IT+0x102>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d24:	e003      	b.n	8003d2e <HAL_TIM_IC_Start_IT+0x10a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_IC_Start_IT+0x11a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3c:	e013      	b.n	8003d66 <HAL_TIM_IC_Start_IT+0x142>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_IC_Start_IT+0x12a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d4c:	e00b      	b.n	8003d66 <HAL_TIM_IC_Start_IT+0x142>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_IC_Start_IT+0x13a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d5c:	e003      	b.n	8003d66 <HAL_TIM_IC_Start_IT+0x142>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d841      	bhi.n	8003df0 <HAL_TIM_IC_Start_IT+0x1cc>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <HAL_TIM_IC_Start_IT+0x150>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08003df1 	.word	0x08003df1
 8003d7c:	08003df1 	.word	0x08003df1
 8003d80:	08003df1 	.word	0x08003df1
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003df1 	.word	0x08003df1
 8003d8c:	08003df1 	.word	0x08003df1
 8003d90:	08003df1 	.word	0x08003df1
 8003d94:	08003dcd 	.word	0x08003dcd
 8003d98:	08003df1 	.word	0x08003df1
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003df1 	.word	0x08003df1
 8003da4:	08003ddf 	.word	0x08003ddf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0202 	orr.w	r2, r2, #2
 8003db6:	60da      	str	r2, [r3, #12]
      break;
 8003db8:	e01d      	b.n	8003df6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0204 	orr.w	r2, r2, #4
 8003dc8:	60da      	str	r2, [r3, #12]
      break;
 8003dca:	e014      	b.n	8003df6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0208 	orr.w	r2, r2, #8
 8003dda:	60da      	str	r2, [r3, #12]
      break;
 8003ddc:	e00b      	b.n	8003df6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0210 	orr.w	r2, r2, #16
 8003dec:	60da      	str	r2, [r3, #12]
      break;
 8003dee:	e002      	b.n	8003df6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      break;
 8003df4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d14e      	bne.n	8003e9a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2201      	movs	r2, #1
 8003e02:	6839      	ldr	r1, [r7, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 f9f1 	bl	80051ec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_TIM_IC_Start_IT+0x280>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d022      	beq.n	8003e5a <HAL_TIM_IC_Start_IT+0x236>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1c:	d01d      	beq.n	8003e5a <HAL_TIM_IC_Start_IT+0x236>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <HAL_TIM_IC_Start_IT+0x284>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d018      	beq.n	8003e5a <HAL_TIM_IC_Start_IT+0x236>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <HAL_TIM_IC_Start_IT+0x288>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_TIM_IC_Start_IT+0x236>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <HAL_TIM_IC_Start_IT+0x28c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIM_IC_Start_IT+0x236>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <HAL_TIM_IC_Start_IT+0x290>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_TIM_IC_Start_IT+0x236>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1b      	ldr	r2, [pc, #108]	; (8003eb8 <HAL_TIM_IC_Start_IT+0x294>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIM_IC_Start_IT+0x236>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <HAL_TIM_IC_Start_IT+0x298>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d115      	bne.n	8003e86 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <HAL_TIM_IC_Start_IT+0x29c>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d015      	beq.n	8003e98 <HAL_TIM_IC_Start_IT+0x274>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e72:	d011      	beq.n	8003e98 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e84:	e008      	b.n	8003e98 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0201 	orr.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e000      	b.n	8003e9a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40010400 	.word	0x40010400
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40001800 	.word	0x40001800
 8003ec0:	00010007 	.word	0x00010007

08003ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0202 	mvn.w	r2, #2
 8003ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fd fcfa 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fbf8 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fbff 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0204 	mvn.w	r2, #4
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd fcd0 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fbce 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fbd5 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0208 	mvn.w	r2, #8
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fca6 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fba4 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fbab 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0210 	mvn.w	r2, #16
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fd fc7c 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fb7a 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fb81 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10e      	bne.n	8004048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d107      	bne.n	8004048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0201 	mvn.w	r2, #1
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd f812 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d10e      	bne.n	8004074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b80      	cmp	r3, #128	; 0x80
 8004062:	d107      	bne.n	8004074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800406c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f001 f97a 	bl	8005368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004082:	d10e      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b80      	cmp	r3, #128	; 0x80
 8004090:	d107      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800409a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f001 f96d 	bl	800537c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d10e      	bne.n	80040ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d107      	bne.n	80040ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb2f 	bl	800472c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d10e      	bne.n	80040fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d107      	bne.n	80040fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f06f 0220 	mvn.w	r2, #32
 80040f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f001 f92d 	bl	8005354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_TIM_IC_ConfigChannel+0x1e>
 800411c:	2302      	movs	r3, #2
 800411e:	e088      	b.n	8004232 <HAL_TIM_IC_ConfigChannel+0x130>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d11b      	bne.n	8004166 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800413e:	f000 fe91 	bl	8004e64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 020c 	bic.w	r2, r2, #12
 8004150:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6999      	ldr	r1, [r3, #24]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	619a      	str	r2, [r3, #24]
 8004164:	e060      	b.n	8004228 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11c      	bne.n	80041a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800417c:	f000 ff15 	bl	8004faa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800418e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6999      	ldr	r1, [r3, #24]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	021a      	lsls	r2, r3, #8
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	619a      	str	r2, [r3, #24]
 80041a4:	e040      	b.n	8004228 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d11b      	bne.n	80041e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80041bc:	f000 ff62 	bl	8005084 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 020c 	bic.w	r2, r2, #12
 80041ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69d9      	ldr	r1, [r3, #28]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	61da      	str	r2, [r3, #28]
 80041e2:	e021      	b.n	8004228 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d11c      	bne.n	8004224 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80041fa:	f000 ff7f 	bl	80050fc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800420c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69d9      	ldr	r1, [r3, #28]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	021a      	lsls	r2, r3, #8
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	61da      	str	r2, [r3, #28]
 8004222:	e001      	b.n	8004228 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004256:	2302      	movs	r3, #2
 8004258:	e0ff      	b.n	800445a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b14      	cmp	r3, #20
 8004266:	f200 80f0 	bhi.w	800444a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	080042c5 	.word	0x080042c5
 8004274:	0800444b 	.word	0x0800444b
 8004278:	0800444b 	.word	0x0800444b
 800427c:	0800444b 	.word	0x0800444b
 8004280:	08004305 	.word	0x08004305
 8004284:	0800444b 	.word	0x0800444b
 8004288:	0800444b 	.word	0x0800444b
 800428c:	0800444b 	.word	0x0800444b
 8004290:	08004347 	.word	0x08004347
 8004294:	0800444b 	.word	0x0800444b
 8004298:	0800444b 	.word	0x0800444b
 800429c:	0800444b 	.word	0x0800444b
 80042a0:	08004387 	.word	0x08004387
 80042a4:	0800444b 	.word	0x0800444b
 80042a8:	0800444b 	.word	0x0800444b
 80042ac:	0800444b 	.word	0x0800444b
 80042b0:	080043c9 	.word	0x080043c9
 80042b4:	0800444b 	.word	0x0800444b
 80042b8:	0800444b 	.word	0x0800444b
 80042bc:	0800444b 	.word	0x0800444b
 80042c0:	08004409 	.word	0x08004409
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fad8 	bl	8004880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0208 	orr.w	r2, r2, #8
 80042de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0204 	bic.w	r2, r2, #4
 80042ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6999      	ldr	r1, [r3, #24]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	619a      	str	r2, [r3, #24]
      break;
 8004302:	e0a5      	b.n	8004450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fb2a 	bl	8004964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6999      	ldr	r1, [r3, #24]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	021a      	lsls	r2, r3, #8
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	619a      	str	r2, [r3, #24]
      break;
 8004344:	e084      	b.n	8004450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fb81 	bl	8004a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0208 	orr.w	r2, r2, #8
 8004360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0204 	bic.w	r2, r2, #4
 8004370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69d9      	ldr	r1, [r3, #28]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	61da      	str	r2, [r3, #28]
      break;
 8004384:	e064      	b.n	8004450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fbd7 	bl	8004b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69d9      	ldr	r1, [r3, #28]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	021a      	lsls	r2, r3, #8
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	61da      	str	r2, [r3, #28]
      break;
 80043c6:	e043      	b.n	8004450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fc0e 	bl	8004bf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0208 	orr.w	r2, r2, #8
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0204 	bic.w	r2, r2, #4
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004406:	e023      	b.n	8004450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fc40 	bl	8004c94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004448:	e002      	b.n	8004450 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
      break;
 800444e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004458:	7dfb      	ldrb	r3, [r7, #23]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop

08004464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_TIM_ConfigClockSource+0x1c>
 800447c:	2302      	movs	r3, #2
 800447e:	e0b4      	b.n	80045ea <HAL_TIM_ConfigClockSource+0x186>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <HAL_TIM_ConfigClockSource+0x190>)
 800449c:	4013      	ands	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b8:	d03e      	beq.n	8004538 <HAL_TIM_ConfigClockSource+0xd4>
 80044ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044be:	f200 8087 	bhi.w	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c6:	f000 8086 	beq.w	80045d6 <HAL_TIM_ConfigClockSource+0x172>
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d87f      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044d0:	2b70      	cmp	r3, #112	; 0x70
 80044d2:	d01a      	beq.n	800450a <HAL_TIM_ConfigClockSource+0xa6>
 80044d4:	2b70      	cmp	r3, #112	; 0x70
 80044d6:	d87b      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044d8:	2b60      	cmp	r3, #96	; 0x60
 80044da:	d050      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x11a>
 80044dc:	2b60      	cmp	r3, #96	; 0x60
 80044de:	d877      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044e0:	2b50      	cmp	r3, #80	; 0x50
 80044e2:	d03c      	beq.n	800455e <HAL_TIM_ConfigClockSource+0xfa>
 80044e4:	2b50      	cmp	r3, #80	; 0x50
 80044e6:	d873      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d058      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x13a>
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d86f      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044f0:	2b30      	cmp	r3, #48	; 0x30
 80044f2:	d064      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x15a>
 80044f4:	2b30      	cmp	r3, #48	; 0x30
 80044f6:	d86b      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	d060      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x15a>
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d867      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d05c      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x15a>
 8004504:	2b10      	cmp	r3, #16
 8004506:	d05a      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x15a>
 8004508:	e062      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800451a:	f000 fe47 	bl	80051ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800452c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	609a      	str	r2, [r3, #8]
      break;
 8004536:	e04f      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004548:	f000 fe30 	bl	80051ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800455a:	609a      	str	r2, [r3, #8]
      break;
 800455c:	e03c      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	461a      	mov	r2, r3
 800456c:	f000 fcee 	bl	8004f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2150      	movs	r1, #80	; 0x50
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fdfd 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 800457c:	e02c      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800458a:	461a      	mov	r2, r3
 800458c:	f000 fd4a 	bl	8005024 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2160      	movs	r1, #96	; 0x60
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fded 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 800459c:	e01c      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	461a      	mov	r2, r3
 80045ac:	f000 fcce 	bl	8004f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2140      	movs	r1, #64	; 0x40
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fddd 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 80045bc:	e00c      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f000 fdd4 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 80045ce:	e003      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      break;
 80045d4:	e000      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	fffeff88 	.word	0xfffeff88

080045f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_TIM_SlaveConfigSynchro+0x18>
 800460c:	2302      	movs	r3, #2
 800460e:	e031      	b.n	8004674 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fb8a 	bl	8004d3c <TIM_SlaveTimer_SetConfig>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e018      	b.n	8004674 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004650:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004660:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b0c      	cmp	r3, #12
 800468e:	d831      	bhi.n	80046f4 <HAL_TIM_ReadCapturedValue+0x78>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046cd 	.word	0x080046cd
 800469c:	080046f5 	.word	0x080046f5
 80046a0:	080046f5 	.word	0x080046f5
 80046a4:	080046f5 	.word	0x080046f5
 80046a8:	080046d7 	.word	0x080046d7
 80046ac:	080046f5 	.word	0x080046f5
 80046b0:	080046f5 	.word	0x080046f5
 80046b4:	080046f5 	.word	0x080046f5
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046f5 	.word	0x080046f5
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	080046f5 	.word	0x080046f5
 80046c8:	080046eb 	.word	0x080046eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	60fb      	str	r3, [r7, #12]

      break;
 80046d4:	e00f      	b.n	80046f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	60fb      	str	r3, [r7, #12]

      break;
 80046de:	e00a      	b.n	80046f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	60fb      	str	r3, [r7, #12]

      break;
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	60fb      	str	r3, [r7, #12]

      break;
 80046f2:	e000      	b.n	80046f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80046f4:	bf00      	nop
  }

  return tmpreg;
 80046f6:	68fb      	ldr	r3, [r7, #12]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a40      	ldr	r2, [pc, #256]	; (8004854 <TIM_Base_SetConfig+0x114>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d00f      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <TIM_Base_SetConfig+0x118>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3c      	ldr	r2, [pc, #240]	; (800485c <TIM_Base_SetConfig+0x11c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3b      	ldr	r2, [pc, #236]	; (8004860 <TIM_Base_SetConfig+0x120>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3a      	ldr	r2, [pc, #232]	; (8004864 <TIM_Base_SetConfig+0x124>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <TIM_Base_SetConfig+0x114>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02b      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a0:	d027      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <TIM_Base_SetConfig+0x118>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d023      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2b      	ldr	r2, [pc, #172]	; (800485c <TIM_Base_SetConfig+0x11c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01f      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <TIM_Base_SetConfig+0x120>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01b      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a29      	ldr	r2, [pc, #164]	; (8004864 <TIM_Base_SetConfig+0x124>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d017      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a28      	ldr	r2, [pc, #160]	; (8004868 <TIM_Base_SetConfig+0x128>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a27      	ldr	r2, [pc, #156]	; (800486c <TIM_Base_SetConfig+0x12c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a26      	ldr	r2, [pc, #152]	; (8004870 <TIM_Base_SetConfig+0x130>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a25      	ldr	r2, [pc, #148]	; (8004874 <TIM_Base_SetConfig+0x134>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a24      	ldr	r2, [pc, #144]	; (8004878 <TIM_Base_SetConfig+0x138>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a23      	ldr	r2, [pc, #140]	; (800487c <TIM_Base_SetConfig+0x13c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d108      	bne.n	8004804 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <TIM_Base_SetConfig+0x114>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0xf8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <TIM_Base_SetConfig+0x124>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d103      	bne.n	8004840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	615a      	str	r2, [r3, #20]
}
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40010400 	.word	0x40010400
 8004868:	40014000 	.word	0x40014000
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800
 8004874:	40001800 	.word	0x40001800
 8004878:	40001c00 	.word	0x40001c00
 800487c:	40002000 	.word	0x40002000

08004880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f023 0201 	bic.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <TIM_OC1_SetConfig+0xd8>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f023 0302 	bic.w	r3, r3, #2
 80048c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a21      	ldr	r2, [pc, #132]	; (800495c <TIM_OC1_SetConfig+0xdc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_OC1_SetConfig+0x64>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a20      	ldr	r2, [pc, #128]	; (8004960 <TIM_OC1_SetConfig+0xe0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d10c      	bne.n	80048fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0308 	bic.w	r3, r3, #8
 80048ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 0304 	bic.w	r3, r3, #4
 80048fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a16      	ldr	r2, [pc, #88]	; (800495c <TIM_OC1_SetConfig+0xdc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_OC1_SetConfig+0x8e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <TIM_OC1_SetConfig+0xe0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d111      	bne.n	8004932 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	fffeff8f 	.word	0xfffeff8f
 800495c:	40010000 	.word	0x40010000
 8004960:	40010400 	.word	0x40010400

08004964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4b2e      	ldr	r3, [pc, #184]	; (8004a48 <TIM_OC2_SetConfig+0xe4>)
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 0320 	bic.w	r3, r3, #32
 80049ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a23      	ldr	r2, [pc, #140]	; (8004a4c <TIM_OC2_SetConfig+0xe8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_OC2_SetConfig+0x68>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <TIM_OC2_SetConfig+0xec>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10d      	bne.n	80049e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <TIM_OC2_SetConfig+0xe8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_OC2_SetConfig+0x94>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <TIM_OC2_SetConfig+0xec>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d113      	bne.n	8004a20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	feff8fff 	.word	0xfeff8fff
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40010400 	.word	0x40010400

08004a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <TIM_OC3_SetConfig+0xe0>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <TIM_OC3_SetConfig+0xe4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC3_SetConfig+0x66>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <TIM_OC3_SetConfig+0xe8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10d      	bne.n	8004ad6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <TIM_OC3_SetConfig+0xe4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_OC3_SetConfig+0x92>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <TIM_OC3_SetConfig+0xe8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d113      	bne.n	8004b0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	621a      	str	r2, [r3, #32]
}
 8004b28:	bf00      	nop
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	fffeff8f 	.word	0xfffeff8f
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40010400 	.word	0x40010400

08004b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <TIM_OC4_SetConfig+0xa4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	031b      	lsls	r3, r3, #12
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a13      	ldr	r2, [pc, #76]	; (8004be8 <TIM_OC4_SetConfig+0xa8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_OC4_SetConfig+0x68>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a12      	ldr	r2, [pc, #72]	; (8004bec <TIM_OC4_SetConfig+0xac>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d109      	bne.n	8004bbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	feff8fff 	.word	0xfeff8fff
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40010400 	.word	0x40010400

08004bf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <TIM_OC5_SetConfig+0x98>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <TIM_OC5_SetConfig+0x9c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_OC5_SetConfig+0x5e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a11      	ldr	r2, [pc, #68]	; (8004c90 <TIM_OC5_SetConfig+0xa0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d109      	bne.n	8004c62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	621a      	str	r2, [r3, #32]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	fffeff8f 	.word	0xfffeff8f
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40010400 	.word	0x40010400

08004c94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <TIM_OC6_SetConfig+0x9c>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	051b      	lsls	r3, r3, #20
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <TIM_OC6_SetConfig+0xa0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_OC6_SetConfig+0x60>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <TIM_OC6_SetConfig+0xa4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d109      	bne.n	8004d08 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	029b      	lsls	r3, r3, #10
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	feff8fff 	.word	0xfeff8fff
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d58:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4b3e      	ldr	r3, [pc, #248]	; (8004e60 <TIM_SlaveTimer_SetConfig+0x124>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b70      	cmp	r3, #112	; 0x70
 8004d84:	d01a      	beq.n	8004dbc <TIM_SlaveTimer_SetConfig+0x80>
 8004d86:	2b70      	cmp	r3, #112	; 0x70
 8004d88:	d860      	bhi.n	8004e4c <TIM_SlaveTimer_SetConfig+0x110>
 8004d8a:	2b60      	cmp	r3, #96	; 0x60
 8004d8c:	d054      	beq.n	8004e38 <TIM_SlaveTimer_SetConfig+0xfc>
 8004d8e:	2b60      	cmp	r3, #96	; 0x60
 8004d90:	d85c      	bhi.n	8004e4c <TIM_SlaveTimer_SetConfig+0x110>
 8004d92:	2b50      	cmp	r3, #80	; 0x50
 8004d94:	d046      	beq.n	8004e24 <TIM_SlaveTimer_SetConfig+0xe8>
 8004d96:	2b50      	cmp	r3, #80	; 0x50
 8004d98:	d858      	bhi.n	8004e4c <TIM_SlaveTimer_SetConfig+0x110>
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d019      	beq.n	8004dd2 <TIM_SlaveTimer_SetConfig+0x96>
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d854      	bhi.n	8004e4c <TIM_SlaveTimer_SetConfig+0x110>
 8004da2:	2b30      	cmp	r3, #48	; 0x30
 8004da4:	d055      	beq.n	8004e52 <TIM_SlaveTimer_SetConfig+0x116>
 8004da6:	2b30      	cmp	r3, #48	; 0x30
 8004da8:	d850      	bhi.n	8004e4c <TIM_SlaveTimer_SetConfig+0x110>
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d051      	beq.n	8004e52 <TIM_SlaveTimer_SetConfig+0x116>
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d84c      	bhi.n	8004e4c <TIM_SlaveTimer_SetConfig+0x110>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d04d      	beq.n	8004e52 <TIM_SlaveTimer_SetConfig+0x116>
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d04b      	beq.n	8004e52 <TIM_SlaveTimer_SetConfig+0x116>
 8004dba:	e047      	b.n	8004e4c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004dcc:	f000 f9ee 	bl	80051ac <TIM_ETR_SetConfig>
      break;
 8004dd0:	e040      	b.n	8004e54 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b05      	cmp	r3, #5
 8004dd8:	d101      	bne.n	8004dde <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e03b      	b.n	8004e56 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1a      	ldr	r2, [r3, #32]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e04:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]
      break;
 8004e22:	e017      	b.n	8004e54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e30:	461a      	mov	r2, r3
 8004e32:	f000 f88b 	bl	8004f4c <TIM_TI1_ConfigInputStage>
      break;
 8004e36:	e00d      	b.n	8004e54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e44:	461a      	mov	r2, r3
 8004e46:	f000 f8ed 	bl	8005024 <TIM_TI2_ConfigInputStage>
      break;
 8004e4a:	e003      	b.n	8004e54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e50:	e000      	b.n	8004e54 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004e52:	bf00      	nop
  }

  return status;
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	fffefff8 	.word	0xfffefff8

08004e64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f023 0201 	bic.w	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <TIM_TI1_SetConfig+0xcc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01b      	beq.n	8004eca <TIM_TI1_SetConfig+0x66>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e98:	d017      	beq.n	8004eca <TIM_TI1_SetConfig+0x66>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <TIM_TI1_SetConfig+0xd0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_TI1_SetConfig+0x66>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a24      	ldr	r2, [pc, #144]	; (8004f38 <TIM_TI1_SetConfig+0xd4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_TI1_SetConfig+0x66>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a23      	ldr	r2, [pc, #140]	; (8004f3c <TIM_TI1_SetConfig+0xd8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_TI1_SetConfig+0x66>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <TIM_TI1_SetConfig+0xdc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_TI1_SetConfig+0x66>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <TIM_TI1_SetConfig+0xe0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_TI1_SetConfig+0x66>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	; (8004f48 <TIM_TI1_SetConfig+0xe4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d101      	bne.n	8004ece <TIM_TI1_SetConfig+0x6a>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <TIM_TI1_SetConfig+0x6c>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e003      	b.n	8004eee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f023 030a 	bic.w	r3, r3, #10
 8004f08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f003 030a 	and.w	r3, r3, #10
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40001800 	.word	0x40001800

08004f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 030a 	bic.w	r3, r3, #10
 8004f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f023 0210 	bic.w	r2, r3, #16
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	031b      	lsls	r3, r3, #12
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	621a      	str	r2, [r3, #32]
}
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	f023 0210 	bic.w	r2, r3, #16
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800504e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	031b      	lsls	r3, r3, #12
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005060:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	621a      	str	r2, [r3, #32]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 0303 	bic.w	r3, r3, #3
 80050b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	621a      	str	r2, [r3, #32]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005128:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800513a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	031b      	lsls	r3, r3, #12
 8005140:	b29b      	uxth	r3, r3
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800514e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	031b      	lsls	r3, r3, #12
 8005154:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	f043 0307 	orr.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2201      	movs	r2, #1
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1a      	ldr	r2, [r3, #32]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	43db      	mvns	r3, r3
 800520e:	401a      	ands	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	431a      	orrs	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e06d      	b.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a30      	ldr	r2, [pc, #192]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2f      	ldr	r2, [pc, #188]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d108      	bne.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800528a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a20      	ldr	r2, [pc, #128]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d022      	beq.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c2:	d01d      	beq.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a16      	ldr	r2, [pc, #88]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a15      	ldr	r2, [pc, #84]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10c      	bne.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005306:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	4313      	orrs	r3, r2
 8005310:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40010000 	.word	0x40010000
 800533c:	40010400 	.word	0x40010400
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40014000 	.word	0x40014000
 8005350:	40001800 	.word	0x40001800

08005354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e040      	b.n	8005424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc fc54 	bl	8001c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	; 0x24
 80053bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fb62 	bl	8005a98 <UART_SetConfig>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e022      	b.n	8005424 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fdba 	bl	8005f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800540a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fe41 	bl	80060a4 <UART_CheckIdleState>
 8005422:	4603      	mov	r3, r0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005440:	2b20      	cmp	r3, #32
 8005442:	d132      	bne.n	80054aa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Receive_IT+0x24>
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e02b      	b.n	80054ac <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d018      	beq.n	800549a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	613b      	str	r3, [r7, #16]
   return(result);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	623b      	str	r3, [r7, #32]
 8005488:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	69f9      	ldr	r1, [r7, #28]
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	61bb      	str	r3, [r7, #24]
   return(result);
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e6      	bne.n	8005468 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	461a      	mov	r2, r3
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fefd 	bl	80062a0 <UART_Start_Receive_IT>
 80054a6:	4603      	mov	r3, r0
 80054a8:	e000      	b.n	80054ac <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80054aa:	2302      	movs	r3, #2
  }
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3728      	adds	r7, #40	; 0x28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b0ba      	sub	sp, #232	; 0xe8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054de:	f640 030f 	movw	r3, #2063	; 0x80f
 80054e2:	4013      	ands	r3, r2
 80054e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80054e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d115      	bne.n	800551c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00f      	beq.n	800551c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b00      	cmp	r3, #0
 8005506:	d009      	beq.n	800551c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8297 	beq.w	8005a40 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
      }
      return;
 800551a:	e291      	b.n	8005a40 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800551c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8117 	beq.w	8005754 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005532:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005536:	4b85      	ldr	r3, [pc, #532]	; (800574c <HAL_UART_IRQHandler+0x298>)
 8005538:	4013      	ands	r3, r2
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 810a 	beq.w	8005754 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d011      	beq.n	8005570 <HAL_UART_IRQHandler+0xbc>
 800554c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2201      	movs	r2, #1
 800555e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005566:	f043 0201 	orr.w	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d011      	beq.n	80055a0 <HAL_UART_IRQHandler+0xec>
 800557c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2202      	movs	r2, #2
 800558e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005596:	f043 0204 	orr.w	r2, r3, #4
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d011      	beq.n	80055d0 <HAL_UART_IRQHandler+0x11c>
 80055ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00b      	beq.n	80055d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2204      	movs	r2, #4
 80055be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c6:	f043 0202 	orr.w	r2, r3, #2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d017      	beq.n	800560c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00b      	beq.n	800560c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2208      	movs	r2, #8
 80055fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005602:	f043 0208 	orr.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800560c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005614:	2b00      	cmp	r3, #0
 8005616:	d012      	beq.n	800563e <HAL_UART_IRQHandler+0x18a>
 8005618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800561c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00c      	beq.n	800563e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800562c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 81fd 	beq.w	8005a44 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00d      	beq.n	8005672 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d005      	beq.n	8005696 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800568a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800568e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005692:	2b00      	cmp	r3, #0
 8005694:	d04f      	beq.n	8005736 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fec8 	bl	800642c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	2b40      	cmp	r3, #64	; 0x40
 80056a8:	d141      	bne.n	800572e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1d9      	bne.n	80056aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d013      	beq.n	8005726 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005702:	4a13      	ldr	r2, [pc, #76]	; (8005750 <HAL_UART_IRQHandler+0x29c>)
 8005704:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570a:	4618      	mov	r0, r3
 800570c:	f7fc fd7d 	bl	800220a <HAL_DMA_Abort_IT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005724:	e00f      	b.n	8005746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f9a0 	bl	8005a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	e00b      	b.n	8005746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f99c 	bl	8005a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	e007      	b.n	8005746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f998 	bl	8005a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005744:	e17e      	b.n	8005a44 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005746:	bf00      	nop
    return;
 8005748:	e17c      	b.n	8005a44 <HAL_UART_IRQHandler+0x590>
 800574a:	bf00      	nop
 800574c:	04000120 	.word	0x04000120
 8005750:	080064f5 	.word	0x080064f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005758:	2b01      	cmp	r3, #1
 800575a:	f040 814c 	bne.w	80059f6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8145 	beq.w	80059f6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 813e 	beq.w	80059f6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2210      	movs	r2, #16
 8005780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	f040 80b6 	bne.w	80058fe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800579e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 8150 	beq.w	8005a48 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057b2:	429a      	cmp	r2, r3
 80057b4:	f080 8148 	bcs.w	8005a48 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057cc:	f000 8086 	beq.w	80058dc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1da      	bne.n	80057d0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3308      	adds	r3, #8
 8005820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800582a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3308      	adds	r3, #8
 800583a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800583e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e1      	bne.n	800581a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3308      	adds	r3, #8
 800585c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800586c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3308      	adds	r3, #8
 8005876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800587a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800587c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e3      	bne.n	8005856 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ac:	f023 0310 	bic.w	r3, r3, #16
 80058b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058be:	65bb      	str	r3, [r7, #88]	; 0x58
 80058c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e4      	bne.n	800589c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fc fc27 	bl	800212a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f8c2 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058fc:	e0a4      	b.n	8005a48 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800590a:	b29b      	uxth	r3, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8096 	beq.w	8005a4c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8091 	beq.w	8005a4c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800593e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800594c:	647b      	str	r3, [r7, #68]	; 0x44
 800594e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800595a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e4      	bne.n	800592a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3308      	adds	r3, #8
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	623b      	str	r3, [r7, #32]
   return(result);
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3308      	adds	r3, #8
 8005980:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005984:	633a      	str	r2, [r7, #48]	; 0x30
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800598a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e3      	bne.n	8005960 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f023 0310 	bic.w	r3, r3, #16
 80059c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	69b9      	ldr	r1, [r7, #24]
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	617b      	str	r3, [r7, #20]
   return(result);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e4      	bne.n	80059ac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f846 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059f4:	e02a      	b.n	8005a4c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00e      	beq.n	8005a20 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d008      	beq.n	8005a20 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01c      	beq.n	8005a50 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
    }
    return;
 8005a1e:	e017      	b.n	8005a50 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <HAL_UART_IRQHandler+0x59e>
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fd71 	bl	8006520 <UART_EndTransmit_IT>
    return;
 8005a3e:	e008      	b.n	8005a52 <HAL_UART_IRQHandler+0x59e>
      return;
 8005a40:	bf00      	nop
 8005a42:	e006      	b.n	8005a52 <HAL_UART_IRQHandler+0x59e>
    return;
 8005a44:	bf00      	nop
 8005a46:	e004      	b.n	8005a52 <HAL_UART_IRQHandler+0x59e>
      return;
 8005a48:	bf00      	nop
 8005a4a:	e002      	b.n	8005a52 <HAL_UART_IRQHandler+0x59e>
      return;
 8005a4c:	bf00      	nop
 8005a4e:	e000      	b.n	8005a52 <HAL_UART_IRQHandler+0x59e>
    return;
 8005a50:	bf00      	nop
  }

}
 8005a52:	37e8      	adds	r7, #232	; 0xe8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4ba6      	ldr	r3, [pc, #664]	; (8005d5c <UART_SetConfig+0x2c4>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	6979      	ldr	r1, [r7, #20]
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a94      	ldr	r2, [pc, #592]	; (8005d60 <UART_SetConfig+0x2c8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d120      	bne.n	8005b56 <UART_SetConfig+0xbe>
 8005b14:	4b93      	ldr	r3, [pc, #588]	; (8005d64 <UART_SetConfig+0x2cc>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d816      	bhi.n	8005b50 <UART_SetConfig+0xb8>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <UART_SetConfig+0x90>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b45 	.word	0x08005b45
 8005b30:	08005b3f 	.word	0x08005b3f
 8005b34:	08005b4b 	.word	0x08005b4b
 8005b38:	2301      	movs	r3, #1
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e150      	b.n	8005de0 <UART_SetConfig+0x348>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	77fb      	strb	r3, [r7, #31]
 8005b42:	e14d      	b.n	8005de0 <UART_SetConfig+0x348>
 8005b44:	2304      	movs	r3, #4
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e14a      	b.n	8005de0 <UART_SetConfig+0x348>
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e147      	b.n	8005de0 <UART_SetConfig+0x348>
 8005b50:	2310      	movs	r3, #16
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e144      	b.n	8005de0 <UART_SetConfig+0x348>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a83      	ldr	r2, [pc, #524]	; (8005d68 <UART_SetConfig+0x2d0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d132      	bne.n	8005bc6 <UART_SetConfig+0x12e>
 8005b60:	4b80      	ldr	r3, [pc, #512]	; (8005d64 <UART_SetConfig+0x2cc>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	d828      	bhi.n	8005bc0 <UART_SetConfig+0x128>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0xdc>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005ba9 	.word	0x08005ba9
 8005b78:	08005bc1 	.word	0x08005bc1
 8005b7c:	08005bc1 	.word	0x08005bc1
 8005b80:	08005bc1 	.word	0x08005bc1
 8005b84:	08005bb5 	.word	0x08005bb5
 8005b88:	08005bc1 	.word	0x08005bc1
 8005b8c:	08005bc1 	.word	0x08005bc1
 8005b90:	08005bc1 	.word	0x08005bc1
 8005b94:	08005baf 	.word	0x08005baf
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bc1 	.word	0x08005bc1
 8005ba4:	08005bbb 	.word	0x08005bbb
 8005ba8:	2300      	movs	r3, #0
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e118      	b.n	8005de0 <UART_SetConfig+0x348>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e115      	b.n	8005de0 <UART_SetConfig+0x348>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e112      	b.n	8005de0 <UART_SetConfig+0x348>
 8005bba:	2308      	movs	r3, #8
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e10f      	b.n	8005de0 <UART_SetConfig+0x348>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e10c      	b.n	8005de0 <UART_SetConfig+0x348>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a68      	ldr	r2, [pc, #416]	; (8005d6c <UART_SetConfig+0x2d4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d120      	bne.n	8005c12 <UART_SetConfig+0x17a>
 8005bd0:	4b64      	ldr	r3, [pc, #400]	; (8005d64 <UART_SetConfig+0x2cc>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bda:	2b30      	cmp	r3, #48	; 0x30
 8005bdc:	d013      	beq.n	8005c06 <UART_SetConfig+0x16e>
 8005bde:	2b30      	cmp	r3, #48	; 0x30
 8005be0:	d814      	bhi.n	8005c0c <UART_SetConfig+0x174>
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d009      	beq.n	8005bfa <UART_SetConfig+0x162>
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d810      	bhi.n	8005c0c <UART_SetConfig+0x174>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <UART_SetConfig+0x15c>
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d006      	beq.n	8005c00 <UART_SetConfig+0x168>
 8005bf2:	e00b      	b.n	8005c0c <UART_SetConfig+0x174>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	77fb      	strb	r3, [r7, #31]
 8005bf8:	e0f2      	b.n	8005de0 <UART_SetConfig+0x348>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	77fb      	strb	r3, [r7, #31]
 8005bfe:	e0ef      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c00:	2304      	movs	r3, #4
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e0ec      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c06:	2308      	movs	r3, #8
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e0e9      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e0e6      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a56      	ldr	r2, [pc, #344]	; (8005d70 <UART_SetConfig+0x2d8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d120      	bne.n	8005c5e <UART_SetConfig+0x1c6>
 8005c1c:	4b51      	ldr	r3, [pc, #324]	; (8005d64 <UART_SetConfig+0x2cc>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c26:	2bc0      	cmp	r3, #192	; 0xc0
 8005c28:	d013      	beq.n	8005c52 <UART_SetConfig+0x1ba>
 8005c2a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c2c:	d814      	bhi.n	8005c58 <UART_SetConfig+0x1c0>
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	d009      	beq.n	8005c46 <UART_SetConfig+0x1ae>
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d810      	bhi.n	8005c58 <UART_SetConfig+0x1c0>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <UART_SetConfig+0x1a8>
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d006      	beq.n	8005c4c <UART_SetConfig+0x1b4>
 8005c3e:	e00b      	b.n	8005c58 <UART_SetConfig+0x1c0>
 8005c40:	2300      	movs	r3, #0
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e0cc      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c46:	2302      	movs	r3, #2
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e0c9      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e0c6      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c52:	2308      	movs	r3, #8
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e0c3      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e0c0      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a44      	ldr	r2, [pc, #272]	; (8005d74 <UART_SetConfig+0x2dc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d125      	bne.n	8005cb4 <UART_SetConfig+0x21c>
 8005c68:	4b3e      	ldr	r3, [pc, #248]	; (8005d64 <UART_SetConfig+0x2cc>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c76:	d017      	beq.n	8005ca8 <UART_SetConfig+0x210>
 8005c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c7c:	d817      	bhi.n	8005cae <UART_SetConfig+0x216>
 8005c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c82:	d00b      	beq.n	8005c9c <UART_SetConfig+0x204>
 8005c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c88:	d811      	bhi.n	8005cae <UART_SetConfig+0x216>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <UART_SetConfig+0x1fe>
 8005c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c92:	d006      	beq.n	8005ca2 <UART_SetConfig+0x20a>
 8005c94:	e00b      	b.n	8005cae <UART_SetConfig+0x216>
 8005c96:	2300      	movs	r3, #0
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e0a1      	b.n	8005de0 <UART_SetConfig+0x348>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e09e      	b.n	8005de0 <UART_SetConfig+0x348>
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e09b      	b.n	8005de0 <UART_SetConfig+0x348>
 8005ca8:	2308      	movs	r3, #8
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e098      	b.n	8005de0 <UART_SetConfig+0x348>
 8005cae:	2310      	movs	r3, #16
 8005cb0:	77fb      	strb	r3, [r7, #31]
 8005cb2:	e095      	b.n	8005de0 <UART_SetConfig+0x348>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2f      	ldr	r2, [pc, #188]	; (8005d78 <UART_SetConfig+0x2e0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d125      	bne.n	8005d0a <UART_SetConfig+0x272>
 8005cbe:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <UART_SetConfig+0x2cc>)
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ccc:	d017      	beq.n	8005cfe <UART_SetConfig+0x266>
 8005cce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cd2:	d817      	bhi.n	8005d04 <UART_SetConfig+0x26c>
 8005cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd8:	d00b      	beq.n	8005cf2 <UART_SetConfig+0x25a>
 8005cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cde:	d811      	bhi.n	8005d04 <UART_SetConfig+0x26c>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <UART_SetConfig+0x254>
 8005ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce8:	d006      	beq.n	8005cf8 <UART_SetConfig+0x260>
 8005cea:	e00b      	b.n	8005d04 <UART_SetConfig+0x26c>
 8005cec:	2301      	movs	r3, #1
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e076      	b.n	8005de0 <UART_SetConfig+0x348>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e073      	b.n	8005de0 <UART_SetConfig+0x348>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e070      	b.n	8005de0 <UART_SetConfig+0x348>
 8005cfe:	2308      	movs	r3, #8
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e06d      	b.n	8005de0 <UART_SetConfig+0x348>
 8005d04:	2310      	movs	r3, #16
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e06a      	b.n	8005de0 <UART_SetConfig+0x348>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	; (8005d7c <UART_SetConfig+0x2e4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d138      	bne.n	8005d86 <UART_SetConfig+0x2ee>
 8005d14:	4b13      	ldr	r3, [pc, #76]	; (8005d64 <UART_SetConfig+0x2cc>)
 8005d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d22:	d017      	beq.n	8005d54 <UART_SetConfig+0x2bc>
 8005d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d28:	d82a      	bhi.n	8005d80 <UART_SetConfig+0x2e8>
 8005d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d2e:	d00b      	beq.n	8005d48 <UART_SetConfig+0x2b0>
 8005d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d34:	d824      	bhi.n	8005d80 <UART_SetConfig+0x2e8>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <UART_SetConfig+0x2aa>
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	d006      	beq.n	8005d4e <UART_SetConfig+0x2b6>
 8005d40:	e01e      	b.n	8005d80 <UART_SetConfig+0x2e8>
 8005d42:	2300      	movs	r3, #0
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e04b      	b.n	8005de0 <UART_SetConfig+0x348>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e048      	b.n	8005de0 <UART_SetConfig+0x348>
 8005d4e:	2304      	movs	r3, #4
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e045      	b.n	8005de0 <UART_SetConfig+0x348>
 8005d54:	2308      	movs	r3, #8
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e042      	b.n	8005de0 <UART_SetConfig+0x348>
 8005d5a:	bf00      	nop
 8005d5c:	efff69f3 	.word	0xefff69f3
 8005d60:	40011000 	.word	0x40011000
 8005d64:	40023800 	.word	0x40023800
 8005d68:	40004400 	.word	0x40004400
 8005d6c:	40004800 	.word	0x40004800
 8005d70:	40004c00 	.word	0x40004c00
 8005d74:	40005000 	.word	0x40005000
 8005d78:	40011400 	.word	0x40011400
 8005d7c:	40007800 	.word	0x40007800
 8005d80:	2310      	movs	r3, #16
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e02c      	b.n	8005de0 <UART_SetConfig+0x348>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a72      	ldr	r2, [pc, #456]	; (8005f54 <UART_SetConfig+0x4bc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d125      	bne.n	8005ddc <UART_SetConfig+0x344>
 8005d90:	4b71      	ldr	r3, [pc, #452]	; (8005f58 <UART_SetConfig+0x4c0>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d9e:	d017      	beq.n	8005dd0 <UART_SetConfig+0x338>
 8005da0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005da4:	d817      	bhi.n	8005dd6 <UART_SetConfig+0x33e>
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005daa:	d00b      	beq.n	8005dc4 <UART_SetConfig+0x32c>
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db0:	d811      	bhi.n	8005dd6 <UART_SetConfig+0x33e>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <UART_SetConfig+0x326>
 8005db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dba:	d006      	beq.n	8005dca <UART_SetConfig+0x332>
 8005dbc:	e00b      	b.n	8005dd6 <UART_SetConfig+0x33e>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e00d      	b.n	8005de0 <UART_SetConfig+0x348>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e00a      	b.n	8005de0 <UART_SetConfig+0x348>
 8005dca:	2304      	movs	r3, #4
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e007      	b.n	8005de0 <UART_SetConfig+0x348>
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e004      	b.n	8005de0 <UART_SetConfig+0x348>
 8005dd6:	2310      	movs	r3, #16
 8005dd8:	77fb      	strb	r3, [r7, #31]
 8005dda:	e001      	b.n	8005de0 <UART_SetConfig+0x348>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de8:	d15b      	bne.n	8005ea2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d828      	bhi.n	8005e42 <UART_SetConfig+0x3aa>
 8005df0:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <UART_SetConfig+0x360>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005e1d 	.word	0x08005e1d
 8005dfc:	08005e25 	.word	0x08005e25
 8005e00:	08005e2d 	.word	0x08005e2d
 8005e04:	08005e43 	.word	0x08005e43
 8005e08:	08005e33 	.word	0x08005e33
 8005e0c:	08005e43 	.word	0x08005e43
 8005e10:	08005e43 	.word	0x08005e43
 8005e14:	08005e43 	.word	0x08005e43
 8005e18:	08005e3b 	.word	0x08005e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e1c:	f7fd f8e0 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8005e20:	61b8      	str	r0, [r7, #24]
        break;
 8005e22:	e013      	b.n	8005e4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e24:	f7fd f8f0 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 8005e28:	61b8      	str	r0, [r7, #24]
        break;
 8005e2a:	e00f      	b.n	8005e4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e2c:	4b4b      	ldr	r3, [pc, #300]	; (8005f5c <UART_SetConfig+0x4c4>)
 8005e2e:	61bb      	str	r3, [r7, #24]
        break;
 8005e30:	e00c      	b.n	8005e4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e32:	f7fc ffc3 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8005e36:	61b8      	str	r0, [r7, #24]
        break;
 8005e38:	e008      	b.n	8005e4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e3e:	61bb      	str	r3, [r7, #24]
        break;
 8005e40:	e004      	b.n	8005e4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	77bb      	strb	r3, [r7, #30]
        break;
 8005e4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d074      	beq.n	8005f3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	005a      	lsls	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	441a      	add	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2b0f      	cmp	r3, #15
 8005e6c:	d916      	bls.n	8005e9c <UART_SetConfig+0x404>
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e74:	d212      	bcs.n	8005e9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f023 030f 	bic.w	r3, r3, #15
 8005e7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	89fb      	ldrh	r3, [r7, #14]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	89fa      	ldrh	r2, [r7, #14]
 8005e98:	60da      	str	r2, [r3, #12]
 8005e9a:	e04f      	b.n	8005f3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	77bb      	strb	r3, [r7, #30]
 8005ea0:	e04c      	b.n	8005f3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ea2:	7ffb      	ldrb	r3, [r7, #31]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d828      	bhi.n	8005efa <UART_SetConfig+0x462>
 8005ea8:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <UART_SetConfig+0x418>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005edd 	.word	0x08005edd
 8005eb8:	08005ee5 	.word	0x08005ee5
 8005ebc:	08005efb 	.word	0x08005efb
 8005ec0:	08005eeb 	.word	0x08005eeb
 8005ec4:	08005efb 	.word	0x08005efb
 8005ec8:	08005efb 	.word	0x08005efb
 8005ecc:	08005efb 	.word	0x08005efb
 8005ed0:	08005ef3 	.word	0x08005ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed4:	f7fd f884 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8005ed8:	61b8      	str	r0, [r7, #24]
        break;
 8005eda:	e013      	b.n	8005f04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005edc:	f7fd f894 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 8005ee0:	61b8      	str	r0, [r7, #24]
        break;
 8005ee2:	e00f      	b.n	8005f04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee4:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <UART_SetConfig+0x4c4>)
 8005ee6:	61bb      	str	r3, [r7, #24]
        break;
 8005ee8:	e00c      	b.n	8005f04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eea:	f7fc ff67 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8005eee:	61b8      	str	r0, [r7, #24]
        break;
 8005ef0:	e008      	b.n	8005f04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef6:	61bb      	str	r3, [r7, #24]
        break;
 8005ef8:	e004      	b.n	8005f04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	77bb      	strb	r3, [r7, #30]
        break;
 8005f02:	bf00      	nop
    }

    if (pclk != 0U)
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d018      	beq.n	8005f3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	085a      	lsrs	r2, r3, #1
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	441a      	add	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b0f      	cmp	r3, #15
 8005f22:	d909      	bls.n	8005f38 <UART_SetConfig+0x4a0>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2a:	d205      	bcs.n	8005f38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60da      	str	r2, [r3, #12]
 8005f36:	e001      	b.n	8005f3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005f48:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40007c00 	.word	0x40007c00
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	00f42400 	.word	0x00f42400

08005f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01a      	beq.n	8006076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800605e:	d10a      	bne.n	8006076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	605a      	str	r2, [r3, #4]
  }
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060b4:	f7fb ff1c 	bl	8001ef0 <HAL_GetTick>
 80060b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d10e      	bne.n	80060e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f81b 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e011      	b.n	800610a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b09c      	sub	sp, #112	; 0x70
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006122:	e0a7      	b.n	8006274 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	f000 80a3 	beq.w	8006274 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612e:	f7fb fedf 	bl	8001ef0 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800613a:	429a      	cmp	r2, r3
 800613c:	d302      	bcc.n	8006144 <UART_WaitOnFlagUntilTimeout+0x32>
 800613e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006140:	2b00      	cmp	r3, #0
 8006142:	d13f      	bne.n	80061c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006158:	667b      	str	r3, [r7, #100]	; 0x64
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006164:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e6      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3308      	adds	r3, #8
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	663b      	str	r3, [r7, #96]	; 0x60
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006196:	64ba      	str	r2, [r7, #72]	; 0x48
 8006198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800619c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e5      	bne.n	8006176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e068      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d050      	beq.n	8006274 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e0:	d148      	bne.n	8006274 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620a:	637b      	str	r3, [r7, #52]	; 0x34
 800620c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e6      	bne.n	80061ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	613b      	str	r3, [r7, #16]
   return(result);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	66bb      	str	r3, [r7, #104]	; 0x68
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3308      	adds	r3, #8
 800623c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800623e:	623a      	str	r2, [r7, #32]
 8006240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	69f9      	ldr	r1, [r7, #28]
 8006244:	6a3a      	ldr	r2, [r7, #32]
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	61bb      	str	r3, [r7, #24]
   return(result);
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e5      	bne.n	800621e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e010      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69da      	ldr	r2, [r3, #28]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4013      	ands	r3, r2
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	429a      	cmp	r2, r3
 8006290:	f43f af48 	beq.w	8006124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3770      	adds	r7, #112	; 0x70
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b097      	sub	sp, #92	; 0x5c
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d2:	d10e      	bne.n	80062f2 <UART_Start_Receive_IT+0x52>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <UART_Start_Receive_IT+0x48>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062e6:	e02d      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	22ff      	movs	r2, #255	; 0xff
 80062ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062f0:	e028      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10d      	bne.n	8006316 <UART_Start_Receive_IT+0x76>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <UART_Start_Receive_IT+0x6c>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800630a:	e01b      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	227f      	movs	r2, #127	; 0x7f
 8006310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006314:	e016      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800631e:	d10d      	bne.n	800633c <UART_Start_Receive_IT+0x9c>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <UART_Start_Receive_IT+0x92>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	227f      	movs	r2, #127	; 0x7f
 800632c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006330:	e008      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	223f      	movs	r2, #63	; 0x3f
 8006336:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800633a:	e003      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2222      	movs	r2, #34	; 0x22
 8006350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	657b      	str	r3, [r7, #84]	; 0x54
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006374:	64ba      	str	r2, [r7, #72]	; 0x48
 8006376:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800637a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006390:	d107      	bne.n	80063a2 <UART_Start_Receive_IT+0x102>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a21      	ldr	r2, [pc, #132]	; (8006424 <UART_Start_Receive_IT+0x184>)
 800639e:	669a      	str	r2, [r3, #104]	; 0x68
 80063a0:	e002      	b.n	80063a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a20      	ldr	r2, [pc, #128]	; (8006428 <UART_Start_Receive_IT+0x188>)
 80063a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d019      	beq.n	80063e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80063c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
 80063d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e6      	bne.n	80063b0 <UART_Start_Receive_IT+0x110>
 80063e2:	e018      	b.n	8006416 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	613b      	str	r3, [r7, #16]
   return(result);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f043 0320 	orr.w	r3, r3, #32
 80063f8:	653b      	str	r3, [r7, #80]	; 0x50
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006402:	623b      	str	r3, [r7, #32]
 8006404:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	69f9      	ldr	r1, [r7, #28]
 8006408:	6a3a      	ldr	r2, [r7, #32]
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e6      	bne.n	80063e4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	375c      	adds	r7, #92	; 0x5c
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	080066db 	.word	0x080066db
 8006428:	08006575 	.word	0x08006575

0800642c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b095      	sub	sp, #84	; 0x54
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006448:	64fb      	str	r3, [r7, #76]	; 0x4c
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006452:	643b      	str	r3, [r7, #64]	; 0x40
 8006454:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e6      	bne.n	8006434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3308      	adds	r3, #8
 800646c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	61fb      	str	r3, [r7, #28]
   return(result);
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	64bb      	str	r3, [r7, #72]	; 0x48
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3308      	adds	r3, #8
 8006484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e5      	bne.n	8006466 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d118      	bne.n	80064d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	647b      	str	r3, [r7, #68]	; 0x44
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6979      	ldr	r1, [r7, #20]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	613b      	str	r3, [r7, #16]
   return(result);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e6      	bne.n	80064a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064e8:	bf00      	nop
 80064ea:	3754      	adds	r7, #84	; 0x54
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff faaa 	bl	8005a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006518:	bf00      	nop
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	60bb      	str	r3, [r7, #8]
   return(result);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653c:	61fb      	str	r3, [r7, #28]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6979      	ldr	r1, [r7, #20]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	613b      	str	r3, [r7, #16]
   return(result);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e6      	bne.n	8006528 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff fa76 	bl	8005a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800656c:	bf00      	nop
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b096      	sub	sp, #88	; 0x58
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006582:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800658c:	2b22      	cmp	r3, #34	; 0x22
 800658e:	f040 8098 	bne.w	80066c2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800659c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80065a0:	b2d9      	uxtb	r1, r3
 80065a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ac:	400a      	ands	r2, r1
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d17b      	bne.n	80066d2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ee:	653b      	str	r3, [r7, #80]	; 0x50
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f8:	647b      	str	r3, [r7, #68]	; 0x44
 80065fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e6      	bne.n	80065da <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3308      	adds	r3, #8
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	623b      	str	r3, [r7, #32]
   return(result);
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800662c:	633a      	str	r2, [r7, #48]	; 0x30
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e5      	bne.n	800660c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006658:	2b01      	cmp	r3, #1
 800665a:	d12e      	bne.n	80066ba <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0310 	bic.w	r3, r3, #16
 8006676:	64bb      	str	r3, [r7, #72]	; 0x48
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	69b9      	ldr	r1, [r7, #24]
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	617b      	str	r3, [r7, #20]
   return(result);
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e6      	bne.n	8006662 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f003 0310 	and.w	r3, r3, #16
 800669e:	2b10      	cmp	r3, #16
 80066a0:	d103      	bne.n	80066aa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2210      	movs	r2, #16
 80066a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff f9e4 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066b8:	e00b      	b.n	80066d2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fa fce0 	bl	8001080 <HAL_UART_RxCpltCallback>
}
 80066c0:	e007      	b.n	80066d2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699a      	ldr	r2, [r3, #24]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f042 0208 	orr.w	r2, r2, #8
 80066d0:	619a      	str	r2, [r3, #24]
}
 80066d2:	bf00      	nop
 80066d4:	3758      	adds	r7, #88	; 0x58
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b096      	sub	sp, #88	; 0x58
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f2:	2b22      	cmp	r3, #34	; 0x22
 80066f4:	f040 8098 	bne.w	8006828 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006708:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800670c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006710:	4013      	ands	r3, r2
 8006712:	b29a      	uxth	r2, r3
 8006714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006716:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671c:	1c9a      	adds	r2, r3, #2
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d17b      	bne.n	8006838 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675e:	643b      	str	r3, [r7, #64]	; 0x40
 8006760:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e6      	bne.n	8006740 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3308      	adds	r3, #8
 8006778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	61fb      	str	r3, [r7, #28]
   return(result);
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	64bb      	str	r3, [r7, #72]	; 0x48
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3308      	adds	r3, #8
 8006790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006794:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e5      	bne.n	8006772 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d12e      	bne.n	8006820 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f023 0310 	bic.w	r3, r3, #16
 80067dc:	647b      	str	r3, [r7, #68]	; 0x44
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6979      	ldr	r1, [r7, #20]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	613b      	str	r3, [r7, #16]
   return(result);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e6      	bne.n	80067c8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b10      	cmp	r3, #16
 8006806:	d103      	bne.n	8006810 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2210      	movs	r2, #16
 800680e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff f931 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800681e:	e00b      	b.n	8006838 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7fa fc2d 	bl	8001080 <HAL_UART_RxCpltCallback>
}
 8006826:	e007      	b.n	8006838 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0208 	orr.w	r2, r2, #8
 8006836:	619a      	str	r2, [r3, #24]
}
 8006838:	bf00      	nop
 800683a:	3758      	adds	r7, #88	; 0x58
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <_strtol_l.constprop.0>:
 8006840:	2b01      	cmp	r3, #1
 8006842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006846:	d001      	beq.n	800684c <_strtol_l.constprop.0+0xc>
 8006848:	2b24      	cmp	r3, #36	; 0x24
 800684a:	d906      	bls.n	800685a <_strtol_l.constprop.0+0x1a>
 800684c:	f000 f8a4 	bl	8006998 <__errno>
 8006850:	2316      	movs	r3, #22
 8006852:	6003      	str	r3, [r0, #0]
 8006854:	2000      	movs	r0, #0
 8006856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006940 <_strtol_l.constprop.0+0x100>
 800685e:	460d      	mov	r5, r1
 8006860:	462e      	mov	r6, r5
 8006862:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006866:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800686a:	f017 0708 	ands.w	r7, r7, #8
 800686e:	d1f7      	bne.n	8006860 <_strtol_l.constprop.0+0x20>
 8006870:	2c2d      	cmp	r4, #45	; 0x2d
 8006872:	d132      	bne.n	80068da <_strtol_l.constprop.0+0x9a>
 8006874:	782c      	ldrb	r4, [r5, #0]
 8006876:	2701      	movs	r7, #1
 8006878:	1cb5      	adds	r5, r6, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d05b      	beq.n	8006936 <_strtol_l.constprop.0+0xf6>
 800687e:	2b10      	cmp	r3, #16
 8006880:	d109      	bne.n	8006896 <_strtol_l.constprop.0+0x56>
 8006882:	2c30      	cmp	r4, #48	; 0x30
 8006884:	d107      	bne.n	8006896 <_strtol_l.constprop.0+0x56>
 8006886:	782c      	ldrb	r4, [r5, #0]
 8006888:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800688c:	2c58      	cmp	r4, #88	; 0x58
 800688e:	d14d      	bne.n	800692c <_strtol_l.constprop.0+0xec>
 8006890:	786c      	ldrb	r4, [r5, #1]
 8006892:	2310      	movs	r3, #16
 8006894:	3502      	adds	r5, #2
 8006896:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800689a:	f108 38ff 	add.w	r8, r8, #4294967295
 800689e:	f04f 0e00 	mov.w	lr, #0
 80068a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80068a6:	4676      	mov	r6, lr
 80068a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80068ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80068b0:	f1bc 0f09 	cmp.w	ip, #9
 80068b4:	d816      	bhi.n	80068e4 <_strtol_l.constprop.0+0xa4>
 80068b6:	4664      	mov	r4, ip
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	dd24      	ble.n	8006906 <_strtol_l.constprop.0+0xc6>
 80068bc:	f1be 3fff 	cmp.w	lr, #4294967295
 80068c0:	d008      	beq.n	80068d4 <_strtol_l.constprop.0+0x94>
 80068c2:	45b1      	cmp	r9, r6
 80068c4:	d31c      	bcc.n	8006900 <_strtol_l.constprop.0+0xc0>
 80068c6:	d101      	bne.n	80068cc <_strtol_l.constprop.0+0x8c>
 80068c8:	45a2      	cmp	sl, r4
 80068ca:	db19      	blt.n	8006900 <_strtol_l.constprop.0+0xc0>
 80068cc:	fb06 4603 	mla	r6, r6, r3, r4
 80068d0:	f04f 0e01 	mov.w	lr, #1
 80068d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068d8:	e7e8      	b.n	80068ac <_strtol_l.constprop.0+0x6c>
 80068da:	2c2b      	cmp	r4, #43	; 0x2b
 80068dc:	bf04      	itt	eq
 80068de:	782c      	ldrbeq	r4, [r5, #0]
 80068e0:	1cb5      	addeq	r5, r6, #2
 80068e2:	e7ca      	b.n	800687a <_strtol_l.constprop.0+0x3a>
 80068e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80068e8:	f1bc 0f19 	cmp.w	ip, #25
 80068ec:	d801      	bhi.n	80068f2 <_strtol_l.constprop.0+0xb2>
 80068ee:	3c37      	subs	r4, #55	; 0x37
 80068f0:	e7e2      	b.n	80068b8 <_strtol_l.constprop.0+0x78>
 80068f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80068f6:	f1bc 0f19 	cmp.w	ip, #25
 80068fa:	d804      	bhi.n	8006906 <_strtol_l.constprop.0+0xc6>
 80068fc:	3c57      	subs	r4, #87	; 0x57
 80068fe:	e7db      	b.n	80068b8 <_strtol_l.constprop.0+0x78>
 8006900:	f04f 3eff 	mov.w	lr, #4294967295
 8006904:	e7e6      	b.n	80068d4 <_strtol_l.constprop.0+0x94>
 8006906:	f1be 3fff 	cmp.w	lr, #4294967295
 800690a:	d105      	bne.n	8006918 <_strtol_l.constprop.0+0xd8>
 800690c:	2322      	movs	r3, #34	; 0x22
 800690e:	6003      	str	r3, [r0, #0]
 8006910:	4646      	mov	r6, r8
 8006912:	b942      	cbnz	r2, 8006926 <_strtol_l.constprop.0+0xe6>
 8006914:	4630      	mov	r0, r6
 8006916:	e79e      	b.n	8006856 <_strtol_l.constprop.0+0x16>
 8006918:	b107      	cbz	r7, 800691c <_strtol_l.constprop.0+0xdc>
 800691a:	4276      	negs	r6, r6
 800691c:	2a00      	cmp	r2, #0
 800691e:	d0f9      	beq.n	8006914 <_strtol_l.constprop.0+0xd4>
 8006920:	f1be 0f00 	cmp.w	lr, #0
 8006924:	d000      	beq.n	8006928 <_strtol_l.constprop.0+0xe8>
 8006926:	1e69      	subs	r1, r5, #1
 8006928:	6011      	str	r1, [r2, #0]
 800692a:	e7f3      	b.n	8006914 <_strtol_l.constprop.0+0xd4>
 800692c:	2430      	movs	r4, #48	; 0x30
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1b1      	bne.n	8006896 <_strtol_l.constprop.0+0x56>
 8006932:	2308      	movs	r3, #8
 8006934:	e7af      	b.n	8006896 <_strtol_l.constprop.0+0x56>
 8006936:	2c30      	cmp	r4, #48	; 0x30
 8006938:	d0a5      	beq.n	8006886 <_strtol_l.constprop.0+0x46>
 800693a:	230a      	movs	r3, #10
 800693c:	e7ab      	b.n	8006896 <_strtol_l.constprop.0+0x56>
 800693e:	bf00      	nop
 8006940:	08006ac1 	.word	0x08006ac1

08006944 <strtol>:
 8006944:	4613      	mov	r3, r2
 8006946:	460a      	mov	r2, r1
 8006948:	4601      	mov	r1, r0
 800694a:	4802      	ldr	r0, [pc, #8]	; (8006954 <strtol+0x10>)
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f7ff bf77 	b.w	8006840 <_strtol_l.constprop.0>
 8006952:	bf00      	nop
 8006954:	20000084 	.word	0x20000084

08006958 <memset>:
 8006958:	4402      	add	r2, r0
 800695a:	4603      	mov	r3, r0
 800695c:	4293      	cmp	r3, r2
 800695e:	d100      	bne.n	8006962 <memset+0xa>
 8006960:	4770      	bx	lr
 8006962:	f803 1b01 	strb.w	r1, [r3], #1
 8006966:	e7f9      	b.n	800695c <memset+0x4>

08006968 <clock>:
 8006968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800696a:	4b08      	ldr	r3, [pc, #32]	; (800698c <clock+0x24>)
 800696c:	4669      	mov	r1, sp
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	f000 f80e 	bl	8006990 <_times_r>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d006      	beq.n	8006986 <clock+0x1e>
 8006978:	e9dd 0300 	ldrd	r0, r3, [sp]
 800697c:	4418      	add	r0, r3
 800697e:	9b02      	ldr	r3, [sp, #8]
 8006980:	4418      	add	r0, r3
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	4418      	add	r0, r3
 8006986:	b005      	add	sp, #20
 8006988:	f85d fb04 	ldr.w	pc, [sp], #4
 800698c:	20000084 	.word	0x20000084

08006990 <_times_r>:
 8006990:	4608      	mov	r0, r1
 8006992:	f7fb ba15 	b.w	8001dc0 <_times>
	...

08006998 <__errno>:
 8006998:	4b01      	ldr	r3, [pc, #4]	; (80069a0 <__errno+0x8>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	20000084 	.word	0x20000084

080069a4 <__libc_init_array>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	4d0d      	ldr	r5, [pc, #52]	; (80069dc <__libc_init_array+0x38>)
 80069a8:	4c0d      	ldr	r4, [pc, #52]	; (80069e0 <__libc_init_array+0x3c>)
 80069aa:	1b64      	subs	r4, r4, r5
 80069ac:	10a4      	asrs	r4, r4, #2
 80069ae:	2600      	movs	r6, #0
 80069b0:	42a6      	cmp	r6, r4
 80069b2:	d109      	bne.n	80069c8 <__libc_init_array+0x24>
 80069b4:	4d0b      	ldr	r5, [pc, #44]	; (80069e4 <__libc_init_array+0x40>)
 80069b6:	4c0c      	ldr	r4, [pc, #48]	; (80069e8 <__libc_init_array+0x44>)
 80069b8:	f000 f86a 	bl	8006a90 <_init>
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	2600      	movs	r6, #0
 80069c2:	42a6      	cmp	r6, r4
 80069c4:	d105      	bne.n	80069d2 <__libc_init_array+0x2e>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069cc:	4798      	blx	r3
 80069ce:	3601      	adds	r6, #1
 80069d0:	e7ee      	b.n	80069b0 <__libc_init_array+0xc>
 80069d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d6:	4798      	blx	r3
 80069d8:	3601      	adds	r6, #1
 80069da:	e7f2      	b.n	80069c2 <__libc_init_array+0x1e>
 80069dc:	08006bcc 	.word	0x08006bcc
 80069e0:	08006bcc 	.word	0x08006bcc
 80069e4:	08006bcc 	.word	0x08006bcc
 80069e8:	08006bd0 	.word	0x08006bd0

080069ec <fmaxf>:
 80069ec:	b508      	push	{r3, lr}
 80069ee:	ed2d 8b02 	vpush	{d8}
 80069f2:	eeb0 8a40 	vmov.f32	s16, s0
 80069f6:	eef0 8a60 	vmov.f32	s17, s1
 80069fa:	f000 f82d 	bl	8006a58 <__fpclassifyf>
 80069fe:	b148      	cbz	r0, 8006a14 <fmaxf+0x28>
 8006a00:	eeb0 0a68 	vmov.f32	s0, s17
 8006a04:	f000 f828 	bl	8006a58 <__fpclassifyf>
 8006a08:	b130      	cbz	r0, 8006a18 <fmaxf+0x2c>
 8006a0a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a12:	dc01      	bgt.n	8006a18 <fmaxf+0x2c>
 8006a14:	eeb0 8a68 	vmov.f32	s16, s17
 8006a18:	eeb0 0a48 	vmov.f32	s0, s16
 8006a1c:	ecbd 8b02 	vpop	{d8}
 8006a20:	bd08      	pop	{r3, pc}

08006a22 <fminf>:
 8006a22:	b508      	push	{r3, lr}
 8006a24:	ed2d 8b02 	vpush	{d8}
 8006a28:	eeb0 8a40 	vmov.f32	s16, s0
 8006a2c:	eef0 8a60 	vmov.f32	s17, s1
 8006a30:	f000 f812 	bl	8006a58 <__fpclassifyf>
 8006a34:	b148      	cbz	r0, 8006a4a <fminf+0x28>
 8006a36:	eeb0 0a68 	vmov.f32	s0, s17
 8006a3a:	f000 f80d 	bl	8006a58 <__fpclassifyf>
 8006a3e:	b130      	cbz	r0, 8006a4e <fminf+0x2c>
 8006a40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a48:	d401      	bmi.n	8006a4e <fminf+0x2c>
 8006a4a:	eeb0 8a68 	vmov.f32	s16, s17
 8006a4e:	eeb0 0a48 	vmov.f32	s0, s16
 8006a52:	ecbd 8b02 	vpop	{d8}
 8006a56:	bd08      	pop	{r3, pc}

08006a58 <__fpclassifyf>:
 8006a58:	ee10 3a10 	vmov	r3, s0
 8006a5c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8006a60:	d00d      	beq.n	8006a7e <__fpclassifyf+0x26>
 8006a62:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8006a66:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006a6a:	d30a      	bcc.n	8006a82 <__fpclassifyf+0x2a>
 8006a6c:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <__fpclassifyf+0x34>)
 8006a6e:	1e42      	subs	r2, r0, #1
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d908      	bls.n	8006a86 <__fpclassifyf+0x2e>
 8006a74:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8006a78:	4258      	negs	r0, r3
 8006a7a:	4158      	adcs	r0, r3
 8006a7c:	4770      	bx	lr
 8006a7e:	2002      	movs	r0, #2
 8006a80:	4770      	bx	lr
 8006a82:	2004      	movs	r0, #4
 8006a84:	4770      	bx	lr
 8006a86:	2003      	movs	r0, #3
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	007ffffe 	.word	0x007ffffe

08006a90 <_init>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr

08006a9c <_fini>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr
