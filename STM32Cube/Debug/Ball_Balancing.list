
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006de4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006fac  08006fac  00016fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f0  080070f0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080070f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000084  0800717c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  0800717c  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cac  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c4  00000000  00000000  00037da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  0003b268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e65  00000000  00000000  0003c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000048e7  00000000  00000000  0003d365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fa1  00000000  00000000  00041c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f24cd  00000000  00000000  0005bbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e9c  00000000  00000000  0014e0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00152f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000084 	.word	0x20000084
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006f94 	.word	0x08006f94

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000088 	.word	0x20000088
 8000204:	08006f94 	.word	0x08006f94

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <SERVO_Init>:
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 90.0f);
 800051c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000538 <SERVO_Init+0x24>
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 f80b 	bl	800053c <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f9ed 	bl	8000908 <PWM_Init>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	42b40000 	.word	0x42b40000

0800053c <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 120.0f, 160.0f);
 8000548:	eddf 0a18 	vldr	s1, [pc, #96]	; 80005ac <SERVO_WritePosition+0x70>
 800054c:	ed97 0a00 	vldr	s0, [r7]
 8000550:	f006 fce9 	bl	8006f26 <fminf>
 8000554:	eef0 7a40 	vmov.f32	s15, s0
 8000558:	eddf 0a15 	vldr	s1, [pc, #84]	; 80005b0 <SERVO_WritePosition+0x74>
 800055c:	eeb0 0a67 	vmov.f32	s0, s15
 8000560:	f006 fcc6 	bl	8006ef0 <fmaxf>
 8000564:	eef0 7a40 	vmov.f32	s15, s0
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 120.0f, 160.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	edd3 7a03 	vldr	s15, [r3, #12]
 8000574:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80005b0 <SERVO_WritePosition+0x74>
 8000578:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800057c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80005b4 <SERVO_WritePosition+0x78>
 8000580:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000584:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800058c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000594:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	ed97 0a03 	vldr	s0, [r7, #12]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f9ca 	bl	8000938 <PWM_WriteDuty>
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	43200000 	.word	0x43200000
 80005b0:	42f00000 	.word	0x42f00000
 80005b4:	42200000 	.word	0x42200000

080005b8 <hc_sr04_init>:
/* Public variables ----------------------------------------------------------*/

/*Private functions------------------------------------------------*/

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fdba 	bl	8004158 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4619      	mov	r1, r3
 80005ee:	4610      	mov	r0, r2
 80005f0:	f003 fc56 	bl	8003ea0 <HAL_TIM_PWM_Start>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <hc_sr04_convert_us_to_cm>:

uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <hc_sr04_convert_us_to_cm+0x20>)
 8000608:	fba2 2303 	umull	r2, r3, r2, r3
 800060c:	095b      	lsrs	r3, r3, #5
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	8d3dcb09 	.word	0x8d3dcb09

08000620 <position>:
int position(float dis1, float dis2, float pos)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	ed87 0a03 	vstr	s0, [r7, #12]
 800062a:	edc7 0a02 	vstr	s1, [r7, #8]
 800062e:	ed87 1a01 	vstr	s2, [r7, #4]
 pos = 0;
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
if (dis1<29){
 8000638:	edd7 7a03 	vldr	s15, [r7, #12]
 800063c:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000648:	d502      	bpl.n	8000650 <position+0x30>
    pos = dis1;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e037      	b.n	80006c0 <position+0xa0>
}
else if(dis1 >=29 )
 8000650:	edd7 7a03 	vldr	s15, [r7, #12]
 8000654:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800065c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000660:	db08      	blt.n	8000674 <position+0x54>
{
    pos = 60- dis2;
 8000662:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80006d8 <position+0xb8>
 8000666:	edd7 7a02 	vldr	s15, [r7, #8]
 800066a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800066e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000672:	e025      	b.n	80006c0 <position+0xa0>
}
else if (dis1>= 29 && dis1 <= 31 && dis2 >= 29 && dis2 <= 31){
 8000674:	edd7 7a03 	vldr	s15, [r7, #12]
 8000678:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 800067c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000684:	db1c      	blt.n	80006c0 <position+0xa0>
 8000686:	edd7 7a03 	vldr	s15, [r7, #12]
 800068a:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800068e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000696:	d813      	bhi.n	80006c0 <position+0xa0>
 8000698:	edd7 7a02 	vldr	s15, [r7, #8]
 800069c:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 80006a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a8:	db0a      	blt.n	80006c0 <position+0xa0>
 80006aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80006ae:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80006b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ba:	d801      	bhi.n	80006c0 <position+0xa0>
    pos = 30;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <position+0xbc>)
 80006be:	607b      	str	r3, [r7, #4]
}
return pos;
 80006c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006c8:	ee17 3a90 	vmov	r3, s15
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	42700000 	.word	0x42700000
 80006dc:	41f00000 	.word	0x41f00000

080006e0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(htim);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f003 fae5 	bl	8003cc4 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80006fa:	bf00      	nop
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	429a      	cmp	r2, r3
 8000706:	d3f9      	bcc.n	80006fc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f003 fb4b 	bl	8003da4 <HAL_TIM_Base_Stop>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
 8000724:	4613      	mov	r3, r2
 8000726:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000728:	78bb      	ldrb	r3, [r7, #2]
 800072a:	f023 030f 	bic.w	r3, r3, #15
 800072e:	b2da      	uxtb	r2, r3
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	4313      	orrs	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	f043 030c 	orr.w	r3, r3, #12
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <__lcd_i2c_write+0xac>)
 800073e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <__lcd_i2c_write+0xac>)
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <__lcd_i2c_write+0xac>)
 8000746:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000748:	78bb      	ldrb	r3, [r7, #2]
 800074a:	f023 030f 	bic.w	r3, r3, #15
 800074e:	b2da      	uxtb	r2, r3
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	4313      	orrs	r3, r2
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <__lcd_i2c_write+0xac>)
 800075e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000760:	78bb      	ldrb	r3, [r7, #2]
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	b2da      	uxtb	r2, r3
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	4313      	orrs	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f043 030c 	orr.w	r3, r3, #12
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <__lcd_i2c_write+0xac>)
 8000774:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <__lcd_i2c_write+0xac>)
 8000778:	78da      	ldrb	r2, [r3, #3]
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <__lcd_i2c_write+0xac>)
 800077c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800077e:	78bb      	ldrb	r3, [r7, #2]
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	b2da      	uxtb	r2, r3
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	4313      	orrs	r3, r2
 8000788:	b2db      	uxtb	r3, r3
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <__lcd_i2c_write+0xac>)
 8000792:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	889b      	ldrh	r3, [r3, #4]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	b299      	uxth	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2306      	movs	r3, #6
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <__lcd_i2c_write+0xac>)
 80007aa:	f001 fd9b 	bl	80022e4 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	2132      	movs	r1, #50	; 0x32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff93 	bl	80006e0 <__lcd_delay_us>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000a0 	.word	0x200000a0

080007c8 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	461a      	mov	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ff9c 	bl	8000718 <__lcd_i2c_write>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	461a      	mov	r2, r3
 80007f8:	2101      	movs	r1, #1
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff8c 	bl	8000718 <__lcd_i2c_write>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  __lcd_delay(hlcd->Timer, 15.2);  // >15 ms
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff61 	bl	80006e0 <__lcd_delay_us>

  // 4-bit mode
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 800081e:	2103      	movs	r1, #3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ffd1 	bl	80007c8 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 4.1 ms
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	f241 0103 	movw	r1, #4099	; 0x1003
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff56 	bl	80006e0 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000834:	2103      	movs	r1, #3
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ffc6 	bl	80007c8 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 0.1 ms
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	f241 0103 	movw	r1, #4099	; 0x1003
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff4b 	bl	80006e0 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 800084a:	2103      	movs	r1, #3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ffbb 	bl	80007c8 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, 0x02);  // 0001
 8000852:	2102      	movs	r1, #2
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ffb7 	bl	80007c8 <__lcd_i2c_write_command>

  hlcd->IsInitialized = 1;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2201      	movs	r2, #1
 800085e:	741a      	strb	r2, [r3, #16]

  __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8000860:	2128      	movs	r1, #40	; 0x28
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffb0 	bl	80007c8 <__lcd_i2c_write_command>

  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                      // Clear screen
 8000868:	2101      	movs	r1, #1
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffac 	bl	80007c8 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 1.6);                                         // > 1.52 ms
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff31 	bl	80006e0 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D | LCD_OPT_B); // LCD on, Cursor off, On blink
 800087e:	210d      	movs	r1, #13
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ffa1 	bl	80007c8 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);       // Cursor increment on
 8000886:	2106      	movs	r1, #6
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff9d 	bl	80007c8 <__lcd_i2c_write_command>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 8000896:	b590      	push	{r4, r7, lr}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e00a      	b.n	80008bc <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4619      	mov	r1, r3
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff99 	bl	80007e8 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	3301      	adds	r3, #1
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	7bfc      	ldrb	r4, [r7, #15]
 80008be:	6838      	ldr	r0, [r7, #0]
 80008c0:	f7ff fca2 	bl	8000208 <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	429c      	cmp	r4, r3
 80008c8:	d3ed      	bcc.n	80008a6 <LCD_I2C_printStr+0x10>
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <LCD_I2C_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
 80008e0:	4613      	mov	r3, r2
 80008e2:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <LCD_I2C_SetCursor+0x30>)
 80008e8:	5cd2      	ldrb	r2, [r2, r3]
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	4413      	add	r3, r2
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	3b80      	subs	r3, #128	; 0x80
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ff66 	bl	80007c8 <__lcd_i2c_write_command>
  #endif
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	08006fc8 	.word	0x08006fc8

08000908 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	edd3 7a02 	vldr	s15, [r3, #8]
 8000916:	eeb0 0a67 	vmov.f32	s0, s15
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f80c 	bl	8000938 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	4619      	mov	r1, r3
 800092a:	4610      	mov	r0, r2
 800092c:	f003 fab8 	bl	8003ea0 <HAL_TIM_PWM_Start>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8000944:	edd7 7a00 	vldr	s15, [r7]
 8000948:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000950:	d503      	bpl.n	800095a <PWM_WriteDuty+0x22>
    duty = 0.0;
 8000952:	f04f 0300 	mov.w	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	e00a      	b.n	8000970 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800095a:	edd7 7a00 	vldr	s15, [r7]
 800095e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000a1c <PWM_WriteDuty+0xe4>
 8000962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	dd01      	ble.n	8000970 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <PWM_WriteDuty+0xe8>)
 800096e:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097e:	3301      	adds	r3, #1
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000988:	edd7 7a00 	vldr	s15, [r7]
 800098c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000990:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000a1c <PWM_WriteDuty+0xe4>
 8000994:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800099c:	ee17 3a90 	vmov	r3, s15
 80009a0:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d105      	bne.n	80009b6 <PWM_WriteDuty+0x7e>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009b4:	e02c      	b.n	8000a10 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d105      	bne.n	80009ca <PWM_WriteDuty+0x92>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80009c8:	e022      	b.n	8000a10 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d105      	bne.n	80009de <PWM_WriteDuty+0xa6>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80009dc:	e018      	b.n	8000a10 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b0c      	cmp	r3, #12
 80009e4:	d105      	bne.n	80009f2 <PWM_WriteDuty+0xba>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009f0:	e00e      	b.n	8000a10 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b10      	cmp	r3, #16
 80009f8:	d105      	bne.n	8000a06 <PWM_WriteDuty+0xce>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000a04:	e004      	b.n	8000a10 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	42c80000 	.word	0x42c80000
 8000a20:	42c80000 	.word	0x42c80000

08000a24 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b8c      	ldr	r3, [pc, #560]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a8b      	ldr	r2, [pc, #556]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b89      	ldr	r3, [pc, #548]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b86      	ldr	r3, [pc, #536]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a85      	ldr	r2, [pc, #532]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b83      	ldr	r3, [pc, #524]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b80      	ldr	r3, [pc, #512]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a7f      	ldr	r2, [pc, #508]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b7d      	ldr	r3, [pc, #500]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b7a      	ldr	r3, [pc, #488]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a79      	ldr	r2, [pc, #484]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b77      	ldr	r3, [pc, #476]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b74      	ldr	r3, [pc, #464]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a73      	ldr	r2, [pc, #460]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b71      	ldr	r3, [pc, #452]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	4b6e      	ldr	r3, [pc, #440]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a6d      	ldr	r2, [pc, #436]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b6b      	ldr	r3, [pc, #428]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aca:	4b68      	ldr	r3, [pc, #416]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a67      	ldr	r2, [pc, #412]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b65      	ldr	r3, [pc, #404]	; (8000c6c <MX_GPIO_Init+0x248>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4862      	ldr	r0, [pc, #392]	; (8000c70 <MX_GPIO_Init+0x24c>)
 8000ae8:	f001 fb52 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af2:	4860      	ldr	r0, [pc, #384]	; (8000c74 <MX_GPIO_Init+0x250>)
 8000af4:	f001 fb4c 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2140      	movs	r1, #64	; 0x40
 8000afc:	485e      	ldr	r0, [pc, #376]	; (8000c78 <MX_GPIO_Init+0x254>)
 8000afe:	f001 fb47 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4855      	ldr	r0, [pc, #340]	; (8000c70 <MX_GPIO_Init+0x24c>)
 8000b1a:	f001 f98d 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	484e      	ldr	r0, [pc, #312]	; (8000c70 <MX_GPIO_Init+0x24c>)
 8000b36:	f001 f97f 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b3a:	2332      	movs	r3, #50	; 0x32
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4a:	230b      	movs	r3, #11
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4846      	ldr	r0, [pc, #280]	; (8000c70 <MX_GPIO_Init+0x24c>)
 8000b56:	f001 f96f 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b5a:	2386      	movs	r3, #134	; 0x86
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4841      	ldr	r0, [pc, #260]	; (8000c7c <MX_GPIO_Init+0x258>)
 8000b76:	f001 f95f 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	483b      	ldr	r0, [pc, #236]	; (8000c7c <MX_GPIO_Init+0x258>)
 8000b8e:	f001 f953 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b92:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4832      	ldr	r0, [pc, #200]	; (8000c74 <MX_GPIO_Init+0x250>)
 8000bac:	f001 f944 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc2:	230b      	movs	r3, #11
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4829      	ldr	r0, [pc, #164]	; (8000c74 <MX_GPIO_Init+0x250>)
 8000bce:	f001 f933 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bd2:	2340      	movs	r3, #64	; 0x40
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4823      	ldr	r0, [pc, #140]	; (8000c78 <MX_GPIO_Init+0x254>)
 8000bea:	f001 f925 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	481d      	ldr	r0, [pc, #116]	; (8000c78 <MX_GPIO_Init+0x254>)
 8000c02:	f001 f919 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c18:	230a      	movs	r3, #10
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4816      	ldr	r0, [pc, #88]	; (8000c7c <MX_GPIO_Init+0x258>)
 8000c24:	f001 f908 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <MX_GPIO_Init+0x258>)
 8000c3e:	f001 f8fb 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_GPIO_Init+0x254>)
 8000c60:	f001 f8ea 	bl	8001e38 <HAL_GPIO_Init>

}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	; 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40021800 	.word	0x40021800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000c86:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <MX_I2C1_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <MX_I2C1_Init+0x7c>)
 8000c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000cbc:	f001 fa82 	bl	80021c4 <HAL_I2C_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cc6:	f000 fa15 	bl	80010f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000cce:	f001 fdef 	bl	80028b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cd8:	f000 fa0c 	bl	80010f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_I2C1_Init+0x74>)
 8000ce0:	f001 fe31 	bl	8002946 <HAL_I2CEx_ConfigDigitalFilter>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f000 fa03 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000a8 	.word	0x200000a8
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	20404768 	.word	0x20404768

08000d00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0aa      	sub	sp, #168	; 0xa8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2284      	movs	r2, #132	; 0x84
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f006 f8b3 	bl	8006e8c <memset>
  if(i2cHandle->Instance==I2C1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <HAL_I2C_MspInit+0xb4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d13c      	bne.n	8000daa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fb78 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d4a:	f000 f9d3 	bl	80010f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_I2C_MspInit+0xb8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_I2C_MspInit+0xb8>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_I2C_MspInit+0xb8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d80:	2304      	movs	r3, #4
 8000d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <HAL_I2C_MspInit+0xbc>)
 8000d8e:	f001 f853 	bl	8001e38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_I2C_MspInit+0xb8>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_I2C_MspInit+0xb8>)
 8000d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_I2C_MspInit+0xb8>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000daa:	bf00      	nop
 8000dac:	37a8      	adds	r7, #168	; 0xa8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]


}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <HAL_UART_RxCpltCallback+0x7c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d130      	bne.n	8000e46 <HAL_UART_RxCpltCallback+0x72>
  {
	SERVO_WritePosition(&hservo1, 180 - strtol((char*)tx_buffer, 0, 10));
 8000de4:	220a      	movs	r2, #10
 8000de6:	2100      	movs	r1, #0
 8000de8:	481a      	ldr	r0, [pc, #104]	; (8000e54 <HAL_UART_RxCpltCallback+0x80>)
 8000dea:	f006 f845 	bl	8006e78 <strtol>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000e00:	4815      	ldr	r0, [pc, #84]	; (8000e58 <HAL_UART_RxCpltCallback+0x84>)
 8000e02:	f7ff fb9b 	bl	800053c <SERVO_WritePosition>
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8000e06:	2303      	movs	r3, #3
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4911      	ldr	r1, [pc, #68]	; (8000e54 <HAL_UART_RxCpltCallback+0x80>)
 8000e0e:	4810      	ldr	r0, [pc, #64]	; (8000e50 <HAL_UART_RxCpltCallback+0x7c>)
 8000e10:	f004 fda6 	bl	8005960 <HAL_UART_Receive_IT>

    text[i] = character;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_UART_RxCpltCallback+0x88>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <HAL_UART_RxCpltCallback+0x8c>)
 8000e1a:	7811      	ldrb	r1, [r2, #0]
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_UART_RxCpltCallback+0x90>)
 8000e1e:	54d1      	strb	r1, [r2, r3]
    i = (i >= user_len - 1)? 0 :(i+1);
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_RxCpltCallback+0x94>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	1e5a      	subs	r2, r3, #1
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_UART_RxCpltCallback+0x88>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d903      	bls.n	8000e36 <HAL_UART_RxCpltCallback+0x62>
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_UART_RxCpltCallback+0x88>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_UART_RxCpltCallback+0x64>
 8000e36:	2300      	movs	r3, #0
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_UART_RxCpltCallback+0x88>)
 8000e3a:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart3, &character, 1);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <HAL_UART_RxCpltCallback+0x8c>)
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <HAL_UART_RxCpltCallback+0x7c>)
 8000e42:	f004 fd8d 	bl	8005960 <HAL_UART_Receive_IT>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200002b8 	.word	0x200002b8
 8000e54:	20000138 	.word	0x20000138
 8000e58:	20000018 	.word	0x20000018
 8000e5c:	20000110 	.word	0x20000110
 8000e60:	2000010c 	.word	0x2000010c
 8000e64:	20000114 	.word	0x20000114
 8000e68:	20000014 	.word	0x20000014

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 fde1 	bl	8001a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f874 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f7ff fdd4 	bl	8000a24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e7c:	f000 fd1a 	bl	80018b4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000e80:	f000 f9bc 	bl	80011fc <MX_TIM1_Init>
  MX_TIM9_Init();
 8000e84:	f000 fb8c 	bl	80015a0 <MX_TIM9_Init>
  MX_TIM2_Init();
 8000e88:	f000 fa5c 	bl	8001344 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e8c:	f000 fab4 	bl	80013f8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000e90:	f7ff fef6 	bl	8000c80 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000e94:	f000 fb4e 	bl	8001534 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Start Sensor 1 & 2
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 8000e98:	2308      	movs	r3, #8
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <main+0xbc>)
 8000e9c:	4923      	ldr	r1, [pc, #140]	; (8000f2c <main+0xc0>)
 8000e9e:	4824      	ldr	r0, [pc, #144]	; (8000f30 <main+0xc4>)
 8000ea0:	f7ff fb8a 	bl	80005b8 <hc_sr04_init>
  hc_sr04_init(&distance_sensor2, &htim3, &htim2, TIM_CHANNEL_3);
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	4a20      	ldr	r2, [pc, #128]	; (8000f28 <main+0xbc>)
 8000ea8:	4922      	ldr	r1, [pc, #136]	; (8000f34 <main+0xc8>)
 8000eaa:	4823      	ldr	r0, [pc, #140]	; (8000f38 <main+0xcc>)
 8000eac:	f7ff fb84 	bl	80005b8 <hc_sr04_init>

  SERVO_Init(&hservo1);
 8000eb0:	4822      	ldr	r0, [pc, #136]	; (8000f3c <main+0xd0>)
 8000eb2:	f7ff fb2f 	bl	8000514 <SERVO_Init>
  SERVO_WritePosition(&hservo1, 130.0f);
 8000eb6:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000f40 <main+0xd4>
 8000eba:	4820      	ldr	r0, [pc, #128]	; (8000f3c <main+0xd0>)
 8000ebc:	f7ff fb3e 	bl	800053c <SERVO_WritePosition>
 HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	491f      	ldr	r1, [pc, #124]	; (8000f44 <main+0xd8>)
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <main+0xdc>)
 8000eca:	f004 fd49 	bl	8005960 <HAL_UART_Receive_IT>

 //LCD display
  LCD_I2C_Init(&hlcd3);
 8000ece:	481f      	ldr	r0, [pc, #124]	; (8000f4c <main+0xe0>)
 8000ed0:	f7ff fc9a 	bl	8000808 <LCD_I2C_Init>
  LCD_I2C_SetCursor(&hlcd3, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	481c      	ldr	r0, [pc, #112]	; (8000f4c <main+0xe0>)
 8000eda:	f7ff fcfb 	bl	80008d4 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "Position: ");
 8000ede:	491c      	ldr	r1, [pc, #112]	; (8000f50 <main+0xe4>)
 8000ee0:	481a      	ldr	r0, [pc, #104]	; (8000f4c <main+0xe0>)
 8000ee2:	f7ff fcd8 	bl	8000896 <LCD_I2C_printStr>


  LCD_I2C_SetCursor(&hlcd3, 0, 13);
 8000ee6:	220d      	movs	r2, #13
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4818      	ldr	r0, [pc, #96]	; (8000f4c <main+0xe0>)
 8000eec:	f7ff fcf2 	bl	80008d4 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "cm");
 8000ef0:	4918      	ldr	r1, [pc, #96]	; (8000f54 <main+0xe8>)
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <main+0xe0>)
 8000ef4:	f7ff fccf 	bl	8000896 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2101      	movs	r1, #1
 8000efc:	4813      	ldr	r0, [pc, #76]	; (8000f4c <main+0xe0>)
 8000efe:	f7ff fce9 	bl	80008d4 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "Set Point: ");
 8000f02:	4915      	ldr	r1, [pc, #84]	; (8000f58 <main+0xec>)
 8000f04:	4811      	ldr	r0, [pc, #68]	; (8000f4c <main+0xe0>)
 8000f06:	f7ff fcc6 	bl	8000896 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 14);
 8000f0a:	220e      	movs	r2, #14
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	480f      	ldr	r0, [pc, #60]	; (8000f4c <main+0xe0>)
 8000f10:	f7ff fce0 	bl	80008d4 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "cm");
 8000f14:	490f      	ldr	r1, [pc, #60]	; (8000f54 <main+0xe8>)
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <main+0xe0>)
 8000f18:	f7ff fcbd 	bl	8000896 <LCD_I2C_printStr>


  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	490f      	ldr	r1, [pc, #60]	; (8000f5c <main+0xf0>)
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <main+0xdc>)
 8000f22:	f004 fd1d 	bl	8005960 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <main+0xba>
 8000f28:	20000188 	.word	0x20000188
 8000f2c:	2000013c 	.word	0x2000013c
 8000f30:	20000118 	.word	0x20000118
 8000f34:	200001d4 	.word	0x200001d4
 8000f38:	20000128 	.word	0x20000128
 8000f3c:	20000018 	.word	0x20000018
 8000f40:	43020000 	.word	0x43020000
 8000f44:	20000138 	.word	0x20000138
 8000f48:	200002b8 	.word	0x200002b8
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	08006fac 	.word	0x08006fac
 8000f54:	08006fb8 	.word	0x08006fb8
 8000f58:	08006fbc 	.word	0x08006fbc
 8000f5c:	2000010c 	.word	0x2000010c

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	; 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	; 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 ff8c 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f84:	f001 fd2c 	bl	80029e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <SystemClock_Config+0xd4>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a29      	ldr	r2, [pc, #164]	; (8001034 <SystemClock_Config+0xd4>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <SystemClock_Config+0xd4>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <SystemClock_Config+0xd8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a24      	ldr	r2, [pc, #144]	; (8001038 <SystemClock_Config+0xd8>)
 8000fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <SystemClock_Config+0xd8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fbc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fd0:	23d8      	movs	r3, #216	; 0xd8
 8000fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fd5d 	bl	8002aa0 <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000fec:	f000 f882 	bl	80010f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ff0:	f001 fd06 	bl	8002a00 <HAL_PWREx_EnableOverDrive>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ffa:	f000 f87b 	bl	80010f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	230f      	movs	r3, #15
 8001000:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2302      	movs	r3, #2
 8001004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001010:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001014:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2107      	movs	r1, #7
 800101c:	4618      	mov	r0, r3
 800101e:	f001 ffe3 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001028:	f000 f864 	bl	80010f4 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3750      	adds	r7, #80	; 0x50
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d111      	bne.n	8001072 <HAL_TIM_IC_CaptureCallback+0x36>
	{
		uint32_t echo_us;
          // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800104e:	2104      	movs	r1, #4
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f003 fdad 	bl	8004bb0 <HAL_TIM_ReadCapturedValue>
 8001056:	60f8      	str	r0, [r7, #12]
		dx_cm = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff facf 	bl	80005fc <hc_sr04_convert_us_to_cm>
 800105e:	4602      	mov	r2, r0
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	ee07 2a90 	vmov	s15, r2
 8001068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800106e:	edc3 7a00 	vstr	s15, [r3]
	}

	if(TIM3 == htim->Instance)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d111      	bne.n	80010a0 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		uint32_t echo_us;
        // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800107c:	2104      	movs	r1, #4
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f003 fd96 	bl	8004bb0 <HAL_TIM_ReadCapturedValue>
 8001084:	60b8      	str	r0, [r7, #8]
		dx_cm2 = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f7ff fab8 	bl	80005fc <hc_sr04_convert_us_to_cm>
 800108c:	4602      	mov	r2, r0
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	ee07 2a90 	vmov	s15, r2
 8001096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0xac>)
 800109c:	edc3 7a00 	vstr	s15, [r3]
	}

	    // Calculate average distance or perform any other processing
	    average_distance = position(dx_cm, dx_cm2, pos);
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0xac>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_TIM_IC_CaptureCallback+0xb0>)
 80010ae:	edd3 6a00 	vldr	s13, [r3]
 80010b2:	eeb0 1a66 	vmov.f32	s2, s13
 80010b6:	eef0 0a47 	vmov.f32	s1, s14
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	f7ff faaf 	bl	8000620 <position>
 80010c2:	ee07 0a90 	vmov	s15, r0
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80010cc:	edc3 7a00 	vstr	s15, [r3]
	//average_distance = position(dx_cm,dx_cm2,pos);

}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010000 	.word	0x40010000
 80010dc:	20000118 	.word	0x20000118
 80010e0:	200000fc 	.word	0x200000fc
 80010e4:	40000400 	.word	0x40000400
 80010e8:	20000100 	.word	0x20000100
 80010ec:	20000108 	.word	0x20000108
 80010f0:	20000104 	.word	0x20000104

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	e7fe      	b.n	80010fc <Error_Handler+0x8>
	...

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x44>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_MspInit+0x44>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_MspInit+0x44>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x44>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x44>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x44>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800114c:	e7fe      	b.n	800114c <NMI_Handler+0x4>

0800114e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <MemManage_Handler+0x4>

0800115a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler+0x4>

08001166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001194:	f000 fc8c 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM1_CC_IRQHandler+0x10>)
 80011a2:	f003 f929 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000013c 	.word	0x2000013c

080011b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM3_IRQHandler+0x10>)
 80011b6:	f003 f91f 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200001d4 	.word	0x200001d4

080011c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <USART3_IRQHandler+0x10>)
 80011ca:	f004 fc0d 	bl	80059e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200002b8 	.word	0x200002b8

080011d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b090      	sub	sp, #64	; 0x40
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001238:	4b40      	ldr	r3, [pc, #256]	; (800133c <MX_TIM1_Init+0x140>)
 800123a:	4a41      	ldr	r2, [pc, #260]	; (8001340 <MX_TIM1_Init+0x144>)
 800123c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 800123e:	4b3f      	ldr	r3, [pc, #252]	; (800133c <MX_TIM1_Init+0x140>)
 8001240:	226b      	movs	r2, #107	; 0x6b
 8001242:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b3d      	ldr	r3, [pc, #244]	; (800133c <MX_TIM1_Init+0x140>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <MX_TIM1_Init+0x140>)
 800124c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001250:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b3a      	ldr	r3, [pc, #232]	; (800133c <MX_TIM1_Init+0x140>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001258:	4b38      	ldr	r3, [pc, #224]	; (800133c <MX_TIM1_Init+0x140>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <MX_TIM1_Init+0x140>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001264:	4835      	ldr	r0, [pc, #212]	; (800133c <MX_TIM1_Init+0x140>)
 8001266:	f002 fcd5 	bl	8003c14 <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001270:	f7ff ff40 	bl	80010f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800127e:	4619      	mov	r1, r3
 8001280:	482e      	ldr	r0, [pc, #184]	; (800133c <MX_TIM1_Init+0x140>)
 8001282:	f003 fb89 	bl	8004998 <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800128c:	f7ff ff32 	bl	80010f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001290:	482a      	ldr	r0, [pc, #168]	; (800133c <MX_TIM1_Init+0x140>)
 8001292:	f002 feff 	bl	8004094 <HAL_TIM_IC_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800129c:	f7ff ff2a 	bl	80010f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012a0:	2304      	movs	r3, #4
 80012a2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80012a4:	2350      	movs	r3, #80	; 0x50
 80012a6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	4820      	ldr	r0, [pc, #128]	; (800133c <MX_TIM1_Init+0x140>)
 80012bc:	f003 fc36 	bl	8004b2c <HAL_TIM_SlaveConfigSynchro>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80012c6:	f7ff ff15 	bl	80010f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012ce:	2301      	movs	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2200      	movs	r2, #0
 80012e0:	4619      	mov	r1, r3
 80012e2:	4816      	ldr	r0, [pc, #88]	; (800133c <MX_TIM1_Init+0x140>)
 80012e4:	f003 f9a7 	bl	8004636 <HAL_TIM_IC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80012ee:	f7ff ff01 	bl	80010f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012f2:	2302      	movs	r3, #2
 80012f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80012f6:	2302      	movs	r3, #2
 80012f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <MX_TIM1_Init+0x140>)
 8001304:	f003 f997 	bl	8004636 <HAL_TIM_IC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800130e:	f7ff fef1 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_TIM1_Init+0x140>)
 8001324:	f004 fa22 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800132e:	f7ff fee1 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3740      	adds	r7, #64	; 0x40
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000013c 	.word	0x2000013c
 8001340:	40010000 	.word	0x40010000

08001344 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_TIM2_Init+0xac>)
 800136a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800136e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_TIM2_Init+0xac>)
 8001372:	226b      	movs	r2, #107	; 0x6b
 8001374:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_TIM2_Init+0xac>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_TIM2_Init+0xac>)
 800137e:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <MX_TIM2_Init+0xb0>)
 8001380:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_TIM2_Init+0xac>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_TIM2_Init+0xac>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <MX_TIM2_Init+0xac>)
 8001390:	f002 fd2f 	bl	8003df2 <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800139a:	f7ff feab 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4810      	ldr	r0, [pc, #64]	; (80013f0 <MX_TIM2_Init+0xac>)
 80013ae:	f004 f9dd 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013b8:	f7ff fe9c 	bl	80010f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	; 0x60
 80013be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80013c0:	230a      	movs	r3, #10
 80013c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	2208      	movs	r2, #8
 80013d0:	4619      	mov	r1, r3
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <MX_TIM2_Init+0xac>)
 80013d4:	f003 f9cc 	bl	8004770 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013de:	f7ff fe89 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <MX_TIM2_Init+0xac>)
 80013e4:	f000 fa0a 	bl	80017fc <HAL_TIM_MspPostInit>

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000188 	.word	0x20000188
 80013f4:	00030d3f 	.word	0x00030d3f

080013f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b090      	sub	sp, #64	; 0x40
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142a:	463b      	mov	r3, r7
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001434:	4b3d      	ldr	r3, [pc, #244]	; (800152c <MX_TIM3_Init+0x134>)
 8001436:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <MX_TIM3_Init+0x138>)
 8001438:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <MX_TIM3_Init+0x134>)
 800143c:	226b      	movs	r2, #107	; 0x6b
 800143e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b3a      	ldr	r3, [pc, #232]	; (800152c <MX_TIM3_Init+0x134>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <MX_TIM3_Init+0x134>)
 8001448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <MX_TIM3_Init+0x134>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b35      	ldr	r3, [pc, #212]	; (800152c <MX_TIM3_Init+0x134>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800145a:	4834      	ldr	r0, [pc, #208]	; (800152c <MX_TIM3_Init+0x134>)
 800145c:	f002 fbda 	bl	8003c14 <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001466:	f7ff fe45 	bl	80010f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001474:	4619      	mov	r1, r3
 8001476:	482d      	ldr	r0, [pc, #180]	; (800152c <MX_TIM3_Init+0x134>)
 8001478:	f003 fa8e 	bl	8004998 <HAL_TIM_ConfigClockSource>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001482:	f7ff fe37 	bl	80010f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001486:	4829      	ldr	r0, [pc, #164]	; (800152c <MX_TIM3_Init+0x134>)
 8001488:	f002 fe04 	bl	8004094 <HAL_TIM_IC_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001492:	f7ff fe2f 	bl	80010f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001496:	2304      	movs	r3, #4
 8001498:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800149a:	2350      	movs	r3, #80	; 0x50
 800149c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	481e      	ldr	r0, [pc, #120]	; (800152c <MX_TIM3_Init+0x134>)
 80014b2:	f003 fb3b 	bl	8004b2c <HAL_TIM_SlaveConfigSynchro>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80014bc:	f7ff fe1a 	bl	80010f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014c4:	2301      	movs	r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	4814      	ldr	r0, [pc, #80]	; (800152c <MX_TIM3_Init+0x134>)
 80014da:	f003 f8ac 	bl	8004636 <HAL_TIM_IC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80014e4:	f7ff fe06 	bl	80010f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2204      	movs	r2, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_TIM3_Init+0x134>)
 80014fa:	f003 f89c 	bl	8004636 <HAL_TIM_IC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001504:	f7ff fdf6 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_TIM3_Init+0x134>)
 8001516:	f004 f929 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8001520:	f7ff fde8 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3740      	adds	r7, #64	; 0x40
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001d4 	.word	0x200001d4
 8001530:	40000400 	.word	0x40000400

08001534 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_TIM7_Init+0x64>)
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <MX_TIM7_Init+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <MX_TIM7_Init+0x64>)
 800154c:	226b      	movs	r2, #107	; 0x6b
 800154e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_TIM7_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_TIM7_Init+0x64>)
 8001558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_TIM7_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <MX_TIM7_Init+0x64>)
 8001566:	f002 fb55 	bl	8003c14 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001570:	f7ff fdc0 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_TIM7_Init+0x64>)
 8001582:	f004 f8f3 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800158c:	f7ff fdb2 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000220 	.word	0x20000220
 800159c:	40001400 	.word	0x40001400

080015a0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_TIM9_Init+0xbc>)
 80015c8:	4a25      	ldr	r2, [pc, #148]	; (8001660 <MX_TIM9_Init+0xc0>)
 80015ca:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_TIM9_Init+0xbc>)
 80015ce:	226b      	movs	r2, #107	; 0x6b
 80015d0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_TIM9_Init+0xbc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <MX_TIM9_Init+0xbc>)
 80015da:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80015de:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_TIM9_Init+0xbc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM9_Init+0xbc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80015ec:	481b      	ldr	r0, [pc, #108]	; (800165c <MX_TIM9_Init+0xbc>)
 80015ee:	f002 fb11 	bl	8003c14 <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80015f8:	f7ff fd7c 	bl	80010f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001600:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	4619      	mov	r1, r3
 8001608:	4814      	ldr	r0, [pc, #80]	; (800165c <MX_TIM9_Init+0xbc>)
 800160a:	f003 f9c5 	bl	8004998 <HAL_TIM_ConfigClockSource>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001614:	f7ff fd6e 	bl	80010f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <MX_TIM9_Init+0xbc>)
 800161a:	f002 fbea 	bl	8003df2 <HAL_TIM_PWM_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001624:	f7ff fd66 	bl	80010f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001628:	2360      	movs	r3, #96	; 0x60
 800162a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_TIM9_Init+0xbc>)
 8001640:	f003 f896 	bl	8004770 <HAL_TIM_PWM_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800164a:	f7ff fd53 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800164e:	4803      	ldr	r0, [pc, #12]	; (800165c <MX_TIM9_Init+0xbc>)
 8001650:	f000 f8d4 	bl	80017fc <HAL_TIM_MspPostInit>

}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	; 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000026c 	.word	0x2000026c
 8001660:	40014000 	.word	0x40014000

08001664 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_TIM_Base_MspInit+0x140>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d131      	bne.n	80016ea <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001686:	4b48      	ldr	r3, [pc, #288]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	623b      	str	r3, [r7, #32]
 800169c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a41      	ldr	r2, [pc, #260]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	4836      	ldr	r0, [pc, #216]	; (80017ac <HAL_TIM_Base_MspInit+0x148>)
 80016d4:	f000 fbb0 	bl	8001e38 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	201b      	movs	r0, #27
 80016de:	f000 fae2 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016e2:	201b      	movs	r0, #27
 80016e4:	f000 fafb 	bl	8001cde <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80016e8:	e058      	b.n	800179c <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM3)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <HAL_TIM_Base_MspInit+0x14c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d130      	bne.n	8001756 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016f4:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a2b      	ldr	r2, [pc, #172]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001724:	2340      	movs	r3, #64	; 0x40
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001734:	2302      	movs	r3, #2
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	481d      	ldr	r0, [pc, #116]	; (80017b4 <HAL_TIM_Base_MspInit+0x150>)
 8001740:	f000 fb7a 	bl	8001e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	201d      	movs	r0, #29
 800174a:	f000 faac 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800174e:	201d      	movs	r0, #29
 8001750:	f000 fac5 	bl	8001cde <HAL_NVIC_EnableIRQ>
}
 8001754:	e022      	b.n	800179c <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM7)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <HAL_TIM_Base_MspInit+0x154>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d10c      	bne.n	800177a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 8001766:	f043 0320 	orr.w	r3, r3, #32
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
}
 8001778:	e010      	b.n	800179c <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM9)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_TIM_Base_MspInit+0x158>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d10b      	bne.n	800179c <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6453      	str	r3, [r2, #68]	; 0x44
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_TIM_Base_MspInit+0x144>)
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	bf00      	nop
 800179e:	3738      	adds	r7, #56	; 0x38
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40000400 	.word	0x40000400
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40001400 	.word	0x40001400
 80017bc:	40014000 	.word	0x40014000

080017c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d10b      	bne.n	80017ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_TIM_PWM_MspInit+0x38>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_TIM_PWM_MspInit+0x38>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_TIM_PWM_MspInit+0x38>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d11d      	bne.n	800185a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_TIM_MspPostInit+0xa8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <HAL_TIM_MspPostInit+0xa8>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_TIM_MspPostInit+0xa8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001848:	2301      	movs	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4815      	ldr	r0, [pc, #84]	; (80018a8 <HAL_TIM_MspPostInit+0xac>)
 8001854:	f000 faf0 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001858:	e020      	b.n	800189c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a13      	ldr	r2, [pc, #76]	; (80018ac <HAL_TIM_MspPostInit+0xb0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d11b      	bne.n	800189c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_TIM_MspPostInit+0xa8>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <HAL_TIM_MspPostInit+0xa8>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_TIM_MspPostInit+0xa8>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800187c:	2320      	movs	r3, #32
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800188c:	2303      	movs	r3, #3
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <HAL_TIM_MspPostInit+0xb4>)
 8001898:	f000 face 	bl	8001e38 <HAL_GPIO_Init>
}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40014000 	.word	0x40014000
 80018b0:	40021000 	.word	0x40021000

080018b4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018ba:	4a15      	ldr	r2, [pc, #84]	; (8001910 <MX_USART3_UART_Init+0x5c>)
 80018bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USART3_UART_Init+0x58>)
 80018f8:	f003 ffe4 	bl	80058c4 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001902:	f7ff fbf7 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002b8 	.word	0x200002b8
 8001910:	40004800 	.word	0x40004800

08001914 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0aa      	sub	sp, #168	; 0xa8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2284      	movs	r2, #132	; 0x84
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f005 faa9 	bl	8006e8c <memset>
  if(uartHandle->Instance==USART3)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <HAL_UART_MspInit+0xc4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d144      	bne.n	80019ce <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001948:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800194a:	2300      	movs	r3, #0
 800194c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fd6e 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800195e:	f7ff fbc9 	bl	80010f4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_UART_MspInit+0xc8>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <HAL_UART_MspInit+0xc8>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_UART_MspInit+0xc8>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_UART_MspInit+0xc8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_UART_MspInit+0xc8>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_UART_MspInit+0xc8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001992:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ac:	2307      	movs	r3, #7
 80019ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019b6:	4619      	mov	r1, r3
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <HAL_UART_MspInit+0xcc>)
 80019ba:	f000 fa3d 	bl	8001e38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2027      	movs	r0, #39	; 0x27
 80019c4:	f000 f96f 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019c8:	2027      	movs	r0, #39	; 0x27
 80019ca:	f000 f988 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019ce:	bf00      	nop
 80019d0:	37a8      	adds	r7, #168	; 0xa8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004800 	.word	0x40004800
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020c00 	.word	0x40020c00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff fbe3 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f005 fa49 	bl	8006ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff fa29 	bl	8000e6c <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001a28:	080070f8 	.word	0x080070f8
  ldr r2, =_sbss
 8001a2c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001a30:	2000047c 	.word	0x2000047c

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>

08001a36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f000 f928 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f805 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a46:	f7ff fb5b 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f943 	bl	8001cfa <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f90b 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000028 	.word	0x20000028
 8001aa8:	20000030 	.word	0x20000030
 8001aac:	2000002c 	.word	0x2000002c

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000030 	.word	0x20000030
 8001ad4:	20000340 	.word	0x20000340

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000340 	.word	0x20000340

08001af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <__NVIC_SetPriorityGrouping+0x40>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x40>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00
 8001b34:	05fa0000 	.word	0x05fa0000

08001b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff8e 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff29 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff3e 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff8e 	bl	8001be4 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5d 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff31 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffa2 	bl	8001c4c <SysTick_Config>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff feda 	bl	8001ad8 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d008      	beq.n	8001d44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e052      	b.n	8001dea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0216 	bic.w	r2, r2, #22
 8001d52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <HAL_DMA_Abort+0x62>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0208 	bic.w	r2, r2, #8
 8001d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d94:	e013      	b.n	8001dbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d96:	f7ff fe9f 	bl	8001ad8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d90c      	bls.n	8001dbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e015      	b.n	8001dea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e4      	bne.n	8001d96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	223f      	movs	r2, #63	; 0x3f
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e00c      	b.n	8001e2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2205      	movs	r2, #5
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e175      	b.n	8002144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 8164 	bne.w	800213e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d005      	beq.n	8001e8e <HAL_GPIO_Init+0x56>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80be 	beq.w	800213e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	4b66      	ldr	r3, [pc, #408]	; (800215c <HAL_GPIO_Init+0x324>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a65      	ldr	r2, [pc, #404]	; (800215c <HAL_GPIO_Init+0x324>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_GPIO_Init+0x324>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fda:	4a61      	ldr	r2, [pc, #388]	; (8002160 <HAL_GPIO_Init+0x328>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_GPIO_Init+0x32c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d037      	beq.n	8002076 <HAL_GPIO_Init+0x23e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a57      	ldr	r2, [pc, #348]	; (8002168 <HAL_GPIO_Init+0x330>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d031      	beq.n	8002072 <HAL_GPIO_Init+0x23a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a56      	ldr	r2, [pc, #344]	; (800216c <HAL_GPIO_Init+0x334>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d02b      	beq.n	800206e <HAL_GPIO_Init+0x236>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a55      	ldr	r2, [pc, #340]	; (8002170 <HAL_GPIO_Init+0x338>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d025      	beq.n	800206a <HAL_GPIO_Init+0x232>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a54      	ldr	r2, [pc, #336]	; (8002174 <HAL_GPIO_Init+0x33c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01f      	beq.n	8002066 <HAL_GPIO_Init+0x22e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a53      	ldr	r2, [pc, #332]	; (8002178 <HAL_GPIO_Init+0x340>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d019      	beq.n	8002062 <HAL_GPIO_Init+0x22a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_GPIO_Init+0x344>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0x226>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a51      	ldr	r2, [pc, #324]	; (8002180 <HAL_GPIO_Init+0x348>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00d      	beq.n	800205a <HAL_GPIO_Init+0x222>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a50      	ldr	r2, [pc, #320]	; (8002184 <HAL_GPIO_Init+0x34c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4f      	ldr	r2, [pc, #316]	; (8002188 <HAL_GPIO_Init+0x350>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_GPIO_Init+0x21a>
 800204e:	2309      	movs	r3, #9
 8002050:	e012      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002052:	230a      	movs	r3, #10
 8002054:	e010      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002056:	2308      	movs	r3, #8
 8002058:	e00e      	b.n	8002078 <HAL_GPIO_Init+0x240>
 800205a:	2307      	movs	r3, #7
 800205c:	e00c      	b.n	8002078 <HAL_GPIO_Init+0x240>
 800205e:	2306      	movs	r3, #6
 8002060:	e00a      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002062:	2305      	movs	r3, #5
 8002064:	e008      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002066:	2304      	movs	r3, #4
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x240>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_Init+0x240>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002076:	2300      	movs	r3, #0
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	4093      	lsls	r3, r2
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002088:	4935      	ldr	r1, [pc, #212]	; (8002160 <HAL_GPIO_Init+0x328>)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_GPIO_Init+0x354>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ba:	4a34      	ldr	r2, [pc, #208]	; (800218c <HAL_GPIO_Init+0x354>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c0:	4b32      	ldr	r3, [pc, #200]	; (800218c <HAL_GPIO_Init+0x354>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e4:	4a29      	ldr	r2, [pc, #164]	; (800218c <HAL_GPIO_Init+0x354>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_GPIO_Init+0x354>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_GPIO_Init+0x354>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_GPIO_Init+0x354>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_GPIO_Init+0x354>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	f67f ae86 	bls.w	8001e58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40013800 	.word	0x40013800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40021400 	.word	0x40021400
 800217c:	40021800 	.word	0x40021800
 8002180:	40021c00 	.word	0x40021c00
 8002184:	40022000 	.word	0x40022000
 8002188:	40022400 	.word	0x40022400
 800218c:	40013c00 	.word	0x40013c00

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021ac:	e003      	b.n	80021b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07f      	b.n	80022d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe fd88 	bl	8000d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2224      	movs	r2, #36	; 0x24
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002214:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002224:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	e006      	b.n	800224c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800224a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d104      	bne.n	800225e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800225c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_I2C_Init+0x11c>)
 800226a:	430b      	orrs	r3, r1
 800226c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69d9      	ldr	r1, [r3, #28]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	02008000 	.word	0x02008000

080022e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	461a      	mov	r2, r3
 80022f0:	460b      	mov	r3, r1
 80022f2:	817b      	strh	r3, [r7, #10]
 80022f4:	4613      	mov	r3, r2
 80022f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b20      	cmp	r3, #32
 8002302:	f040 80da 	bne.w	80024ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_I2C_Master_Transmit+0x30>
 8002310:	2302      	movs	r3, #2
 8002312:	e0d3      	b.n	80024bc <HAL_I2C_Master_Transmit+0x1d8>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800231c:	f7ff fbdc 	bl	8001ad8 <HAL_GetTick>
 8002320:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2319      	movs	r3, #25
 8002328:	2201      	movs	r2, #1
 800232a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f8f0 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0be      	b.n	80024bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2221      	movs	r2, #33	; 0x21
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2210      	movs	r2, #16
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	893a      	ldrh	r2, [r7, #8]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236a:	b29b      	uxth	r3, r3
 800236c:	2bff      	cmp	r3, #255	; 0xff
 800236e:	d90e      	bls.n	800238e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	22ff      	movs	r2, #255	; 0xff
 8002374:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237a:	b2da      	uxtb	r2, r3
 800237c:	8979      	ldrh	r1, [r7, #10]
 800237e:	4b51      	ldr	r3, [pc, #324]	; (80024c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fa60 	bl	800284c <I2C_TransferConfig>
 800238c:	e06c      	b.n	8002468 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	b2da      	uxtb	r2, r3
 800239e:	8979      	ldrh	r1, [r7, #10]
 80023a0:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fa4f 	bl	800284c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023ae:	e05b      	b.n	8002468 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	6a39      	ldr	r1, [r7, #32]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f8ed 	bl	8002594 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e07b      	b.n	80024bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d034      	beq.n	8002468 <HAL_I2C_Master_Transmit+0x184>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d130      	bne.n	8002468 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	2200      	movs	r2, #0
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f87f 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e04d      	b.n	80024bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d90e      	bls.n	8002448 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	b2da      	uxtb	r2, r3
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	2300      	movs	r3, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fa03 	bl	800284c <I2C_TransferConfig>
 8002446:	e00f      	b.n	8002468 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	b2da      	uxtb	r2, r3
 8002458:	8979      	ldrh	r1, [r7, #10]
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f9f2 	bl	800284c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d19e      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	6a39      	ldr	r1, [r7, #32]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8cc 	bl	8002614 <I2C_WaitOnSTOPFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e01a      	b.n	80024bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2220      	movs	r2, #32
 800248c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800249a:	400b      	ands	r3, r1
 800249c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	80002000 	.word	0x80002000
 80024c8:	fe00e800 	.word	0xfe00e800

080024cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d103      	bne.n	80024ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d007      	beq.n	8002508 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	619a      	str	r2, [r3, #24]
  }
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002524:	e022      	b.n	800256c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d01e      	beq.n	800256c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7ff fad3 	bl	8001ad8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d113      	bne.n	800256c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e00f      	b.n	800258c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4013      	ands	r3, r2
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	429a      	cmp	r2, r3
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	429a      	cmp	r2, r3
 8002588:	d0cd      	beq.n	8002526 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025a0:	e02c      	b.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f870 	bl	800268c <I2C_IsErrorOccurred>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e02a      	b.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d01e      	beq.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7ff fa8b 	bl	8001ad8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d113      	bne.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e007      	b.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b02      	cmp	r3, #2
 8002608:	d1cb      	bne.n	80025a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002620:	e028      	b.n	8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f830 	bl	800268c <I2C_IsErrorOccurred>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e026      	b.n	8002684 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002636:	f7ff fa4f 	bl	8001ad8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	429a      	cmp	r2, r3
 8002644:	d302      	bcc.n	800264c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d113      	bne.n	8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e007      	b.n	8002684 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b20      	cmp	r3, #32
 8002680:	d1cf      	bne.n	8002622 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d068      	beq.n	800278a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2210      	movs	r2, #16
 80026be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026c0:	e049      	b.n	8002756 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d045      	beq.n	8002756 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7ff fa05 	bl	8001ad8 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <I2C_IsErrorOccurred+0x54>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d13a      	bne.n	8002756 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002702:	d121      	bne.n	8002748 <I2C_IsErrorOccurred+0xbc>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800270a:	d01d      	beq.n	8002748 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	2b20      	cmp	r3, #32
 8002710:	d01a      	beq.n	8002748 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002720:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002722:	f7ff f9d9 	bl	8001ad8 <HAL_GetTick>
 8002726:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002728:	e00e      	b.n	8002748 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800272a:	f7ff f9d5 	bl	8001ad8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b19      	cmp	r3, #25
 8002736:	d907      	bls.n	8002748 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f043 0320 	orr.w	r3, r3, #32
 800273e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002746:	e006      	b.n	8002756 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b20      	cmp	r3, #32
 8002754:	d1e9      	bne.n	800272a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b20      	cmp	r3, #32
 8002762:	d003      	beq.n	800276c <I2C_IsErrorOccurred+0xe0>
 8002764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0aa      	beq.n	80026c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800276c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002770:	2b00      	cmp	r3, #0
 8002772:	d103      	bne.n	800277c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2220      	movs	r2, #32
 800277a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01c      	beq.n	800283a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff fe63 	bl	80024cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <I2C_IsErrorOccurred+0x1bc>)
 8002812:	400b      	ands	r3, r1
 8002814:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800283a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800283e:	4618      	mov	r0, r3
 8002840:	3728      	adds	r7, #40	; 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	fe00e800 	.word	0xfe00e800

0800284c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	817b      	strh	r3, [r7, #10]
 800285a:	4613      	mov	r3, r2
 800285c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002864:	7a7b      	ldrb	r3, [r7, #9]
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800286c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	4313      	orrs	r3, r2
 8002876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800287a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	0d5b      	lsrs	r3, r3, #21
 8002886:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <I2C_TransferConfig+0x60>)
 800288c:	430b      	orrs	r3, r1
 800288e:	43db      	mvns	r3, r3
 8002890:	ea02 0103 	and.w	r1, r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	03ff63ff 	.word	0x03ff63ff

080028b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d138      	bne.n	8002938 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e032      	b.n	800293a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002902:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6819      	ldr	r1, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
  }
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b20      	cmp	r3, #32
 800295a:	d139      	bne.n	80029d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002966:	2302      	movs	r3, #2
 8002968:	e033      	b.n	80029d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2224      	movs	r2, #36	; 0x24
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002998:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40007000 	.word	0x40007000

08002a00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a22:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2e:	f7ff f853 	bl	8001ad8 <HAL_GetTick>
 8002a32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a34:	e009      	b.n	8002a4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a36:	f7ff f84f 	bl	8001ad8 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a44:	d901      	bls.n	8002a4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e022      	b.n	8002a90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a56:	d1ee      	bne.n	8002a36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a64:	f7ff f838 	bl	8001ad8 <HAL_GetTick>
 8002a68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a6a:	e009      	b.n	8002a80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a6c:	f7ff f834 	bl	8001ad8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a7a:	d901      	bls.n	8002a80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e007      	b.n	8002a90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a8c:	d1ee      	bne.n	8002a6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40007000 	.word	0x40007000

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e291      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8087 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac4:	4b96      	ldr	r3, [pc, #600]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d00c      	beq.n	8002aea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad0:	4b93      	ldr	r3, [pc, #588]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d112      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62>
 8002adc:	4b90      	ldr	r3, [pc, #576]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae8:	d10b      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aea:	4b8d      	ldr	r3, [pc, #564]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d06c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x130>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d168      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e26b      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x7a>
 8002b0c:	4b84      	ldr	r3, [pc, #528]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a83      	ldr	r2, [pc, #524]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e02e      	b.n	8002b78 <HAL_RCC_OscConfig+0xd8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x9c>
 8002b22:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7e      	ldr	r2, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b7c      	ldr	r3, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7b      	ldr	r2, [pc, #492]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e01d      	b.n	8002b78 <HAL_RCC_OscConfig+0xd8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0xc0>
 8002b46:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a75      	ldr	r2, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a72      	ldr	r2, [pc, #456]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0xd8>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6b      	ldr	r2, [pc, #428]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe ffaa 	bl	8001ad8 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe ffa6 	bl	8001ad8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e21f      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0xe8>
 8002ba6:	e014      	b.n	8002bd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe ff96 	bl	8001ad8 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fe ff92 	bl	8001ad8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e20b      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x110>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d069      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bde:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bea:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d11c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x190>
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCC_OscConfig+0x17a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e1df      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	493d      	ldr	r1, [pc, #244]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	e040      	b.n	8002cb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe ff48 	bl	8001ad8 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fe ff44 	bl	8001ad8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1bd      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4929      	ldr	r1, [pc, #164]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe ff24 	bl	8001ad8 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe ff20 	bl	8001ad8 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e199      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d038      	beq.n	8002d30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cca:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe ff01 	bl	8001ad8 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cda:	f7fe fefd 	bl	8001ad8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e176      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x23a>
 8002cf8:	e01a      	b.n	8002d30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe fee7 	bl	8001ad8 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fee3 	bl	8001ad8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d903      	bls.n	8002d24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e15c      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
 8002d20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b91      	ldr	r3, [pc, #580]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ee      	bne.n	8002d0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a4 	beq.w	8002e86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3e:	4b8b      	ldr	r3, [pc, #556]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10d      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a87      	ldr	r2, [pc, #540]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b85      	ldr	r3, [pc, #532]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d66:	4b82      	ldr	r3, [pc, #520]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d72:	4b7f      	ldr	r3, [pc, #508]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7e      	ldr	r2, [pc, #504]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe feab 	bl	8001ad8 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fe fea7 	bl	8001ad8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e120      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d98:	4b75      	ldr	r3, [pc, #468]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x31a>
 8002dac:	4b6f      	ldr	r3, [pc, #444]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a6e      	ldr	r2, [pc, #440]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
 8002db8:	e02d      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x33c>
 8002dc2:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a69      	ldr	r2, [pc, #420]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dce:	4b67      	ldr	r3, [pc, #412]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a66      	ldr	r2, [pc, #408]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	e01c      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d10c      	bne.n	8002dfe <HAL_RCC_OscConfig+0x35e>
 8002de4:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a60      	ldr	r2, [pc, #384]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002dea:	f043 0304 	orr.w	r3, r3, #4
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	4b5e      	ldr	r3, [pc, #376]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a5d      	ldr	r2, [pc, #372]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	e00b      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	4a5a      	ldr	r2, [pc, #360]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0a:	4b58      	ldr	r3, [pc, #352]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a57      	ldr	r2, [pc, #348]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d015      	beq.n	8002e4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fe5b 	bl	8001ad8 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7fe fe57 	bl	8001ad8 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0ce      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ee      	beq.n	8002e26 <HAL_RCC_OscConfig+0x386>
 8002e48:	e014      	b.n	8002e74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fe45 	bl	8001ad8 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe fe41 	bl	8001ad8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0b8      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e68:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ee      	bne.n	8002e52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7a:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a3b      	ldr	r2, [pc, #236]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80a4 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e90:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d06b      	beq.n	8002f74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d149      	bne.n	8002f38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a30      	ldr	r2, [pc, #192]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fe12 	bl	8001ad8 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fe0e 	bl	8001ad8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e087      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	4313      	orrs	r3, r2
 8002efc:	4a1b      	ldr	r2, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fde2 	bl	8001ad8 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe fdde 	bl	8001ad8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e057      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x478>
 8002f36:	e04f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fdc8 	bl	8001ad8 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fdc4 	bl	8001ad8 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e03d      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5e:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_OscConfig+0x4cc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4ac>
 8002f6a:	e035      	b.n	8002fd8 <HAL_RCC_OscConfig+0x538>
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x544>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d121      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0d0      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	4965      	ldr	r1, [pc, #404]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b8      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003048:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800304e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800306a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	494d      	ldr	r1, [pc, #308]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d040      	beq.n	800310c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e073      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06b      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ca:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f023 0203 	bic.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4936      	ldr	r1, [pc, #216]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030dc:	f7fe fcfc 	bl	8001ad8 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fe fcf8 	bl	8001ad8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e053      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 020c 	and.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	429a      	cmp	r2, r3
 800310a:	d1eb      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d210      	bcs.n	800313c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 020f 	bic.w	r2, r3, #15
 8003122:	4922      	ldr	r1, [pc, #136]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e032      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4916      	ldr	r1, [pc, #88]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	490e      	ldr	r1, [pc, #56]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800317a:	f000 f821 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	490a      	ldr	r1, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x1cc>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x1d4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fc58 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023c00 	.word	0x40023c00
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08006fcc 	.word	0x08006fcc
 80031b8:	20000028 	.word	0x20000028
 80031bc:	2000002c 	.word	0x2000002c

080031c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c4:	b094      	sub	sp, #80	; 0x50
 80031c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	647b      	str	r3, [r7, #68]	; 0x44
 80031cc:	2300      	movs	r3, #0
 80031ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d0:	2300      	movs	r3, #0
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d8:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d00d      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x40>
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	f200 80e1 	bhi.w	80033ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x34>
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d003      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x3a>
 80031f2:	e0db      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b73      	ldr	r3, [pc, #460]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f8:	e0db      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031fa:	4b73      	ldr	r3, [pc, #460]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80031fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031fe:	e0d8      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003208:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800320a:	4b6d      	ldr	r3, [pc, #436]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d063      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003216:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	2200      	movs	r2, #0
 800321e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003220:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003228:	633b      	str	r3, [r7, #48]	; 0x30
 800322a:	2300      	movs	r3, #0
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
 800322e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003232:	4622      	mov	r2, r4
 8003234:	462b      	mov	r3, r5
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	0159      	lsls	r1, r3, #5
 8003240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003244:	0150      	lsls	r0, r2, #5
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4621      	mov	r1, r4
 800324c:	1a51      	subs	r1, r2, r1
 800324e:	6139      	str	r1, [r7, #16]
 8003250:	4629      	mov	r1, r5
 8003252:	eb63 0301 	sbc.w	r3, r3, r1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003264:	4659      	mov	r1, fp
 8003266:	018b      	lsls	r3, r1, #6
 8003268:	4651      	mov	r1, sl
 800326a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800326e:	4651      	mov	r1, sl
 8003270:	018a      	lsls	r2, r1, #6
 8003272:	4651      	mov	r1, sl
 8003274:	ebb2 0801 	subs.w	r8, r2, r1
 8003278:	4659      	mov	r1, fp
 800327a:	eb63 0901 	sbc.w	r9, r3, r1
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800328a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800328e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003292:	4690      	mov	r8, r2
 8003294:	4699      	mov	r9, r3
 8003296:	4623      	mov	r3, r4
 8003298:	eb18 0303 	adds.w	r3, r8, r3
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	462b      	mov	r3, r5
 80032a0:	eb49 0303 	adc.w	r3, r9, r3
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032b2:	4629      	mov	r1, r5
 80032b4:	024b      	lsls	r3, r1, #9
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032bc:	4621      	mov	r1, r4
 80032be:	024a      	lsls	r2, r1, #9
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	2200      	movs	r2, #0
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032d0:	f7fc ffa2 	bl	8000218 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032dc:	e058      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	2200      	movs	r2, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	4611      	mov	r1, r2
 80032ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032ee:	623b      	str	r3, [r7, #32]
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
 80032f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0159      	lsls	r1, r3, #5
 8003306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330a:	0150      	lsls	r0, r2, #5
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4641      	mov	r1, r8
 8003312:	ebb2 0a01 	subs.w	sl, r2, r1
 8003316:	4649      	mov	r1, r9
 8003318:	eb63 0b01 	sbc.w	fp, r3, r1
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003328:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800332c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003330:	ebb2 040a 	subs.w	r4, r2, sl
 8003334:	eb63 050b 	sbc.w	r5, r3, fp
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	00eb      	lsls	r3, r5, #3
 8003342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003346:	00e2      	lsls	r2, r4, #3
 8003348:	4614      	mov	r4, r2
 800334a:	461d      	mov	r5, r3
 800334c:	4643      	mov	r3, r8
 800334e:	18e3      	adds	r3, r4, r3
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	464b      	mov	r3, r9
 8003354:	eb45 0303 	adc.w	r3, r5, r3
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003366:	4629      	mov	r1, r5
 8003368:	028b      	lsls	r3, r1, #10
 800336a:	4621      	mov	r1, r4
 800336c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003370:	4621      	mov	r1, r4
 8003372:	028a      	lsls	r2, r1, #10
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337a:	2200      	movs	r2, #0
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	61fa      	str	r2, [r7, #28]
 8003380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003384:	f7fc ff48 	bl	8000218 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	3301      	adds	r3, #1
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80033a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033aa:	e002      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3750      	adds	r7, #80	; 0x50
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	007a1200 	.word	0x007a1200

080033cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000028 	.word	0x20000028

080033e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e8:	f7ff fff0 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0a9b      	lsrs	r3, r3, #10
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4903      	ldr	r1, [pc, #12]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800
 8003408:	08006fdc 	.word	0x08006fdc

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003410:	f7ff ffdc 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0b5b      	lsrs	r3, r3, #13
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	08006fdc 	.word	0x08006fdc

08003434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d012      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800345c:	4b69      	ldr	r3, [pc, #420]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a68      	ldr	r2, [pc, #416]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003466:	6093      	str	r3, [r2, #8]
 8003468:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	4964      	ldr	r1, [pc, #400]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d017      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	4959      	ldr	r1, [pc, #356]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ac:	d101      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d017      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ca:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	494a      	ldr	r1, [pc, #296]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 808b 	beq.w	800362e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003518:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	4a39      	ldr	r2, [pc, #228]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	6413      	str	r3, [r2, #64]	; 0x40
 8003524:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003530:	4b35      	ldr	r3, [pc, #212]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a34      	ldr	r2, [pc, #208]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353c:	f7fe facc 	bl	8001ad8 <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003544:	f7fe fac8 	bl	8001ad8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e357      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003556:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003562:	4b28      	ldr	r3, [pc, #160]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d035      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	429a      	cmp	r2, r3
 800357e:	d02e      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003580:	4b20      	ldr	r3, [pc, #128]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003596:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035a2:	4a18      	ldr	r2, [pc, #96]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d114      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fa90 	bl	8001ad8 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fe fa8c 	bl	8001ad8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e319      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0ee      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ea:	d111      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035fa:	400b      	ands	r3, r1
 80035fc:	4901      	ldr	r1, [pc, #4]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
 8003602:	e00b      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000
 800360c:	0ffffcff 	.word	0x0ffffcff
 8003610:	4baa      	ldr	r3, [pc, #680]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4aa9      	ldr	r2, [pc, #676]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003616:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800361a:	6093      	str	r3, [r2, #8]
 800361c:	4ba7      	ldr	r3, [pc, #668]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003628:	49a4      	ldr	r1, [pc, #656]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362a:	4313      	orrs	r3, r2
 800362c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800363a:	4ba0      	ldr	r3, [pc, #640]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003640:	4a9e      	ldr	r2, [pc, #632]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003646:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800364a:	4b9c      	ldr	r3, [pc, #624]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	4999      	ldr	r1, [pc, #612]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003668:	4b94      	ldr	r3, [pc, #592]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003676:	4991      	ldr	r1, [pc, #580]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800368a:	4b8c      	ldr	r3, [pc, #560]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003698:	4988      	ldr	r1, [pc, #544]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ac:	4b83      	ldr	r3, [pc, #524]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ba:	4980      	ldr	r1, [pc, #512]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ce:	4b7b      	ldr	r3, [pc, #492]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4977      	ldr	r1, [pc, #476]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f0:	4b72      	ldr	r3, [pc, #456]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f023 0203 	bic.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	496f      	ldr	r1, [pc, #444]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003712:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f023 020c 	bic.w	r2, r3, #12
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	4966      	ldr	r1, [pc, #408]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003734:	4b61      	ldr	r3, [pc, #388]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	495e      	ldr	r1, [pc, #376]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003756:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	4955      	ldr	r1, [pc, #340]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003778:	4b50      	ldr	r3, [pc, #320]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	494d      	ldr	r1, [pc, #308]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800379a:	4b48      	ldr	r3, [pc, #288]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	4944      	ldr	r1, [pc, #272]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037bc:	4b3f      	ldr	r3, [pc, #252]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	493c      	ldr	r1, [pc, #240]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037de:	4b37      	ldr	r3, [pc, #220]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ec:	4933      	ldr	r1, [pc, #204]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003800:	4b2e      	ldr	r3, [pc, #184]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800380e:	492b      	ldr	r1, [pc, #172]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d011      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003830:	4922      	ldr	r1, [pc, #136]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003840:	d101      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003842:	2301      	movs	r3, #1
 8003844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003862:	4b16      	ldr	r3, [pc, #88]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003870:	4912      	ldr	r1, [pc, #72]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003894:	4909      	ldr	r1, [pc, #36]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d006      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80d9 	beq.w	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a01      	ldr	r2, [pc, #4]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ba:	e001      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80038bc:	40023800 	.word	0x40023800
 80038c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c2:	f7fe f909 	bl	8001ad8 <HAL_GetTick>
 80038c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038ca:	f7fe f905 	bl	8001ad8 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b64      	cmp	r3, #100	; 0x64
 80038d6:	d901      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e194      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038dc:	4b6c      	ldr	r3, [pc, #432]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f0      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d021      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d11d      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038fc:	4b64      	ldr	r3, [pc, #400]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800390a:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	019a      	lsls	r2, r3, #6
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	431a      	orrs	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	061b      	lsls	r3, r3, #24
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	071b      	lsls	r3, r3, #28
 8003930:	4957      	ldr	r1, [pc, #348]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02e      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003962:	d129      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003964:	4b4a      	ldr	r3, [pc, #296]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396a:	0c1b      	lsrs	r3, r3, #16
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003978:	0f1b      	lsrs	r3, r3, #28
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	019a      	lsls	r2, r3, #6
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	431a      	orrs	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	071b      	lsls	r3, r3, #28
 8003998:	493d      	ldr	r1, [pc, #244]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039a0:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a6:	f023 021f 	bic.w	r2, r3, #31
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	3b01      	subs	r3, #1
 80039b0:	4937      	ldr	r1, [pc, #220]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01d      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039c4:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ca:	0e1b      	lsrs	r3, r3, #24
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039d2:	4b2f      	ldr	r3, [pc, #188]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d8:	0f1b      	lsrs	r3, r3, #28
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	019a      	lsls	r2, r3, #6
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	431a      	orrs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	071b      	lsls	r3, r3, #28
 80039f8:	4925      	ldr	r1, [pc, #148]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d011      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	019a      	lsls	r2, r3, #6
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	071b      	lsls	r3, r3, #28
 8003a28:	4919      	ldr	r1, [pc, #100]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3c:	f7fe f84c 	bl	8001ad8 <HAL_GetTick>
 8003a40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a44:	f7fe f848 	bl	8001ad8 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0d7      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 80cd 	bne.w	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a76:	f7fe f82f 	bl	8001ad8 <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a7e:	f7fe f82b 	bl	8001ad8 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b64      	cmp	r3, #100	; 0x64
 8003a8a:	d903      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0ba      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a94:	4b5e      	ldr	r3, [pc, #376]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa0:	d0ed      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02e      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d12a      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003aca:	4b51      	ldr	r3, [pc, #324]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ad8:	4b4d      	ldr	r3, [pc, #308]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	0f1b      	lsrs	r3, r3, #28
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	019a      	lsls	r2, r3, #6
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	071b      	lsls	r3, r3, #28
 8003afe:	4944      	ldr	r1, [pc, #272]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b06:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	493d      	ldr	r1, [pc, #244]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b34:	d11d      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	0e1b      	lsrs	r3, r3, #24
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b44:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	0f1b      	lsrs	r3, r3, #28
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	019a      	lsls	r2, r3, #6
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	061b      	lsls	r3, r3, #24
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	4929      	ldr	r1, [pc, #164]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d028      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	0e1b      	lsrs	r3, r3, #24
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	019a      	lsls	r2, r3, #6
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	071b      	lsls	r3, r3, #28
 8003bb2:	4917      	ldr	r1, [pc, #92]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	4911      	ldr	r1, [pc, #68]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0e      	ldr	r2, [pc, #56]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bdc:	f7fd ff7c 	bl	8001ad8 <HAL_GetTick>
 8003be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003be4:	f7fd ff78 	bl	8001ad8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e007      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c02:	d1ef      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e049      	b.n	8003cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fd12 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f001 f80e 	bl	8004c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d001      	beq.n	8003cdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e04c      	b.n	8003d76 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <HAL_TIM_Base_Start+0xc0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf6:	d01d      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <HAL_TIM_Base_Start+0xc4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <HAL_TIM_Base_Start+0xc8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_TIM_Base_Start+0xcc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <HAL_TIM_Base_Start+0xd0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <HAL_TIM_Base_Start+0xd4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <HAL_TIM_Base_Start+0xd8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d115      	bne.n	8003d60 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <HAL_TIM_Base_Start+0xdc>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d015      	beq.n	8003d72 <HAL_TIM_Base_Start+0xae>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4c:	d011      	beq.n	8003d72 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5e:	e008      	b.n	8003d72 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e000      	b.n	8003d74 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	40010400 	.word	0x40010400
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40001800 	.word	0x40001800
 8003da0:	00010007 	.word	0x00010007

08003da4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10f      	bne.n	8003ddc <HAL_TIM_Base_Stop+0x38>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a1a      	ldr	r2, [r3, #32]
 8003dc2:	f240 4344 	movw	r3, #1092	; 0x444
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_Base_Stop+0x38>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e049      	b.n	8003e98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fd fcd1 	bl	80017c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f000 ff1f 	bl	8004c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0x24>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e03c      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d109      	bne.n	8003ede <HAL_TIM_PWM_Start+0x3e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	e02f      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d109      	bne.n	8003ef8 <HAL_TIM_PWM_Start+0x58>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e022      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d109      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x72>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e015      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d109      	bne.n	8003f2c <HAL_TIM_PWM_Start+0x8c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	bf14      	ite	ne
 8003f24:	2301      	movne	r3, #1
 8003f26:	2300      	moveq	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e008      	b.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e092      	b.n	800406c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_PWM_Start+0xb6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f54:	e023      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start+0xc6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f64:	e01b      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_PWM_Start+0xd6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f74:	e013      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start+0xe6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f84:	e00b      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_PWM_Start+0xf6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f94:	e003      	b.n	8003f9e <HAL_TIM_PWM_Start+0xfe>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	6839      	ldr	r1, [r7, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 fbba 	bl	8005720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a30      	ldr	r2, [pc, #192]	; (8004074 <HAL_TIM_PWM_Start+0x1d4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_TIM_PWM_Start+0x120>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2f      	ldr	r2, [pc, #188]	; (8004078 <HAL_TIM_PWM_Start+0x1d8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIM_PWM_Start+0x124>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x126>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a25      	ldr	r2, [pc, #148]	; (8004074 <HAL_TIM_PWM_Start+0x1d4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d022      	beq.n	800402a <HAL_TIM_PWM_Start+0x18a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fec:	d01d      	beq.n	800402a <HAL_TIM_PWM_Start+0x18a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a22      	ldr	r2, [pc, #136]	; (800407c <HAL_TIM_PWM_Start+0x1dc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d018      	beq.n	800402a <HAL_TIM_PWM_Start+0x18a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a20      	ldr	r2, [pc, #128]	; (8004080 <HAL_TIM_PWM_Start+0x1e0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_TIM_PWM_Start+0x18a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <HAL_TIM_PWM_Start+0x1e4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00e      	beq.n	800402a <HAL_TIM_PWM_Start+0x18a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a19      	ldr	r2, [pc, #100]	; (8004078 <HAL_TIM_PWM_Start+0x1d8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_TIM_PWM_Start+0x18a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <HAL_TIM_PWM_Start+0x1e8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_TIM_PWM_Start+0x18a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a19      	ldr	r2, [pc, #100]	; (800408c <HAL_TIM_PWM_Start+0x1ec>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d115      	bne.n	8004056 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_TIM_PWM_Start+0x1f0>)
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b06      	cmp	r3, #6
 800403a:	d015      	beq.n	8004068 <HAL_TIM_PWM_Start+0x1c8>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d011      	beq.n	8004068 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	e008      	b.n	8004068 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	e000      	b.n	800406a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004068:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40010000 	.word	0x40010000
 8004078:	40010400 	.word	0x40010400
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40014000 	.word	0x40014000
 800408c:	40001800 	.word	0x40001800
 8004090:	00010007 	.word	0x00010007

08004094 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e049      	b.n	800413a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f841 	bl	8004142 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f000 fdce 	bl	8004c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_TIM_IC_Start_IT+0x1e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e023      	b.n	80041be <HAL_TIM_IC_Start_IT+0x66>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d104      	bne.n	8004186 <HAL_TIM_IC_Start_IT+0x2e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e01b      	b.n	80041be <HAL_TIM_IC_Start_IT+0x66>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d104      	bne.n	8004196 <HAL_TIM_IC_Start_IT+0x3e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004192:	b2db      	uxtb	r3, r3
 8004194:	e013      	b.n	80041be <HAL_TIM_IC_Start_IT+0x66>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_IC_Start_IT+0x4e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	e00b      	b.n	80041be <HAL_TIM_IC_Start_IT+0x66>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_IC_Start_IT+0x5e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	e003      	b.n	80041be <HAL_TIM_IC_Start_IT+0x66>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <HAL_TIM_IC_Start_IT+0x78>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e013      	b.n	80041f8 <HAL_TIM_IC_Start_IT+0xa0>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d104      	bne.n	80041e0 <HAL_TIM_IC_Start_IT+0x88>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e00b      	b.n	80041f8 <HAL_TIM_IC_Start_IT+0xa0>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d104      	bne.n	80041f0 <HAL_TIM_IC_Start_IT+0x98>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e003      	b.n	80041f8 <HAL_TIM_IC_Start_IT+0xa0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041fa:	7bbb      	ldrb	r3, [r7, #14]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d102      	bne.n	8004206 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004200:	7b7b      	ldrb	r3, [r7, #13]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d001      	beq.n	800420a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0e2      	b.n	80043d0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <HAL_TIM_IC_Start_IT+0xc2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004218:	e023      	b.n	8004262 <HAL_TIM_IC_Start_IT+0x10a>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Start_IT+0xd2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004228:	e01b      	b.n	8004262 <HAL_TIM_IC_Start_IT+0x10a>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Start_IT+0xe2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004238:	e013      	b.n	8004262 <HAL_TIM_IC_Start_IT+0x10a>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b0c      	cmp	r3, #12
 800423e:	d104      	bne.n	800424a <HAL_TIM_IC_Start_IT+0xf2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004248:	e00b      	b.n	8004262 <HAL_TIM_IC_Start_IT+0x10a>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b10      	cmp	r3, #16
 800424e:	d104      	bne.n	800425a <HAL_TIM_IC_Start_IT+0x102>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004258:	e003      	b.n	8004262 <HAL_TIM_IC_Start_IT+0x10a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_TIM_IC_Start_IT+0x11a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004270:	e013      	b.n	800429a <HAL_TIM_IC_Start_IT+0x142>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d104      	bne.n	8004282 <HAL_TIM_IC_Start_IT+0x12a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004280:	e00b      	b.n	800429a <HAL_TIM_IC_Start_IT+0x142>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d104      	bne.n	8004292 <HAL_TIM_IC_Start_IT+0x13a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004290:	e003      	b.n	800429a <HAL_TIM_IC_Start_IT+0x142>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b0c      	cmp	r3, #12
 800429e:	d841      	bhi.n	8004324 <HAL_TIM_IC_Start_IT+0x1cc>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_TIM_IC_Start_IT+0x150>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042dd 	.word	0x080042dd
 80042ac:	08004325 	.word	0x08004325
 80042b0:	08004325 	.word	0x08004325
 80042b4:	08004325 	.word	0x08004325
 80042b8:	080042ef 	.word	0x080042ef
 80042bc:	08004325 	.word	0x08004325
 80042c0:	08004325 	.word	0x08004325
 80042c4:	08004325 	.word	0x08004325
 80042c8:	08004301 	.word	0x08004301
 80042cc:	08004325 	.word	0x08004325
 80042d0:	08004325 	.word	0x08004325
 80042d4:	08004325 	.word	0x08004325
 80042d8:	08004313 	.word	0x08004313
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0202 	orr.w	r2, r2, #2
 80042ea:	60da      	str	r2, [r3, #12]
      break;
 80042ec:	e01d      	b.n	800432a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0204 	orr.w	r2, r2, #4
 80042fc:	60da      	str	r2, [r3, #12]
      break;
 80042fe:	e014      	b.n	800432a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0208 	orr.w	r2, r2, #8
 800430e:	60da      	str	r2, [r3, #12]
      break;
 8004310:	e00b      	b.n	800432a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0210 	orr.w	r2, r2, #16
 8004320:	60da      	str	r2, [r3, #12]
      break;
 8004322:	e002      	b.n	800432a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      break;
 8004328:	bf00      	nop
  }

  if (status == HAL_OK)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d14e      	bne.n	80043ce <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2201      	movs	r2, #1
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f9f1 	bl	8005720 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a25      	ldr	r2, [pc, #148]	; (80043d8 <HAL_TIM_IC_Start_IT+0x280>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d022      	beq.n	800438e <HAL_TIM_IC_Start_IT+0x236>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004350:	d01d      	beq.n	800438e <HAL_TIM_IC_Start_IT+0x236>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a21      	ldr	r2, [pc, #132]	; (80043dc <HAL_TIM_IC_Start_IT+0x284>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d018      	beq.n	800438e <HAL_TIM_IC_Start_IT+0x236>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_TIM_IC_Start_IT+0x288>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_TIM_IC_Start_IT+0x236>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <HAL_TIM_IC_Start_IT+0x28c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00e      	beq.n	800438e <HAL_TIM_IC_Start_IT+0x236>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_TIM_IC_Start_IT+0x290>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_TIM_IC_Start_IT+0x236>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_TIM_IC_Start_IT+0x294>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_TIM_IC_Start_IT+0x236>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_TIM_IC_Start_IT+0x298>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d115      	bne.n	80043ba <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <HAL_TIM_IC_Start_IT+0x29c>)
 8004396:	4013      	ands	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b06      	cmp	r3, #6
 800439e:	d015      	beq.n	80043cc <HAL_TIM_IC_Start_IT+0x274>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a6:	d011      	beq.n	80043cc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b8:	e008      	b.n	80043cc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e000      	b.n	80043ce <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40010400 	.word	0x40010400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40001800 	.word	0x40001800
 80043f4:	00010007 	.word	0x00010007

080043f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b02      	cmp	r3, #2
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0202 	mvn.w	r2, #2
 8004424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc fdfe 	bl	800103c <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fbf8 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fbff 	bl	8004c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b04      	cmp	r3, #4
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0204 	mvn.w	r2, #4
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc fdd4 	bl	800103c <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fbce 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fbd5 	bl	8004c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0208 	mvn.w	r2, #8
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2204      	movs	r2, #4
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fdaa 	bl	800103c <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fba4 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fbab 	bl	8004c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b10      	cmp	r3, #16
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0210 	mvn.w	r2, #16
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2208      	movs	r2, #8
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fc fd80 	bl	800103c <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fb7a 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fb81 	bl	8004c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d10e      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0201 	mvn.w	r2, #1
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fc fc22 	bl	8000dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f001 f97a 	bl	800589c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d10e      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d107      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f001 f96d 	bl	80058b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d10e      	bne.n	8004602 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d107      	bne.n	8004602 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fb2f 	bl	8004c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b20      	cmp	r3, #32
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0220 	mvn.w	r2, #32
 8004626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f001 f92d 	bl	8005888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004650:	2302      	movs	r3, #2
 8004652:	e088      	b.n	8004766 <HAL_TIM_IC_ConfigChannel+0x130>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11b      	bne.n	800469a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004672:	f000 fe91 	bl	8005398 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 020c 	bic.w	r2, r2, #12
 8004684:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6999      	ldr	r1, [r3, #24]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	619a      	str	r2, [r3, #24]
 8004698:	e060      	b.n	800475c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d11c      	bne.n	80046da <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80046b0:	f000 ff15 	bl	80054de <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6999      	ldr	r1, [r3, #24]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	619a      	str	r2, [r3, #24]
 80046d8:	e040      	b.n	800475c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d11b      	bne.n	8004718 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80046f0:	f000 ff62 	bl	80055b8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69da      	ldr	r2, [r3, #28]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 020c 	bic.w	r2, r2, #12
 8004702:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69d9      	ldr	r1, [r3, #28]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	61da      	str	r2, [r3, #28]
 8004716:	e021      	b.n	800475c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d11c      	bne.n	8004758 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800472e:	f000 ff7f 	bl	8005630 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004740:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	021a      	lsls	r2, r3, #8
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	61da      	str	r2, [r3, #28]
 8004756:	e001      	b.n	800475c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004764:	7dfb      	ldrb	r3, [r7, #23]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800478a:	2302      	movs	r3, #2
 800478c:	e0ff      	b.n	800498e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b14      	cmp	r3, #20
 800479a:	f200 80f0 	bhi.w	800497e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047f9 	.word	0x080047f9
 80047a8:	0800497f 	.word	0x0800497f
 80047ac:	0800497f 	.word	0x0800497f
 80047b0:	0800497f 	.word	0x0800497f
 80047b4:	08004839 	.word	0x08004839
 80047b8:	0800497f 	.word	0x0800497f
 80047bc:	0800497f 	.word	0x0800497f
 80047c0:	0800497f 	.word	0x0800497f
 80047c4:	0800487b 	.word	0x0800487b
 80047c8:	0800497f 	.word	0x0800497f
 80047cc:	0800497f 	.word	0x0800497f
 80047d0:	0800497f 	.word	0x0800497f
 80047d4:	080048bb 	.word	0x080048bb
 80047d8:	0800497f 	.word	0x0800497f
 80047dc:	0800497f 	.word	0x0800497f
 80047e0:	0800497f 	.word	0x0800497f
 80047e4:	080048fd 	.word	0x080048fd
 80047e8:	0800497f 	.word	0x0800497f
 80047ec:	0800497f 	.word	0x0800497f
 80047f0:	0800497f 	.word	0x0800497f
 80047f4:	0800493d 	.word	0x0800493d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fad8 	bl	8004db4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0208 	orr.w	r2, r2, #8
 8004812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6999      	ldr	r1, [r3, #24]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	619a      	str	r2, [r3, #24]
      break;
 8004836:	e0a5      	b.n	8004984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fb2a 	bl	8004e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6999      	ldr	r1, [r3, #24]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	021a      	lsls	r2, r3, #8
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	619a      	str	r2, [r3, #24]
      break;
 8004878:	e084      	b.n	8004984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fb81 	bl	8004f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0208 	orr.w	r2, r2, #8
 8004894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0204 	bic.w	r2, r2, #4
 80048a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69d9      	ldr	r1, [r3, #28]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	61da      	str	r2, [r3, #28]
      break;
 80048b8:	e064      	b.n	8004984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fbd7 	bl	8005074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69d9      	ldr	r1, [r3, #28]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	021a      	lsls	r2, r3, #8
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	61da      	str	r2, [r3, #28]
      break;
 80048fa:	e043      	b.n	8004984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fc0e 	bl	8005124 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0208 	orr.w	r2, r2, #8
 8004916:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0204 	bic.w	r2, r2, #4
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800493a:	e023      	b.n	8004984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fc40 	bl	80051c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	021a      	lsls	r2, r3, #8
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800497c:	e002      	b.n	8004984 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
      break;
 8004982:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800498c:	7dfb      	ldrb	r3, [r7, #23]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop

08004998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_TIM_ConfigClockSource+0x1c>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e0b4      	b.n	8004b1e <HAL_TIM_ConfigClockSource+0x186>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	4b56      	ldr	r3, [pc, #344]	; (8004b28 <HAL_TIM_ConfigClockSource+0x190>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ec:	d03e      	beq.n	8004a6c <HAL_TIM_ConfigClockSource+0xd4>
 80049ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f2:	f200 8087 	bhi.w	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fa:	f000 8086 	beq.w	8004b0a <HAL_TIM_ConfigClockSource+0x172>
 80049fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a02:	d87f      	bhi.n	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
 8004a04:	2b70      	cmp	r3, #112	; 0x70
 8004a06:	d01a      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0xa6>
 8004a08:	2b70      	cmp	r3, #112	; 0x70
 8004a0a:	d87b      	bhi.n	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
 8004a0c:	2b60      	cmp	r3, #96	; 0x60
 8004a0e:	d050      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x11a>
 8004a10:	2b60      	cmp	r3, #96	; 0x60
 8004a12:	d877      	bhi.n	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
 8004a14:	2b50      	cmp	r3, #80	; 0x50
 8004a16:	d03c      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0xfa>
 8004a18:	2b50      	cmp	r3, #80	; 0x50
 8004a1a:	d873      	bhi.n	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d058      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x13a>
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d86f      	bhi.n	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d064      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a28:	2b30      	cmp	r3, #48	; 0x30
 8004a2a:	d86b      	bhi.n	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d060      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d867      	bhi.n	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d05c      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d05a      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x15a>
 8004a3c:	e062      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a4e:	f000 fe47 	bl	80056e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	609a      	str	r2, [r3, #8]
      break;
 8004a6a:	e04f      	b.n	8004b0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a7c:	f000 fe30 	bl	80056e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a8e:	609a      	str	r2, [r3, #8]
      break;
 8004a90:	e03c      	b.n	8004b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f000 fcee 	bl	8005480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2150      	movs	r1, #80	; 0x50
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fdfd 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8004ab0:	e02c      	b.n	8004b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 fd4a 	bl	8005558 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2160      	movs	r1, #96	; 0x60
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fded 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e01c      	b.n	8004b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 fcce 	bl	8005480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2140      	movs	r1, #64	; 0x40
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fddd 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8004af0:	e00c      	b.n	8004b0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f000 fdd4 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8004b02:	e003      	b.n	8004b0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      break;
 8004b08:	e000      	b.n	8004b0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	fffeff88 	.word	0xfffeff88

08004b2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e031      	b.n	8004ba8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fb8a 	bl	8005270 <TIM_SlaveTimer_SetConfig>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e018      	b.n	8004ba8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	d831      	bhi.n	8004c28 <HAL_TIM_ReadCapturedValue+0x78>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <HAL_TIM_ReadCapturedValue+0x1c>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004c01 	.word	0x08004c01
 8004bd0:	08004c29 	.word	0x08004c29
 8004bd4:	08004c29 	.word	0x08004c29
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	08004c0b 	.word	0x08004c0b
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004c29 	.word	0x08004c29
 8004bfc:	08004c1f 	.word	0x08004c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	60fb      	str	r3, [r7, #12]

      break;
 8004c08:	e00f      	b.n	8004c2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	60fb      	str	r3, [r7, #12]

      break;
 8004c12:	e00a      	b.n	8004c2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	60fb      	str	r3, [r7, #12]

      break;
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	60fb      	str	r3, [r7, #12]

      break;
 8004c26:	e000      	b.n	8004c2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c28:	bf00      	nop
  }

  return tmpreg;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a40      	ldr	r2, [pc, #256]	; (8004d88 <TIM_Base_SetConfig+0x114>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d00f      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a3d      	ldr	r2, [pc, #244]	; (8004d8c <TIM_Base_SetConfig+0x118>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00b      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a3c      	ldr	r2, [pc, #240]	; (8004d90 <TIM_Base_SetConfig+0x11c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d007      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a3b      	ldr	r2, [pc, #236]	; (8004d94 <TIM_Base_SetConfig+0x120>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a3a      	ldr	r2, [pc, #232]	; (8004d98 <TIM_Base_SetConfig+0x124>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d108      	bne.n	8004cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2f      	ldr	r2, [pc, #188]	; (8004d88 <TIM_Base_SetConfig+0x114>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d02b      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd4:	d027      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2c      	ldr	r2, [pc, #176]	; (8004d8c <TIM_Base_SetConfig+0x118>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d023      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2b      	ldr	r2, [pc, #172]	; (8004d90 <TIM_Base_SetConfig+0x11c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01f      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2a      	ldr	r2, [pc, #168]	; (8004d94 <TIM_Base_SetConfig+0x120>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01b      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a29      	ldr	r2, [pc, #164]	; (8004d98 <TIM_Base_SetConfig+0x124>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d017      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a28      	ldr	r2, [pc, #160]	; (8004d9c <TIM_Base_SetConfig+0x128>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a27      	ldr	r2, [pc, #156]	; (8004da0 <TIM_Base_SetConfig+0x12c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00f      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a26      	ldr	r2, [pc, #152]	; (8004da4 <TIM_Base_SetConfig+0x130>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <TIM_Base_SetConfig+0x134>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a24      	ldr	r2, [pc, #144]	; (8004dac <TIM_Base_SetConfig+0x138>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a23      	ldr	r2, [pc, #140]	; (8004db0 <TIM_Base_SetConfig+0x13c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d108      	bne.n	8004d38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <TIM_Base_SetConfig+0x114>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0xf8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a0c      	ldr	r2, [pc, #48]	; (8004d98 <TIM_Base_SetConfig+0x124>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d103      	bne.n	8004d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	615a      	str	r2, [r3, #20]
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000800 	.word	0x40000800
 8004d94:	40000c00 	.word	0x40000c00
 8004d98:	40010400 	.word	0x40010400
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800
 8004da8:	40001800 	.word	0x40001800
 8004dac:	40001c00 	.word	0x40001c00
 8004db0:	40002000 	.word	0x40002000

08004db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f023 0201 	bic.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <TIM_OC1_SetConfig+0xd8>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f023 0302 	bic.w	r3, r3, #2
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a21      	ldr	r2, [pc, #132]	; (8004e90 <TIM_OC1_SetConfig+0xdc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC1_SetConfig+0x64>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <TIM_OC1_SetConfig+0xe0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d10c      	bne.n	8004e32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0308 	bic.w	r3, r3, #8
 8004e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a16      	ldr	r2, [pc, #88]	; (8004e90 <TIM_OC1_SetConfig+0xdc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_OC1_SetConfig+0x8e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <TIM_OC1_SetConfig+0xe0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d111      	bne.n	8004e66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	621a      	str	r2, [r3, #32]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	fffeff8f 	.word	0xfffeff8f
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40010400 	.word	0x40010400

08004e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0210 	bic.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4b2e      	ldr	r3, [pc, #184]	; (8004f7c <TIM_OC2_SetConfig+0xe4>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0320 	bic.w	r3, r3, #32
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a23      	ldr	r2, [pc, #140]	; (8004f80 <TIM_OC2_SetConfig+0xe8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC2_SetConfig+0x68>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <TIM_OC2_SetConfig+0xec>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10d      	bne.n	8004f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <TIM_OC2_SetConfig+0xe8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC2_SetConfig+0x94>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <TIM_OC2_SetConfig+0xec>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d113      	bne.n	8004f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	feff8fff 	.word	0xfeff8fff
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40010400 	.word	0x40010400

08004f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <TIM_OC3_SetConfig+0xe0>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a22      	ldr	r2, [pc, #136]	; (800506c <TIM_OC3_SetConfig+0xe4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_OC3_SetConfig+0x66>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a21      	ldr	r2, [pc, #132]	; (8005070 <TIM_OC3_SetConfig+0xe8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10d      	bne.n	800500a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a17      	ldr	r2, [pc, #92]	; (800506c <TIM_OC3_SetConfig+0xe4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_OC3_SetConfig+0x92>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a16      	ldr	r2, [pc, #88]	; (8005070 <TIM_OC3_SetConfig+0xe8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d113      	bne.n	8005042 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	fffeff8f 	.word	0xfffeff8f
 800506c:	40010000 	.word	0x40010000
 8005070:	40010400 	.word	0x40010400

08005074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <TIM_OC4_SetConfig+0xa4>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	031b      	lsls	r3, r3, #12
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a13      	ldr	r2, [pc, #76]	; (800511c <TIM_OC4_SetConfig+0xa8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_OC4_SetConfig+0x68>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <TIM_OC4_SetConfig+0xac>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d109      	bne.n	80050f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	019b      	lsls	r3, r3, #6
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	feff8fff 	.word	0xfeff8fff
 800511c:	40010000 	.word	0x40010000
 8005120:	40010400 	.word	0x40010400

08005124 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <TIM_OC5_SetConfig+0x98>)
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005164:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <TIM_OC5_SetConfig+0x9c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d003      	beq.n	8005182 <TIM_OC5_SetConfig+0x5e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a11      	ldr	r2, [pc, #68]	; (80051c4 <TIM_OC5_SetConfig+0xa0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d109      	bne.n	8005196 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005188:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	fffeff8f 	.word	0xfffeff8f
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40010400 	.word	0x40010400

080051c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <TIM_OC6_SetConfig+0x9c>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800520a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	051b      	lsls	r3, r3, #20
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a13      	ldr	r2, [pc, #76]	; (8005268 <TIM_OC6_SetConfig+0xa0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <TIM_OC6_SetConfig+0x60>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <TIM_OC6_SetConfig+0xa4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d109      	bne.n	800523c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800522e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	029b      	lsls	r3, r3, #10
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	feff8fff 	.word	0xfeff8fff
 8005268:	40010000 	.word	0x40010000
 800526c:	40010400 	.word	0x40010400

08005270 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4b3e      	ldr	r3, [pc, #248]	; (8005394 <TIM_SlaveTimer_SetConfig+0x124>)
 800529c:	4013      	ands	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b70      	cmp	r3, #112	; 0x70
 80052b8:	d01a      	beq.n	80052f0 <TIM_SlaveTimer_SetConfig+0x80>
 80052ba:	2b70      	cmp	r3, #112	; 0x70
 80052bc:	d860      	bhi.n	8005380 <TIM_SlaveTimer_SetConfig+0x110>
 80052be:	2b60      	cmp	r3, #96	; 0x60
 80052c0:	d054      	beq.n	800536c <TIM_SlaveTimer_SetConfig+0xfc>
 80052c2:	2b60      	cmp	r3, #96	; 0x60
 80052c4:	d85c      	bhi.n	8005380 <TIM_SlaveTimer_SetConfig+0x110>
 80052c6:	2b50      	cmp	r3, #80	; 0x50
 80052c8:	d046      	beq.n	8005358 <TIM_SlaveTimer_SetConfig+0xe8>
 80052ca:	2b50      	cmp	r3, #80	; 0x50
 80052cc:	d858      	bhi.n	8005380 <TIM_SlaveTimer_SetConfig+0x110>
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d019      	beq.n	8005306 <TIM_SlaveTimer_SetConfig+0x96>
 80052d2:	2b40      	cmp	r3, #64	; 0x40
 80052d4:	d854      	bhi.n	8005380 <TIM_SlaveTimer_SetConfig+0x110>
 80052d6:	2b30      	cmp	r3, #48	; 0x30
 80052d8:	d055      	beq.n	8005386 <TIM_SlaveTimer_SetConfig+0x116>
 80052da:	2b30      	cmp	r3, #48	; 0x30
 80052dc:	d850      	bhi.n	8005380 <TIM_SlaveTimer_SetConfig+0x110>
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d051      	beq.n	8005386 <TIM_SlaveTimer_SetConfig+0x116>
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d84c      	bhi.n	8005380 <TIM_SlaveTimer_SetConfig+0x110>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d04d      	beq.n	8005386 <TIM_SlaveTimer_SetConfig+0x116>
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d04b      	beq.n	8005386 <TIM_SlaveTimer_SetConfig+0x116>
 80052ee:	e047      	b.n	8005380 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005300:	f000 f9ee 	bl	80056e0 <TIM_ETR_SetConfig>
      break;
 8005304:	e040      	b.n	8005388 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b05      	cmp	r3, #5
 800530c:	d101      	bne.n	8005312 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e03b      	b.n	800538a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005338:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	4313      	orrs	r3, r2
 8005344:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	621a      	str	r2, [r3, #32]
      break;
 8005356:	e017      	b.n	8005388 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005364:	461a      	mov	r2, r3
 8005366:	f000 f88b 	bl	8005480 <TIM_TI1_ConfigInputStage>
      break;
 800536a:	e00d      	b.n	8005388 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005378:	461a      	mov	r2, r3
 800537a:	f000 f8ed 	bl	8005558 <TIM_TI2_ConfigInputStage>
      break;
 800537e:	e003      	b.n	8005388 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
      break;
 8005384:	e000      	b.n	8005388 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005386:	bf00      	nop
  }

  return status;
 8005388:	7dfb      	ldrb	r3, [r7, #23]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	fffefff8 	.word	0xfffefff8

08005398 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 0201 	bic.w	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4a28      	ldr	r2, [pc, #160]	; (8005464 <TIM_TI1_SetConfig+0xcc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01b      	beq.n	80053fe <TIM_TI1_SetConfig+0x66>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d017      	beq.n	80053fe <TIM_TI1_SetConfig+0x66>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a25      	ldr	r2, [pc, #148]	; (8005468 <TIM_TI1_SetConfig+0xd0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <TIM_TI1_SetConfig+0x66>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a24      	ldr	r2, [pc, #144]	; (800546c <TIM_TI1_SetConfig+0xd4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00f      	beq.n	80053fe <TIM_TI1_SetConfig+0x66>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a23      	ldr	r2, [pc, #140]	; (8005470 <TIM_TI1_SetConfig+0xd8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00b      	beq.n	80053fe <TIM_TI1_SetConfig+0x66>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4a22      	ldr	r2, [pc, #136]	; (8005474 <TIM_TI1_SetConfig+0xdc>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_TI1_SetConfig+0x66>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a21      	ldr	r2, [pc, #132]	; (8005478 <TIM_TI1_SetConfig+0xe0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_TI1_SetConfig+0x66>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a20      	ldr	r2, [pc, #128]	; (800547c <TIM_TI1_SetConfig+0xe4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <TIM_TI1_SetConfig+0x6a>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <TIM_TI1_SetConfig+0x6c>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e003      	b.n	8005422 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	b2db      	uxtb	r3, r3
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f023 030a 	bic.w	r3, r3, #10
 800543c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f003 030a 	and.w	r3, r3, #10
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40010400 	.word	0x40010400
 8005478:	40014000 	.word	0x40014000
 800547c:	40001800 	.word	0x40001800

08005480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	f023 0201 	bic.w	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f023 030a 	bic.w	r3, r3, #10
 80054bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054de:	b480      	push	{r7}
 80054e0:	b087      	sub	sp, #28
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
 80054ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f023 0210 	bic.w	r2, r3, #16
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800551c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	031b      	lsls	r3, r3, #12
 8005522:	b29b      	uxth	r3, r3
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005530:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	f023 0210 	bic.w	r2, r3, #16
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005582:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	031b      	lsls	r3, r3, #12
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005594:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	621a      	str	r2, [r3, #32]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 0303 	bic.w	r3, r3, #3
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005608:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800566e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	031b      	lsls	r3, r3, #12
 8005674:	b29b      	uxth	r3, r3
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005682:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	031b      	lsls	r3, r3, #12
 8005688:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f043 0307 	orr.w	r3, r3, #7
 80056cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	431a      	orrs	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4313      	orrs	r3, r2
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	609a      	str	r2, [r3, #8]
}
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2201      	movs	r2, #1
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1a      	ldr	r2, [r3, #32]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	43db      	mvns	r3, r3
 8005742:	401a      	ands	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005780:	2302      	movs	r3, #2
 8005782:	e06d      	b.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a30      	ldr	r2, [pc, #192]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d004      	beq.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2f      	ldr	r2, [pc, #188]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d108      	bne.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a20      	ldr	r2, [pc, #128]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d022      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f6:	d01d      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d018      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1a      	ldr	r2, [pc, #104]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00e      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a15      	ldr	r2, [pc, #84]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d009      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a15      	ldr	r2, [pc, #84]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d10c      	bne.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	4313      	orrs	r3, r2
 8005844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40010000 	.word	0x40010000
 8005870:	40010400 	.word	0x40010400
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800
 800587c:	40000c00 	.word	0x40000c00
 8005880:	40014000 	.word	0x40014000
 8005884:	40001800 	.word	0x40001800

08005888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e040      	b.n	8005958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc f814 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2224      	movs	r2, #36	; 0x24
 80058f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fb62 	bl	8005fcc <UART_SetConfig>
 8005908:	4603      	mov	r3, r0
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e022      	b.n	8005958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fdba 	bl	8006494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800592e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800593e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fe41 	bl	80065d8 <UART_CheckIdleState>
 8005956:	4603      	mov	r3, r0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08a      	sub	sp, #40	; 0x28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005974:	2b20      	cmp	r3, #32
 8005976:	d132      	bne.n	80059de <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_UART_Receive_IT+0x24>
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e02b      	b.n	80059e0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d018      	beq.n	80059ce <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	613b      	str	r3, [r7, #16]
   return(result);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	623b      	str	r3, [r7, #32]
 80059bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	69f9      	ldr	r1, [r7, #28]
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e6      	bne.n	800599c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	461a      	mov	r2, r3
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fefd 	bl	80067d4 <UART_Start_Receive_IT>
 80059da:	4603      	mov	r3, r0
 80059dc:	e000      	b.n	80059e0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80059de:	2302      	movs	r3, #2
  }
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3728      	adds	r7, #40	; 0x28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b0ba      	sub	sp, #232	; 0xe8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a12:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a16:	4013      	ands	r3, r2
 8005a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d115      	bne.n	8005a50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00f      	beq.n	8005a50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8297 	beq.w	8005f74 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
      }
      return;
 8005a4e:	e291      	b.n	8005f74 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8117 	beq.w	8005c88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a6a:	4b85      	ldr	r3, [pc, #532]	; (8005c80 <HAL_UART_IRQHandler+0x298>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 810a 	beq.w	8005c88 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d011      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xbc>
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2201      	movs	r2, #1
 8005a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a9a:	f043 0201 	orr.w	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d011      	beq.n	8005ad4 <HAL_UART_IRQHandler+0xec>
 8005ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00b      	beq.n	8005ad4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aca:	f043 0204 	orr.w	r2, r3, #4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d011      	beq.n	8005b04 <HAL_UART_IRQHandler+0x11c>
 8005ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2204      	movs	r2, #4
 8005af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005afa:	f043 0202 	orr.w	r2, r3, #2
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b36:	f043 0208 	orr.w	r2, r3, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d012      	beq.n	8005b72 <HAL_UART_IRQHandler+0x18a>
 8005b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00c      	beq.n	8005b72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b68:	f043 0220 	orr.w	r2, r3, #32
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 81fd 	beq.w	8005f78 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d005      	beq.n	8005bca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d04f      	beq.n	8005c6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fec8 	bl	8006960 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d141      	bne.n	8005c62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1d9      	bne.n	8005bde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d013      	beq.n	8005c5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <HAL_UART_IRQHandler+0x29c>)
 8005c38:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fc f8d7 	bl	8001df2 <HAL_DMA_Abort_IT>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d017      	beq.n	8005c7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c54:	4610      	mov	r0, r2
 8005c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c58:	e00f      	b.n	8005c7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9a0 	bl	8005fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	e00b      	b.n	8005c7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f99c 	bl	8005fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c68:	e007      	b.n	8005c7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f998 	bl	8005fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005c78:	e17e      	b.n	8005f78 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7a:	bf00      	nop
    return;
 8005c7c:	e17c      	b.n	8005f78 <HAL_UART_IRQHandler+0x590>
 8005c7e:	bf00      	nop
 8005c80:	04000120 	.word	0x04000120
 8005c84:	08006a29 	.word	0x08006a29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	f040 814c 	bne.w	8005f2a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 8145 	beq.w	8005f2a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 813e 	beq.w	8005f2a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2210      	movs	r2, #16
 8005cb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	f040 80b6 	bne.w	8005e32 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8150 	beq.w	8005f7c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	f080 8148 	bcs.w	8005f7c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d00:	f000 8086 	beq.w	8005e10 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1da      	bne.n	8005d04 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3308      	adds	r3, #8
 8005d54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e1      	bne.n	8005d4e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3308      	adds	r3, #8
 8005d90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005dae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005db0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005db4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e3      	bne.n	8005d8a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de0:	f023 0310 	bic.w	r3, r3, #16
 8005de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005df4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e4      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fb ff81 	bl	8001d12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f8c2 	bl	8005fb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e30:	e0a4      	b.n	8005f7c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8096 	beq.w	8005f80 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8091 	beq.w	8005f80 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e80:	647b      	str	r3, [r7, #68]	; 0x44
 8005e82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e4      	bne.n	8005e5e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eb8:	633a      	str	r2, [r7, #48]	; 0x30
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e3      	bne.n	8005e94 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f023 0310 	bic.w	r3, r3, #16
 8005ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	69b9      	ldr	r1, [r7, #24]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e4      	bne.n	8005ee0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f846 	bl	8005fb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f28:	e02a      	b.n	8005f80 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00e      	beq.n	8005f54 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01c      	beq.n	8005f84 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	4798      	blx	r3
    }
    return;
 8005f52:	e017      	b.n	8005f84 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d012      	beq.n	8005f86 <HAL_UART_IRQHandler+0x59e>
 8005f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00c      	beq.n	8005f86 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fd71 	bl	8006a54 <UART_EndTransmit_IT>
    return;
 8005f72:	e008      	b.n	8005f86 <HAL_UART_IRQHandler+0x59e>
      return;
 8005f74:	bf00      	nop
 8005f76:	e006      	b.n	8005f86 <HAL_UART_IRQHandler+0x59e>
    return;
 8005f78:	bf00      	nop
 8005f7a:	e004      	b.n	8005f86 <HAL_UART_IRQHandler+0x59e>
      return;
 8005f7c:	bf00      	nop
 8005f7e:	e002      	b.n	8005f86 <HAL_UART_IRQHandler+0x59e>
      return;
 8005f80:	bf00      	nop
 8005f82:	e000      	b.n	8005f86 <HAL_UART_IRQHandler+0x59e>
    return;
 8005f84:	bf00      	nop
  }

}
 8005f86:	37e8      	adds	r7, #232	; 0xe8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4ba6      	ldr	r3, [pc, #664]	; (8006290 <UART_SetConfig+0x2c4>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6812      	ldr	r2, [r2, #0]
 8005ffe:	6979      	ldr	r1, [r7, #20]
 8006000:	430b      	orrs	r3, r1
 8006002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	430a      	orrs	r2, r1
 800603c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a94      	ldr	r2, [pc, #592]	; (8006294 <UART_SetConfig+0x2c8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d120      	bne.n	800608a <UART_SetConfig+0xbe>
 8006048:	4b93      	ldr	r3, [pc, #588]	; (8006298 <UART_SetConfig+0x2cc>)
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b03      	cmp	r3, #3
 8006054:	d816      	bhi.n	8006084 <UART_SetConfig+0xb8>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x90>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	0800606d 	.word	0x0800606d
 8006060:	08006079 	.word	0x08006079
 8006064:	08006073 	.word	0x08006073
 8006068:	0800607f 	.word	0x0800607f
 800606c:	2301      	movs	r3, #1
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e150      	b.n	8006314 <UART_SetConfig+0x348>
 8006072:	2302      	movs	r3, #2
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e14d      	b.n	8006314 <UART_SetConfig+0x348>
 8006078:	2304      	movs	r3, #4
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e14a      	b.n	8006314 <UART_SetConfig+0x348>
 800607e:	2308      	movs	r3, #8
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e147      	b.n	8006314 <UART_SetConfig+0x348>
 8006084:	2310      	movs	r3, #16
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e144      	b.n	8006314 <UART_SetConfig+0x348>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a83      	ldr	r2, [pc, #524]	; (800629c <UART_SetConfig+0x2d0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d132      	bne.n	80060fa <UART_SetConfig+0x12e>
 8006094:	4b80      	ldr	r3, [pc, #512]	; (8006298 <UART_SetConfig+0x2cc>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f003 030c 	and.w	r3, r3, #12
 800609e:	2b0c      	cmp	r3, #12
 80060a0:	d828      	bhi.n	80060f4 <UART_SetConfig+0x128>
 80060a2:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <UART_SetConfig+0xdc>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060dd 	.word	0x080060dd
 80060ac:	080060f5 	.word	0x080060f5
 80060b0:	080060f5 	.word	0x080060f5
 80060b4:	080060f5 	.word	0x080060f5
 80060b8:	080060e9 	.word	0x080060e9
 80060bc:	080060f5 	.word	0x080060f5
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	080060f5 	.word	0x080060f5
 80060c8:	080060e3 	.word	0x080060e3
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060f5 	.word	0x080060f5
 80060d8:	080060ef 	.word	0x080060ef
 80060dc:	2300      	movs	r3, #0
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e118      	b.n	8006314 <UART_SetConfig+0x348>
 80060e2:	2302      	movs	r3, #2
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	e115      	b.n	8006314 <UART_SetConfig+0x348>
 80060e8:	2304      	movs	r3, #4
 80060ea:	77fb      	strb	r3, [r7, #31]
 80060ec:	e112      	b.n	8006314 <UART_SetConfig+0x348>
 80060ee:	2308      	movs	r3, #8
 80060f0:	77fb      	strb	r3, [r7, #31]
 80060f2:	e10f      	b.n	8006314 <UART_SetConfig+0x348>
 80060f4:	2310      	movs	r3, #16
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e10c      	b.n	8006314 <UART_SetConfig+0x348>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a68      	ldr	r2, [pc, #416]	; (80062a0 <UART_SetConfig+0x2d4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d120      	bne.n	8006146 <UART_SetConfig+0x17a>
 8006104:	4b64      	ldr	r3, [pc, #400]	; (8006298 <UART_SetConfig+0x2cc>)
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800610e:	2b30      	cmp	r3, #48	; 0x30
 8006110:	d013      	beq.n	800613a <UART_SetConfig+0x16e>
 8006112:	2b30      	cmp	r3, #48	; 0x30
 8006114:	d814      	bhi.n	8006140 <UART_SetConfig+0x174>
 8006116:	2b20      	cmp	r3, #32
 8006118:	d009      	beq.n	800612e <UART_SetConfig+0x162>
 800611a:	2b20      	cmp	r3, #32
 800611c:	d810      	bhi.n	8006140 <UART_SetConfig+0x174>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <UART_SetConfig+0x15c>
 8006122:	2b10      	cmp	r3, #16
 8006124:	d006      	beq.n	8006134 <UART_SetConfig+0x168>
 8006126:	e00b      	b.n	8006140 <UART_SetConfig+0x174>
 8006128:	2300      	movs	r3, #0
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e0f2      	b.n	8006314 <UART_SetConfig+0x348>
 800612e:	2302      	movs	r3, #2
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e0ef      	b.n	8006314 <UART_SetConfig+0x348>
 8006134:	2304      	movs	r3, #4
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e0ec      	b.n	8006314 <UART_SetConfig+0x348>
 800613a:	2308      	movs	r3, #8
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e0e9      	b.n	8006314 <UART_SetConfig+0x348>
 8006140:	2310      	movs	r3, #16
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e0e6      	b.n	8006314 <UART_SetConfig+0x348>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a56      	ldr	r2, [pc, #344]	; (80062a4 <UART_SetConfig+0x2d8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d120      	bne.n	8006192 <UART_SetConfig+0x1c6>
 8006150:	4b51      	ldr	r3, [pc, #324]	; (8006298 <UART_SetConfig+0x2cc>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800615a:	2bc0      	cmp	r3, #192	; 0xc0
 800615c:	d013      	beq.n	8006186 <UART_SetConfig+0x1ba>
 800615e:	2bc0      	cmp	r3, #192	; 0xc0
 8006160:	d814      	bhi.n	800618c <UART_SetConfig+0x1c0>
 8006162:	2b80      	cmp	r3, #128	; 0x80
 8006164:	d009      	beq.n	800617a <UART_SetConfig+0x1ae>
 8006166:	2b80      	cmp	r3, #128	; 0x80
 8006168:	d810      	bhi.n	800618c <UART_SetConfig+0x1c0>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <UART_SetConfig+0x1a8>
 800616e:	2b40      	cmp	r3, #64	; 0x40
 8006170:	d006      	beq.n	8006180 <UART_SetConfig+0x1b4>
 8006172:	e00b      	b.n	800618c <UART_SetConfig+0x1c0>
 8006174:	2300      	movs	r3, #0
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e0cc      	b.n	8006314 <UART_SetConfig+0x348>
 800617a:	2302      	movs	r3, #2
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e0c9      	b.n	8006314 <UART_SetConfig+0x348>
 8006180:	2304      	movs	r3, #4
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e0c6      	b.n	8006314 <UART_SetConfig+0x348>
 8006186:	2308      	movs	r3, #8
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e0c3      	b.n	8006314 <UART_SetConfig+0x348>
 800618c:	2310      	movs	r3, #16
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e0c0      	b.n	8006314 <UART_SetConfig+0x348>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a44      	ldr	r2, [pc, #272]	; (80062a8 <UART_SetConfig+0x2dc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d125      	bne.n	80061e8 <UART_SetConfig+0x21c>
 800619c:	4b3e      	ldr	r3, [pc, #248]	; (8006298 <UART_SetConfig+0x2cc>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061aa:	d017      	beq.n	80061dc <UART_SetConfig+0x210>
 80061ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b0:	d817      	bhi.n	80061e2 <UART_SetConfig+0x216>
 80061b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b6:	d00b      	beq.n	80061d0 <UART_SetConfig+0x204>
 80061b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061bc:	d811      	bhi.n	80061e2 <UART_SetConfig+0x216>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <UART_SetConfig+0x1fe>
 80061c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c6:	d006      	beq.n	80061d6 <UART_SetConfig+0x20a>
 80061c8:	e00b      	b.n	80061e2 <UART_SetConfig+0x216>
 80061ca:	2300      	movs	r3, #0
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e0a1      	b.n	8006314 <UART_SetConfig+0x348>
 80061d0:	2302      	movs	r3, #2
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e09e      	b.n	8006314 <UART_SetConfig+0x348>
 80061d6:	2304      	movs	r3, #4
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e09b      	b.n	8006314 <UART_SetConfig+0x348>
 80061dc:	2308      	movs	r3, #8
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e098      	b.n	8006314 <UART_SetConfig+0x348>
 80061e2:	2310      	movs	r3, #16
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e095      	b.n	8006314 <UART_SetConfig+0x348>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a2f      	ldr	r2, [pc, #188]	; (80062ac <UART_SetConfig+0x2e0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d125      	bne.n	800623e <UART_SetConfig+0x272>
 80061f2:	4b29      	ldr	r3, [pc, #164]	; (8006298 <UART_SetConfig+0x2cc>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006200:	d017      	beq.n	8006232 <UART_SetConfig+0x266>
 8006202:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006206:	d817      	bhi.n	8006238 <UART_SetConfig+0x26c>
 8006208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620c:	d00b      	beq.n	8006226 <UART_SetConfig+0x25a>
 800620e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006212:	d811      	bhi.n	8006238 <UART_SetConfig+0x26c>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <UART_SetConfig+0x254>
 8006218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621c:	d006      	beq.n	800622c <UART_SetConfig+0x260>
 800621e:	e00b      	b.n	8006238 <UART_SetConfig+0x26c>
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e076      	b.n	8006314 <UART_SetConfig+0x348>
 8006226:	2302      	movs	r3, #2
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e073      	b.n	8006314 <UART_SetConfig+0x348>
 800622c:	2304      	movs	r3, #4
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e070      	b.n	8006314 <UART_SetConfig+0x348>
 8006232:	2308      	movs	r3, #8
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e06d      	b.n	8006314 <UART_SetConfig+0x348>
 8006238:	2310      	movs	r3, #16
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e06a      	b.n	8006314 <UART_SetConfig+0x348>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <UART_SetConfig+0x2e4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d138      	bne.n	80062ba <UART_SetConfig+0x2ee>
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <UART_SetConfig+0x2cc>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006252:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006256:	d017      	beq.n	8006288 <UART_SetConfig+0x2bc>
 8006258:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800625c:	d82a      	bhi.n	80062b4 <UART_SetConfig+0x2e8>
 800625e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006262:	d00b      	beq.n	800627c <UART_SetConfig+0x2b0>
 8006264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006268:	d824      	bhi.n	80062b4 <UART_SetConfig+0x2e8>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <UART_SetConfig+0x2aa>
 800626e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006272:	d006      	beq.n	8006282 <UART_SetConfig+0x2b6>
 8006274:	e01e      	b.n	80062b4 <UART_SetConfig+0x2e8>
 8006276:	2300      	movs	r3, #0
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e04b      	b.n	8006314 <UART_SetConfig+0x348>
 800627c:	2302      	movs	r3, #2
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e048      	b.n	8006314 <UART_SetConfig+0x348>
 8006282:	2304      	movs	r3, #4
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e045      	b.n	8006314 <UART_SetConfig+0x348>
 8006288:	2308      	movs	r3, #8
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e042      	b.n	8006314 <UART_SetConfig+0x348>
 800628e:	bf00      	nop
 8006290:	efff69f3 	.word	0xefff69f3
 8006294:	40011000 	.word	0x40011000
 8006298:	40023800 	.word	0x40023800
 800629c:	40004400 	.word	0x40004400
 80062a0:	40004800 	.word	0x40004800
 80062a4:	40004c00 	.word	0x40004c00
 80062a8:	40005000 	.word	0x40005000
 80062ac:	40011400 	.word	0x40011400
 80062b0:	40007800 	.word	0x40007800
 80062b4:	2310      	movs	r3, #16
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e02c      	b.n	8006314 <UART_SetConfig+0x348>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a72      	ldr	r2, [pc, #456]	; (8006488 <UART_SetConfig+0x4bc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d125      	bne.n	8006310 <UART_SetConfig+0x344>
 80062c4:	4b71      	ldr	r3, [pc, #452]	; (800648c <UART_SetConfig+0x4c0>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80062ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062d2:	d017      	beq.n	8006304 <UART_SetConfig+0x338>
 80062d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062d8:	d817      	bhi.n	800630a <UART_SetConfig+0x33e>
 80062da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062de:	d00b      	beq.n	80062f8 <UART_SetConfig+0x32c>
 80062e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e4:	d811      	bhi.n	800630a <UART_SetConfig+0x33e>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <UART_SetConfig+0x326>
 80062ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ee:	d006      	beq.n	80062fe <UART_SetConfig+0x332>
 80062f0:	e00b      	b.n	800630a <UART_SetConfig+0x33e>
 80062f2:	2300      	movs	r3, #0
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e00d      	b.n	8006314 <UART_SetConfig+0x348>
 80062f8:	2302      	movs	r3, #2
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e00a      	b.n	8006314 <UART_SetConfig+0x348>
 80062fe:	2304      	movs	r3, #4
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e007      	b.n	8006314 <UART_SetConfig+0x348>
 8006304:	2308      	movs	r3, #8
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e004      	b.n	8006314 <UART_SetConfig+0x348>
 800630a:	2310      	movs	r3, #16
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e001      	b.n	8006314 <UART_SetConfig+0x348>
 8006310:	2310      	movs	r3, #16
 8006312:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800631c:	d15b      	bne.n	80063d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800631e:	7ffb      	ldrb	r3, [r7, #31]
 8006320:	2b08      	cmp	r3, #8
 8006322:	d828      	bhi.n	8006376 <UART_SetConfig+0x3aa>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x360>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	08006351 	.word	0x08006351
 8006330:	08006359 	.word	0x08006359
 8006334:	08006361 	.word	0x08006361
 8006338:	08006377 	.word	0x08006377
 800633c:	08006367 	.word	0x08006367
 8006340:	08006377 	.word	0x08006377
 8006344:	08006377 	.word	0x08006377
 8006348:	08006377 	.word	0x08006377
 800634c:	0800636f 	.word	0x0800636f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fd f848 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8006354:	61b8      	str	r0, [r7, #24]
        break;
 8006356:	e013      	b.n	8006380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006358:	f7fd f858 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 800635c:	61b8      	str	r0, [r7, #24]
        break;
 800635e:	e00f      	b.n	8006380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006360:	4b4b      	ldr	r3, [pc, #300]	; (8006490 <UART_SetConfig+0x4c4>)
 8006362:	61bb      	str	r3, [r7, #24]
        break;
 8006364:	e00c      	b.n	8006380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006366:	f7fc ff2b 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800636a:	61b8      	str	r0, [r7, #24]
        break;
 800636c:	e008      	b.n	8006380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006372:	61bb      	str	r3, [r7, #24]
        break;
 8006374:	e004      	b.n	8006380 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	77bb      	strb	r3, [r7, #30]
        break;
 800637e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d074      	beq.n	8006470 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	005a      	lsls	r2, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	085b      	lsrs	r3, r3, #1
 8006390:	441a      	add	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	fbb2 f3f3 	udiv	r3, r2, r3
 800639a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b0f      	cmp	r3, #15
 80063a0:	d916      	bls.n	80063d0 <UART_SetConfig+0x404>
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a8:	d212      	bcs.n	80063d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f023 030f 	bic.w	r3, r3, #15
 80063b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	085b      	lsrs	r3, r3, #1
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	b29a      	uxth	r2, r3
 80063c0:	89fb      	ldrh	r3, [r7, #14]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	89fa      	ldrh	r2, [r7, #14]
 80063cc:	60da      	str	r2, [r3, #12]
 80063ce:	e04f      	b.n	8006470 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	77bb      	strb	r3, [r7, #30]
 80063d4:	e04c      	b.n	8006470 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063d6:	7ffb      	ldrb	r3, [r7, #31]
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d828      	bhi.n	800642e <UART_SetConfig+0x462>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <UART_SetConfig+0x418>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006411 	.word	0x08006411
 80063ec:	08006419 	.word	0x08006419
 80063f0:	0800642f 	.word	0x0800642f
 80063f4:	0800641f 	.word	0x0800641f
 80063f8:	0800642f 	.word	0x0800642f
 80063fc:	0800642f 	.word	0x0800642f
 8006400:	0800642f 	.word	0x0800642f
 8006404:	08006427 	.word	0x08006427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006408:	f7fc ffec 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 800640c:	61b8      	str	r0, [r7, #24]
        break;
 800640e:	e013      	b.n	8006438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006410:	f7fc fffc 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8006414:	61b8      	str	r0, [r7, #24]
        break;
 8006416:	e00f      	b.n	8006438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006418:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <UART_SetConfig+0x4c4>)
 800641a:	61bb      	str	r3, [r7, #24]
        break;
 800641c:	e00c      	b.n	8006438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800641e:	f7fc fecf 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8006422:	61b8      	str	r0, [r7, #24]
        break;
 8006424:	e008      	b.n	8006438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642a:	61bb      	str	r3, [r7, #24]
        break;
 800642c:	e004      	b.n	8006438 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	77bb      	strb	r3, [r7, #30]
        break;
 8006436:	bf00      	nop
    }

    if (pclk != 0U)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d018      	beq.n	8006470 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	085a      	lsrs	r2, r3, #1
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	441a      	add	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b0f      	cmp	r3, #15
 8006456:	d909      	bls.n	800646c <UART_SetConfig+0x4a0>
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645e:	d205      	bcs.n	800646c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	b29a      	uxth	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	e001      	b.n	8006470 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800647c:	7fbb      	ldrb	r3, [r7, #30]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40007c00 	.word	0x40007c00
 800648c:	40023800 	.word	0x40023800
 8006490:	00f42400 	.word	0x00f42400

08006494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	f003 0310 	and.w	r3, r3, #16
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01a      	beq.n	80065aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006592:	d10a      	bne.n	80065aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	605a      	str	r2, [r3, #4]
  }
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af02      	add	r7, sp, #8
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065e8:	f7fb fa76 	bl	8001ad8 <HAL_GetTick>
 80065ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d10e      	bne.n	800661a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f81b 	bl	8006646 <UART_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e011      	b.n	800663e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b09c      	sub	sp, #112	; 0x70
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006656:	e0a7      	b.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	f000 80a3 	beq.w	80067a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006662:	f7fb fa39 	bl	8001ad8 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <UART_WaitOnFlagUntilTimeout+0x32>
 8006672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006674:	2b00      	cmp	r3, #0
 8006676:	d13f      	bne.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800668c:	667b      	str	r3, [r7, #100]	; 0x64
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006696:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006698:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800669c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e6      	bne.n	8006678 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	663b      	str	r3, [r7, #96]	; 0x60
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80066cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e5      	bne.n	80066aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e068      	b.n	80067ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d050      	beq.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006714:	d148      	bne.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800671e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006734:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673e:	637b      	str	r3, [r7, #52]	; 0x34
 8006740:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e6      	bne.n	8006720 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	613b      	str	r3, [r7, #16]
   return(result);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	66bb      	str	r3, [r7, #104]	; 0x68
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006772:	623a      	str	r2, [r7, #32]
 8006774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	69f9      	ldr	r1, [r7, #28]
 8006778:	6a3a      	ldr	r2, [r7, #32]
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e5      	bne.n	8006752 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e010      	b.n	80067ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4013      	ands	r3, r2
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	f43f af48 	beq.w	8006658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3770      	adds	r7, #112	; 0x70
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b097      	sub	sp, #92	; 0x5c
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	88fa      	ldrh	r2, [r7, #6]
 80067ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	d10e      	bne.n	8006826 <UART_Start_Receive_IT+0x52>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <UART_Start_Receive_IT+0x48>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006816:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800681a:	e02d      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006824:	e028      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10d      	bne.n	800684a <UART_Start_Receive_IT+0x76>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <UART_Start_Receive_IT+0x6c>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	22ff      	movs	r2, #255	; 0xff
 800683a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800683e:	e01b      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	227f      	movs	r2, #127	; 0x7f
 8006844:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006848:	e016      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006852:	d10d      	bne.n	8006870 <UART_Start_Receive_IT+0x9c>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <UART_Start_Receive_IT+0x92>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	227f      	movs	r2, #127	; 0x7f
 8006860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006864:	e008      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	223f      	movs	r2, #63	; 0x3f
 800686a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800686e:	e003      	b.n	8006878 <UART_Start_Receive_IT+0xa4>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2222      	movs	r2, #34	; 0x22
 8006884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3308      	adds	r3, #8
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	657b      	str	r3, [r7, #84]	; 0x54
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3308      	adds	r3, #8
 80068a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80068aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e5      	bne.n	8006888 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c4:	d107      	bne.n	80068d6 <UART_Start_Receive_IT+0x102>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4a21      	ldr	r2, [pc, #132]	; (8006958 <UART_Start_Receive_IT+0x184>)
 80068d2:	669a      	str	r2, [r3, #104]	; 0x68
 80068d4:	e002      	b.n	80068dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4a20      	ldr	r2, [pc, #128]	; (800695c <UART_Start_Receive_IT+0x188>)
 80068da:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d019      	beq.n	8006918 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80068f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006902:	637b      	str	r3, [r7, #52]	; 0x34
 8006904:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e6      	bne.n	80068e4 <UART_Start_Receive_IT+0x110>
 8006916:	e018      	b.n	800694a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	613b      	str	r3, [r7, #16]
   return(result);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f043 0320 	orr.w	r3, r3, #32
 800692c:	653b      	str	r3, [r7, #80]	; 0x50
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006936:	623b      	str	r3, [r7, #32]
 8006938:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	69f9      	ldr	r1, [r7, #28]
 800693c:	6a3a      	ldr	r2, [r7, #32]
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	61bb      	str	r3, [r7, #24]
   return(result);
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e6      	bne.n	8006918 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	375c      	adds	r7, #92	; 0x5c
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	08006c0f 	.word	0x08006c0f
 800695c:	08006aa9 	.word	0x08006aa9

08006960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b095      	sub	sp, #84	; 0x54
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800697c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006986:	643b      	str	r3, [r7, #64]	; 0x40
 8006988:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800698c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e6      	bne.n	8006968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3308      	adds	r3, #8
 80069b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e5      	bne.n	800699a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d118      	bne.n	8006a08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f023 0310 	bic.w	r3, r3, #16
 80069ea:	647b      	str	r3, [r7, #68]	; 0x44
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6979      	ldr	r1, [r7, #20]
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	613b      	str	r3, [r7, #16]
   return(result);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e6      	bne.n	80069d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a1c:	bf00      	nop
 8006a1e:	3754      	adds	r7, #84	; 0x54
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff faaa 	bl	8005fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6979      	ldr	r1, [r7, #20]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	613b      	str	r3, [r7, #16]
   return(result);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e6      	bne.n	8006a5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff fa76 	bl	8005f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aa0:	bf00      	nop
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b096      	sub	sp, #88	; 0x58
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ab6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac0:	2b22      	cmp	r3, #34	; 0x22
 8006ac2:	f040 8098 	bne.w	8006bf6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ad0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ad4:	b2d9      	uxtb	r1, r3
 8006ad6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae0:	400a      	ands	r2, r1
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d17b      	bne.n	8006c06 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b22:	653b      	str	r3, [r7, #80]	; 0x50
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e6      	bne.n	8006b0e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f023 0301 	bic.w	r3, r3, #1
 8006b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b60:	633a      	str	r2, [r7, #48]	; 0x30
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e5      	bne.n	8006b40 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d12e      	bne.n	8006bee <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0310 	bic.w	r3, r3, #16
 8006baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	69b9      	ldr	r1, [r7, #24]
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e6      	bne.n	8006b96 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f003 0310 	and.w	r3, r3, #16
 8006bd2:	2b10      	cmp	r3, #16
 8006bd4:	d103      	bne.n	8006bde <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2210      	movs	r2, #16
 8006bdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff f9e4 	bl	8005fb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bec:	e00b      	b.n	8006c06 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fa f8f0 	bl	8000dd4 <HAL_UART_RxCpltCallback>
}
 8006bf4:	e007      	b.n	8006c06 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699a      	ldr	r2, [r3, #24]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0208 	orr.w	r2, r2, #8
 8006c04:	619a      	str	r2, [r3, #24]
}
 8006c06:	bf00      	nop
 8006c08:	3758      	adds	r7, #88	; 0x58
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b096      	sub	sp, #88	; 0x58
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c26:	2b22      	cmp	r3, #34	; 0x22
 8006c28:	f040 8098 	bne.w	8006d5c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c3c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006c40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c44:	4013      	ands	r3, r2
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c4a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	1c9a      	adds	r2, r3, #2
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d17b      	bne.n	8006d6c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c92:	643b      	str	r3, [r7, #64]	; 0x40
 8006c94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e6      	bne.n	8006c74 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e5      	bne.n	8006ca6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d12e      	bne.n	8006d54 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f023 0310 	bic.w	r3, r3, #16
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6979      	ldr	r1, [r7, #20]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	613b      	str	r3, [r7, #16]
   return(result);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e6      	bne.n	8006cfc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d103      	bne.n	8006d44 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2210      	movs	r2, #16
 8006d42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff f931 	bl	8005fb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d52:	e00b      	b.n	8006d6c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7fa f83d 	bl	8000dd4 <HAL_UART_RxCpltCallback>
}
 8006d5a:	e007      	b.n	8006d6c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0208 	orr.w	r2, r2, #8
 8006d6a:	619a      	str	r2, [r3, #24]
}
 8006d6c:	bf00      	nop
 8006d6e:	3758      	adds	r7, #88	; 0x58
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <_strtol_l.constprop.0>:
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7a:	d001      	beq.n	8006d80 <_strtol_l.constprop.0+0xc>
 8006d7c:	2b24      	cmp	r3, #36	; 0x24
 8006d7e:	d906      	bls.n	8006d8e <_strtol_l.constprop.0+0x1a>
 8006d80:	f000 f88c 	bl	8006e9c <__errno>
 8006d84:	2316      	movs	r3, #22
 8006d86:	6003      	str	r3, [r0, #0]
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e74 <_strtol_l.constprop.0+0x100>
 8006d92:	460d      	mov	r5, r1
 8006d94:	462e      	mov	r6, r5
 8006d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006d9e:	f017 0708 	ands.w	r7, r7, #8
 8006da2:	d1f7      	bne.n	8006d94 <_strtol_l.constprop.0+0x20>
 8006da4:	2c2d      	cmp	r4, #45	; 0x2d
 8006da6:	d132      	bne.n	8006e0e <_strtol_l.constprop.0+0x9a>
 8006da8:	782c      	ldrb	r4, [r5, #0]
 8006daa:	2701      	movs	r7, #1
 8006dac:	1cb5      	adds	r5, r6, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d05b      	beq.n	8006e6a <_strtol_l.constprop.0+0xf6>
 8006db2:	2b10      	cmp	r3, #16
 8006db4:	d109      	bne.n	8006dca <_strtol_l.constprop.0+0x56>
 8006db6:	2c30      	cmp	r4, #48	; 0x30
 8006db8:	d107      	bne.n	8006dca <_strtol_l.constprop.0+0x56>
 8006dba:	782c      	ldrb	r4, [r5, #0]
 8006dbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006dc0:	2c58      	cmp	r4, #88	; 0x58
 8006dc2:	d14d      	bne.n	8006e60 <_strtol_l.constprop.0+0xec>
 8006dc4:	786c      	ldrb	r4, [r5, #1]
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	3502      	adds	r5, #2
 8006dca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006dce:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dd2:	f04f 0e00 	mov.w	lr, #0
 8006dd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8006dda:	4676      	mov	r6, lr
 8006ddc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006de0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006de4:	f1bc 0f09 	cmp.w	ip, #9
 8006de8:	d816      	bhi.n	8006e18 <_strtol_l.constprop.0+0xa4>
 8006dea:	4664      	mov	r4, ip
 8006dec:	42a3      	cmp	r3, r4
 8006dee:	dd24      	ble.n	8006e3a <_strtol_l.constprop.0+0xc6>
 8006df0:	f1be 3fff 	cmp.w	lr, #4294967295
 8006df4:	d008      	beq.n	8006e08 <_strtol_l.constprop.0+0x94>
 8006df6:	45b1      	cmp	r9, r6
 8006df8:	d31c      	bcc.n	8006e34 <_strtol_l.constprop.0+0xc0>
 8006dfa:	d101      	bne.n	8006e00 <_strtol_l.constprop.0+0x8c>
 8006dfc:	45a2      	cmp	sl, r4
 8006dfe:	db19      	blt.n	8006e34 <_strtol_l.constprop.0+0xc0>
 8006e00:	fb06 4603 	mla	r6, r6, r3, r4
 8006e04:	f04f 0e01 	mov.w	lr, #1
 8006e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e0c:	e7e8      	b.n	8006de0 <_strtol_l.constprop.0+0x6c>
 8006e0e:	2c2b      	cmp	r4, #43	; 0x2b
 8006e10:	bf04      	itt	eq
 8006e12:	782c      	ldrbeq	r4, [r5, #0]
 8006e14:	1cb5      	addeq	r5, r6, #2
 8006e16:	e7ca      	b.n	8006dae <_strtol_l.constprop.0+0x3a>
 8006e18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006e1c:	f1bc 0f19 	cmp.w	ip, #25
 8006e20:	d801      	bhi.n	8006e26 <_strtol_l.constprop.0+0xb2>
 8006e22:	3c37      	subs	r4, #55	; 0x37
 8006e24:	e7e2      	b.n	8006dec <_strtol_l.constprop.0+0x78>
 8006e26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e2a:	f1bc 0f19 	cmp.w	ip, #25
 8006e2e:	d804      	bhi.n	8006e3a <_strtol_l.constprop.0+0xc6>
 8006e30:	3c57      	subs	r4, #87	; 0x57
 8006e32:	e7db      	b.n	8006dec <_strtol_l.constprop.0+0x78>
 8006e34:	f04f 3eff 	mov.w	lr, #4294967295
 8006e38:	e7e6      	b.n	8006e08 <_strtol_l.constprop.0+0x94>
 8006e3a:	f1be 3fff 	cmp.w	lr, #4294967295
 8006e3e:	d105      	bne.n	8006e4c <_strtol_l.constprop.0+0xd8>
 8006e40:	2322      	movs	r3, #34	; 0x22
 8006e42:	6003      	str	r3, [r0, #0]
 8006e44:	4646      	mov	r6, r8
 8006e46:	b942      	cbnz	r2, 8006e5a <_strtol_l.constprop.0+0xe6>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	e79e      	b.n	8006d8a <_strtol_l.constprop.0+0x16>
 8006e4c:	b107      	cbz	r7, 8006e50 <_strtol_l.constprop.0+0xdc>
 8006e4e:	4276      	negs	r6, r6
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	d0f9      	beq.n	8006e48 <_strtol_l.constprop.0+0xd4>
 8006e54:	f1be 0f00 	cmp.w	lr, #0
 8006e58:	d000      	beq.n	8006e5c <_strtol_l.constprop.0+0xe8>
 8006e5a:	1e69      	subs	r1, r5, #1
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	e7f3      	b.n	8006e48 <_strtol_l.constprop.0+0xd4>
 8006e60:	2430      	movs	r4, #48	; 0x30
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1b1      	bne.n	8006dca <_strtol_l.constprop.0+0x56>
 8006e66:	2308      	movs	r3, #8
 8006e68:	e7af      	b.n	8006dca <_strtol_l.constprop.0+0x56>
 8006e6a:	2c30      	cmp	r4, #48	; 0x30
 8006e6c:	d0a5      	beq.n	8006dba <_strtol_l.constprop.0+0x46>
 8006e6e:	230a      	movs	r3, #10
 8006e70:	e7ab      	b.n	8006dca <_strtol_l.constprop.0+0x56>
 8006e72:	bf00      	nop
 8006e74:	08006fe5 	.word	0x08006fe5

08006e78 <strtol>:
 8006e78:	4613      	mov	r3, r2
 8006e7a:	460a      	mov	r2, r1
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	4802      	ldr	r0, [pc, #8]	; (8006e88 <strtol+0x10>)
 8006e80:	6800      	ldr	r0, [r0, #0]
 8006e82:	f7ff bf77 	b.w	8006d74 <_strtol_l.constprop.0>
 8006e86:	bf00      	nop
 8006e88:	20000080 	.word	0x20000080

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <__errno>:
 8006e9c:	4b01      	ldr	r3, [pc, #4]	; (8006ea4 <__errno+0x8>)
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000080 	.word	0x20000080

08006ea8 <__libc_init_array>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	4d0d      	ldr	r5, [pc, #52]	; (8006ee0 <__libc_init_array+0x38>)
 8006eac:	4c0d      	ldr	r4, [pc, #52]	; (8006ee4 <__libc_init_array+0x3c>)
 8006eae:	1b64      	subs	r4, r4, r5
 8006eb0:	10a4      	asrs	r4, r4, #2
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	42a6      	cmp	r6, r4
 8006eb6:	d109      	bne.n	8006ecc <__libc_init_array+0x24>
 8006eb8:	4d0b      	ldr	r5, [pc, #44]	; (8006ee8 <__libc_init_array+0x40>)
 8006eba:	4c0c      	ldr	r4, [pc, #48]	; (8006eec <__libc_init_array+0x44>)
 8006ebc:	f000 f86a 	bl	8006f94 <_init>
 8006ec0:	1b64      	subs	r4, r4, r5
 8006ec2:	10a4      	asrs	r4, r4, #2
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	42a6      	cmp	r6, r4
 8006ec8:	d105      	bne.n	8006ed6 <__libc_init_array+0x2e>
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
 8006ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed0:	4798      	blx	r3
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	e7ee      	b.n	8006eb4 <__libc_init_array+0xc>
 8006ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eda:	4798      	blx	r3
 8006edc:	3601      	adds	r6, #1
 8006ede:	e7f2      	b.n	8006ec6 <__libc_init_array+0x1e>
 8006ee0:	080070f0 	.word	0x080070f0
 8006ee4:	080070f0 	.word	0x080070f0
 8006ee8:	080070f0 	.word	0x080070f0
 8006eec:	080070f4 	.word	0x080070f4

08006ef0 <fmaxf>:
 8006ef0:	b508      	push	{r3, lr}
 8006ef2:	ed2d 8b02 	vpush	{d8}
 8006ef6:	eeb0 8a40 	vmov.f32	s16, s0
 8006efa:	eef0 8a60 	vmov.f32	s17, s1
 8006efe:	f000 f82d 	bl	8006f5c <__fpclassifyf>
 8006f02:	b148      	cbz	r0, 8006f18 <fmaxf+0x28>
 8006f04:	eeb0 0a68 	vmov.f32	s0, s17
 8006f08:	f000 f828 	bl	8006f5c <__fpclassifyf>
 8006f0c:	b130      	cbz	r0, 8006f1c <fmaxf+0x2c>
 8006f0e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f16:	dc01      	bgt.n	8006f1c <fmaxf+0x2c>
 8006f18:	eeb0 8a68 	vmov.f32	s16, s17
 8006f1c:	eeb0 0a48 	vmov.f32	s0, s16
 8006f20:	ecbd 8b02 	vpop	{d8}
 8006f24:	bd08      	pop	{r3, pc}

08006f26 <fminf>:
 8006f26:	b508      	push	{r3, lr}
 8006f28:	ed2d 8b02 	vpush	{d8}
 8006f2c:	eeb0 8a40 	vmov.f32	s16, s0
 8006f30:	eef0 8a60 	vmov.f32	s17, s1
 8006f34:	f000 f812 	bl	8006f5c <__fpclassifyf>
 8006f38:	b148      	cbz	r0, 8006f4e <fminf+0x28>
 8006f3a:	eeb0 0a68 	vmov.f32	s0, s17
 8006f3e:	f000 f80d 	bl	8006f5c <__fpclassifyf>
 8006f42:	b130      	cbz	r0, 8006f52 <fminf+0x2c>
 8006f44:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4c:	d401      	bmi.n	8006f52 <fminf+0x2c>
 8006f4e:	eeb0 8a68 	vmov.f32	s16, s17
 8006f52:	eeb0 0a48 	vmov.f32	s0, s16
 8006f56:	ecbd 8b02 	vpop	{d8}
 8006f5a:	bd08      	pop	{r3, pc}

08006f5c <__fpclassifyf>:
 8006f5c:	ee10 3a10 	vmov	r3, s0
 8006f60:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8006f64:	d00d      	beq.n	8006f82 <__fpclassifyf+0x26>
 8006f66:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8006f6a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006f6e:	d30a      	bcc.n	8006f86 <__fpclassifyf+0x2a>
 8006f70:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <__fpclassifyf+0x34>)
 8006f72:	1e42      	subs	r2, r0, #1
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d908      	bls.n	8006f8a <__fpclassifyf+0x2e>
 8006f78:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8006f7c:	4258      	negs	r0, r3
 8006f7e:	4158      	adcs	r0, r3
 8006f80:	4770      	bx	lr
 8006f82:	2002      	movs	r0, #2
 8006f84:	4770      	bx	lr
 8006f86:	2004      	movs	r0, #4
 8006f88:	4770      	bx	lr
 8006f8a:	2003      	movs	r0, #3
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	007ffffe 	.word	0x007ffffe

08006f94 <_init>:
 8006f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f96:	bf00      	nop
 8006f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9a:	bc08      	pop	{r3}
 8006f9c:	469e      	mov	lr, r3
 8006f9e:	4770      	bx	lr

08006fa0 <_fini>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	bf00      	nop
 8006fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa6:	bc08      	pop	{r3}
 8006fa8:	469e      	mov	lr, r3
 8006faa:	4770      	bx	lr
