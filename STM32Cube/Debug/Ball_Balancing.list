
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000812c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080082fc  080082fc  000182fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800847c  0800847c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008484  08008484  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008484  08008484  00018484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008488  08008488  00018488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800848c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200000a0  08008528  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08008528  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000186c6  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003778  00000000  00000000  000387d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  0003bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e84  00000000  00000000  0003d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000045e5  00000000  00000000  0003e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0a2  00000000  00000000  00042689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3122  00000000  00000000  0005d72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053b0  00000000  00000000  00150850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00155c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082e4 	.word	0x080082e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	080082e4 	.word	0x080082e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295
 800093c:	f04f 30ff 	movne.w	r0, #4294967295
 8000940:	f000 b970 	b.w	8000c24 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9e08      	ldr	r6, [sp, #32]
 8000962:	460d      	mov	r5, r1
 8000964:	4604      	mov	r4, r0
 8000966:	460f      	mov	r7, r1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d14a      	bne.n	8000a02 <__udivmoddi4+0xa6>
 800096c:	428a      	cmp	r2, r1
 800096e:	4694      	mov	ip, r2
 8000970:	d965      	bls.n	8000a3e <__udivmoddi4+0xe2>
 8000972:	fab2 f382 	clz	r3, r2
 8000976:	b143      	cbz	r3, 800098a <__udivmoddi4+0x2e>
 8000978:	fa02 fc03 	lsl.w	ip, r2, r3
 800097c:	f1c3 0220 	rsb	r2, r3, #32
 8000980:	409f      	lsls	r7, r3
 8000982:	fa20 f202 	lsr.w	r2, r0, r2
 8000986:	4317      	orrs	r7, r2
 8000988:	409c      	lsls	r4, r3
 800098a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800098e:	fa1f f58c 	uxth.w	r5, ip
 8000992:	fbb7 f1fe 	udiv	r1, r7, lr
 8000996:	0c22      	lsrs	r2, r4, #16
 8000998:	fb0e 7711 	mls	r7, lr, r1, r7
 800099c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009a0:	fb01 f005 	mul.w	r0, r1, r5
 80009a4:	4290      	cmp	r0, r2
 80009a6:	d90a      	bls.n	80009be <__udivmoddi4+0x62>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f101 37ff 	add.w	r7, r1, #4294967295
 80009b0:	f080 811c 	bcs.w	8000bec <__udivmoddi4+0x290>
 80009b4:	4290      	cmp	r0, r2
 80009b6:	f240 8119 	bls.w	8000bec <__udivmoddi4+0x290>
 80009ba:	3902      	subs	r1, #2
 80009bc:	4462      	add	r2, ip
 80009be:	1a12      	subs	r2, r2, r0
 80009c0:	b2a4      	uxth	r4, r4
 80009c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ce:	fb00 f505 	mul.w	r5, r0, r5
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	d90a      	bls.n	80009ec <__udivmoddi4+0x90>
 80009d6:	eb1c 0404 	adds.w	r4, ip, r4
 80009da:	f100 32ff 	add.w	r2, r0, #4294967295
 80009de:	f080 8107 	bcs.w	8000bf0 <__udivmoddi4+0x294>
 80009e2:	42a5      	cmp	r5, r4
 80009e4:	f240 8104 	bls.w	8000bf0 <__udivmoddi4+0x294>
 80009e8:	4464      	add	r4, ip
 80009ea:	3802      	subs	r0, #2
 80009ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009f0:	1b64      	subs	r4, r4, r5
 80009f2:	2100      	movs	r1, #0
 80009f4:	b11e      	cbz	r6, 80009fe <__udivmoddi4+0xa2>
 80009f6:	40dc      	lsrs	r4, r3
 80009f8:	2300      	movs	r3, #0
 80009fa:	e9c6 4300 	strd	r4, r3, [r6]
 80009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0xbc>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	f000 80ed 	beq.w	8000be6 <__udivmoddi4+0x28a>
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a12:	4608      	mov	r0, r1
 8000a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a18:	fab3 f183 	clz	r1, r3
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d149      	bne.n	8000ab4 <__udivmoddi4+0x158>
 8000a20:	42ab      	cmp	r3, r5
 8000a22:	d302      	bcc.n	8000a2a <__udivmoddi4+0xce>
 8000a24:	4282      	cmp	r2, r0
 8000a26:	f200 80f8 	bhi.w	8000c1a <__udivmoddi4+0x2be>
 8000a2a:	1a84      	subs	r4, r0, r2
 8000a2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a30:	2001      	movs	r0, #1
 8000a32:	4617      	mov	r7, r2
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d0e2      	beq.n	80009fe <__udivmoddi4+0xa2>
 8000a38:	e9c6 4700 	strd	r4, r7, [r6]
 8000a3c:	e7df      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a3e:	b902      	cbnz	r2, 8000a42 <__udivmoddi4+0xe6>
 8000a40:	deff      	udf	#255	; 0xff
 8000a42:	fab2 f382 	clz	r3, r2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8090 	bne.w	8000b6c <__udivmoddi4+0x210>
 8000a4c:	1a8a      	subs	r2, r1, r2
 8000a4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a52:	fa1f fe8c 	uxth.w	lr, ip
 8000a56:	2101      	movs	r1, #1
 8000a58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a60:	0c22      	lsrs	r2, r4, #16
 8000a62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a66:	fb0e f005 	mul.w	r0, lr, r5
 8000a6a:	4290      	cmp	r0, r2
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0x124>
 8000a6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a76:	d202      	bcs.n	8000a7e <__udivmoddi4+0x122>
 8000a78:	4290      	cmp	r0, r2
 8000a7a:	f200 80cb 	bhi.w	8000c14 <__udivmoddi4+0x2b8>
 8000a7e:	4645      	mov	r5, r8
 8000a80:	1a12      	subs	r2, r2, r0
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a88:	fb07 2210 	mls	r2, r7, r0, r2
 8000a8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a90:	fb0e fe00 	mul.w	lr, lr, r0
 8000a94:	45a6      	cmp	lr, r4
 8000a96:	d908      	bls.n	8000aaa <__udivmoddi4+0x14e>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa0:	d202      	bcs.n	8000aa8 <__udivmoddi4+0x14c>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f200 80bb 	bhi.w	8000c1e <__udivmoddi4+0x2c2>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	eba4 040e 	sub.w	r4, r4, lr
 8000aae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ab2:	e79f      	b.n	80009f4 <__udivmoddi4+0x98>
 8000ab4:	f1c1 0720 	rsb	r7, r1, #32
 8000ab8:	408b      	lsls	r3, r1
 8000aba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000abe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ac2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ac6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aca:	40fd      	lsrs	r5, r7
 8000acc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ad0:	4323      	orrs	r3, r4
 8000ad2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ad6:	fa1f fe8c 	uxth.w	lr, ip
 8000ada:	fb09 5518 	mls	r5, r9, r8, r5
 8000ade:	0c1c      	lsrs	r4, r3, #16
 8000ae0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ae4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ae8:	42a5      	cmp	r5, r4
 8000aea:	fa02 f201 	lsl.w	r2, r2, r1
 8000aee:	fa00 f001 	lsl.w	r0, r0, r1
 8000af2:	d90b      	bls.n	8000b0c <__udivmoddi4+0x1b0>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000afc:	f080 8088 	bcs.w	8000c10 <__udivmoddi4+0x2b4>
 8000b00:	42a5      	cmp	r5, r4
 8000b02:	f240 8085 	bls.w	8000c10 <__udivmoddi4+0x2b4>
 8000b06:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0a:	4464      	add	r4, ip
 8000b0c:	1b64      	subs	r4, r4, r5
 8000b0e:	b29d      	uxth	r5, r3
 8000b10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b14:	fb09 4413 	mls	r4, r9, r3, r4
 8000b18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x1da>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b2c:	d26c      	bcs.n	8000c08 <__udivmoddi4+0x2ac>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	d96a      	bls.n	8000c08 <__udivmoddi4+0x2ac>
 8000b32:	3b02      	subs	r3, #2
 8000b34:	4464      	add	r4, ip
 8000b36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b3e:	eba4 040e 	sub.w	r4, r4, lr
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	46c8      	mov	r8, r9
 8000b46:	46ae      	mov	lr, r5
 8000b48:	d356      	bcc.n	8000bf8 <__udivmoddi4+0x29c>
 8000b4a:	d053      	beq.n	8000bf4 <__udivmoddi4+0x298>
 8000b4c:	b156      	cbz	r6, 8000b64 <__udivmoddi4+0x208>
 8000b4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b52:	eb64 040e 	sbc.w	r4, r4, lr
 8000b56:	fa04 f707 	lsl.w	r7, r4, r7
 8000b5a:	40ca      	lsrs	r2, r1
 8000b5c:	40cc      	lsrs	r4, r1
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	e9c6 7400 	strd	r7, r4, [r6]
 8000b64:	4618      	mov	r0, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6c:	f1c3 0120 	rsb	r1, r3, #32
 8000b70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b74:	fa20 f201 	lsr.w	r2, r0, r1
 8000b78:	fa25 f101 	lsr.w	r1, r5, r1
 8000b7c:	409d      	lsls	r5, r3
 8000b7e:	432a      	orrs	r2, r5
 8000b80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b90:	0c11      	lsrs	r1, r2, #16
 8000b92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b96:	fb00 f50e 	mul.w	r5, r0, lr
 8000b9a:	428d      	cmp	r5, r1
 8000b9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x258>
 8000ba2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000baa:	d22f      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bac:	428d      	cmp	r5, r1
 8000bae:	d92d      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1b49      	subs	r1, r1, r5
 8000bb6:	b292      	uxth	r2, r2
 8000bb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000bc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bc8:	4291      	cmp	r1, r2
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x282>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd4:	d216      	bcs.n	8000c04 <__udivmoddi4+0x2a8>
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d914      	bls.n	8000c04 <__udivmoddi4+0x2a8>
 8000bda:	3d02      	subs	r5, #2
 8000bdc:	4462      	add	r2, ip
 8000bde:	1a52      	subs	r2, r2, r1
 8000be0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000be4:	e738      	b.n	8000a58 <__udivmoddi4+0xfc>
 8000be6:	4631      	mov	r1, r6
 8000be8:	4630      	mov	r0, r6
 8000bea:	e708      	b.n	80009fe <__udivmoddi4+0xa2>
 8000bec:	4639      	mov	r1, r7
 8000bee:	e6e6      	b.n	80009be <__udivmoddi4+0x62>
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	e6fb      	b.n	80009ec <__udivmoddi4+0x90>
 8000bf4:	4548      	cmp	r0, r9
 8000bf6:	d2a9      	bcs.n	8000b4c <__udivmoddi4+0x1f0>
 8000bf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c00:	3b01      	subs	r3, #1
 8000c02:	e7a3      	b.n	8000b4c <__udivmoddi4+0x1f0>
 8000c04:	4645      	mov	r5, r8
 8000c06:	e7ea      	b.n	8000bde <__udivmoddi4+0x282>
 8000c08:	462b      	mov	r3, r5
 8000c0a:	e794      	b.n	8000b36 <__udivmoddi4+0x1da>
 8000c0c:	4640      	mov	r0, r8
 8000c0e:	e7d1      	b.n	8000bb4 <__udivmoddi4+0x258>
 8000c10:	46d0      	mov	r8, sl
 8000c12:	e77b      	b.n	8000b0c <__udivmoddi4+0x1b0>
 8000c14:	3d02      	subs	r5, #2
 8000c16:	4462      	add	r2, ip
 8000c18:	e732      	b.n	8000a80 <__udivmoddi4+0x124>
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	e70a      	b.n	8000a34 <__udivmoddi4+0xd8>
 8000c1e:	4464      	add	r4, ip
 8000c20:	3802      	subs	r0, #2
 8000c22:	e742      	b.n	8000aaa <__udivmoddi4+0x14e>

08000c24 <__aeabi_idiv0>:
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <PID>:
*@brief: Calculate the PID control output based on the Proportional, Integral, and Derivative components
*@param:
*@retval: None
*/
void PID(SERVO_Handle_TypeDef* servo, int Position, int SetP)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]

    static double priError = 0;
    static double toError = 0;
    float dis = Position;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c3e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float error = setP - dis;
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <PID+0xf4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c56:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // calculating PID values
    double Pvalue = error * kp;
 8000c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c5c:	f7ff fdbe 	bl	80007dc <__aeabi_f2d>
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <PID+0xf8>)
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	f7ff fb2b 	bl	80002c0 <__aeabi_dmul>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double Ivalue = toError * ki;
 8000c72:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <PID+0xfc>)
 8000c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <PID+0x100>)
 8000c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7e:	f7ff fb1f 	bl	80002c0 <__aeabi_dmul>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double Dvalue = (error - priError) * kd;
 8000c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c8c:	f7ff fda6 	bl	80007dc <__aeabi_f2d>
 8000c90:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <PID+0x104>)
 8000c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c96:	f7ff fc41 	bl	800051c <__aeabi_dsub>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <PID+0x108>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f7ff fb0a 	bl	80002c0 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double PIDvalue = Pvalue + Ivalue + Dvalue;
 8000cb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000cbc:	f7ff fc30 	bl	8000520 <__adddf3>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cc8:	f7ff fc2a 	bl	8000520 <__adddf3>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    priError = error;     // previous error (DValue)
 8000cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cd6:	f7ff fd81 	bl	80007dc <__aeabi_f2d>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4913      	ldr	r1, [pc, #76]	; (8000d2c <PID+0x104>)
 8000ce0:	e9c1 2300 	strd	r2, r3, [r1]
    toError += error;      // total error {IValue}
 8000ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ce6:	f7ff fd79 	bl	80007dc <__aeabi_f2d>
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <PID+0xfc>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	f7ff fc16 	bl	8000520 <__adddf3>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	490a      	ldr	r1, [pc, #40]	; (8000d24 <PID+0xfc>)
 8000cfa:	e9c1 2300 	strd	r2, r3, [r1]

    SERVO_WritePosition(servo, PIDvalue);
 8000cfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d02:	f7ff fdc3 	bl	800088c <__aeabi_d2f>
 8000d06:	4603      	mov	r3, r0
 8000d08:	ee00 3a10 	vmov	s0, r3
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f825 	bl	8000d5c <SERVO_WritePosition>
}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000002c 	.word	0x2000002c
 8000d20:	20000000 	.word	0x20000000
 8000d24:	200000c0 	.word	0x200000c0
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	200000c8 	.word	0x200000c8
 8000d30:	20000010 	.word	0x20000010

08000d34 <SERVO_Init>:
  * @param[in/out] hservo : Servo motor handler.
  * @retval None
  */

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 90.0f);
 8000d3c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000d58 <SERVO_Init+0x24>
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f80b 	bl	8000d5c <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f9df 	bl	800110c <PWM_Init>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	42b40000 	.word	0x42b40000

08000d5c <SERVO_WritePosition>:
  * @param[in] pos        : Desired position for the servo motor.
  * @retval None
  */

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 120.0f, 160.0f);
 8000d68:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000dcc <SERVO_WritePosition+0x70>
 8000d6c:	ed97 0a00 	vldr	s0, [r7]
 8000d70:	f007 fa80 	bl	8008274 <fminf>
 8000d74:	eef0 7a40 	vmov.f32	s15, s0
 8000d78:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000dd0 <SERVO_WritePosition+0x74>
 8000d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d80:	f007 fa5d 	bl	800823e <fmaxf>
 8000d84:	eef0 7a40 	vmov.f32	s15, s0
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 120.0f, 160.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d94:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000dd0 <SERVO_WritePosition+0x74>
 8000d98:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000d9c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000dd4 <SERVO_WritePosition+0x78>
 8000da0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000da4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dac:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000db4:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	ed97 0a03 	vldr	s0, [r7, #12]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f9bc 	bl	800113c <PWM_WriteDuty>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	43200000 	.word	0x43200000
 8000dd0:	42f00000 	.word	0x42f00000
 8000dd4:	42200000 	.word	0x42200000

08000dd8 <hc_sr04_init>:
  * @param  htim_trig: Pointer to the timer handle for trigger.
  * @param  trig_channel: Timer channel for trigger.
  * @retval None
  */
void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
    us_sensor->htim_echo = htim_echo;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	601a      	str	r2, [r3, #0]
    us_sensor->htim_trig = htim_trig;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	605a      	str	r2, [r3, #4]
    us_sensor->trig_channel = trig_channel;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	609a      	str	r2, [r3, #8]

    HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f003 fe5c 	bl	8004abc <HAL_TIM_IC_Start_IT>
    HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4610      	mov	r0, r2
 8000e10:	f003 fcf8 	bl	8004804 <HAL_TIM_PWM_Start>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <hc_sr04_convert_us_to_cm>:
  * @brief  Converts ultrasonic sensor distance from microseconds to centimeters.
  * @param  distance_us: Distance in microseconds.
  * @retval Distance in centimeters.
  */
uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <hc_sr04_convert_us_to_cm+0x20>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	095b      	lsrs	r3, r3, #5
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	8d3dcb09 	.word	0x8d3dcb09

08000e40 <CalulatePosition>:
  * @param  dis1: Distance 1 value.
  * @param  dis2: Distance 2 value.
  * @retval Calculated position value.
  */
int CalulatePosition(int dis1, int dis2)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
    int position = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
    if (dis1 < 29)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b1c      	cmp	r3, #28
 8000e52:	dc02      	bgt.n	8000e5a <CalulatePosition+0x1a>
        position = dis1;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e015      	b.n	8000e86 <CalulatePosition+0x46>
    else if (dis1 >= 29)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b1c      	cmp	r3, #28
 8000e5e:	dd04      	ble.n	8000e6a <CalulatePosition+0x2a>
        position = 60 - dis2;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e00d      	b.n	8000e86 <CalulatePosition+0x46>
    else if (dis1 >= 29 && dis1 <= 31 && dis2 >= 29 && dis2 <= 31)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b1c      	cmp	r3, #28
 8000e6e:	dd0a      	ble.n	8000e86 <CalulatePosition+0x46>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b1f      	cmp	r3, #31
 8000e74:	dc07      	bgt.n	8000e86 <CalulatePosition+0x46>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b1c      	cmp	r3, #28
 8000e7a:	dd04      	ble.n	8000e86 <CalulatePosition+0x46>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b1f      	cmp	r3, #31
 8000e80:	dc01      	bgt.n	8000e86 <CalulatePosition+0x46>
        position = 30;
 8000e82:	231e      	movs	r3, #30
 8000e84:	60fb      	str	r3, [r7, #12]

    return position;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(htim);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f003 fbbd 	bl	8004628 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000eae:	bf00      	nop
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d3f9      	bcc.n	8000eb0 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f003 fc23 	bl	8004708 <HAL_TIM_Base_Stop>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000edc:	78bb      	ldrb	r3, [r7, #2]
 8000ede:	f023 030f 	bic.w	r3, r3, #15
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f043 030c 	orr.w	r3, r3, #12
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <__lcd_i2c_write+0xac>)
 8000ef2:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <__lcd_i2c_write+0xac>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <__lcd_i2c_write+0xac>)
 8000efa:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000efc:	78bb      	ldrb	r3, [r7, #2]
 8000efe:	f023 030f 	bic.w	r3, r3, #15
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <__lcd_i2c_write+0xac>)
 8000f12:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000f14:	78bb      	ldrb	r3, [r7, #2]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f043 030c 	orr.w	r3, r3, #12
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <__lcd_i2c_write+0xac>)
 8000f28:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <__lcd_i2c_write+0xac>)
 8000f2c:	78da      	ldrb	r2, [r3, #3]
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <__lcd_i2c_write+0xac>)
 8000f30:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000f32:	78bb      	ldrb	r3, [r7, #2]
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__lcd_i2c_write+0xac>)
 8000f46:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	889b      	ldrh	r3, [r3, #4]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <__lcd_i2c_write+0xac>)
 8000f5e:	f001 fe73 	bl	8002c48 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	2132      	movs	r1, #50	; 0x32
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff93 	bl	8000e94 <__lcd_delay_us>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000d0 	.word	0x200000d0

08000f7c <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff9c 	bl	8000ecc <__lcd_i2c_write>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	461a      	mov	r2, r3
 8000fac:	2101      	movs	r1, #1
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff8c 	bl	8000ecc <__lcd_i2c_write>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  __lcd_delay(hlcd->Timer, 15.2);  // >15 ms
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff61 	bl	8000e94 <__lcd_delay_us>

  // 4-bit mode
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffd1 	bl	8000f7c <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 4.1 ms
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	f241 0103 	movw	r1, #4099	; 0x1003
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff56 	bl	8000e94 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000fe8:	2103      	movs	r1, #3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffc6 	bl	8000f7c <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 0.1 ms
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f241 0103 	movw	r1, #4099	; 0x1003
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff4b 	bl	8000e94 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000ffe:	2103      	movs	r1, #3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffbb 	bl	8000f7c <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, 0x02);  // 0001
 8001006:	2102      	movs	r1, #2
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffb7 	bl	8000f7c <__lcd_i2c_write_command>

  hlcd->IsInitialized = 1;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	741a      	strb	r2, [r3, #16]

  __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8001014:	2128      	movs	r1, #40	; 0x28
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffb0 	bl	8000f7c <__lcd_i2c_write_command>

  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                      // Clear screen
 800101c:	2101      	movs	r1, #1
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffac 	bl	8000f7c <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 1.6);                                         // > 1.52 ms
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // LCD on, Cursor off, On blink
 8001032:	210c      	movs	r1, #12
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffa1 	bl	8000f7c <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);       // Cursor increment on
 800103a:	2106      	movs	r1, #6
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff9d 	bl	8000f7c <__lcd_i2c_write_command>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <LCD_I2C_printDecInt>:
 * @param[in] hlcd   : LCD handler with I2C interface
 * @param[in] number : Decimal number
 * @return None
 */
void LCD_I2C_printDecInt(LCD_I2C_HandleTypeDef* hlcd, int number)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  char buffer[LCD_NUMBER_BUF_SIZE];
  if( number >= 10)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b09      	cmp	r3, #9
 800105a:	dd07      	ble.n	800106c <LCD_I2C_printDecInt+0x20>
      sprintf(buffer, "%d", number);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	490b      	ldr	r1, [pc, #44]	; (8001090 <LCD_I2C_printDecInt+0x44>)
 8001064:	4618      	mov	r0, r3
 8001066:	f006 fc47 	bl	80078f8 <siprintf>
 800106a:	e006      	b.n	800107a <LCD_I2C_printDecInt+0x2e>
  else
	  sprintf(buffer, "0%d", number);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <LCD_I2C_printDecInt+0x48>)
 8001074:	4618      	mov	r0, r3
 8001076:	f006 fc3f 	bl	80078f8 <siprintf>

  LCD_I2C_printStr(hlcd, buffer);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f809 	bl	8001098 <LCD_I2C_printStr>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	080082fc 	.word	0x080082fc
 8001094:	08008300 	.word	0x08008300

08001098 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e00a      	b.n	80010be <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff72 	bl	8000f9c <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	3301      	adds	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	7bfc      	ldrb	r4, [r7, #15]
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f7ff f8a5 	bl	8000210 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	429c      	cmp	r4, r3
 80010ca:	d3ed      	bcc.n	80010a8 <LCD_I2C_printStr+0x10>
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
	...

080010d8 <LCD_I2C_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
 80010e4:	4613      	mov	r3, r2
 80010e6:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <LCD_I2C_SetCursor+0x30>)
 80010ec:	5cd2      	ldrb	r2, [r2, r3]
 80010ee:	78bb      	ldrb	r3, [r7, #2]
 80010f0:	4413      	add	r3, r2
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	3b80      	subs	r3, #128	; 0x80
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff3e 	bl	8000f7c <__lcd_i2c_write_command>
  #endif
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	0800832c 	.word	0x0800832c

0800110c <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	edd3 7a02 	vldr	s15, [r3, #8]
 800111a:	eeb0 0a67 	vmov.f32	s0, s15
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f80c 	bl	800113c <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4619      	mov	r1, r3
 800112e:	4610      	mov	r0, r2
 8001130:	f003 fb68 	bl	8004804 <HAL_TIM_PWM_Start>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8001148:	edd7 7a00 	vldr	s15, [r7]
 800114c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001154:	d503      	bpl.n	800115e <PWM_WriteDuty+0x22>
    duty = 0.0;
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	e00a      	b.n	8001174 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800115e:	edd7 7a00 	vldr	s15, [r7]
 8001162:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001220 <PWM_WriteDuty+0xe4>
 8001166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	dd01      	ble.n	8001174 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <PWM_WriteDuty+0xe8>)
 8001172:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	3301      	adds	r3, #1
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800118c:	edd7 7a00 	vldr	s15, [r7]
 8001190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001194:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001220 <PWM_WriteDuty+0xe4>
 8001198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a0:	ee17 3a90 	vmov	r3, s15
 80011a4:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d105      	bne.n	80011ba <PWM_WriteDuty+0x7e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011b8:	e02c      	b.n	8001214 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d105      	bne.n	80011ce <PWM_WriteDuty+0x92>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011cc:	e022      	b.n	8001214 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d105      	bne.n	80011e2 <PWM_WriteDuty+0xa6>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80011e0:	e018      	b.n	8001214 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b0c      	cmp	r3, #12
 80011e8:	d105      	bne.n	80011f6 <PWM_WriteDuty+0xba>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011f4:	e00e      	b.n	8001214 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d105      	bne.n	800120a <PWM_WriteDuty+0xce>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001208:	e004      	b.n	8001214 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	42c80000 	.word	0x42c80000
 8001224:	42c80000 	.word	0x42c80000

08001228 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123e:	4bb4      	ldr	r3, [pc, #720]	; (8001510 <MX_GPIO_Init+0x2e8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4ab3      	ldr	r2, [pc, #716]	; (8001510 <MX_GPIO_Init+0x2e8>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4bb1      	ldr	r3, [pc, #708]	; (8001510 <MX_GPIO_Init+0x2e8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4bae      	ldr	r3, [pc, #696]	; (8001510 <MX_GPIO_Init+0x2e8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4aad      	ldr	r2, [pc, #692]	; (8001510 <MX_GPIO_Init+0x2e8>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4bab      	ldr	r3, [pc, #684]	; (8001510 <MX_GPIO_Init+0x2e8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	4ba8      	ldr	r3, [pc, #672]	; (8001510 <MX_GPIO_Init+0x2e8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4aa7      	ldr	r2, [pc, #668]	; (8001510 <MX_GPIO_Init+0x2e8>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4ba5      	ldr	r3, [pc, #660]	; (8001510 <MX_GPIO_Init+0x2e8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4ba2      	ldr	r3, [pc, #648]	; (8001510 <MX_GPIO_Init+0x2e8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4aa1      	ldr	r2, [pc, #644]	; (8001510 <MX_GPIO_Init+0x2e8>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b9f      	ldr	r3, [pc, #636]	; (8001510 <MX_GPIO_Init+0x2e8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b9c      	ldr	r3, [pc, #624]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a9b      	ldr	r2, [pc, #620]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b99      	ldr	r3, [pc, #612]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b6:	4b96      	ldr	r3, [pc, #600]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a95      	ldr	r2, [pc, #596]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012bc:	f043 0320 	orr.w	r3, r3, #32
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b93      	ldr	r3, [pc, #588]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	4b90      	ldr	r3, [pc, #576]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a8f      	ldr	r2, [pc, #572]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b8d      	ldr	r3, [pc, #564]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e6:	4b8a      	ldr	r3, [pc, #552]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a89      	ldr	r2, [pc, #548]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b87      	ldr	r3, [pc, #540]	; (8001510 <MX_GPIO_Init+0x2e8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2101      	movs	r1, #1
 8001302:	4884      	ldr	r0, [pc, #528]	; (8001514 <MX_GPIO_Init+0x2ec>)
 8001304:	f001 fbf6 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f244 0181 	movw	r1, #16513	; 0x4081
 800130e:	4882      	ldr	r0, [pc, #520]	; (8001518 <MX_GPIO_Init+0x2f0>)
 8001310:	f001 fbf0 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, KEYPAD_COL4_Pin|KEYPAD_COL2_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800131a:	4880      	ldr	r0, [pc, #512]	; (800151c <MX_GPIO_Init+0x2f4>)
 800131c:	f001 fbea 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, KEYPAD_COL3_Pin|KEYPAD_COL1_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001326:	487e      	ldr	r0, [pc, #504]	; (8001520 <MX_GPIO_Init+0x2f8>)
 8001328:	f001 fbe4 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2140      	movs	r1, #64	; 0x40
 8001330:	487c      	ldr	r0, [pc, #496]	; (8001524 <MX_GPIO_Init+0x2fc>)
 8001332:	f001 fbdf 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800133c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4871      	ldr	r0, [pc, #452]	; (8001514 <MX_GPIO_Init+0x2ec>)
 800134e:	f001 fa25 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001352:	2301      	movs	r3, #1
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	486a      	ldr	r0, [pc, #424]	; (8001514 <MX_GPIO_Init+0x2ec>)
 800136a:	f001 fa17 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800136e:	2332      	movs	r3, #50	; 0x32
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800137e:	230b      	movs	r3, #11
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	4619      	mov	r1, r3
 8001388:	4862      	ldr	r0, [pc, #392]	; (8001514 <MX_GPIO_Init+0x2ec>)
 800138a:	f001 fa07 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800138e:	2386      	movs	r3, #134	; 0x86
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139e:	230b      	movs	r3, #11
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	485f      	ldr	r0, [pc, #380]	; (8001528 <MX_GPIO_Init+0x300>)
 80013aa:	f001 f9f7 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ae:	2308      	movs	r3, #8
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4859      	ldr	r0, [pc, #356]	; (8001528 <MX_GPIO_Init+0x300>)
 80013c2:	f001 f9eb 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	484e      	ldr	r0, [pc, #312]	; (8001518 <MX_GPIO_Init+0x2f0>)
 80013e0:	f001 f9dc 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = KEYPAD_COL4_Pin|KEYPAD_COL2_Pin;
 80013e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4847      	ldr	r0, [pc, #284]	; (800151c <MX_GPIO_Init+0x2f4>)
 80013fe:	f001 f9cd 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW4_Pin;
 8001402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEYPAD_ROW4_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	4841      	ldr	r0, [pc, #260]	; (800151c <MX_GPIO_Init+0x2f4>)
 8001418:	f001 f9c0 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin;
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEYPAD_ROW1_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	483b      	ldr	r0, [pc, #236]	; (8001520 <MX_GPIO_Init+0x2f8>)
 8001432:	f001 f9b3 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEYPAD_COL3_Pin|KEYPAD_COL1_Pin;
 8001436:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	4834      	ldr	r0, [pc, #208]	; (8001520 <MX_GPIO_Init+0x2f8>)
 8001450:	f001 f9a4 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001466:	230b      	movs	r3, #11
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4829      	ldr	r0, [pc, #164]	; (8001518 <MX_GPIO_Init+0x2f0>)
 8001472:	f001 f993 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001476:	2340      	movs	r3, #64	; 0x40
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4825      	ldr	r0, [pc, #148]	; (8001524 <MX_GPIO_Init+0x2fc>)
 800148e:	f001 f985 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin;
 8001492:	f44f 4385 	mov.w	r3, #17024	; 0x4280
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	481f      	ldr	r0, [pc, #124]	; (8001524 <MX_GPIO_Init+0x2fc>)
 80014a8:	f001 f978 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014be:	230a      	movs	r3, #10
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	4817      	ldr	r0, [pc, #92]	; (8001528 <MX_GPIO_Init+0x300>)
 80014ca:	f001 f967 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <MX_GPIO_Init+0x300>)
 80014e4:	f001 f95a 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014fa:	230b      	movs	r3, #11
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_GPIO_Init+0x2fc>)
 8001506:	f001 f949 	bl	800279c <HAL_GPIO_Init>

}
 800150a:	bf00      	nop
 800150c:	3738      	adds	r7, #56	; 0x38
 800150e:	e00d      	b.n	800152c <MX_GPIO_Init+0x304>
 8001510:	40023800 	.word	0x40023800
 8001514:	40020800 	.word	0x40020800
 8001518:	40020400 	.word	0x40020400
 800151c:	40021400 	.word	0x40021400
 8001520:	40021000 	.word	0x40021000
 8001524:	40021800 	.word	0x40021800
 8001528:	40020000 	.word	0x40020000
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <MX_I2C1_Init+0x78>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_I2C1_Init+0x74>)
 800153c:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <MX_I2C1_Init+0x7c>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001548:	2201      	movs	r2, #1
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_I2C1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <MX_I2C1_Init+0x74>)
 800156c:	f001 fadc 	bl	8002b28 <HAL_I2C_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001576:	f000 fa15 	bl	80019a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800157a:	2100      	movs	r1, #0
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <MX_I2C1_Init+0x74>)
 800157e:	f001 fe49 	bl	8003214 <HAL_I2CEx_ConfigAnalogFilter>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001588:	f000 fa0c 	bl	80019a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800158c:	2100      	movs	r1, #0
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_I2C1_Init+0x74>)
 8001590:	f001 fe8b 	bl	80032aa <HAL_I2CEx_ConfigDigitalFilter>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800159a:	f000 fa03 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200000d8 	.word	0x200000d8
 80015a8:	40005400 	.word	0x40005400
 80015ac:	20404768 	.word	0x20404768

080015b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0aa      	sub	sp, #168	; 0xa8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	2284      	movs	r2, #132	; 0x84
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f006 f9b1 	bl	8007938 <memset>
  if(i2cHandle->Instance==I2C1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a22      	ldr	r2, [pc, #136]	; (8001664 <HAL_I2C_MspInit+0xb4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d13c      	bne.n	800165a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fbd2 	bl	8003d98 <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015fa:	f000 f9d3 	bl	80019a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_I2C_MspInit+0xb8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_I2C_MspInit+0xb8>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_I2C_MspInit+0xb8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161e:	2312      	movs	r3, #18
 8001620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001630:	2304      	movs	r3, #4
 8001632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800163a:	4619      	mov	r1, r3
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <HAL_I2C_MspInit+0xbc>)
 800163e:	f001 f8ad 	bl	800279c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_I2C_MspInit+0xb8>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_I2C_MspInit+0xb8>)
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_I2C_MspInit+0xb8>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800165a:	bf00      	nop
 800165c:	37a8      	adds	r7, #168	; 0xa8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40005400 	.word	0x40005400
 8001668:	40023800 	.word	0x40023800
 800166c:	40020400 	.word	0x40020400

08001670 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]


}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_UART_RxCpltCallback+0x48>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d117      	bne.n	80016c4 <HAL_UART_RxCpltCallback+0x40>
  {
	SERVO_WritePosition(&hservo1, 180 - strtol((char*)tx_buffer, 0, 10));
 8001694:	220a      	movs	r2, #10
 8001696:	2100      	movs	r1, #0
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <HAL_UART_RxCpltCallback+0x4c>)
 800169a:	f006 f923 	bl	80078e4 <strtol>
 800169e:	4603      	mov	r3, r0
 80016a0:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	4808      	ldr	r0, [pc, #32]	; (80016d4 <HAL_UART_RxCpltCallback+0x50>)
 80016b2:	f7ff fb53 	bl	8000d5c <SERVO_WritePosition>
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 80016b6:	2303      	movs	r3, #3
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <HAL_UART_RxCpltCallback+0x4c>)
 80016be:	4803      	ldr	r0, [pc, #12]	; (80016cc <HAL_UART_RxCpltCallback+0x48>)
 80016c0:	f004 fe83 	bl	80063ca <HAL_UART_Receive_IT>


  }
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200002e4 	.word	0x200002e4
 80016d0:	20000160 	.word	0x20000160
 80016d4:	20000030 	.word	0x20000030

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016dc:	f000 fe39 	bl	8002352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e0:	f000 f8a0 	bl	8001824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e4:	f7ff fda0 	bl	8001228 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80016e8:	f000 fd72 	bl	80021d0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80016ec:	f000 fa14 	bl	8001b18 <MX_TIM1_Init>
  MX_TIM9_Init();
 80016f0:	f000 fbe4 	bl	8001ebc <MX_TIM9_Init>
  MX_TIM2_Init();
 80016f4:	f000 fab4 	bl	8001c60 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016f8:	f000 fb0c 	bl	8001d14 <MX_TIM3_Init>
  MX_I2C1_Init();
 80016fc:	f7ff ff18 	bl	8001530 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001700:	f000 fba6 	bl	8001e50 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Start Sensor 1 & 2
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 8001704:	2308      	movs	r3, #8
 8001706:	4a36      	ldr	r2, [pc, #216]	; (80017e0 <main+0x108>)
 8001708:	4936      	ldr	r1, [pc, #216]	; (80017e4 <main+0x10c>)
 800170a:	4837      	ldr	r0, [pc, #220]	; (80017e8 <main+0x110>)
 800170c:	f7ff fb64 	bl	8000dd8 <hc_sr04_init>
  hc_sr04_init(&distance_sensor2, &htim3, &htim2, TIM_CHANNEL_3);
 8001710:	2308      	movs	r3, #8
 8001712:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <main+0x108>)
 8001714:	4935      	ldr	r1, [pc, #212]	; (80017ec <main+0x114>)
 8001716:	4836      	ldr	r0, [pc, #216]	; (80017f0 <main+0x118>)
 8001718:	f7ff fb5e 	bl	8000dd8 <hc_sr04_init>

  // Start Servos
  SERVO_Init(&hservo1);
 800171c:	4835      	ldr	r0, [pc, #212]	; (80017f4 <main+0x11c>)
 800171e:	f7ff fb09 	bl	8000d34 <SERVO_Init>
  SERVO_WritePosition(&hservo1, 130.0f);
 8001722:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80017f8 <main+0x120>
 8001726:	4833      	ldr	r0, [pc, #204]	; (80017f4 <main+0x11c>)
 8001728:	f7ff fb18 	bl	8000d5c <SERVO_WritePosition>
  HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 800172c:	2303      	movs	r3, #3
 800172e:	b29b      	uxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	4932      	ldr	r1, [pc, #200]	; (80017fc <main+0x124>)
 8001734:	4832      	ldr	r0, [pc, #200]	; (8001800 <main+0x128>)
 8001736:	f004 fe48 	bl	80063ca <HAL_UART_Receive_IT>


 // Start LCD and set up GUI
  LCD_I2C_Init(&hlcd3);
 800173a:	4832      	ldr	r0, [pc, #200]	; (8001804 <main+0x12c>)
 800173c:	f7ff fc3e 	bl	8000fbc <LCD_I2C_Init>
  LCD_I2C_SetCursor(&hlcd3, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	482f      	ldr	r0, [pc, #188]	; (8001804 <main+0x12c>)
 8001746:	f7ff fcc7 	bl	80010d8 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "Position: ");
 800174a:	492f      	ldr	r1, [pc, #188]	; (8001808 <main+0x130>)
 800174c:	482d      	ldr	r0, [pc, #180]	; (8001804 <main+0x12c>)
 800174e:	f7ff fca3 	bl	8001098 <LCD_I2C_printStr>


  LCD_I2C_SetCursor(&hlcd3, 0, 13);
 8001752:	220d      	movs	r2, #13
 8001754:	2100      	movs	r1, #0
 8001756:	482b      	ldr	r0, [pc, #172]	; (8001804 <main+0x12c>)
 8001758:	f7ff fcbe 	bl	80010d8 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "cm");
 800175c:	492b      	ldr	r1, [pc, #172]	; (800180c <main+0x134>)
 800175e:	4829      	ldr	r0, [pc, #164]	; (8001804 <main+0x12c>)
 8001760:	f7ff fc9a 	bl	8001098 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2101      	movs	r1, #1
 8001768:	4826      	ldr	r0, [pc, #152]	; (8001804 <main+0x12c>)
 800176a:	f7ff fcb5 	bl	80010d8 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "Set Point: ");
 800176e:	4928      	ldr	r1, [pc, #160]	; (8001810 <main+0x138>)
 8001770:	4824      	ldr	r0, [pc, #144]	; (8001804 <main+0x12c>)
 8001772:	f7ff fc91 	bl	8001098 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 14);
 8001776:	220e      	movs	r2, #14
 8001778:	2101      	movs	r1, #1
 800177a:	4822      	ldr	r0, [pc, #136]	; (8001804 <main+0x12c>)
 800177c:	f7ff fcac 	bl	80010d8 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "cm");
 8001780:	4922      	ldr	r1, [pc, #136]	; (800180c <main+0x134>)
 8001782:	4820      	ldr	r0, [pc, #128]	; (8001804 <main+0x12c>)
 8001784:	f7ff fc88 	bl	8001098 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 11);
 8001788:	220b      	movs	r2, #11
 800178a:	2101      	movs	r1, #1
 800178c:	481d      	ldr	r0, [pc, #116]	; (8001804 <main+0x12c>)
 800178e:	f7ff fca3 	bl	80010d8 <LCD_I2C_SetCursor>
  LCD_I2C_printDecInt(&hlcd3, setP);
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <main+0x13c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	481a      	ldr	r0, [pc, #104]	; (8001804 <main+0x12c>)
 800179a:	f7ff fc57 	bl	800104c <LCD_I2C_printDecInt>
  while (1)
  {
	  //PID(&hservo1,position,setP);

	  // Send Value of Position to LCD
	  LCD_I2C_SetCursor(&hlcd3, 0, 10);
 800179e:	220a      	movs	r2, #10
 80017a0:	2100      	movs	r1, #0
 80017a2:	4818      	ldr	r0, [pc, #96]	; (8001804 <main+0x12c>)
 80017a4:	f7ff fc98 	bl	80010d8 <LCD_I2C_SetCursor>
	  LCD_I2C_printDecInt(&hlcd3, position);
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <main+0x140>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4815      	ldr	r0, [pc, #84]	; (8001804 <main+0x12c>)
 80017b0:	f7ff fc4c 	bl	800104c <LCD_I2C_printDecInt>

	  // Convert position into string
	  sprintf(position_buffer, "%d\r\n", position);
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <main+0x140>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4918      	ldr	r1, [pc, #96]	; (800181c <main+0x144>)
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <main+0x148>)
 80017be:	f006 f89b 	bl	80078f8 <siprintf>

	  // Transmit position through UART
	   HAL_UART_Transmit(&huart3, (uint8_t*)position_buffer, strlen(position_buffer), HAL_MAX_DELAY);
 80017c2:	4817      	ldr	r0, [pc, #92]	; (8001820 <main+0x148>)
 80017c4:	f7fe fd24 	bl	8000210 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	4913      	ldr	r1, [pc, #76]	; (8001820 <main+0x148>)
 80017d2:	480b      	ldr	r0, [pc, #44]	; (8001800 <main+0x128>)
 80017d4:	f004 fd76 	bl	80062c4 <HAL_UART_Transmit>

	  HAL_Delay(100);
 80017d8:	2064      	movs	r0, #100	; 0x64
 80017da:	f000 fe17 	bl	800240c <HAL_Delay>
	  LCD_I2C_SetCursor(&hlcd3, 0, 10);
 80017de:	e7de      	b.n	800179e <main+0xc6>
 80017e0:	200001b4 	.word	0x200001b4
 80017e4:	20000168 	.word	0x20000168
 80017e8:	20000138 	.word	0x20000138
 80017ec:	20000200 	.word	0x20000200
 80017f0:	20000148 	.word	0x20000148
 80017f4:	20000030 	.word	0x20000030
 80017f8:	43020000 	.word	0x43020000
 80017fc:	20000160 	.word	0x20000160
 8001800:	200002e4 	.word	0x200002e4
 8001804:	20000018 	.word	0x20000018
 8001808:	08008308 	.word	0x08008308
 800180c:	08008314 	.word	0x08008314
 8001810:	08008318 	.word	0x08008318
 8001814:	2000002c 	.word	0x2000002c
 8001818:	20000134 	.word	0x20000134
 800181c:	08008324 	.word	0x08008324
 8001820:	20000158 	.word	0x20000158

08001824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2230      	movs	r2, #48	; 0x30
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f006 f880 	bl	8007938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001848:	f001 fd7c 	bl	8003344 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <SystemClock_Config+0xd4>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	4a29      	ldr	r2, [pc, #164]	; (80018f8 <SystemClock_Config+0xd4>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001856:	6413      	str	r3, [r2, #64]	; 0x40
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <SystemClock_Config+0xd4>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <SystemClock_Config+0xd8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a24      	ldr	r2, [pc, #144]	; (80018fc <SystemClock_Config+0xd8>)
 800186a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <SystemClock_Config+0xd8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800187c:	2301      	movs	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001880:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001886:	2302      	movs	r3, #2
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800188a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001890:	2304      	movs	r3, #4
 8001892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001894:	23d8      	movs	r3, #216	; 0xd8
 8001896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001898:	2302      	movs	r3, #2
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800189c:	2309      	movs	r3, #9
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	4618      	mov	r0, r3
 80018a6:	f001 fdad 	bl	8003404 <HAL_RCC_OscConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80018b0:	f000 f878 	bl	80019a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018b4:	f001 fd56 	bl	8003364 <HAL_PWREx_EnableOverDrive>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80018be:	f000 f871 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c2:	230f      	movs	r3, #15
 80018c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c6:	2302      	movs	r3, #2
 80018c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80018d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2107      	movs	r1, #7
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 f833 	bl	800394c <HAL_RCC_ClockConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80018ec:	f000 f85a 	bl	80019a4 <Error_Handler>
  }
}
 80018f0:	bf00      	nop
 80018f2:	3750      	adds	r7, #80	; 0x50
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000

08001900 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_TIM_IC_CaptureCallback+0x84>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d10d      	bne.n	800192e <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		uint32_t echo_us;
          // Convert and assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001912:	2104      	movs	r1, #4
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f003 fdfd 	bl	8005514 <HAL_TIM_ReadCapturedValue>
 800191a:	60f8      	str	r0, [r7, #12]
		dx_cm = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fa7d 	bl	8000e1c <hc_sr04_convert_us_to_cm>
 8001922:	4603      	mov	r3, r0
 8001924:	4a18      	ldr	r2, [pc, #96]	; (8001988 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001926:	60d3      	str	r3, [r2, #12]
 8001928:	461a      	mov	r2, r3
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_TIM_IC_CaptureCallback+0x8c>)
 800192c:	601a      	str	r2, [r3, #0]
	}

	if(TIM3 == htim->Instance)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d10d      	bne.n	8001954 <HAL_TIM_IC_CaptureCallback+0x54>
	{
		uint32_t echo_us;
        // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001938:	2104      	movs	r1, #4
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f003 fdea 	bl	8005514 <HAL_TIM_ReadCapturedValue>
 8001940:	60b8      	str	r0, [r7, #8]
		dx_cm2 = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8001942:	68b8      	ldr	r0, [r7, #8]
 8001944:	f7ff fa6a 	bl	8000e1c <hc_sr04_convert_us_to_cm>
 8001948:	4603      	mov	r3, r0
 800194a:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_TIM_IC_CaptureCallback+0x88>)
 800194c:	60d3      	str	r3, [r2, #12]
 800194e:	461a      	mov	r2, r3
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001952:	601a      	str	r2, [r3, #0]
	}

	    // Calculate average distance or perform any other processing
	      position = CalulatePosition(dx_cm, dx_cm2);
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_TIM_IC_CaptureCallback+0x94>)
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa6e 	bl	8000e40 <CalulatePosition>
 8001964:	4603      	mov	r3, r0
 8001966:	4a0c      	ldr	r2, [pc, #48]	; (8001998 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001968:	6013      	str	r3, [r2, #0]
		  PID(&hservo1,position,setP);
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_TIM_IC_CaptureCallback+0x98>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	480a      	ldr	r0, [pc, #40]	; (80019a0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001976:	f7ff f957 	bl	8000c28 <PID>

}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40010000 	.word	0x40010000
 8001988:	20000138 	.word	0x20000138
 800198c:	2000012c 	.word	0x2000012c
 8001990:	40000400 	.word	0x40000400
 8001994:	20000130 	.word	0x20000130
 8001998:	20000134 	.word	0x20000134
 800199c:	2000002c 	.word	0x2000002c
 80019a0:	20000030 	.word	0x20000030

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	e7fe      	b.n	80019ac <Error_Handler+0x8>
	...

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_MspInit+0x44>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <HAL_MspInit+0x44>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_MspInit+0x44>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_MspInit+0x44>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_MspInit+0x44>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_MspInit+0x44>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 fcc2 	bl	80023cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <TIM1_CC_IRQHandler+0x10>)
 8001a52:	f003 f983 	bl	8004d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000168 	.word	0x20000168

08001a60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <TIM3_IRQHandler+0x10>)
 8001a66:	f003 f979 	bl	8004d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000200 	.word	0x20000200

08001a74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <USART3_IRQHandler+0x10>)
 8001a7a:	f004 fceb 	bl	8006454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200002e4 	.word	0x200002e4

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f005 ff46 	bl	8007948 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20050000 	.word	0x20050000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	20000164 	.word	0x20000164
 8001af0:	200004b8 	.word	0x200004b8

08001af4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b090      	sub	sp, #64	; 0x40
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001b56:	4a41      	ldr	r2, [pc, #260]	; (8001c5c <MX_TIM1_Init+0x144>)
 8001b58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001b5c:	226b      	movs	r2, #107	; 0x6b
 8001b5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b66:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b74:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b80:	4835      	ldr	r0, [pc, #212]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001b82:	f002 fcf9 	bl	8004578 <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001b8c:	f7ff ff0a 	bl	80019a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	482e      	ldr	r0, [pc, #184]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001b9e:	f003 fbad 	bl	80052fc <HAL_TIM_ConfigClockSource>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001ba8:	f7ff fefc 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001bac:	482a      	ldr	r0, [pc, #168]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001bae:	f002 ff23 	bl	80049f8 <HAL_TIM_IC_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001bb8:	f7ff fef4 	bl	80019a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001bc0:	2350      	movs	r3, #80	; 0x50
 8001bc2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4820      	ldr	r0, [pc, #128]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001bd8:	f003 fc5a 	bl	8005490 <HAL_TIM_SlaveConfigSynchro>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001be2:	f7ff fedf 	bl	80019a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bea:	2301      	movs	r3, #1
 8001bec:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4816      	ldr	r0, [pc, #88]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001c00:	f003 f9cb 	bl	8004f9a <HAL_TIM_IC_ConfigChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c0a:	f7ff fecb 	bl	80019a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c12:	2302      	movs	r3, #2
 8001c14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480e      	ldr	r0, [pc, #56]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001c20:	f003 f9bb 	bl	8004f9a <HAL_TIM_IC_ConfigChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001c2a:	f7ff febb 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <MX_TIM1_Init+0x140>)
 8001c40:	f004 fa46 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001c4a:	f7ff feab 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3740      	adds	r7, #64	; 0x40
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000168 	.word	0x20000168
 8001c5c:	40010000 	.word	0x40010000

08001c60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c72:	463b      	mov	r3, r7
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	615a      	str	r2, [r3, #20]
 8001c82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001c8e:	226b      	movs	r2, #107	; 0x6b
 8001c90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <MX_TIM2_Init+0xb0>)
 8001c9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001caa:	4818      	ldr	r0, [pc, #96]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001cac:	f002 fd53 	bl	8004756 <HAL_TIM_PWM_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001cb6:	f7ff fe75 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4810      	ldr	r0, [pc, #64]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001cca:	f004 fa01 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001cd4:	f7ff fe66 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd8:	2360      	movs	r3, #96	; 0x60
 8001cda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001cdc:	230a      	movs	r3, #10
 8001cde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2208      	movs	r2, #8
 8001cec:	4619      	mov	r1, r3
 8001cee:	4807      	ldr	r0, [pc, #28]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001cf0:	f003 f9f0 	bl	80050d4 <HAL_TIM_PWM_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001cfa:	f7ff fe53 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cfe:	4803      	ldr	r0, [pc, #12]	; (8001d0c <MX_TIM2_Init+0xac>)
 8001d00:	f000 fa0a 	bl	8002118 <HAL_TIM_MspPostInit>

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200001b4 	.word	0x200001b4
 8001d10:	00030d3f 	.word	0x00030d3f

08001d14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b090      	sub	sp, #64	; 0x40
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d46:	463b      	mov	r3, r7
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001d52:	4a3e      	ldr	r2, [pc, #248]	; (8001e4c <MX_TIM3_Init+0x138>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8001d56:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001d58:	226b      	movs	r2, #107	; 0x6b
 8001d5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d62:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d76:	4834      	ldr	r0, [pc, #208]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001d78:	f002 fbfe 	bl	8004578 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001d82:	f7ff fe0f 	bl	80019a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d90:	4619      	mov	r1, r3
 8001d92:	482d      	ldr	r0, [pc, #180]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001d94:	f003 fab2 	bl	80052fc <HAL_TIM_ConfigClockSource>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001d9e:	f7ff fe01 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001da2:	4829      	ldr	r0, [pc, #164]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001da4:	f002 fe28 	bl	80049f8 <HAL_TIM_IC_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001dae:	f7ff fdf9 	bl	80019a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001db2:	2304      	movs	r3, #4
 8001db4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001db6:	2350      	movs	r3, #80	; 0x50
 8001db8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	481e      	ldr	r0, [pc, #120]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001dce:	f003 fb5f 	bl	8005490 <HAL_TIM_SlaveConfigSynchro>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001dd8:	f7ff fde4 	bl	80019a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001de0:	2301      	movs	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	4814      	ldr	r0, [pc, #80]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001df6:	f003 f8d0 	bl	8004f9a <HAL_TIM_IC_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001e00:	f7ff fdd0 	bl	80019a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e04:	2302      	movs	r3, #2
 8001e06:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	2204      	movs	r2, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001e16:	f003 f8c0 	bl	8004f9a <HAL_TIM_IC_ConfigChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001e20:	f7ff fdc0 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_TIM3_Init+0x134>)
 8001e32:	f004 f94d 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8001e3c:	f7ff fdb2 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	3740      	adds	r7, #64	; 0x40
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000200 	.word	0x20000200
 8001e4c:	40000400 	.word	0x40000400

08001e50 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <MX_TIM7_Init+0x64>)
 8001e62:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <MX_TIM7_Init+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <MX_TIM7_Init+0x64>)
 8001e68:	226b      	movs	r2, #107	; 0x6b
 8001e6a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <MX_TIM7_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <MX_TIM7_Init+0x64>)
 8001e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e78:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <MX_TIM7_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e80:	480c      	ldr	r0, [pc, #48]	; (8001eb4 <MX_TIM7_Init+0x64>)
 8001e82:	f002 fb79 	bl	8004578 <HAL_TIM_Base_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e8c:	f7ff fd8a 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <MX_TIM7_Init+0x64>)
 8001e9e:	f004 f917 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ea8:	f7ff fd7c 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000024c 	.word	0x2000024c
 8001eb8:	40001400 	.word	0x40001400

08001ebc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0320 	add.w	r3, r7, #32
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001ee4:	4a25      	ldr	r2, [pc, #148]	; (8001f7c <MX_TIM9_Init+0xc0>)
 8001ee6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8001ee8:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001eea:	226b      	movs	r2, #107	; 0x6b
 8001eec:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001ef6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001efa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f08:	481b      	ldr	r0, [pc, #108]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001f0a:	f002 fb35 	bl	8004578 <HAL_TIM_Base_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001f14:	f7ff fd46 	bl	80019a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f1e:	f107 0320 	add.w	r3, r7, #32
 8001f22:	4619      	mov	r1, r3
 8001f24:	4814      	ldr	r0, [pc, #80]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001f26:	f003 f9e9 	bl	80052fc <HAL_TIM_ConfigClockSource>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001f30:	f7ff fd38 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001f34:	4810      	ldr	r0, [pc, #64]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001f36:	f002 fc0e 	bl	8004756 <HAL_TIM_PWM_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001f40:	f7ff fd30 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f44:	2360      	movs	r3, #96	; 0x60
 8001f46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2200      	movs	r2, #0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4807      	ldr	r0, [pc, #28]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001f5c:	f003 f8ba 	bl	80050d4 <HAL_TIM_PWM_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001f66:	f7ff fd1d 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001f6a:	4803      	ldr	r0, [pc, #12]	; (8001f78 <MX_TIM9_Init+0xbc>)
 8001f6c:	f000 f8d4 	bl	8002118 <HAL_TIM_MspPostInit>

}
 8001f70:	bf00      	nop
 8001f72:	3730      	adds	r7, #48	; 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000298 	.word	0x20000298
 8001f7c:	40014000 	.word	0x40014000

08001f80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <HAL_TIM_Base_MspInit+0x140>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d131      	bne.n	8002006 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa2:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fba:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a41      	ldr	r2, [pc, #260]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	4619      	mov	r1, r3
 8001fee:	4836      	ldr	r0, [pc, #216]	; (80020c8 <HAL_TIM_Base_MspInit+0x148>)
 8001ff0:	f000 fbd4 	bl	800279c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	201b      	movs	r0, #27
 8001ffa:	f000 fb06 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ffe:	201b      	movs	r0, #27
 8002000:	f000 fb1f 	bl	8002642 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002004:	e058      	b.n	80020b8 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM3)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a30      	ldr	r2, [pc, #192]	; (80020cc <HAL_TIM_Base_MspInit+0x14c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d130      	bne.n	8002072 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002010:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	4a2b      	ldr	r2, [pc, #172]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	6413      	str	r3, [r2, #64]	; 0x40
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002040:	2340      	movs	r3, #64	; 0x40
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002050:	2302      	movs	r3, #2
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002058:	4619      	mov	r1, r3
 800205a:	481d      	ldr	r0, [pc, #116]	; (80020d0 <HAL_TIM_Base_MspInit+0x150>)
 800205c:	f000 fb9e 	bl	800279c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	201d      	movs	r0, #29
 8002066:	f000 fad0 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800206a:	201d      	movs	r0, #29
 800206c:	f000 fae9 	bl	8002642 <HAL_NVIC_EnableIRQ>
}
 8002070:	e022      	b.n	80020b8 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM7)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_TIM_Base_MspInit+0x154>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d10c      	bne.n	8002096 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 8002082:	f043 0320 	orr.w	r3, r3, #32
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]
}
 8002094:	e010      	b.n	80020b8 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM9)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_TIM_Base_MspInit+0x158>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d10b      	bne.n	80020b8 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	6453      	str	r3, [r2, #68]	; 0x44
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_TIM_Base_MspInit+0x144>)
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3738      	adds	r7, #56	; 0x38
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40001400 	.word	0x40001400
 80020d8:	40014000 	.word	0x40014000

080020dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d10b      	bne.n	8002106 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_TIM_PWM_MspInit+0x38>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_TIM_PWM_MspInit+0x38>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_TIM_PWM_MspInit+0x38>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800

08002118 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002138:	d11d      	bne.n	8002176 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_TIM_MspPostInit+0xa8>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <HAL_TIM_MspPostInit+0xa8>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_TIM_MspPostInit+0xa8>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002164:	2301      	movs	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4815      	ldr	r0, [pc, #84]	; (80021c4 <HAL_TIM_MspPostInit+0xac>)
 8002170:	f000 fb14 	bl	800279c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002174:	e020      	b.n	80021b8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <HAL_TIM_MspPostInit+0xb0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d11b      	bne.n	80021b8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_TIM_MspPostInit+0xa8>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <HAL_TIM_MspPostInit+0xa8>)
 8002186:	f043 0310 	orr.w	r3, r3, #16
 800218a:	6313      	str	r3, [r2, #48]	; 0x30
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_TIM_MspPostInit+0xa8>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8002198:	2320      	movs	r3, #32
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80021a8:	2303      	movs	r3, #3
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	4806      	ldr	r0, [pc, #24]	; (80021cc <HAL_TIM_MspPostInit+0xb4>)
 80021b4:	f000 faf2 	bl	800279c <HAL_GPIO_Init>
}
 80021b8:	bf00      	nop
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40014000 	.word	0x40014000
 80021cc:	40021000 	.word	0x40021000

080021d0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MX_USART3_UART_Init+0x58>)
 80021d6:	4a15      	ldr	r2, [pc, #84]	; (800222c <MX_USART3_UART_Init+0x5c>)
 80021d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <MX_USART3_UART_Init+0x58>)
 80021dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_USART3_UART_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_USART3_UART_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_USART3_UART_Init+0x58>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_USART3_UART_Init+0x58>)
 80021f6:	220c      	movs	r2, #12
 80021f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <MX_USART3_UART_Init+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_USART3_UART_Init+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <MX_USART3_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_USART3_UART_Init+0x58>)
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_USART3_UART_Init+0x58>)
 8002214:	f004 f808 	bl	8006228 <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800221e:	f7ff fbc1 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002e4 	.word	0x200002e4
 800222c:	40004800 	.word	0x40004800

08002230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0aa      	sub	sp, #168	; 0xa8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	2284      	movs	r2, #132	; 0x84
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f005 fb71 	bl	8007938 <memset>
  if(uartHandle->Instance==USART3)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <HAL_UART_MspInit+0xc4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d144      	bne.n	80022ea <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002266:	2300      	movs	r3, #0
 8002268:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226a:	f107 0310 	add.w	r3, r7, #16
 800226e:	4618      	mov	r0, r3
 8002270:	f001 fd92 	bl	8003d98 <HAL_RCCEx_PeriphCLKConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800227a:	f7ff fb93 	bl	80019a4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_UART_MspInit+0xc8>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_UART_MspInit+0xc8>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_UART_MspInit+0xc8>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_UART_MspInit+0xc8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_UART_MspInit+0xc8>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_UART_MspInit+0xc8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022bc:	2301      	movs	r3, #1
 80022be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022c8:	2307      	movs	r3, #7
 80022ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022d2:	4619      	mov	r1, r3
 80022d4:	4809      	ldr	r0, [pc, #36]	; (80022fc <HAL_UART_MspInit+0xcc>)
 80022d6:	f000 fa61 	bl	800279c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2027      	movs	r0, #39	; 0x27
 80022e0:	f000 f993 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022e4:	2027      	movs	r0, #39	; 0x27
 80022e6:	f000 f9ac 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022ea:	bf00      	nop
 80022ec:	37a8      	adds	r7, #168	; 0xa8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40004800 	.word	0x40004800
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020c00 	.word	0x40020c00

08002300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002338 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002306:	490e      	ldr	r1, [pc, #56]	; (8002340 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800230c:	e002      	b.n	8002314 <LoopCopyDataInit>

0800230e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002312:	3304      	adds	r3, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002318:	d3f9      	bcc.n	800230e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800231c:	4c0b      	ldr	r4, [pc, #44]	; (800234c <LoopFillZerobss+0x26>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002320:	e001      	b.n	8002326 <LoopFillZerobss>

08002322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002324:	3204      	adds	r2, #4

08002326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002328:	d3fb      	bcc.n	8002322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800232a:	f7ff fbe3 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800232e:	f005 fb11 	bl	8007954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002332:	f7ff f9d1 	bl	80016d8 <main>
  bx  lr    
 8002336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002338:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002344:	0800848c 	.word	0x0800848c
  ldr r2, =_sbss
 8002348:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800234c:	200004b8 	.word	0x200004b8

08002350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC_IRQHandler>

08002352 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002356:	2003      	movs	r0, #3
 8002358:	f000 f94c 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800235c:	2000      	movs	r0, #0
 800235e:	f000 f805 	bl	800236c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002362:	f7ff fb25 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_InitTick+0x54>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_InitTick+0x58>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002382:	fbb3 f3f1 	udiv	r3, r3, r1
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f967 	bl	800265e <HAL_SYSTICK_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00e      	b.n	80023b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b0f      	cmp	r3, #15
 800239e:	d80a      	bhi.n	80023b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a0:	2200      	movs	r2, #0
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	f000 f92f 	bl	800260a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ac:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <HAL_InitTick+0x5c>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000040 	.word	0x20000040
 80023c4:	20000048 	.word	0x20000048
 80023c8:	20000044 	.word	0x20000044

080023cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x20>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x24>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_IncTick+0x24>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000048 	.word	0x20000048
 80023f0:	2000036c 	.word	0x2000036c

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	2000036c 	.word	0x2000036c

0800240c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff ffee 	bl	80023f4 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d005      	beq.n	8002432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_Delay+0x44>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002432:	bf00      	nop
 8002434:	f7ff ffde 	bl	80023f4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	429a      	cmp	r2, r3
 8002442:	d8f7      	bhi.n	8002434 <HAL_Delay+0x28>
  {
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000048 	.word	0x20000048

08002454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <__NVIC_SetPriorityGrouping+0x40>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	4313      	orrs	r3, r2
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <__NVIC_SetPriorityGrouping+0x40>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00
 8002498:	05fa0000 	.word	0x05fa0000

0800249c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <__NVIC_GetPriorityGrouping+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0307 	and.w	r3, r3, #7
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db0b      	blt.n	80024e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4907      	ldr	r1, [pc, #28]	; (80024f0 <__NVIC_EnableIRQ+0x38>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2001      	movs	r0, #1
 80024da:	fa00 f202 	lsl.w	r2, r0, r2
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	2b00      	cmp	r3, #0
 8002506:	db0a      	blt.n	800251e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	490c      	ldr	r1, [pc, #48]	; (8002540 <__NVIC_SetPriority+0x4c>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	440b      	add	r3, r1
 8002518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800251c:	e00a      	b.n	8002534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4908      	ldr	r1, [pc, #32]	; (8002544 <__NVIC_SetPriority+0x50>)
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3b04      	subs	r3, #4
 800252c:	0112      	lsls	r2, r2, #4
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	440b      	add	r3, r1
 8002532:	761a      	strb	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f1c3 0307 	rsb	r3, r3, #7
 8002562:	2b04      	cmp	r3, #4
 8002564:	bf28      	it	cs
 8002566:	2304      	movcs	r3, #4
 8002568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3304      	adds	r3, #4
 800256e:	2b06      	cmp	r3, #6
 8002570:	d902      	bls.n	8002578 <NVIC_EncodePriority+0x30>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3b03      	subs	r3, #3
 8002576:	e000      	b.n	800257a <NVIC_EncodePriority+0x32>
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43d9      	mvns	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	4313      	orrs	r3, r2
         );
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c0:	d301      	bcc.n	80025c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00f      	b.n	80025e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <SysTick_Config+0x40>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ce:	210f      	movs	r1, #15
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f7ff ff8e 	bl	80024f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <SysTick_Config+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <SysTick_Config+0x40>)
 80025e0:	2207      	movs	r2, #7
 80025e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff29 	bl	8002454 <__NVIC_SetPriorityGrouping>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff3e 	bl	800249c <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff8e 	bl	8002548 <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5d 	bl	80024f4 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff31 	bl	80024b8 <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffa2 	bl	80025b0 <SysTick_Config>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff feb6 	bl	80023f4 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d008      	beq.n	80026a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e052      	b.n	800274e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0216 	bic.w	r2, r2, #22
 80026b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d103      	bne.n	80026d8 <HAL_DMA_Abort+0x62>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0208 	bic.w	r2, r2, #8
 80026e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f8:	e013      	b.n	8002722 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026fa:	f7ff fe7b 	bl	80023f4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b05      	cmp	r3, #5
 8002706:	d90c      	bls.n	8002722 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e015      	b.n	800274e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e4      	bne.n	80026fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	223f      	movs	r2, #63	; 0x3f
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d004      	beq.n	8002774 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e00c      	b.n	800278e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2205      	movs	r2, #5
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e175      	b.n	8002aa8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 8164 	bne.w	8002aa2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d005      	beq.n	80027f2 <HAL_GPIO_Init+0x56>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d130      	bne.n	8002854 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d017      	beq.n	8002890 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d123      	bne.n	80028e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	69b9      	ldr	r1, [r7, #24]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80be 	beq.w	8002aa2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	4b66      	ldr	r3, [pc, #408]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	4a65      	ldr	r2, [pc, #404]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 800292c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002930:	6453      	str	r3, [r2, #68]	; 0x44
 8002932:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800293e:	4a61      	ldr	r2, [pc, #388]	; (8002ac4 <HAL_GPIO_Init+0x328>)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_GPIO_Init+0x32c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d037      	beq.n	80029da <HAL_GPIO_Init+0x23e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_GPIO_Init+0x330>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d031      	beq.n	80029d6 <HAL_GPIO_Init+0x23a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a56      	ldr	r2, [pc, #344]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d02b      	beq.n	80029d2 <HAL_GPIO_Init+0x236>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a55      	ldr	r2, [pc, #340]	; (8002ad4 <HAL_GPIO_Init+0x338>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d025      	beq.n	80029ce <HAL_GPIO_Init+0x232>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a54      	ldr	r2, [pc, #336]	; (8002ad8 <HAL_GPIO_Init+0x33c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01f      	beq.n	80029ca <HAL_GPIO_Init+0x22e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a53      	ldr	r2, [pc, #332]	; (8002adc <HAL_GPIO_Init+0x340>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d019      	beq.n	80029c6 <HAL_GPIO_Init+0x22a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_GPIO_Init+0x344>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <HAL_GPIO_Init+0x226>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a51      	ldr	r2, [pc, #324]	; (8002ae4 <HAL_GPIO_Init+0x348>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00d      	beq.n	80029be <HAL_GPIO_Init+0x222>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <HAL_GPIO_Init+0x34c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <HAL_GPIO_Init+0x21e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <HAL_GPIO_Init+0x350>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_GPIO_Init+0x21a>
 80029b2:	2309      	movs	r3, #9
 80029b4:	e012      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029b6:	230a      	movs	r3, #10
 80029b8:	e010      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029ba:	2308      	movs	r3, #8
 80029bc:	e00e      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029be:	2307      	movs	r3, #7
 80029c0:	e00c      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029c2:	2306      	movs	r3, #6
 80029c4:	e00a      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029c6:	2305      	movs	r3, #5
 80029c8:	e008      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029ca:	2304      	movs	r3, #4
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029ce:	2303      	movs	r3, #3
 80029d0:	e004      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e002      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x240>
 80029da:	2300      	movs	r3, #0
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f002 0203 	and.w	r2, r2, #3
 80029e2:	0092      	lsls	r2, r2, #2
 80029e4:	4093      	lsls	r3, r2
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029ec:	4935      	ldr	r1, [pc, #212]	; (8002ac4 <HAL_GPIO_Init+0x328>)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_GPIO_Init+0x354>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1e:	4a34      	ldr	r2, [pc, #208]	; (8002af0 <HAL_GPIO_Init+0x354>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_GPIO_Init+0x354>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a48:	4a29      	ldr	r2, [pc, #164]	; (8002af0 <HAL_GPIO_Init+0x354>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4e:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <HAL_GPIO_Init+0x354>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a72:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_GPIO_Init+0x354>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_GPIO_Init+0x354>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9c:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <HAL_GPIO_Init+0x354>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b0f      	cmp	r3, #15
 8002aac:	f67f ae86 	bls.w	80027bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40013800 	.word	0x40013800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40020400 	.word	0x40020400
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020c00 	.word	0x40020c00
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40021400 	.word	0x40021400
 8002ae0:	40021800 	.word	0x40021800
 8002ae4:	40021c00 	.word	0x40021c00
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40022400 	.word	0x40022400
 8002af0:	40013c00 	.word	0x40013c00

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b10:	e003      	b.n	8002b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	041a      	lsls	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe fd2e 	bl	80015b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	; 0x24
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	e006      	b.n	8002bb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d104      	bne.n	8002bc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_I2C_Init+0x11c>)
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69d9      	ldr	r1, [r3, #28]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	02008000 	.word	0x02008000

08002c48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	461a      	mov	r2, r3
 8002c54:	460b      	mov	r3, r1
 8002c56:	817b      	strh	r3, [r7, #10]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	f040 80da 	bne.w	8002e1e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_I2C_Master_Transmit+0x30>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0d3      	b.n	8002e20 <HAL_I2C_Master_Transmit+0x1d8>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c80:	f7ff fbb8 	bl	80023f4 <HAL_GetTick>
 8002c84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2319      	movs	r3, #25
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f8f0 	bl	8002e78 <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0be      	b.n	8002e20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2221      	movs	r2, #33	; 0x21
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2210      	movs	r2, #16
 8002cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	893a      	ldrh	r2, [r7, #8]
 8002cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2bff      	cmp	r3, #255	; 0xff
 8002cd2:	d90e      	bls.n	8002cf2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	22ff      	movs	r2, #255	; 0xff
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	8979      	ldrh	r1, [r7, #10]
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fa60 	bl	80031b0 <I2C_TransferConfig>
 8002cf0:	e06c      	b.n	8002dcc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	8979      	ldrh	r1, [r7, #10]
 8002d04:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fa4f 	bl	80031b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d12:	e05b      	b.n	8002dcc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	6a39      	ldr	r1, [r7, #32]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f8ed 	bl	8002ef8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e07b      	b.n	8002e20 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	781a      	ldrb	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d034      	beq.n	8002dcc <HAL_I2C_Master_Transmit+0x184>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d130      	bne.n	8002dcc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f87f 	bl	8002e78 <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e04d      	b.n	8002e20 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2bff      	cmp	r3, #255	; 0xff
 8002d8c:	d90e      	bls.n	8002dac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	22ff      	movs	r2, #255	; 0xff
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	8979      	ldrh	r1, [r7, #10]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fa03 	bl	80031b0 <I2C_TransferConfig>
 8002daa:	e00f      	b.n	8002dcc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	8979      	ldrh	r1, [r7, #10]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f9f2 	bl	80031b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d19e      	bne.n	8002d14 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8cc 	bl	8002f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e01a      	b.n	8002e20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2220      	movs	r2, #32
 8002df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_I2C_Master_Transmit+0x1e4>)
 8002dfe:	400b      	ands	r3, r1
 8002e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
  }
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	80002000 	.word	0x80002000
 8002e2c:	fe00e800 	.word	0xfe00e800

08002e30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d103      	bne.n	8002e4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d007      	beq.n	8002e6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	619a      	str	r2, [r3, #24]
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e88:	e022      	b.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d01e      	beq.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e92:	f7ff faaf 	bl	80023f4 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d113      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e00f      	b.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d0cd      	beq.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f04:	e02c      	b.n	8002f60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f870 	bl	8002ff0 <I2C_IsErrorOccurred>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e02a      	b.n	8002f70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d01e      	beq.n	8002f60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7ff fa67 	bl	80023f4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d113      	bne.n	8002f60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e007      	b.n	8002f70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d1cb      	bne.n	8002f06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f84:	e028      	b.n	8002fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f830 	bl	8002ff0 <I2C_IsErrorOccurred>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e026      	b.n	8002fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7ff fa2b 	bl	80023f4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d113      	bne.n	8002fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e007      	b.n	8002fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d1cf      	bne.n	8002f86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d068      	beq.n	80030ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2210      	movs	r2, #16
 8003022:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003024:	e049      	b.n	80030ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d045      	beq.n	80030ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7ff f9e1 	bl	80023f4 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_IsErrorOccurred+0x54>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d13a      	bne.n	80030ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003056:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003066:	d121      	bne.n	80030ac <I2C_IsErrorOccurred+0xbc>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800306e:	d01d      	beq.n	80030ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b20      	cmp	r3, #32
 8003074:	d01a      	beq.n	80030ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003084:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003086:	f7ff f9b5 	bl	80023f4 <HAL_GetTick>
 800308a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800308c:	e00e      	b.n	80030ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800308e:	f7ff f9b1 	bl	80023f4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b19      	cmp	r3, #25
 800309a:	d907      	bls.n	80030ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	f043 0320 	orr.w	r3, r3, #32
 80030a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80030aa:	e006      	b.n	80030ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d1e9      	bne.n	800308e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d003      	beq.n	80030d0 <I2C_IsErrorOccurred+0xe0>
 80030c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0aa      	beq.n	8003026 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2220      	movs	r2, #32
 80030de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003110:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f043 0308 	orr.w	r3, r3, #8
 8003128:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003132:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800315c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7ff fe63 	bl	8002e30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <I2C_IsErrorOccurred+0x1bc>)
 8003176:	400b      	ands	r3, r1
 8003178:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	431a      	orrs	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800319e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3728      	adds	r7, #40	; 0x28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	fe00e800 	.word	0xfe00e800

080031b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	817b      	strh	r3, [r7, #10]
 80031be:	4613      	mov	r3, r2
 80031c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031c2:	897b      	ldrh	r3, [r7, #10]
 80031c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031c8:	7a7b      	ldrb	r3, [r7, #9]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	4313      	orrs	r3, r2
 80031da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	0d5b      	lsrs	r3, r3, #21
 80031ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <I2C_TransferConfig+0x60>)
 80031f0:	430b      	orrs	r3, r1
 80031f2:	43db      	mvns	r3, r3
 80031f4:	ea02 0103 	and.w	r1, r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	03ff63ff 	.word	0x03ff63ff

08003214 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b20      	cmp	r3, #32
 8003228:	d138      	bne.n	800329c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003234:	2302      	movs	r3, #2
 8003236:	e032      	b.n	800329e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	; 0x24
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003266:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d139      	bne.n	8003334 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e033      	b.n	8003336 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2224      	movs	r2, #36	; 0x24
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0201 	bic.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800334e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40007000 	.word	0x40007000

08003364 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	4b23      	ldr	r3, [pc, #140]	; (80033fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a22      	ldr	r2, [pc, #136]	; (80033fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_PWREx_EnableOverDrive+0x98>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_PWREx_EnableOverDrive+0x9c>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003392:	f7ff f82f 	bl	80023f4 <HAL_GetTick>
 8003396:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003398:	e009      	b.n	80033ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800339a:	f7ff f82b 	bl	80023f4 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a8:	d901      	bls.n	80033ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e022      	b.n	80033f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ba:	d1ee      	bne.n	800339a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c8:	f7ff f814 	bl	80023f4 <HAL_GetTick>
 80033cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033ce:	e009      	b.n	80033e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033d0:	f7ff f810 	bl	80023f4 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033de:	d901      	bls.n	80033e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e007      	b.n	80033f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033f0:	d1ee      	bne.n	80033d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	40007000 	.word	0x40007000

08003404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e291      	b.n	800393e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8087 	beq.w	8003536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003428:	4b96      	ldr	r3, [pc, #600]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b04      	cmp	r3, #4
 8003432:	d00c      	beq.n	800344e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003434:	4b93      	ldr	r3, [pc, #588]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d112      	bne.n	8003466 <HAL_RCC_OscConfig+0x62>
 8003440:	4b90      	ldr	r3, [pc, #576]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800344c:	d10b      	bne.n	8003466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344e:	4b8d      	ldr	r3, [pc, #564]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d06c      	beq.n	8003534 <HAL_RCC_OscConfig+0x130>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d168      	bne.n	8003534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e26b      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x7a>
 8003470:	4b84      	ldr	r3, [pc, #528]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a83      	ldr	r2, [pc, #524]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e02e      	b.n	80034dc <HAL_RCC_OscConfig+0xd8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x9c>
 8003486:	4b7f      	ldr	r3, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7e      	ldr	r2, [pc, #504]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 800348c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b7c      	ldr	r3, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a7b      	ldr	r2, [pc, #492]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0xd8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0xc0>
 80034aa:	4b76      	ldr	r3, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a75      	ldr	r2, [pc, #468]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b73      	ldr	r3, [pc, #460]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a72      	ldr	r2, [pc, #456]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0xd8>
 80034c4:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a6e      	ldr	r2, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b6c      	ldr	r3, [pc, #432]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6b      	ldr	r2, [pc, #428]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe ff86 	bl	80023f4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe ff82 	bl	80023f4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e21f      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0xe8>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe ff72 	bl	80023f4 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7fe ff6e 	bl	80023f4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e20b      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	4b57      	ldr	r3, [pc, #348]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x110>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d069      	beq.n	8003616 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003542:	4b50      	ldr	r3, [pc, #320]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354e:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x190>
 800355a:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x17a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e1df      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	493d      	ldr	r1, [pc, #244]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e040      	b.n	8003616 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d023      	beq.n	80035e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359c:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe ff24 	bl	80023f4 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fe ff20 	bl	80023f4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1bd      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c2:	4b30      	ldr	r3, [pc, #192]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4929      	ldr	r1, [pc, #164]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
 80035e2:	e018      	b.n	8003616 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a26      	ldr	r2, [pc, #152]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe ff00 	bl	80023f4 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f8:	f7fe fefc 	bl	80023f4 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e199      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d038      	beq.n	8003694 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d019      	beq.n	800365e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003636:	f7fe fedd 	bl	80023f4 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363e:	f7fe fed9 	bl	80023f4 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e176      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x23a>
 800365c:	e01a      	b.n	8003694 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <HAL_RCC_OscConfig+0x280>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fe fec3 	bl	80023f4 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003672:	f7fe febf 	bl	80023f4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d903      	bls.n	8003688 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e15c      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
 8003684:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003688:	4b91      	ldr	r3, [pc, #580]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800368a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ee      	bne.n	8003672 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80a4 	beq.w	80037ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a2:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	4b88      	ldr	r3, [pc, #544]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a87      	ldr	r2, [pc, #540]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b85      	ldr	r3, [pc, #532]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ca:	4b82      	ldr	r3, [pc, #520]	; (80038d4 <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d118      	bne.n	8003708 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036d6:	4b7f      	ldr	r3, [pc, #508]	; (80038d4 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7fe fe87 	bl	80023f4 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ea:	f7fe fe83 	bl	80023f4 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b64      	cmp	r3, #100	; 0x64
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e120      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x31a>
 8003710:	4b6f      	ldr	r3, [pc, #444]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a6e      	ldr	r2, [pc, #440]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
 800371c:	e02d      	b.n	800377a <HAL_RCC_OscConfig+0x376>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x33c>
 8003726:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a69      	ldr	r2, [pc, #420]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a66      	ldr	r2, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
 800373e:	e01c      	b.n	800377a <HAL_RCC_OscConfig+0x376>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b05      	cmp	r3, #5
 8003746:	d10c      	bne.n	8003762 <HAL_RCC_OscConfig+0x35e>
 8003748:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	6713      	str	r3, [r2, #112]	; 0x70
 8003754:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4a5d      	ldr	r2, [pc, #372]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6713      	str	r3, [r2, #112]	; 0x70
 8003760:	e00b      	b.n	800377a <HAL_RCC_OscConfig+0x376>
 8003762:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	4a5a      	ldr	r2, [pc, #360]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6713      	str	r3, [r2, #112]	; 0x70
 800376e:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a57      	ldr	r2, [pc, #348]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d015      	beq.n	80037ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003782:	f7fe fe37 	bl	80023f4 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fe fe33 	bl	80023f4 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0ce      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ee      	beq.n	800378a <HAL_RCC_OscConfig+0x386>
 80037ac:	e014      	b.n	80037d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fe fe21 	bl	80023f4 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fe fe1d 	bl	80023f4 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037cc:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ee      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d105      	bne.n	80037ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037de:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4a3b      	ldr	r2, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80a4 	beq.w	800393c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f4:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d06b      	beq.n	80038d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d149      	bne.n	800389c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003808:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a30      	ldr	r2, [pc, #192]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800380e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe fdee 	bl	80023f4 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381c:	f7fe fdea 	bl	80023f4 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e087      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	019b      	lsls	r3, r3, #6
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	3b01      	subs	r3, #1
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	4313      	orrs	r3, r2
 8003860:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003866:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800386e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe fdbe 	bl	80023f4 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fe fdba 	bl	80023f4 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e057      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x478>
 800389a:	e04f      	b.n	800393c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80038a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fe fda4 	bl	80023f4 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe fda0 	bl	80023f4 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e03d      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCC_OscConfig+0x4cc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4ac>
 80038ce:	e035      	b.n	800393c <HAL_RCC_OscConfig+0x538>
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <HAL_RCC_OscConfig+0x544>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d028      	beq.n	8003938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d121      	bne.n	8003938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d11a      	bne.n	8003938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003910:	4293      	cmp	r3, r2
 8003912:	d111      	bne.n	8003938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	3b01      	subs	r3, #1
 8003922:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d107      	bne.n	8003938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800

0800394c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0d0      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b6a      	ldr	r3, [pc, #424]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d910      	bls.n	8003994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b67      	ldr	r3, [pc, #412]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 020f 	bic.w	r2, r3, #15
 800397a:	4965      	ldr	r1, [pc, #404]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0b8      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ac:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c4:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a52      	ldr	r2, [pc, #328]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d0:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	494d      	ldr	r1, [pc, #308]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d040      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d115      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e07f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e073      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06b      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f023 0203 	bic.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4936      	ldr	r1, [pc, #216]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a40:	f7fe fcd8 	bl	80023f4 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7fe fcd4 	bl	80023f4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e053      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 020c 	and.w	r2, r3, #12
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1eb      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a70:	4b27      	ldr	r3, [pc, #156]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d210      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 020f 	bic.w	r2, r3, #15
 8003a86:	4922      	ldr	r1, [pc, #136]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e032      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4916      	ldr	r1, [pc, #88]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	490e      	ldr	r1, [pc, #56]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ade:	f000 f821 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	490a      	ldr	r1, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x1cc>)
 8003af0:	5ccb      	ldrb	r3, [r1, r3]
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x1d0>)
 8003af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1d4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fc34 	bl	800236c <HAL_InitTick>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023c00 	.word	0x40023c00
 8003b14:	40023800 	.word	0x40023800
 8003b18:	08008330 	.word	0x08008330
 8003b1c:	20000040 	.word	0x20000040
 8003b20:	20000044 	.word	0x20000044

08003b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b094      	sub	sp, #80	; 0x50
 8003b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b30:	2300      	movs	r3, #0
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b34:	2300      	movs	r3, #0
 8003b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3c:	4b79      	ldr	r3, [pc, #484]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d00d      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x40>
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	f200 80e1 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x34>
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d003      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b56:	e0db      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4b73      	ldr	r3, [pc, #460]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b5c:	e0db      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b5e:	4b73      	ldr	r3, [pc, #460]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b62:	e0d8      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b64:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7a:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	2200      	movs	r2, #0
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8e:	2300      	movs	r3, #0
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
 8003b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b96:	4622      	mov	r2, r4
 8003b98:	462b      	mov	r3, r5
 8003b9a:	f04f 0000 	mov.w	r0, #0
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	0159      	lsls	r1, r3, #5
 8003ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba8:	0150      	lsls	r0, r2, #5
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4621      	mov	r1, r4
 8003bb0:	1a51      	subs	r1, r2, r1
 8003bb2:	6139      	str	r1, [r7, #16]
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bc8:	4659      	mov	r1, fp
 8003bca:	018b      	lsls	r3, r1, #6
 8003bcc:	4651      	mov	r1, sl
 8003bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd2:	4651      	mov	r1, sl
 8003bd4:	018a      	lsls	r2, r1, #6
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bdc:	4659      	mov	r1, fp
 8003bde:	eb63 0901 	sbc.w	r9, r3, r1
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bf6:	4690      	mov	r8, r2
 8003bf8:	4699      	mov	r9, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	eb18 0303 	adds.w	r3, r8, r3
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	462b      	mov	r3, r5
 8003c04:	eb49 0303 	adc.w	r3, r9, r3
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c16:	4629      	mov	r1, r5
 8003c18:	024b      	lsls	r3, r1, #9
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c20:	4621      	mov	r1, r4
 8003c22:	024a      	lsls	r2, r1, #9
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c34:	f7fc fe7a 	bl	800092c <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c40:	e058      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	2300      	movs	r3, #0
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	f04f 0000 	mov.w	r0, #0
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	0159      	lsls	r1, r3, #5
 8003c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6e:	0150      	lsls	r0, r2, #5
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4641      	mov	r1, r8
 8003c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c94:	ebb2 040a 	subs.w	r4, r2, sl
 8003c98:	eb63 050b 	sbc.w	r5, r3, fp
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	00eb      	lsls	r3, r5, #3
 8003ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003caa:	00e2      	lsls	r2, r4, #3
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	4643      	mov	r3, r8
 8003cb2:	18e3      	adds	r3, r4, r3
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	eb45 0303 	adc.w	r3, r5, r3
 8003cbc:	607b      	str	r3, [r7, #4]
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cca:	4629      	mov	r1, r5
 8003ccc:	028b      	lsls	r3, r1, #10
 8003cce:	4621      	mov	r1, r4
 8003cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	028a      	lsls	r2, r1, #10
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	61fa      	str	r2, [r7, #28]
 8003ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce8:	f7fc fe20 	bl	800092c <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3750      	adds	r7, #80	; 0x50
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	007a1200 	.word	0x007a1200

08003d30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000040 	.word	0x20000040

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d4c:	f7ff fff0 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08008340 	.word	0x08008340

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d74:	f7ff ffdc 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0b5b      	lsrs	r3, r3, #13
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	08008340 	.word	0x08008340

08003d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d012      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dc0:	4b69      	ldr	r3, [pc, #420]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a68      	ldr	r2, [pc, #416]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dca:	6093      	str	r3, [r2, #8]
 8003dcc:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	4964      	ldr	r1, [pc, #400]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d017      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df2:	4b5d      	ldr	r3, [pc, #372]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	4959      	ldr	r1, [pc, #356]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d017      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e2e:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	494a      	ldr	r1, [pc, #296]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 808b 	beq.w	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4a39      	ldr	r2, [pc, #228]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e86:	6413      	str	r3, [r2, #64]	; 0x40
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e94:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a34      	ldr	r2, [pc, #208]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea0:	f7fe faa8 	bl	80023f4 <HAL_GetTick>
 8003ea4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea8:	f7fe faa4 	bl	80023f4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e357      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eba:	4b2c      	ldr	r3, [pc, #176]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec6:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d035      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d02e      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee4:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eee:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f06:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f0c:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d114      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fe fa6c 	bl	80023f4 <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f20:	f7fe fa68 	bl	80023f4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e319      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0ee      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f4e:	d111      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f5e:	400b      	ands	r3, r1
 8003f60:	4901      	ldr	r1, [pc, #4]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
 8003f66:	e00b      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	0ffffcff 	.word	0x0ffffcff
 8003f74:	4baa      	ldr	r3, [pc, #680]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4aa9      	ldr	r2, [pc, #676]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f7e:	6093      	str	r3, [r2, #8]
 8003f80:	4ba7      	ldr	r3, [pc, #668]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8c:	49a4      	ldr	r1, [pc, #656]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d010      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f9e:	4ba0      	ldr	r3, [pc, #640]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa4:	4a9e      	ldr	r2, [pc, #632]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003faa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fae:	4b9c      	ldr	r3, [pc, #624]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	4999      	ldr	r1, [pc, #612]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fcc:	4b94      	ldr	r3, [pc, #592]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fda:	4991      	ldr	r1, [pc, #580]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fee:	4b8c      	ldr	r3, [pc, #560]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ffc:	4988      	ldr	r1, [pc, #544]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004010:	4b83      	ldr	r3, [pc, #524]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401e:	4980      	ldr	r1, [pc, #512]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004032:	4b7b      	ldr	r3, [pc, #492]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4977      	ldr	r1, [pc, #476]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004054:	4b72      	ldr	r3, [pc, #456]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	496f      	ldr	r1, [pc, #444]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004076:	4b6a      	ldr	r3, [pc, #424]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	f023 020c 	bic.w	r2, r3, #12
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004084:	4966      	ldr	r1, [pc, #408]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004098:	4b61      	ldr	r3, [pc, #388]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	495e      	ldr	r1, [pc, #376]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040ba:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c8:	4955      	ldr	r1, [pc, #340]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040fe:	4b48      	ldr	r3, [pc, #288]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	4944      	ldr	r1, [pc, #272]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	493c      	ldr	r1, [pc, #240]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004150:	4933      	ldr	r1, [pc, #204]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004164:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004172:	492b      	ldr	r1, [pc, #172]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d011      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004194:	4922      	ldr	r1, [pc, #136]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041b6:	2301      	movs	r3, #1
 80041b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c6:	4b16      	ldr	r3, [pc, #88]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d4:	4912      	ldr	r1, [pc, #72]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00b      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041e8:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f8:	4909      	ldr	r1, [pc, #36]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d006      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80d9 	beq.w	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004214:	4b02      	ldr	r3, [pc, #8]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a01      	ldr	r2, [pc, #4]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800421e:	e001      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004220:	40023800 	.word	0x40023800
 8004224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004226:	f7fe f8e5 	bl	80023f4 <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800422e:	f7fe f8e1 	bl	80023f4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b64      	cmp	r3, #100	; 0x64
 800423a:	d901      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e194      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004240:	4b6c      	ldr	r3, [pc, #432]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d021      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425c:	2b00      	cmp	r3, #0
 800425e:	d11d      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004260:	4b64      	ldr	r3, [pc, #400]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800426e:	4b61      	ldr	r3, [pc, #388]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004274:	0e1b      	lsrs	r3, r3, #24
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	019a      	lsls	r2, r3, #6
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	431a      	orrs	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	071b      	lsls	r3, r3, #28
 8004294:	4957      	ldr	r1, [pc, #348]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d02e      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c6:	d129      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042c8:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ce:	0c1b      	lsrs	r3, r3, #16
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042dc:	0f1b      	lsrs	r3, r3, #28
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	019a      	lsls	r2, r3, #6
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	071b      	lsls	r3, r3, #28
 80042fc:	493d      	ldr	r1, [pc, #244]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004304:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800430a:	f023 021f 	bic.w	r2, r3, #31
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	3b01      	subs	r3, #1
 8004314:	4937      	ldr	r1, [pc, #220]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01d      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432e:	0e1b      	lsrs	r3, r3, #24
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004336:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433c:	0f1b      	lsrs	r3, r3, #28
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	019a      	lsls	r2, r3, #6
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	431a      	orrs	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	431a      	orrs	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	071b      	lsls	r3, r3, #28
 800435c:	4925      	ldr	r1, [pc, #148]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d011      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	019a      	lsls	r2, r3, #6
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	071b      	lsls	r3, r3, #28
 800438c:	4919      	ldr	r1, [pc, #100]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800439a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800439e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a0:	f7fe f828 	bl	80023f4 <HAL_GetTick>
 80043a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043a8:	f7fe f824 	bl	80023f4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e0d7      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	f040 80cd 	bne.w	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043da:	f7fe f80b 	bl	80023f4 <HAL_GetTick>
 80043de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043e2:	f7fe f807 	bl	80023f4 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b64      	cmp	r3, #100	; 0x64
 80043ee:	d903      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0ba      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043f8:	4b5e      	ldr	r3, [pc, #376]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004404:	d0ed      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d12a      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800442e:	4b51      	ldr	r3, [pc, #324]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800443c:	4b4d      	ldr	r3, [pc, #308]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	0f1b      	lsrs	r3, r3, #28
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	019a      	lsls	r2, r3, #6
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	041b      	lsls	r3, r3, #16
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	071b      	lsls	r3, r3, #28
 8004462:	4944      	ldr	r1, [pc, #272]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800446a:	4b42      	ldr	r3, [pc, #264]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800446c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004470:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	3b01      	subs	r3, #1
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	493d      	ldr	r1, [pc, #244]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d022      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004498:	d11d      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800449a:	4b36      	ldr	r3, [pc, #216]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	0e1b      	lsrs	r3, r3, #24
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044a8:	4b32      	ldr	r3, [pc, #200]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	0f1b      	lsrs	r3, r3, #28
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	019a      	lsls	r2, r3, #6
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	431a      	orrs	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	061b      	lsls	r3, r3, #24
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	071b      	lsls	r3, r3, #28
 80044ce:	4929      	ldr	r1, [pc, #164]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d028      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	0e1b      	lsrs	r3, r3, #24
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044f0:	4b20      	ldr	r3, [pc, #128]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	019a      	lsls	r2, r3, #6
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	431a      	orrs	r2, r3
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	071b      	lsls	r3, r3, #28
 8004516:	4917      	ldr	r1, [pc, #92]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	4911      	ldr	r1, [pc, #68]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004540:	f7fd ff58 	bl	80023f4 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004548:	f7fd ff54 	bl	80023f4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e007      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004566:	d1ef      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800

08004578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e049      	b.n	800461e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd fcee 	bl	8001f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f001 f80e 	bl	80055d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d001      	beq.n	8004640 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e04c      	b.n	80046da <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <HAL_TIM_Base_Start+0xc0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d022      	beq.n	8004698 <HAL_TIM_Base_Start+0x70>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d01d      	beq.n	8004698 <HAL_TIM_Base_Start+0x70>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <HAL_TIM_Base_Start+0xc4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d018      	beq.n	8004698 <HAL_TIM_Base_Start+0x70>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <HAL_TIM_Base_Start+0xc8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <HAL_TIM_Base_Start+0x70>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_TIM_Base_Start+0xcc>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00e      	beq.n	8004698 <HAL_TIM_Base_Start+0x70>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_TIM_Base_Start+0xd0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d009      	beq.n	8004698 <HAL_TIM_Base_Start+0x70>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <HAL_TIM_Base_Start+0xd4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d004      	beq.n	8004698 <HAL_TIM_Base_Start+0x70>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_TIM_Base_Start+0xd8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d115      	bne.n	80046c4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_TIM_Base_Start+0xdc>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b06      	cmp	r3, #6
 80046a8:	d015      	beq.n	80046d6 <HAL_TIM_Base_Start+0xae>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b0:	d011      	beq.n	80046d6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c2:	e008      	b.n	80046d6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e000      	b.n	80046d8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40000c00 	.word	0x40000c00
 80046f8:	40010400 	.word	0x40010400
 80046fc:	40014000 	.word	0x40014000
 8004700:	40001800 	.word	0x40001800
 8004704:	00010007 	.word	0x00010007

08004708 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a1a      	ldr	r2, [r3, #32]
 8004716:	f241 1311 	movw	r3, #4369	; 0x1111
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10f      	bne.n	8004740 <HAL_TIM_Base_Stop+0x38>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a1a      	ldr	r2, [r3, #32]
 8004726:	f240 4344 	movw	r3, #1092	; 0x444
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_TIM_Base_Stop+0x38>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e049      	b.n	80047fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7fd fcad 	bl	80020dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f000 ff1f 	bl	80055d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d109      	bne.n	8004828 <HAL_TIM_PWM_Start+0x24>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e03c      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d109      	bne.n	8004842 <HAL_TIM_PWM_Start+0x3e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	bf14      	ite	ne
 800483a:	2301      	movne	r3, #1
 800483c:	2300      	moveq	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	e02f      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d109      	bne.n	800485c <HAL_TIM_PWM_Start+0x58>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e022      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d109      	bne.n	8004876 <HAL_TIM_PWM_Start+0x72>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e015      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d109      	bne.n	8004890 <HAL_TIM_PWM_Start+0x8c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e008      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e092      	b.n	80049d0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Start+0xb6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b8:	e023      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d104      	bne.n	80048ca <HAL_TIM_PWM_Start+0xc6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c8:	e01b      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d104      	bne.n	80048da <HAL_TIM_PWM_Start+0xd6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d8:	e013      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b0c      	cmp	r3, #12
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0xe6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e8:	e00b      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xf6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f8:	e003      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f001 fbba 	bl	8006084 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a30      	ldr	r2, [pc, #192]	; (80049d8 <HAL_TIM_PWM_Start+0x1d4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_TIM_PWM_Start+0x120>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2f      	ldr	r2, [pc, #188]	; (80049dc <HAL_TIM_PWM_Start+0x1d8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d101      	bne.n	8004928 <HAL_TIM_PWM_Start+0x124>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_TIM_PWM_Start+0x126>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800493c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a25      	ldr	r2, [pc, #148]	; (80049d8 <HAL_TIM_PWM_Start+0x1d4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d022      	beq.n	800498e <HAL_TIM_PWM_Start+0x18a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d01d      	beq.n	800498e <HAL_TIM_PWM_Start+0x18a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <HAL_TIM_PWM_Start+0x1dc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d018      	beq.n	800498e <HAL_TIM_PWM_Start+0x18a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_TIM_PWM_Start+0x1e0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_TIM_PWM_Start+0x18a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <HAL_TIM_PWM_Start+0x1e4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIM_PWM_Start+0x18a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a19      	ldr	r2, [pc, #100]	; (80049dc <HAL_TIM_PWM_Start+0x1d8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIM_PWM_Start+0x18a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <HAL_TIM_PWM_Start+0x1e8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIM_PWM_Start+0x18a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a19      	ldr	r2, [pc, #100]	; (80049f0 <HAL_TIM_PWM_Start+0x1ec>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d115      	bne.n	80049ba <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <HAL_TIM_PWM_Start+0x1f0>)
 8004996:	4013      	ands	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b06      	cmp	r3, #6
 800499e:	d015      	beq.n	80049cc <HAL_TIM_PWM_Start+0x1c8>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a6:	d011      	beq.n	80049cc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b8:	e008      	b.n	80049cc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e000      	b.n	80049ce <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40010400 	.word	0x40010400
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40001800 	.word	0x40001800
 80049f4:	00010007 	.word	0x00010007

080049f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e049      	b.n	8004a9e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f841 	bl	8004aa6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f000 fdce 	bl	80055d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_IC_Start_IT+0x1e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	e023      	b.n	8004b22 <HAL_TIM_IC_Start_IT+0x66>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_IC_Start_IT+0x2e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e01b      	b.n	8004b22 <HAL_TIM_IC_Start_IT+0x66>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_IC_Start_IT+0x3e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	e013      	b.n	8004b22 <HAL_TIM_IC_Start_IT+0x66>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_IC_Start_IT+0x4e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e00b      	b.n	8004b22 <HAL_TIM_IC_Start_IT+0x66>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_IC_Start_IT+0x5e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e003      	b.n	8004b22 <HAL_TIM_IC_Start_IT+0x66>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d104      	bne.n	8004b34 <HAL_TIM_IC_Start_IT+0x78>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e013      	b.n	8004b5c <HAL_TIM_IC_Start_IT+0xa0>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d104      	bne.n	8004b44 <HAL_TIM_IC_Start_IT+0x88>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e00b      	b.n	8004b5c <HAL_TIM_IC_Start_IT+0xa0>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d104      	bne.n	8004b54 <HAL_TIM_IC_Start_IT+0x98>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e003      	b.n	8004b5c <HAL_TIM_IC_Start_IT+0xa0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b5e:	7bbb      	ldrb	r3, [r7, #14]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d102      	bne.n	8004b6a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b64:	7b7b      	ldrb	r3, [r7, #13]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0e2      	b.n	8004d34 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_IC_Start_IT+0xc2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b7c:	e023      	b.n	8004bc6 <HAL_TIM_IC_Start_IT+0x10a>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_IC_Start_IT+0xd2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b8c:	e01b      	b.n	8004bc6 <HAL_TIM_IC_Start_IT+0x10a>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_IC_Start_IT+0xe2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b9c:	e013      	b.n	8004bc6 <HAL_TIM_IC_Start_IT+0x10a>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b0c      	cmp	r3, #12
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_IC_Start_IT+0xf2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bac:	e00b      	b.n	8004bc6 <HAL_TIM_IC_Start_IT+0x10a>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_IC_Start_IT+0x102>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bbc:	e003      	b.n	8004bc6 <HAL_TIM_IC_Start_IT+0x10a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_IC_Start_IT+0x11a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd4:	e013      	b.n	8004bfe <HAL_TIM_IC_Start_IT+0x142>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_IC_Start_IT+0x12a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be4:	e00b      	b.n	8004bfe <HAL_TIM_IC_Start_IT+0x142>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_IC_Start_IT+0x13a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bf4:	e003      	b.n	8004bfe <HAL_TIM_IC_Start_IT+0x142>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	d841      	bhi.n	8004c88 <HAL_TIM_IC_Start_IT+0x1cc>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <HAL_TIM_IC_Start_IT+0x150>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c89 	.word	0x08004c89
 8004c14:	08004c89 	.word	0x08004c89
 8004c18:	08004c89 	.word	0x08004c89
 8004c1c:	08004c53 	.word	0x08004c53
 8004c20:	08004c89 	.word	0x08004c89
 8004c24:	08004c89 	.word	0x08004c89
 8004c28:	08004c89 	.word	0x08004c89
 8004c2c:	08004c65 	.word	0x08004c65
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c89 	.word	0x08004c89
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004c77 	.word	0x08004c77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0202 	orr.w	r2, r2, #2
 8004c4e:	60da      	str	r2, [r3, #12]
      break;
 8004c50:	e01d      	b.n	8004c8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0204 	orr.w	r2, r2, #4
 8004c60:	60da      	str	r2, [r3, #12]
      break;
 8004c62:	e014      	b.n	8004c8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0208 	orr.w	r2, r2, #8
 8004c72:	60da      	str	r2, [r3, #12]
      break;
 8004c74:	e00b      	b.n	8004c8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0210 	orr.w	r2, r2, #16
 8004c84:	60da      	str	r2, [r3, #12]
      break;
 8004c86:	e002      	b.n	8004c8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d14e      	bne.n	8004d32 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 f9f1 	bl	8006084 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <HAL_TIM_IC_Start_IT+0x280>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d022      	beq.n	8004cf2 <HAL_TIM_IC_Start_IT+0x236>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb4:	d01d      	beq.n	8004cf2 <HAL_TIM_IC_Start_IT+0x236>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <HAL_TIM_IC_Start_IT+0x284>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <HAL_TIM_IC_Start_IT+0x236>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <HAL_TIM_IC_Start_IT+0x288>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_TIM_IC_Start_IT+0x236>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <HAL_TIM_IC_Start_IT+0x28c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_TIM_IC_Start_IT+0x236>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_TIM_IC_Start_IT+0x290>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_TIM_IC_Start_IT+0x236>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <HAL_TIM_IC_Start_IT+0x294>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_TIM_IC_Start_IT+0x236>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_TIM_IC_Start_IT+0x298>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d115      	bne.n	8004d1e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <HAL_TIM_IC_Start_IT+0x29c>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d015      	beq.n	8004d30 <HAL_TIM_IC_Start_IT+0x274>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0a:	d011      	beq.n	8004d30 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1c:	e008      	b.n	8004d30 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e000      	b.n	8004d32 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800
 8004d48:	40000c00 	.word	0x40000c00
 8004d4c:	40010400 	.word	0x40010400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40001800 	.word	0x40001800
 8004d58:	00010007 	.word	0x00010007

08004d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d122      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d11b      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0202 	mvn.w	r2, #2
 8004d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc fdae 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fbf8 	bl	800559c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fbff 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0204 	mvn.w	r2, #4
 8004ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fc fd84 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fbce 	bl	800559c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fbd5 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0208 	mvn.w	r2, #8
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2204      	movs	r2, #4
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc fd5a 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fba4 	bl	800559c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fbab 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0210 	mvn.w	r2, #16
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fc fd30 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb7a 	bl	800559c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fb81 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10e      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d107      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0201 	mvn.w	r2, #1
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc fbc8 	bl	8001670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b80      	cmp	r3, #128	; 0x80
 8004eec:	d10e      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d107      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 f97a 	bl	8006200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1a:	d10e      	bne.n	8004f3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b80      	cmp	r3, #128	; 0x80
 8004f28:	d107      	bne.n	8004f3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 f96d 	bl	8006214 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d10e      	bne.n	8004f66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d107      	bne.n	8004f66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fb2f 	bl	80055c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b20      	cmp	r3, #32
 8004f72:	d10e      	bne.n	8004f92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d107      	bne.n	8004f92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f06f 0220 	mvn.w	r2, #32
 8004f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 f92d 	bl	80061ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e088      	b.n	80050ca <HAL_TIM_IC_ConfigChannel+0x130>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11b      	bne.n	8004ffe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004fd6:	f000 fe91 	bl	8005cfc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 020c 	bic.w	r2, r2, #12
 8004fe8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6999      	ldr	r1, [r3, #24]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	619a      	str	r2, [r3, #24]
 8004ffc:	e060      	b.n	80050c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b04      	cmp	r3, #4
 8005002:	d11c      	bne.n	800503e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005014:	f000 ff15 	bl	8005e42 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005026:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	021a      	lsls	r2, r3, #8
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	619a      	str	r2, [r3, #24]
 800503c:	e040      	b.n	80050c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005054:	f000 ff62 	bl	8005f1c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 020c 	bic.w	r2, r2, #12
 8005066:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69d9      	ldr	r1, [r3, #28]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	61da      	str	r2, [r3, #28]
 800507a:	e021      	b.n	80050c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b0c      	cmp	r3, #12
 8005080:	d11c      	bne.n	80050bc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005092:	f000 ff7f 	bl	8005f94 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69d9      	ldr	r1, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	021a      	lsls	r2, r3, #8
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	61da      	str	r2, [r3, #28]
 80050ba:	e001      	b.n	80050c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e0ff      	b.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b14      	cmp	r3, #20
 80050fe:	f200 80f0 	bhi.w	80052e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800515d 	.word	0x0800515d
 800510c:	080052e3 	.word	0x080052e3
 8005110:	080052e3 	.word	0x080052e3
 8005114:	080052e3 	.word	0x080052e3
 8005118:	0800519d 	.word	0x0800519d
 800511c:	080052e3 	.word	0x080052e3
 8005120:	080052e3 	.word	0x080052e3
 8005124:	080052e3 	.word	0x080052e3
 8005128:	080051df 	.word	0x080051df
 800512c:	080052e3 	.word	0x080052e3
 8005130:	080052e3 	.word	0x080052e3
 8005134:	080052e3 	.word	0x080052e3
 8005138:	0800521f 	.word	0x0800521f
 800513c:	080052e3 	.word	0x080052e3
 8005140:	080052e3 	.word	0x080052e3
 8005144:	080052e3 	.word	0x080052e3
 8005148:	08005261 	.word	0x08005261
 800514c:	080052e3 	.word	0x080052e3
 8005150:	080052e3 	.word	0x080052e3
 8005154:	080052e3 	.word	0x080052e3
 8005158:	080052a1 	.word	0x080052a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fad8 	bl	8005718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0208 	orr.w	r2, r2, #8
 8005176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0204 	bic.w	r2, r2, #4
 8005186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6999      	ldr	r1, [r3, #24]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	619a      	str	r2, [r3, #24]
      break;
 800519a:	e0a5      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fb2a 	bl	80057fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6999      	ldr	r1, [r3, #24]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	619a      	str	r2, [r3, #24]
      break;
 80051dc:	e084      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fb81 	bl	80058ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0208 	orr.w	r2, r2, #8
 80051f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0204 	bic.w	r2, r2, #4
 8005208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69d9      	ldr	r1, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	61da      	str	r2, [r3, #28]
      break;
 800521c:	e064      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fbd7 	bl	80059d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69d9      	ldr	r1, [r3, #28]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	021a      	lsls	r2, r3, #8
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	61da      	str	r2, [r3, #28]
      break;
 800525e:	e043      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fc0e 	bl	8005a88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0208 	orr.w	r2, r2, #8
 800527a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0204 	bic.w	r2, r2, #4
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800529e:	e023      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fc40 	bl	8005b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	021a      	lsls	r2, r3, #8
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052e0:	e002      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
      break;
 80052e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop

080052fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_TIM_ConfigClockSource+0x1c>
 8005314:	2302      	movs	r3, #2
 8005316:	e0b4      	b.n	8005482 <HAL_TIM_ConfigClockSource+0x186>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	4b56      	ldr	r3, [pc, #344]	; (800548c <HAL_TIM_ConfigClockSource+0x190>)
 8005334:	4013      	ands	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800533e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005350:	d03e      	beq.n	80053d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005356:	f200 8087 	bhi.w	8005468 <HAL_TIM_ConfigClockSource+0x16c>
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	f000 8086 	beq.w	800546e <HAL_TIM_ConfigClockSource+0x172>
 8005362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005366:	d87f      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b70      	cmp	r3, #112	; 0x70
 800536a:	d01a      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0xa6>
 800536c:	2b70      	cmp	r3, #112	; 0x70
 800536e:	d87b      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b60      	cmp	r3, #96	; 0x60
 8005372:	d050      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x11a>
 8005374:	2b60      	cmp	r3, #96	; 0x60
 8005376:	d877      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b50      	cmp	r3, #80	; 0x50
 800537a:	d03c      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0xfa>
 800537c:	2b50      	cmp	r3, #80	; 0x50
 800537e:	d873      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d058      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x13a>
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d86f      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b30      	cmp	r3, #48	; 0x30
 800538a:	d064      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x15a>
 800538c:	2b30      	cmp	r3, #48	; 0x30
 800538e:	d86b      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b20      	cmp	r3, #32
 8005392:	d060      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x15a>
 8005394:	2b20      	cmp	r3, #32
 8005396:	d867      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b00      	cmp	r3, #0
 800539a:	d05c      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x15a>
 800539c:	2b10      	cmp	r3, #16
 800539e:	d05a      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x15a>
 80053a0:	e062      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053b2:	f000 fe47 	bl	8006044 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	609a      	str	r2, [r3, #8]
      break;
 80053ce:	e04f      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	f000 fe30 	bl	8006044 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053f2:	609a      	str	r2, [r3, #8]
      break;
 80053f4:	e03c      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005402:	461a      	mov	r2, r3
 8005404:	f000 fcee 	bl	8005de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2150      	movs	r1, #80	; 0x50
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fdfd 	bl	800600e <TIM_ITRx_SetConfig>
      break;
 8005414:	e02c      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005422:	461a      	mov	r2, r3
 8005424:	f000 fd4a 	bl	8005ebc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2160      	movs	r1, #96	; 0x60
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fded 	bl	800600e <TIM_ITRx_SetConfig>
      break;
 8005434:	e01c      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005442:	461a      	mov	r2, r3
 8005444:	f000 fcce 	bl	8005de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2140      	movs	r1, #64	; 0x40
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fddd 	bl	800600e <TIM_ITRx_SetConfig>
      break;
 8005454:	e00c      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f000 fdd4 	bl	800600e <TIM_ITRx_SetConfig>
      break;
 8005466:	e003      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
      break;
 800546c:	e000      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800546e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	fffeff88 	.word	0xfffeff88

08005490 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e031      	b.n	800550c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb8a 	bl	8005bd4 <TIM_SlaveTimer_SetConfig>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e018      	b.n	800550c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	d831      	bhi.n	800558c <HAL_TIM_ReadCapturedValue+0x78>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <HAL_TIM_ReadCapturedValue+0x1c>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005565 	.word	0x08005565
 8005534:	0800558d 	.word	0x0800558d
 8005538:	0800558d 	.word	0x0800558d
 800553c:	0800558d 	.word	0x0800558d
 8005540:	0800556f 	.word	0x0800556f
 8005544:	0800558d 	.word	0x0800558d
 8005548:	0800558d 	.word	0x0800558d
 800554c:	0800558d 	.word	0x0800558d
 8005550:	08005579 	.word	0x08005579
 8005554:	0800558d 	.word	0x0800558d
 8005558:	0800558d 	.word	0x0800558d
 800555c:	0800558d 	.word	0x0800558d
 8005560:	08005583 	.word	0x08005583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556a:	60fb      	str	r3, [r7, #12]

      break;
 800556c:	e00f      	b.n	800558e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	60fb      	str	r3, [r7, #12]

      break;
 8005576:	e00a      	b.n	800558e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	60fb      	str	r3, [r7, #12]

      break;
 8005580:	e005      	b.n	800558e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	60fb      	str	r3, [r7, #12]

      break;
 800558a:	e000      	b.n	800558e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800558c:	bf00      	nop
  }

  return tmpreg;
 800558e:	68fb      	ldr	r3, [r7, #12]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a40      	ldr	r2, [pc, #256]	; (80056ec <TIM_Base_SetConfig+0x114>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f6:	d00f      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3d      	ldr	r2, [pc, #244]	; (80056f0 <TIM_Base_SetConfig+0x118>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00b      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3c      	ldr	r2, [pc, #240]	; (80056f4 <TIM_Base_SetConfig+0x11c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a3b      	ldr	r2, [pc, #236]	; (80056f8 <TIM_Base_SetConfig+0x120>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3a      	ldr	r2, [pc, #232]	; (80056fc <TIM_Base_SetConfig+0x124>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2f      	ldr	r2, [pc, #188]	; (80056ec <TIM_Base_SetConfig+0x114>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d02b      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d027      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2c      	ldr	r2, [pc, #176]	; (80056f0 <TIM_Base_SetConfig+0x118>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d023      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2b      	ldr	r2, [pc, #172]	; (80056f4 <TIM_Base_SetConfig+0x11c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d01f      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2a      	ldr	r2, [pc, #168]	; (80056f8 <TIM_Base_SetConfig+0x120>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01b      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a29      	ldr	r2, [pc, #164]	; (80056fc <TIM_Base_SetConfig+0x124>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d017      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a28      	ldr	r2, [pc, #160]	; (8005700 <TIM_Base_SetConfig+0x128>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a27      	ldr	r2, [pc, #156]	; (8005704 <TIM_Base_SetConfig+0x12c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00f      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a26      	ldr	r2, [pc, #152]	; (8005708 <TIM_Base_SetConfig+0x130>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00b      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a25      	ldr	r2, [pc, #148]	; (800570c <TIM_Base_SetConfig+0x134>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a24      	ldr	r2, [pc, #144]	; (8005710 <TIM_Base_SetConfig+0x138>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a23      	ldr	r2, [pc, #140]	; (8005714 <TIM_Base_SetConfig+0x13c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d108      	bne.n	800569c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a0a      	ldr	r2, [pc, #40]	; (80056ec <TIM_Base_SetConfig+0x114>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_Base_SetConfig+0xf8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a0c      	ldr	r2, [pc, #48]	; (80056fc <TIM_Base_SetConfig+0x124>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d103      	bne.n	80056d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	615a      	str	r2, [r3, #20]
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40000800 	.word	0x40000800
 80056f8:	40000c00 	.word	0x40000c00
 80056fc:	40010400 	.word	0x40010400
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800
 800570c:	40001800 	.word	0x40001800
 8005710:	40001c00 	.word	0x40001c00
 8005714:	40002000 	.word	0x40002000

08005718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4b2b      	ldr	r3, [pc, #172]	; (80057f0 <TIM_OC1_SetConfig+0xd8>)
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f023 0302 	bic.w	r3, r3, #2
 8005760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <TIM_OC1_SetConfig+0xdc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_OC1_SetConfig+0x64>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <TIM_OC1_SetConfig+0xe0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10c      	bne.n	8005796 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0308 	bic.w	r3, r3, #8
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <TIM_OC1_SetConfig+0xdc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_OC1_SetConfig+0x8e>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <TIM_OC1_SetConfig+0xe0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d111      	bne.n	80057ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	fffeff8f 	.word	0xfffeff8f
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40010400 	.word	0x40010400

080057fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f023 0210 	bic.w	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4b2e      	ldr	r3, [pc, #184]	; (80058e0 <TIM_OC2_SetConfig+0xe4>)
 8005828:	4013      	ands	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0320 	bic.w	r3, r3, #32
 8005846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a23      	ldr	r2, [pc, #140]	; (80058e4 <TIM_OC2_SetConfig+0xe8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC2_SetConfig+0x68>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a22      	ldr	r2, [pc, #136]	; (80058e8 <TIM_OC2_SetConfig+0xec>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10d      	bne.n	8005880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <TIM_OC2_SetConfig+0xe8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_OC2_SetConfig+0x94>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <TIM_OC2_SetConfig+0xec>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d113      	bne.n	80058b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800589e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	feff8fff 	.word	0xfeff8fff
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40010400 	.word	0x40010400

080058ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <TIM_OC3_SetConfig+0xe0>)
 8005918:	4013      	ands	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a22      	ldr	r2, [pc, #136]	; (80059d0 <TIM_OC3_SetConfig+0xe4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC3_SetConfig+0x66>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <TIM_OC3_SetConfig+0xe8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10d      	bne.n	800596e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800596c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <TIM_OC3_SetConfig+0xe4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d003      	beq.n	800597e <TIM_OC3_SetConfig+0x92>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <TIM_OC3_SetConfig+0xe8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d113      	bne.n	80059a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800598c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	fffeff8f 	.word	0xfffeff8f
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40010400 	.word	0x40010400

080059d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <TIM_OC4_SetConfig+0xa4>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	031b      	lsls	r3, r3, #12
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <TIM_OC4_SetConfig+0xa8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_OC4_SetConfig+0x68>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a12      	ldr	r2, [pc, #72]	; (8005a84 <TIM_OC4_SetConfig+0xac>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d109      	bne.n	8005a54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	feff8fff 	.word	0xfeff8fff
 8005a80:	40010000 	.word	0x40010000
 8005a84:	40010400 	.word	0x40010400

08005a88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <TIM_OC5_SetConfig+0x98>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a12      	ldr	r2, [pc, #72]	; (8005b24 <TIM_OC5_SetConfig+0x9c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_OC5_SetConfig+0x5e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <TIM_OC5_SetConfig+0xa0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d109      	bne.n	8005afa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	fffeff8f 	.word	0xfffeff8f
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010400 	.word	0x40010400

08005b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <TIM_OC6_SetConfig+0x9c>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	051b      	lsls	r3, r3, #20
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <TIM_OC6_SetConfig+0xa0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC6_SetConfig+0x60>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <TIM_OC6_SetConfig+0xa4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	feff8fff 	.word	0xfeff8fff
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4b3e      	ldr	r3, [pc, #248]	; (8005cf8 <TIM_SlaveTimer_SetConfig+0x124>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b70      	cmp	r3, #112	; 0x70
 8005c1c:	d01a      	beq.n	8005c54 <TIM_SlaveTimer_SetConfig+0x80>
 8005c1e:	2b70      	cmp	r3, #112	; 0x70
 8005c20:	d860      	bhi.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x110>
 8005c22:	2b60      	cmp	r3, #96	; 0x60
 8005c24:	d054      	beq.n	8005cd0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005c26:	2b60      	cmp	r3, #96	; 0x60
 8005c28:	d85c      	bhi.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x110>
 8005c2a:	2b50      	cmp	r3, #80	; 0x50
 8005c2c:	d046      	beq.n	8005cbc <TIM_SlaveTimer_SetConfig+0xe8>
 8005c2e:	2b50      	cmp	r3, #80	; 0x50
 8005c30:	d858      	bhi.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x110>
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d019      	beq.n	8005c6a <TIM_SlaveTimer_SetConfig+0x96>
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d854      	bhi.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x110>
 8005c3a:	2b30      	cmp	r3, #48	; 0x30
 8005c3c:	d055      	beq.n	8005cea <TIM_SlaveTimer_SetConfig+0x116>
 8005c3e:	2b30      	cmp	r3, #48	; 0x30
 8005c40:	d850      	bhi.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x110>
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d051      	beq.n	8005cea <TIM_SlaveTimer_SetConfig+0x116>
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d84c      	bhi.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x110>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d04d      	beq.n	8005cea <TIM_SlaveTimer_SetConfig+0x116>
 8005c4e:	2b10      	cmp	r3, #16
 8005c50:	d04b      	beq.n	8005cea <TIM_SlaveTimer_SetConfig+0x116>
 8005c52:	e047      	b.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005c64:	f000 f9ee 	bl	8006044 <TIM_ETR_SetConfig>
      break;
 8005c68:	e040      	b.n	8005cec <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b05      	cmp	r3, #5
 8005c70:	d101      	bne.n	8005c76 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e03b      	b.n	8005cee <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6a1a      	ldr	r2, [r3, #32]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0201 	bic.w	r2, r2, #1
 8005c8c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
      break;
 8005cba:	e017      	b.n	8005cec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f000 f88b 	bl	8005de4 <TIM_TI1_ConfigInputStage>
      break;
 8005cce:	e00d      	b.n	8005cec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f000 f8ed 	bl	8005ebc <TIM_TI2_ConfigInputStage>
      break;
 8005ce2:	e003      	b.n	8005cec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce8:	e000      	b.n	8005cec <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005cea:	bf00      	nop
  }

  return status;
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	fffefff8 	.word	0xfffefff8

08005cfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <TIM_TI1_SetConfig+0xcc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d01b      	beq.n	8005d62 <TIM_TI1_SetConfig+0x66>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d30:	d017      	beq.n	8005d62 <TIM_TI1_SetConfig+0x66>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <TIM_TI1_SetConfig+0xd0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <TIM_TI1_SetConfig+0x66>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <TIM_TI1_SetConfig+0xd4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00f      	beq.n	8005d62 <TIM_TI1_SetConfig+0x66>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <TIM_TI1_SetConfig+0xd8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00b      	beq.n	8005d62 <TIM_TI1_SetConfig+0x66>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <TIM_TI1_SetConfig+0xdc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d007      	beq.n	8005d62 <TIM_TI1_SetConfig+0x66>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <TIM_TI1_SetConfig+0xe0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_TI1_SetConfig+0x66>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <TIM_TI1_SetConfig+0xe4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d101      	bne.n	8005d66 <TIM_TI1_SetConfig+0x6a>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <TIM_TI1_SetConfig+0x6c>
 8005d66:	2300      	movs	r3, #0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e003      	b.n	8005d86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f023 030a 	bic.w	r3, r3, #10
 8005da0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f003 030a 	and.w	r3, r3, #10
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800
 8005dd4:	40000c00 	.word	0x40000c00
 8005dd8:	40010400 	.word	0x40010400
 8005ddc:	40014000 	.word	0x40014000
 8005de0:	40001800 	.word	0x40001800

08005de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f023 0201 	bic.w	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f023 030a 	bic.w	r3, r3, #10
 8005e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	621a      	str	r2, [r3, #32]
}
 8005e36:	bf00      	nop
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b087      	sub	sp, #28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	607a      	str	r2, [r7, #4]
 8005e4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f023 0210 	bic.w	r2, r3, #16
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	031b      	lsls	r3, r3, #12
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f023 0210 	bic.w	r2, r3, #16
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ee6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	031b      	lsls	r3, r3, #12
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	621a      	str	r2, [r3, #32]
}
 8005f10:	bf00      	nop
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 0303 	bic.w	r3, r3, #3
 8005f48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	031b      	lsls	r3, r3, #12
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	031b      	lsls	r3, r3, #12
 8005fec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	f043 0307 	orr.w	r3, r3, #7
 8006030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	609a      	str	r2, [r3, #8]
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800605e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	021a      	lsls	r2, r3, #8
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	431a      	orrs	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4313      	orrs	r3, r2
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	609a      	str	r2, [r3, #8]
}
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	2201      	movs	r2, #1
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1a      	ldr	r2, [r3, #32]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	43db      	mvns	r3, r3
 80060a6:	401a      	ands	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1a      	ldr	r2, [r3, #32]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	fa01 f303 	lsl.w	r3, r1, r3
 80060bc:	431a      	orrs	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e06d      	b.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a30      	ldr	r2, [pc, #192]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2f      	ldr	r2, [pc, #188]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d108      	bne.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a20      	ldr	r2, [pc, #128]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d022      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615a:	d01d      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1d      	ldr	r2, [pc, #116]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d018      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d013      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00e      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d009      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a16      	ldr	r2, [pc, #88]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010400 	.word	0x40010400
 80061d8:	40000400 	.word	0x40000400
 80061dc:	40000800 	.word	0x40000800
 80061e0:	40000c00 	.word	0x40000c00
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40001800 	.word	0x40001800

080061ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e040      	b.n	80062bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fb fff0 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2224      	movs	r2, #36	; 0x24
 8006254:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fbe6 	bl	8006a38 <UART_SetConfig>
 800626c:	4603      	mov	r3, r0
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e022      	b.n	80062bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fe3e 	bl	8006f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fec5 	bl	8007044 <UART_CheckIdleState>
 80062ba:	4603      	mov	r3, r0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d171      	bne.n	80063c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_UART_Transmit+0x24>
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e06a      	b.n	80063c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2221      	movs	r2, #33	; 0x21
 80062f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062fa:	f7fc f87b 	bl	80023f4 <HAL_GetTick>
 80062fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	88fa      	ldrh	r2, [r7, #6]
 8006304:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	88fa      	ldrh	r2, [r7, #6]
 800630c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006318:	d108      	bne.n	800632c <HAL_UART_Transmit+0x68>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d104      	bne.n	800632c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	e003      	b.n	8006334 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006334:	e02c      	b.n	8006390 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	2180      	movs	r1, #128	; 0x80
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 feb6 	bl	80070b2 <UART_WaitOnFlagUntilTimeout>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e038      	b.n	80063c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	3302      	adds	r3, #2
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e007      	b.n	800637e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1cc      	bne.n	8006336 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2200      	movs	r2, #0
 80063a4:	2140      	movs	r1, #64	; 0x40
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fe83 	bl	80070b2 <UART_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e005      	b.n	80063c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	e000      	b.n	80063c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80063c0:	2302      	movs	r3, #2
  }
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b08a      	sub	sp, #40	; 0x28
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	4613      	mov	r3, r2
 80063d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d132      	bne.n	8006448 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_UART_Receive_IT+0x24>
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e02b      	b.n	800644a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d018      	beq.n	8006438 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	613b      	str	r3, [r7, #16]
   return(result);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	623b      	str	r3, [r7, #32]
 8006426:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	69f9      	ldr	r1, [r7, #28]
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	61bb      	str	r3, [r7, #24]
   return(result);
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	461a      	mov	r2, r3
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fefe 	bl	8007240 <UART_Start_Receive_IT>
 8006444:	4603      	mov	r3, r0
 8006446:	e000      	b.n	800644a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006448:	2302      	movs	r3, #2
  }
}
 800644a:	4618      	mov	r0, r3
 800644c:	3728      	adds	r7, #40	; 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b0ba      	sub	sp, #232	; 0xe8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800647a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800647e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006482:	4013      	ands	r3, r2
 8006484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d115      	bne.n	80064bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00f      	beq.n	80064bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800649c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8297 	beq.w	80069e0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
      }
      return;
 80064ba:	e291      	b.n	80069e0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8117 	beq.w	80066f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064d6:	4b85      	ldr	r3, [pc, #532]	; (80066ec <HAL_UART_IRQHandler+0x298>)
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 810a 	beq.w	80066f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d011      	beq.n	8006510 <HAL_UART_IRQHandler+0xbc>
 80064ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2201      	movs	r2, #1
 80064fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006506:	f043 0201 	orr.w	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d011      	beq.n	8006540 <HAL_UART_IRQHandler+0xec>
 800651c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2202      	movs	r2, #2
 800652e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006536:	f043 0204 	orr.w	r2, r3, #4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d011      	beq.n	8006570 <HAL_UART_IRQHandler+0x11c>
 800654c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2204      	movs	r2, #4
 800655e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006566:	f043 0202 	orr.w	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d017      	beq.n	80065ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d105      	bne.n	8006594 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800658c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2208      	movs	r2, #8
 800659a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a2:	f043 0208 	orr.w	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d012      	beq.n	80065de <HAL_UART_IRQHandler+0x18a>
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00c      	beq.n	80065de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d4:	f043 0220 	orr.w	r2, r3, #32
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 81fd 	beq.w	80069e4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00d      	beq.n	8006612 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d005      	beq.n	8006636 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800662a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800662e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006632:	2b00      	cmp	r3, #0
 8006634:	d04f      	beq.n	80066d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fec8 	bl	80073cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006646:	2b40      	cmp	r3, #64	; 0x40
 8006648:	d141      	bne.n	80066ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006676:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800667a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800668e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1d9      	bne.n	800664a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669a:	2b00      	cmp	r3, #0
 800669c:	d013      	beq.n	80066c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a2:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <HAL_UART_IRQHandler+0x29c>)
 80066a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fc f853 	bl	8002756 <HAL_DMA_Abort_IT>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d017      	beq.n	80066e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	e00f      	b.n	80066e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9a0 	bl	8006a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066cc:	e00b      	b.n	80066e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f99c 	bl	8006a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d4:	e007      	b.n	80066e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f998 	bl	8006a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80066e4:	e17e      	b.n	80069e4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e6:	bf00      	nop
    return;
 80066e8:	e17c      	b.n	80069e4 <HAL_UART_IRQHandler+0x590>
 80066ea:	bf00      	nop
 80066ec:	04000120 	.word	0x04000120
 80066f0:	08007495 	.word	0x08007495

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	f040 814c 	bne.w	8006996 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8145 	beq.w	8006996 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 813e 	beq.w	8006996 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2210      	movs	r2, #16
 8006720:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	f040 80b6 	bne.w	800689e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800673e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8150 	beq.w	80069e8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800674e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006752:	429a      	cmp	r2, r3
 8006754:	f080 8148 	bcs.w	80069e8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800675e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676c:	f000 8086 	beq.w	800687c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800678c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800679a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800679e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1da      	bne.n	8006770 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e1      	bne.n	80067ba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800680c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3308      	adds	r3, #8
 8006816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800681a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800681c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e3      	bne.n	80067f6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800684a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684c:	f023 0310 	bic.w	r3, r3, #16
 8006850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800685e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006860:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800686c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e4      	bne.n	800683c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006876:	4618      	mov	r0, r3
 8006878:	f7fb fefd 	bl	8002676 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800688e:	b29b      	uxth	r3, r3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	b29b      	uxth	r3, r3
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8c2 	bl	8006a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800689c:	e0a4      	b.n	80069e8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8096 	beq.w	80069ec <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80068c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8091 	beq.w	80069ec <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068ec:	647b      	str	r3, [r7, #68]	; 0x44
 80068ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e4      	bne.n	80068ca <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3308      	adds	r3, #8
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	623b      	str	r3, [r7, #32]
   return(result);
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006924:	633a      	str	r2, [r7, #48]	; 0x30
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800692a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e3      	bne.n	8006900 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	60fb      	str	r3, [r7, #12]
   return(result);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0310 	bic.w	r3, r3, #16
 8006960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	69b9      	ldr	r1, [r7, #24]
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	617b      	str	r3, [r7, #20]
   return(result);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e4      	bne.n	800694c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f846 	bl	8006a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006994:	e02a      	b.n	80069ec <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00e      	beq.n	80069c0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01c      	beq.n	80069f0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
    }
    return;
 80069be:	e017      	b.n	80069f0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d012      	beq.n	80069f2 <HAL_UART_IRQHandler+0x59e>
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00c      	beq.n	80069f2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fd71 	bl	80074c0 <UART_EndTransmit_IT>
    return;
 80069de:	e008      	b.n	80069f2 <HAL_UART_IRQHandler+0x59e>
      return;
 80069e0:	bf00      	nop
 80069e2:	e006      	b.n	80069f2 <HAL_UART_IRQHandler+0x59e>
    return;
 80069e4:	bf00      	nop
 80069e6:	e004      	b.n	80069f2 <HAL_UART_IRQHandler+0x59e>
      return;
 80069e8:	bf00      	nop
 80069ea:	e002      	b.n	80069f2 <HAL_UART_IRQHandler+0x59e>
      return;
 80069ec:	bf00      	nop
 80069ee:	e000      	b.n	80069f2 <HAL_UART_IRQHandler+0x59e>
    return;
 80069f0:	bf00      	nop
  }

}
 80069f2:	37e8      	adds	r7, #232	; 0xe8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4ba6      	ldr	r3, [pc, #664]	; (8006cfc <UART_SetConfig+0x2c4>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	6979      	ldr	r1, [r7, #20]
 8006a6c:	430b      	orrs	r3, r1
 8006a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a94      	ldr	r2, [pc, #592]	; (8006d00 <UART_SetConfig+0x2c8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d120      	bne.n	8006af6 <UART_SetConfig+0xbe>
 8006ab4:	4b93      	ldr	r3, [pc, #588]	; (8006d04 <UART_SetConfig+0x2cc>)
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d816      	bhi.n	8006af0 <UART_SetConfig+0xb8>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <UART_SetConfig+0x90>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ae5 	.word	0x08006ae5
 8006ad0:	08006adf 	.word	0x08006adf
 8006ad4:	08006aeb 	.word	0x08006aeb
 8006ad8:	2301      	movs	r3, #1
 8006ada:	77fb      	strb	r3, [r7, #31]
 8006adc:	e150      	b.n	8006d80 <UART_SetConfig+0x348>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	77fb      	strb	r3, [r7, #31]
 8006ae2:	e14d      	b.n	8006d80 <UART_SetConfig+0x348>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	77fb      	strb	r3, [r7, #31]
 8006ae8:	e14a      	b.n	8006d80 <UART_SetConfig+0x348>
 8006aea:	2308      	movs	r3, #8
 8006aec:	77fb      	strb	r3, [r7, #31]
 8006aee:	e147      	b.n	8006d80 <UART_SetConfig+0x348>
 8006af0:	2310      	movs	r3, #16
 8006af2:	77fb      	strb	r3, [r7, #31]
 8006af4:	e144      	b.n	8006d80 <UART_SetConfig+0x348>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a83      	ldr	r2, [pc, #524]	; (8006d08 <UART_SetConfig+0x2d0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d132      	bne.n	8006b66 <UART_SetConfig+0x12e>
 8006b00:	4b80      	ldr	r3, [pc, #512]	; (8006d04 <UART_SetConfig+0x2cc>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b06:	f003 030c 	and.w	r3, r3, #12
 8006b0a:	2b0c      	cmp	r3, #12
 8006b0c:	d828      	bhi.n	8006b60 <UART_SetConfig+0x128>
 8006b0e:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <UART_SetConfig+0xdc>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b49 	.word	0x08006b49
 8006b18:	08006b61 	.word	0x08006b61
 8006b1c:	08006b61 	.word	0x08006b61
 8006b20:	08006b61 	.word	0x08006b61
 8006b24:	08006b55 	.word	0x08006b55
 8006b28:	08006b61 	.word	0x08006b61
 8006b2c:	08006b61 	.word	0x08006b61
 8006b30:	08006b61 	.word	0x08006b61
 8006b34:	08006b4f 	.word	0x08006b4f
 8006b38:	08006b61 	.word	0x08006b61
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b61 	.word	0x08006b61
 8006b44:	08006b5b 	.word	0x08006b5b
 8006b48:	2300      	movs	r3, #0
 8006b4a:	77fb      	strb	r3, [r7, #31]
 8006b4c:	e118      	b.n	8006d80 <UART_SetConfig+0x348>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	77fb      	strb	r3, [r7, #31]
 8006b52:	e115      	b.n	8006d80 <UART_SetConfig+0x348>
 8006b54:	2304      	movs	r3, #4
 8006b56:	77fb      	strb	r3, [r7, #31]
 8006b58:	e112      	b.n	8006d80 <UART_SetConfig+0x348>
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	77fb      	strb	r3, [r7, #31]
 8006b5e:	e10f      	b.n	8006d80 <UART_SetConfig+0x348>
 8006b60:	2310      	movs	r3, #16
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e10c      	b.n	8006d80 <UART_SetConfig+0x348>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a68      	ldr	r2, [pc, #416]	; (8006d0c <UART_SetConfig+0x2d4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d120      	bne.n	8006bb2 <UART_SetConfig+0x17a>
 8006b70:	4b64      	ldr	r3, [pc, #400]	; (8006d04 <UART_SetConfig+0x2cc>)
 8006b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b7a:	2b30      	cmp	r3, #48	; 0x30
 8006b7c:	d013      	beq.n	8006ba6 <UART_SetConfig+0x16e>
 8006b7e:	2b30      	cmp	r3, #48	; 0x30
 8006b80:	d814      	bhi.n	8006bac <UART_SetConfig+0x174>
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d009      	beq.n	8006b9a <UART_SetConfig+0x162>
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d810      	bhi.n	8006bac <UART_SetConfig+0x174>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <UART_SetConfig+0x15c>
 8006b8e:	2b10      	cmp	r3, #16
 8006b90:	d006      	beq.n	8006ba0 <UART_SetConfig+0x168>
 8006b92:	e00b      	b.n	8006bac <UART_SetConfig+0x174>
 8006b94:	2300      	movs	r3, #0
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e0f2      	b.n	8006d80 <UART_SetConfig+0x348>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	77fb      	strb	r3, [r7, #31]
 8006b9e:	e0ef      	b.n	8006d80 <UART_SetConfig+0x348>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e0ec      	b.n	8006d80 <UART_SetConfig+0x348>
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e0e9      	b.n	8006d80 <UART_SetConfig+0x348>
 8006bac:	2310      	movs	r3, #16
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e0e6      	b.n	8006d80 <UART_SetConfig+0x348>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a56      	ldr	r2, [pc, #344]	; (8006d10 <UART_SetConfig+0x2d8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d120      	bne.n	8006bfe <UART_SetConfig+0x1c6>
 8006bbc:	4b51      	ldr	r3, [pc, #324]	; (8006d04 <UART_SetConfig+0x2cc>)
 8006bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006bc8:	d013      	beq.n	8006bf2 <UART_SetConfig+0x1ba>
 8006bca:	2bc0      	cmp	r3, #192	; 0xc0
 8006bcc:	d814      	bhi.n	8006bf8 <UART_SetConfig+0x1c0>
 8006bce:	2b80      	cmp	r3, #128	; 0x80
 8006bd0:	d009      	beq.n	8006be6 <UART_SetConfig+0x1ae>
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d810      	bhi.n	8006bf8 <UART_SetConfig+0x1c0>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <UART_SetConfig+0x1a8>
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d006      	beq.n	8006bec <UART_SetConfig+0x1b4>
 8006bde:	e00b      	b.n	8006bf8 <UART_SetConfig+0x1c0>
 8006be0:	2300      	movs	r3, #0
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e0cc      	b.n	8006d80 <UART_SetConfig+0x348>
 8006be6:	2302      	movs	r3, #2
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e0c9      	b.n	8006d80 <UART_SetConfig+0x348>
 8006bec:	2304      	movs	r3, #4
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e0c6      	b.n	8006d80 <UART_SetConfig+0x348>
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	77fb      	strb	r3, [r7, #31]
 8006bf6:	e0c3      	b.n	8006d80 <UART_SetConfig+0x348>
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	77fb      	strb	r3, [r7, #31]
 8006bfc:	e0c0      	b.n	8006d80 <UART_SetConfig+0x348>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a44      	ldr	r2, [pc, #272]	; (8006d14 <UART_SetConfig+0x2dc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d125      	bne.n	8006c54 <UART_SetConfig+0x21c>
 8006c08:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <UART_SetConfig+0x2cc>)
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c16:	d017      	beq.n	8006c48 <UART_SetConfig+0x210>
 8006c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c1c:	d817      	bhi.n	8006c4e <UART_SetConfig+0x216>
 8006c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c22:	d00b      	beq.n	8006c3c <UART_SetConfig+0x204>
 8006c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c28:	d811      	bhi.n	8006c4e <UART_SetConfig+0x216>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <UART_SetConfig+0x1fe>
 8006c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c32:	d006      	beq.n	8006c42 <UART_SetConfig+0x20a>
 8006c34:	e00b      	b.n	8006c4e <UART_SetConfig+0x216>
 8006c36:	2300      	movs	r3, #0
 8006c38:	77fb      	strb	r3, [r7, #31]
 8006c3a:	e0a1      	b.n	8006d80 <UART_SetConfig+0x348>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	77fb      	strb	r3, [r7, #31]
 8006c40:	e09e      	b.n	8006d80 <UART_SetConfig+0x348>
 8006c42:	2304      	movs	r3, #4
 8006c44:	77fb      	strb	r3, [r7, #31]
 8006c46:	e09b      	b.n	8006d80 <UART_SetConfig+0x348>
 8006c48:	2308      	movs	r3, #8
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e098      	b.n	8006d80 <UART_SetConfig+0x348>
 8006c4e:	2310      	movs	r3, #16
 8006c50:	77fb      	strb	r3, [r7, #31]
 8006c52:	e095      	b.n	8006d80 <UART_SetConfig+0x348>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a2f      	ldr	r2, [pc, #188]	; (8006d18 <UART_SetConfig+0x2e0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d125      	bne.n	8006caa <UART_SetConfig+0x272>
 8006c5e:	4b29      	ldr	r3, [pc, #164]	; (8006d04 <UART_SetConfig+0x2cc>)
 8006c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c6c:	d017      	beq.n	8006c9e <UART_SetConfig+0x266>
 8006c6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c72:	d817      	bhi.n	8006ca4 <UART_SetConfig+0x26c>
 8006c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c78:	d00b      	beq.n	8006c92 <UART_SetConfig+0x25a>
 8006c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7e:	d811      	bhi.n	8006ca4 <UART_SetConfig+0x26c>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <UART_SetConfig+0x254>
 8006c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c88:	d006      	beq.n	8006c98 <UART_SetConfig+0x260>
 8006c8a:	e00b      	b.n	8006ca4 <UART_SetConfig+0x26c>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e076      	b.n	8006d80 <UART_SetConfig+0x348>
 8006c92:	2302      	movs	r3, #2
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e073      	b.n	8006d80 <UART_SetConfig+0x348>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e070      	b.n	8006d80 <UART_SetConfig+0x348>
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	77fb      	strb	r3, [r7, #31]
 8006ca2:	e06d      	b.n	8006d80 <UART_SetConfig+0x348>
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	77fb      	strb	r3, [r7, #31]
 8006ca8:	e06a      	b.n	8006d80 <UART_SetConfig+0x348>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1b      	ldr	r2, [pc, #108]	; (8006d1c <UART_SetConfig+0x2e4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d138      	bne.n	8006d26 <UART_SetConfig+0x2ee>
 8006cb4:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <UART_SetConfig+0x2cc>)
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cc2:	d017      	beq.n	8006cf4 <UART_SetConfig+0x2bc>
 8006cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cc8:	d82a      	bhi.n	8006d20 <UART_SetConfig+0x2e8>
 8006cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cce:	d00b      	beq.n	8006ce8 <UART_SetConfig+0x2b0>
 8006cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd4:	d824      	bhi.n	8006d20 <UART_SetConfig+0x2e8>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <UART_SetConfig+0x2aa>
 8006cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cde:	d006      	beq.n	8006cee <UART_SetConfig+0x2b6>
 8006ce0:	e01e      	b.n	8006d20 <UART_SetConfig+0x2e8>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	77fb      	strb	r3, [r7, #31]
 8006ce6:	e04b      	b.n	8006d80 <UART_SetConfig+0x348>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	77fb      	strb	r3, [r7, #31]
 8006cec:	e048      	b.n	8006d80 <UART_SetConfig+0x348>
 8006cee:	2304      	movs	r3, #4
 8006cf0:	77fb      	strb	r3, [r7, #31]
 8006cf2:	e045      	b.n	8006d80 <UART_SetConfig+0x348>
 8006cf4:	2308      	movs	r3, #8
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e042      	b.n	8006d80 <UART_SetConfig+0x348>
 8006cfa:	bf00      	nop
 8006cfc:	efff69f3 	.word	0xefff69f3
 8006d00:	40011000 	.word	0x40011000
 8006d04:	40023800 	.word	0x40023800
 8006d08:	40004400 	.word	0x40004400
 8006d0c:	40004800 	.word	0x40004800
 8006d10:	40004c00 	.word	0x40004c00
 8006d14:	40005000 	.word	0x40005000
 8006d18:	40011400 	.word	0x40011400
 8006d1c:	40007800 	.word	0x40007800
 8006d20:	2310      	movs	r3, #16
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e02c      	b.n	8006d80 <UART_SetConfig+0x348>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a72      	ldr	r2, [pc, #456]	; (8006ef4 <UART_SetConfig+0x4bc>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d125      	bne.n	8006d7c <UART_SetConfig+0x344>
 8006d30:	4b71      	ldr	r3, [pc, #452]	; (8006ef8 <UART_SetConfig+0x4c0>)
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d3e:	d017      	beq.n	8006d70 <UART_SetConfig+0x338>
 8006d40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d44:	d817      	bhi.n	8006d76 <UART_SetConfig+0x33e>
 8006d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d4a:	d00b      	beq.n	8006d64 <UART_SetConfig+0x32c>
 8006d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d50:	d811      	bhi.n	8006d76 <UART_SetConfig+0x33e>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <UART_SetConfig+0x326>
 8006d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d5a:	d006      	beq.n	8006d6a <UART_SetConfig+0x332>
 8006d5c:	e00b      	b.n	8006d76 <UART_SetConfig+0x33e>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	77fb      	strb	r3, [r7, #31]
 8006d62:	e00d      	b.n	8006d80 <UART_SetConfig+0x348>
 8006d64:	2302      	movs	r3, #2
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e00a      	b.n	8006d80 <UART_SetConfig+0x348>
 8006d6a:	2304      	movs	r3, #4
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e007      	b.n	8006d80 <UART_SetConfig+0x348>
 8006d70:	2308      	movs	r3, #8
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e004      	b.n	8006d80 <UART_SetConfig+0x348>
 8006d76:	2310      	movs	r3, #16
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e001      	b.n	8006d80 <UART_SetConfig+0x348>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d88:	d15b      	bne.n	8006e42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006d8a:	7ffb      	ldrb	r3, [r7, #31]
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d828      	bhi.n	8006de2 <UART_SetConfig+0x3aa>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0x360>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006dc5 	.word	0x08006dc5
 8006da0:	08006dcd 	.word	0x08006dcd
 8006da4:	08006de3 	.word	0x08006de3
 8006da8:	08006dd3 	.word	0x08006dd3
 8006dac:	08006de3 	.word	0x08006de3
 8006db0:	08006de3 	.word	0x08006de3
 8006db4:	08006de3 	.word	0x08006de3
 8006db8:	08006ddb 	.word	0x08006ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dbc:	f7fc ffc4 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8006dc0:	61b8      	str	r0, [r7, #24]
        break;
 8006dc2:	e013      	b.n	8006dec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dc4:	f7fc ffd4 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 8006dc8:	61b8      	str	r0, [r7, #24]
        break;
 8006dca:	e00f      	b.n	8006dec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dcc:	4b4b      	ldr	r3, [pc, #300]	; (8006efc <UART_SetConfig+0x4c4>)
 8006dce:	61bb      	str	r3, [r7, #24]
        break;
 8006dd0:	e00c      	b.n	8006dec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dd2:	f7fc fea7 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8006dd6:	61b8      	str	r0, [r7, #24]
        break;
 8006dd8:	e008      	b.n	8006dec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dde:	61bb      	str	r3, [r7, #24]
        break;
 8006de0:	e004      	b.n	8006dec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	77bb      	strb	r3, [r7, #30]
        break;
 8006dea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d074      	beq.n	8006edc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	005a      	lsls	r2, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	441a      	add	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2b0f      	cmp	r3, #15
 8006e0c:	d916      	bls.n	8006e3c <UART_SetConfig+0x404>
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e14:	d212      	bcs.n	8006e3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f023 030f 	bic.w	r3, r3, #15
 8006e1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	89fb      	ldrh	r3, [r7, #14]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	89fa      	ldrh	r2, [r7, #14]
 8006e38:	60da      	str	r2, [r3, #12]
 8006e3a:	e04f      	b.n	8006edc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	77bb      	strb	r3, [r7, #30]
 8006e40:	e04c      	b.n	8006edc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e42:	7ffb      	ldrb	r3, [r7, #31]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d828      	bhi.n	8006e9a <UART_SetConfig+0x462>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <UART_SetConfig+0x418>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e7d 	.word	0x08006e7d
 8006e58:	08006e85 	.word	0x08006e85
 8006e5c:	08006e9b 	.word	0x08006e9b
 8006e60:	08006e8b 	.word	0x08006e8b
 8006e64:	08006e9b 	.word	0x08006e9b
 8006e68:	08006e9b 	.word	0x08006e9b
 8006e6c:	08006e9b 	.word	0x08006e9b
 8006e70:	08006e93 	.word	0x08006e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e74:	f7fc ff68 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8006e78:	61b8      	str	r0, [r7, #24]
        break;
 8006e7a:	e013      	b.n	8006ea4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e7c:	f7fc ff78 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 8006e80:	61b8      	str	r0, [r7, #24]
        break;
 8006e82:	e00f      	b.n	8006ea4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e84:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <UART_SetConfig+0x4c4>)
 8006e86:	61bb      	str	r3, [r7, #24]
        break;
 8006e88:	e00c      	b.n	8006ea4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8a:	f7fc fe4b 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8006e8e:	61b8      	str	r0, [r7, #24]
        break;
 8006e90:	e008      	b.n	8006ea4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e96:	61bb      	str	r3, [r7, #24]
        break;
 8006e98:	e004      	b.n	8006ea4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	77bb      	strb	r3, [r7, #30]
        break;
 8006ea2:	bf00      	nop
    }

    if (pclk != 0U)
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d018      	beq.n	8006edc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	085a      	lsrs	r2, r3, #1
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	441a      	add	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b0f      	cmp	r3, #15
 8006ec2:	d909      	bls.n	8006ed8 <UART_SetConfig+0x4a0>
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eca:	d205      	bcs.n	8006ed8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60da      	str	r2, [r3, #12]
 8006ed6:	e001      	b.n	8006edc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ee8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3720      	adds	r7, #32
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40007c00 	.word	0x40007c00
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	00f42400 	.word	0x00f42400

08006f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01a      	beq.n	8007016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffe:	d10a      	bne.n	8007016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af02      	add	r7, sp, #8
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007054:	f7fb f9ce 	bl	80023f4 <HAL_GetTick>
 8007058:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b08      	cmp	r3, #8
 8007066:	d10e      	bne.n	8007086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f81b 	bl	80070b2 <UART_WaitOnFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e011      	b.n	80070aa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b09c      	sub	sp, #112	; 0x70
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	603b      	str	r3, [r7, #0]
 80070be:	4613      	mov	r3, r2
 80070c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c2:	e0a7      	b.n	8007214 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ca:	f000 80a3 	beq.w	8007214 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ce:	f7fb f991 	bl	80023f4 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070da:	429a      	cmp	r2, r3
 80070dc:	d302      	bcc.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80070de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d13f      	bne.n	8007164 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070f8:	667b      	str	r3, [r7, #100]	; 0x64
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007104:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007108:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e6      	bne.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3308      	adds	r3, #8
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	663b      	str	r3, [r7, #96]	; 0x60
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007136:	64ba      	str	r2, [r7, #72]	; 0x48
 8007138:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800713c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e5      	bne.n	8007116 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e068      	b.n	8007236 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b00      	cmp	r3, #0
 8007170:	d050      	beq.n	8007214 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800717c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007180:	d148      	bne.n	8007214 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800718a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
 80071ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e6      	bne.n	800718c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	613b      	str	r3, [r7, #16]
   return(result);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f023 0301 	bic.w	r3, r3, #1
 80071d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071de:	623a      	str	r2, [r7, #32]
 80071e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	69f9      	ldr	r1, [r7, #28]
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e5      	bne.n	80071be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2220      	movs	r2, #32
 80071f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e010      	b.n	8007236 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69da      	ldr	r2, [r3, #28]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4013      	ands	r3, r2
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	429a      	cmp	r2, r3
 8007222:	bf0c      	ite	eq
 8007224:	2301      	moveq	r3, #1
 8007226:	2300      	movne	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	429a      	cmp	r2, r3
 8007230:	f43f af48 	beq.w	80070c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3770      	adds	r7, #112	; 0x70
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007240:	b480      	push	{r7}
 8007242:	b097      	sub	sp, #92	; 0x5c
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007272:	d10e      	bne.n	8007292 <UART_Start_Receive_IT+0x52>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d105      	bne.n	8007288 <UART_Start_Receive_IT+0x48>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007282:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007286:	e02d      	b.n	80072e4 <UART_Start_Receive_IT+0xa4>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	22ff      	movs	r2, #255	; 0xff
 800728c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007290:	e028      	b.n	80072e4 <UART_Start_Receive_IT+0xa4>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10d      	bne.n	80072b6 <UART_Start_Receive_IT+0x76>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d104      	bne.n	80072ac <UART_Start_Receive_IT+0x6c>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	22ff      	movs	r2, #255	; 0xff
 80072a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072aa:	e01b      	b.n	80072e4 <UART_Start_Receive_IT+0xa4>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	227f      	movs	r2, #127	; 0x7f
 80072b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072b4:	e016      	b.n	80072e4 <UART_Start_Receive_IT+0xa4>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072be:	d10d      	bne.n	80072dc <UART_Start_Receive_IT+0x9c>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <UART_Start_Receive_IT+0x92>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	227f      	movs	r2, #127	; 0x7f
 80072cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072d0:	e008      	b.n	80072e4 <UART_Start_Receive_IT+0xa4>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	223f      	movs	r2, #63	; 0x3f
 80072d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072da:	e003      	b.n	80072e4 <UART_Start_Receive_IT+0xa4>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2222      	movs	r2, #34	; 0x22
 80072f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	f043 0301 	orr.w	r3, r3, #1
 800730a:	657b      	str	r3, [r7, #84]	; 0x54
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3308      	adds	r3, #8
 8007312:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007314:	64ba      	str	r2, [r7, #72]	; 0x48
 8007316:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007318:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800731a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1e5      	bne.n	80072f4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007330:	d107      	bne.n	8007342 <UART_Start_Receive_IT+0x102>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d103      	bne.n	8007342 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4a21      	ldr	r2, [pc, #132]	; (80073c4 <UART_Start_Receive_IT+0x184>)
 800733e:	669a      	str	r2, [r3, #104]	; 0x68
 8007340:	e002      	b.n	8007348 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a20      	ldr	r2, [pc, #128]	; (80073c8 <UART_Start_Receive_IT+0x188>)
 8007346:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d019      	beq.n	8007384 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
 8007370:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e6      	bne.n	8007350 <UART_Start_Receive_IT+0x110>
 8007382:	e018      	b.n	80073b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	613b      	str	r3, [r7, #16]
   return(result);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f043 0320 	orr.w	r3, r3, #32
 8007398:	653b      	str	r3, [r7, #80]	; 0x50
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a2:	623b      	str	r3, [r7, #32]
 80073a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	69f9      	ldr	r1, [r7, #28]
 80073a8:	6a3a      	ldr	r2, [r7, #32]
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e6      	bne.n	8007384 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	375c      	adds	r7, #92	; 0x5c
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	0800767b 	.word	0x0800767b
 80073c8:	08007515 	.word	0x08007515

080073cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b095      	sub	sp, #84	; 0x54
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f2:	643b      	str	r3, [r7, #64]	; 0x40
 80073f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e6      	bne.n	80073d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3308      	adds	r3, #8
 800740c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	61fb      	str	r3, [r7, #28]
   return(result);
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f023 0301 	bic.w	r3, r3, #1
 800741c:	64bb      	str	r3, [r7, #72]	; 0x48
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800742c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e5      	bne.n	8007406 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800743e:	2b01      	cmp	r3, #1
 8007440:	d118      	bne.n	8007474 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f023 0310 	bic.w	r3, r3, #16
 8007456:	647b      	str	r3, [r7, #68]	; 0x44
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6979      	ldr	r1, [r7, #20]
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	613b      	str	r3, [r7, #16]
   return(result);
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e6      	bne.n	8007442 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007488:	bf00      	nop
 800748a:	3754      	adds	r7, #84	; 0x54
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff faaa 	bl	8006a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	e853 3f00 	ldrex	r3, [r3]
 80074d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074dc:	61fb      	str	r3, [r7, #28]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	61bb      	str	r3, [r7, #24]
 80074e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	6979      	ldr	r1, [r7, #20]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	613b      	str	r3, [r7, #16]
   return(result);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1e6      	bne.n	80074c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2220      	movs	r2, #32
 80074fe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fa76 	bl	80069f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800750c:	bf00      	nop
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b096      	sub	sp, #88	; 0x58
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007522:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800752c:	2b22      	cmp	r3, #34	; 0x22
 800752e:	f040 8098 	bne.w	8007662 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800753c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007540:	b2d9      	uxtb	r1, r3
 8007542:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007546:	b2da      	uxtb	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754c:	400a      	ands	r2, r1
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d17b      	bne.n	8007672 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800758e:	653b      	str	r3, [r7, #80]	; 0x50
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007598:	647b      	str	r3, [r7, #68]	; 0x44
 800759a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800759e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e6      	bne.n	800757a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3308      	adds	r3, #8
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	623b      	str	r3, [r7, #32]
   return(result);
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075cc:	633a      	str	r2, [r7, #48]	; 0x30
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e5      	bne.n	80075ac <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d12e      	bne.n	800765a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0310 	bic.w	r3, r3, #16
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	617b      	str	r3, [r7, #20]
   return(result);
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e6      	bne.n	8007602 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b10      	cmp	r3, #16
 8007640:	d103      	bne.n	800764a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2210      	movs	r2, #16
 8007648:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff f9e4 	bl	8006a20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007658:	e00b      	b.n	8007672 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fa f812 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 8007660:	e007      	b.n	8007672 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0208 	orr.w	r2, r2, #8
 8007670:	619a      	str	r2, [r3, #24]
}
 8007672:	bf00      	nop
 8007674:	3758      	adds	r7, #88	; 0x58
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b096      	sub	sp, #88	; 0x58
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007688:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007692:	2b22      	cmp	r3, #34	; 0x22
 8007694:	f040 8098 	bne.w	80077c8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80076a8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80076ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076b0:	4013      	ands	r3, r2
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076bc:	1c9a      	adds	r2, r3, #2
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d17b      	bne.n	80077d8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007700:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007704:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e6      	bne.n	80076e0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	61fb      	str	r3, [r7, #28]
   return(result);
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f023 0301 	bic.w	r3, r3, #1
 8007728:	64bb      	str	r3, [r7, #72]	; 0x48
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007732:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007734:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775e:	2b01      	cmp	r3, #1
 8007760:	d12e      	bne.n	80077c0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	60bb      	str	r3, [r7, #8]
   return(result);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f023 0310 	bic.w	r3, r3, #16
 800777c:	647b      	str	r3, [r7, #68]	; 0x44
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6979      	ldr	r1, [r7, #20]
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	613b      	str	r3, [r7, #16]
   return(result);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2b10      	cmp	r3, #16
 80077a6:	d103      	bne.n	80077b0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2210      	movs	r2, #16
 80077ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff f931 	bl	8006a20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077be:	e00b      	b.n	80077d8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7f9 ff5f 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 80077c6:	e007      	b.n	80077d8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0208 	orr.w	r2, r2, #8
 80077d6:	619a      	str	r2, [r3, #24]
}
 80077d8:	bf00      	nop
 80077da:	3758      	adds	r7, #88	; 0x58
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <_strtol_l.constprop.0>:
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e6:	d001      	beq.n	80077ec <_strtol_l.constprop.0+0xc>
 80077e8:	2b24      	cmp	r3, #36	; 0x24
 80077ea:	d906      	bls.n	80077fa <_strtol_l.constprop.0+0x1a>
 80077ec:	f000 f8ac 	bl	8007948 <__errno>
 80077f0:	2316      	movs	r3, #22
 80077f2:	6003      	str	r3, [r0, #0]
 80077f4:	2000      	movs	r0, #0
 80077f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80078e0 <_strtol_l.constprop.0+0x100>
 80077fe:	460d      	mov	r5, r1
 8007800:	462e      	mov	r6, r5
 8007802:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007806:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800780a:	f017 0708 	ands.w	r7, r7, #8
 800780e:	d1f7      	bne.n	8007800 <_strtol_l.constprop.0+0x20>
 8007810:	2c2d      	cmp	r4, #45	; 0x2d
 8007812:	d132      	bne.n	800787a <_strtol_l.constprop.0+0x9a>
 8007814:	782c      	ldrb	r4, [r5, #0]
 8007816:	2701      	movs	r7, #1
 8007818:	1cb5      	adds	r5, r6, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d05b      	beq.n	80078d6 <_strtol_l.constprop.0+0xf6>
 800781e:	2b10      	cmp	r3, #16
 8007820:	d109      	bne.n	8007836 <_strtol_l.constprop.0+0x56>
 8007822:	2c30      	cmp	r4, #48	; 0x30
 8007824:	d107      	bne.n	8007836 <_strtol_l.constprop.0+0x56>
 8007826:	782c      	ldrb	r4, [r5, #0]
 8007828:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800782c:	2c58      	cmp	r4, #88	; 0x58
 800782e:	d14d      	bne.n	80078cc <_strtol_l.constprop.0+0xec>
 8007830:	786c      	ldrb	r4, [r5, #1]
 8007832:	2310      	movs	r3, #16
 8007834:	3502      	adds	r5, #2
 8007836:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800783a:	f108 38ff 	add.w	r8, r8, #4294967295
 800783e:	f04f 0e00 	mov.w	lr, #0
 8007842:	fbb8 f9f3 	udiv	r9, r8, r3
 8007846:	4676      	mov	r6, lr
 8007848:	fb03 8a19 	mls	sl, r3, r9, r8
 800784c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007850:	f1bc 0f09 	cmp.w	ip, #9
 8007854:	d816      	bhi.n	8007884 <_strtol_l.constprop.0+0xa4>
 8007856:	4664      	mov	r4, ip
 8007858:	42a3      	cmp	r3, r4
 800785a:	dd24      	ble.n	80078a6 <_strtol_l.constprop.0+0xc6>
 800785c:	f1be 3fff 	cmp.w	lr, #4294967295
 8007860:	d008      	beq.n	8007874 <_strtol_l.constprop.0+0x94>
 8007862:	45b1      	cmp	r9, r6
 8007864:	d31c      	bcc.n	80078a0 <_strtol_l.constprop.0+0xc0>
 8007866:	d101      	bne.n	800786c <_strtol_l.constprop.0+0x8c>
 8007868:	45a2      	cmp	sl, r4
 800786a:	db19      	blt.n	80078a0 <_strtol_l.constprop.0+0xc0>
 800786c:	fb06 4603 	mla	r6, r6, r3, r4
 8007870:	f04f 0e01 	mov.w	lr, #1
 8007874:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007878:	e7e8      	b.n	800784c <_strtol_l.constprop.0+0x6c>
 800787a:	2c2b      	cmp	r4, #43	; 0x2b
 800787c:	bf04      	itt	eq
 800787e:	782c      	ldrbeq	r4, [r5, #0]
 8007880:	1cb5      	addeq	r5, r6, #2
 8007882:	e7ca      	b.n	800781a <_strtol_l.constprop.0+0x3a>
 8007884:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007888:	f1bc 0f19 	cmp.w	ip, #25
 800788c:	d801      	bhi.n	8007892 <_strtol_l.constprop.0+0xb2>
 800788e:	3c37      	subs	r4, #55	; 0x37
 8007890:	e7e2      	b.n	8007858 <_strtol_l.constprop.0+0x78>
 8007892:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007896:	f1bc 0f19 	cmp.w	ip, #25
 800789a:	d804      	bhi.n	80078a6 <_strtol_l.constprop.0+0xc6>
 800789c:	3c57      	subs	r4, #87	; 0x57
 800789e:	e7db      	b.n	8007858 <_strtol_l.constprop.0+0x78>
 80078a0:	f04f 3eff 	mov.w	lr, #4294967295
 80078a4:	e7e6      	b.n	8007874 <_strtol_l.constprop.0+0x94>
 80078a6:	f1be 3fff 	cmp.w	lr, #4294967295
 80078aa:	d105      	bne.n	80078b8 <_strtol_l.constprop.0+0xd8>
 80078ac:	2322      	movs	r3, #34	; 0x22
 80078ae:	6003      	str	r3, [r0, #0]
 80078b0:	4646      	mov	r6, r8
 80078b2:	b942      	cbnz	r2, 80078c6 <_strtol_l.constprop.0+0xe6>
 80078b4:	4630      	mov	r0, r6
 80078b6:	e79e      	b.n	80077f6 <_strtol_l.constprop.0+0x16>
 80078b8:	b107      	cbz	r7, 80078bc <_strtol_l.constprop.0+0xdc>
 80078ba:	4276      	negs	r6, r6
 80078bc:	2a00      	cmp	r2, #0
 80078be:	d0f9      	beq.n	80078b4 <_strtol_l.constprop.0+0xd4>
 80078c0:	f1be 0f00 	cmp.w	lr, #0
 80078c4:	d000      	beq.n	80078c8 <_strtol_l.constprop.0+0xe8>
 80078c6:	1e69      	subs	r1, r5, #1
 80078c8:	6011      	str	r1, [r2, #0]
 80078ca:	e7f3      	b.n	80078b4 <_strtol_l.constprop.0+0xd4>
 80078cc:	2430      	movs	r4, #48	; 0x30
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1b1      	bne.n	8007836 <_strtol_l.constprop.0+0x56>
 80078d2:	2308      	movs	r3, #8
 80078d4:	e7af      	b.n	8007836 <_strtol_l.constprop.0+0x56>
 80078d6:	2c30      	cmp	r4, #48	; 0x30
 80078d8:	d0a5      	beq.n	8007826 <_strtol_l.constprop.0+0x46>
 80078da:	230a      	movs	r3, #10
 80078dc:	e7ab      	b.n	8007836 <_strtol_l.constprop.0+0x56>
 80078de:	bf00      	nop
 80078e0:	08008349 	.word	0x08008349

080078e4 <strtol>:
 80078e4:	4613      	mov	r3, r2
 80078e6:	460a      	mov	r2, r1
 80078e8:	4601      	mov	r1, r0
 80078ea:	4802      	ldr	r0, [pc, #8]	; (80078f4 <strtol+0x10>)
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f7ff bf77 	b.w	80077e0 <_strtol_l.constprop.0>
 80078f2:	bf00      	nop
 80078f4:	20000098 	.word	0x20000098

080078f8 <siprintf>:
 80078f8:	b40e      	push	{r1, r2, r3}
 80078fa:	b500      	push	{lr}
 80078fc:	b09c      	sub	sp, #112	; 0x70
 80078fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007900:	9002      	str	r0, [sp, #8]
 8007902:	9006      	str	r0, [sp, #24]
 8007904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007908:	4809      	ldr	r0, [pc, #36]	; (8007930 <siprintf+0x38>)
 800790a:	9107      	str	r1, [sp, #28]
 800790c:	9104      	str	r1, [sp, #16]
 800790e:	4909      	ldr	r1, [pc, #36]	; (8007934 <siprintf+0x3c>)
 8007910:	f853 2b04 	ldr.w	r2, [r3], #4
 8007914:	9105      	str	r1, [sp, #20]
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	a902      	add	r1, sp, #8
 800791c:	f000 f9a0 	bl	8007c60 <_svfiprintf_r>
 8007920:	9b02      	ldr	r3, [sp, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	b01c      	add	sp, #112	; 0x70
 8007928:	f85d eb04 	ldr.w	lr, [sp], #4
 800792c:	b003      	add	sp, #12
 800792e:	4770      	bx	lr
 8007930:	20000098 	.word	0x20000098
 8007934:	ffff0208 	.word	0xffff0208

08007938 <memset>:
 8007938:	4402      	add	r2, r0
 800793a:	4603      	mov	r3, r0
 800793c:	4293      	cmp	r3, r2
 800793e:	d100      	bne.n	8007942 <memset+0xa>
 8007940:	4770      	bx	lr
 8007942:	f803 1b01 	strb.w	r1, [r3], #1
 8007946:	e7f9      	b.n	800793c <memset+0x4>

08007948 <__errno>:
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <__errno+0x8>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000098 	.word	0x20000098

08007954 <__libc_init_array>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4d0d      	ldr	r5, [pc, #52]	; (800798c <__libc_init_array+0x38>)
 8007958:	4c0d      	ldr	r4, [pc, #52]	; (8007990 <__libc_init_array+0x3c>)
 800795a:	1b64      	subs	r4, r4, r5
 800795c:	10a4      	asrs	r4, r4, #2
 800795e:	2600      	movs	r6, #0
 8007960:	42a6      	cmp	r6, r4
 8007962:	d109      	bne.n	8007978 <__libc_init_array+0x24>
 8007964:	4d0b      	ldr	r5, [pc, #44]	; (8007994 <__libc_init_array+0x40>)
 8007966:	4c0c      	ldr	r4, [pc, #48]	; (8007998 <__libc_init_array+0x44>)
 8007968:	f000 fcbc 	bl	80082e4 <_init>
 800796c:	1b64      	subs	r4, r4, r5
 800796e:	10a4      	asrs	r4, r4, #2
 8007970:	2600      	movs	r6, #0
 8007972:	42a6      	cmp	r6, r4
 8007974:	d105      	bne.n	8007982 <__libc_init_array+0x2e>
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	f855 3b04 	ldr.w	r3, [r5], #4
 800797c:	4798      	blx	r3
 800797e:	3601      	adds	r6, #1
 8007980:	e7ee      	b.n	8007960 <__libc_init_array+0xc>
 8007982:	f855 3b04 	ldr.w	r3, [r5], #4
 8007986:	4798      	blx	r3
 8007988:	3601      	adds	r6, #1
 800798a:	e7f2      	b.n	8007972 <__libc_init_array+0x1e>
 800798c:	08008484 	.word	0x08008484
 8007990:	08008484 	.word	0x08008484
 8007994:	08008484 	.word	0x08008484
 8007998:	08008488 	.word	0x08008488

0800799c <__retarget_lock_acquire_recursive>:
 800799c:	4770      	bx	lr

0800799e <__retarget_lock_release_recursive>:
 800799e:	4770      	bx	lr

080079a0 <memcpy>:
 80079a0:	440a      	add	r2, r1
 80079a2:	4291      	cmp	r1, r2
 80079a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80079a8:	d100      	bne.n	80079ac <memcpy+0xc>
 80079aa:	4770      	bx	lr
 80079ac:	b510      	push	{r4, lr}
 80079ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079b6:	4291      	cmp	r1, r2
 80079b8:	d1f9      	bne.n	80079ae <memcpy+0xe>
 80079ba:	bd10      	pop	{r4, pc}

080079bc <_free_r>:
 80079bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079be:	2900      	cmp	r1, #0
 80079c0:	d044      	beq.n	8007a4c <_free_r+0x90>
 80079c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c6:	9001      	str	r0, [sp, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f1a1 0404 	sub.w	r4, r1, #4
 80079ce:	bfb8      	it	lt
 80079d0:	18e4      	addlt	r4, r4, r3
 80079d2:	f000 f8df 	bl	8007b94 <__malloc_lock>
 80079d6:	4a1e      	ldr	r2, [pc, #120]	; (8007a50 <_free_r+0x94>)
 80079d8:	9801      	ldr	r0, [sp, #4]
 80079da:	6813      	ldr	r3, [r2, #0]
 80079dc:	b933      	cbnz	r3, 80079ec <_free_r+0x30>
 80079de:	6063      	str	r3, [r4, #4]
 80079e0:	6014      	str	r4, [r2, #0]
 80079e2:	b003      	add	sp, #12
 80079e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079e8:	f000 b8da 	b.w	8007ba0 <__malloc_unlock>
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	d908      	bls.n	8007a02 <_free_r+0x46>
 80079f0:	6825      	ldr	r5, [r4, #0]
 80079f2:	1961      	adds	r1, r4, r5
 80079f4:	428b      	cmp	r3, r1
 80079f6:	bf01      	itttt	eq
 80079f8:	6819      	ldreq	r1, [r3, #0]
 80079fa:	685b      	ldreq	r3, [r3, #4]
 80079fc:	1949      	addeq	r1, r1, r5
 80079fe:	6021      	streq	r1, [r4, #0]
 8007a00:	e7ed      	b.n	80079de <_free_r+0x22>
 8007a02:	461a      	mov	r2, r3
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	b10b      	cbz	r3, 8007a0c <_free_r+0x50>
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	d9fa      	bls.n	8007a02 <_free_r+0x46>
 8007a0c:	6811      	ldr	r1, [r2, #0]
 8007a0e:	1855      	adds	r5, r2, r1
 8007a10:	42a5      	cmp	r5, r4
 8007a12:	d10b      	bne.n	8007a2c <_free_r+0x70>
 8007a14:	6824      	ldr	r4, [r4, #0]
 8007a16:	4421      	add	r1, r4
 8007a18:	1854      	adds	r4, r2, r1
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	6011      	str	r1, [r2, #0]
 8007a1e:	d1e0      	bne.n	80079e2 <_free_r+0x26>
 8007a20:	681c      	ldr	r4, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	6053      	str	r3, [r2, #4]
 8007a26:	440c      	add	r4, r1
 8007a28:	6014      	str	r4, [r2, #0]
 8007a2a:	e7da      	b.n	80079e2 <_free_r+0x26>
 8007a2c:	d902      	bls.n	8007a34 <_free_r+0x78>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	6003      	str	r3, [r0, #0]
 8007a32:	e7d6      	b.n	80079e2 <_free_r+0x26>
 8007a34:	6825      	ldr	r5, [r4, #0]
 8007a36:	1961      	adds	r1, r4, r5
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	bf04      	itt	eq
 8007a3c:	6819      	ldreq	r1, [r3, #0]
 8007a3e:	685b      	ldreq	r3, [r3, #4]
 8007a40:	6063      	str	r3, [r4, #4]
 8007a42:	bf04      	itt	eq
 8007a44:	1949      	addeq	r1, r1, r5
 8007a46:	6021      	streq	r1, [r4, #0]
 8007a48:	6054      	str	r4, [r2, #4]
 8007a4a:	e7ca      	b.n	80079e2 <_free_r+0x26>
 8007a4c:	b003      	add	sp, #12
 8007a4e:	bd30      	pop	{r4, r5, pc}
 8007a50:	200004b0 	.word	0x200004b0

08007a54 <sbrk_aligned>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4e0e      	ldr	r6, [pc, #56]	; (8007a90 <sbrk_aligned+0x3c>)
 8007a58:	460c      	mov	r4, r1
 8007a5a:	6831      	ldr	r1, [r6, #0]
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	b911      	cbnz	r1, 8007a66 <sbrk_aligned+0x12>
 8007a60:	f000 fba6 	bl	80081b0 <_sbrk_r>
 8007a64:	6030      	str	r0, [r6, #0]
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 fba1 	bl	80081b0 <_sbrk_r>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d00a      	beq.n	8007a88 <sbrk_aligned+0x34>
 8007a72:	1cc4      	adds	r4, r0, #3
 8007a74:	f024 0403 	bic.w	r4, r4, #3
 8007a78:	42a0      	cmp	r0, r4
 8007a7a:	d007      	beq.n	8007a8c <sbrk_aligned+0x38>
 8007a7c:	1a21      	subs	r1, r4, r0
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 fb96 	bl	80081b0 <_sbrk_r>
 8007a84:	3001      	adds	r0, #1
 8007a86:	d101      	bne.n	8007a8c <sbrk_aligned+0x38>
 8007a88:	f04f 34ff 	mov.w	r4, #4294967295
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	200004b4 	.word	0x200004b4

08007a94 <_malloc_r>:
 8007a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a98:	1ccd      	adds	r5, r1, #3
 8007a9a:	f025 0503 	bic.w	r5, r5, #3
 8007a9e:	3508      	adds	r5, #8
 8007aa0:	2d0c      	cmp	r5, #12
 8007aa2:	bf38      	it	cc
 8007aa4:	250c      	movcc	r5, #12
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	db01      	blt.n	8007ab0 <_malloc_r+0x1c>
 8007aac:	42a9      	cmp	r1, r5
 8007aae:	d905      	bls.n	8007abc <_malloc_r+0x28>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007abc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b90 <_malloc_r+0xfc>
 8007ac0:	f000 f868 	bl	8007b94 <__malloc_lock>
 8007ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac8:	461c      	mov	r4, r3
 8007aca:	bb5c      	cbnz	r4, 8007b24 <_malloc_r+0x90>
 8007acc:	4629      	mov	r1, r5
 8007ace:	4638      	mov	r0, r7
 8007ad0:	f7ff ffc0 	bl	8007a54 <sbrk_aligned>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	d155      	bne.n	8007b86 <_malloc_r+0xf2>
 8007ada:	f8d8 4000 	ldr.w	r4, [r8]
 8007ade:	4626      	mov	r6, r4
 8007ae0:	2e00      	cmp	r6, #0
 8007ae2:	d145      	bne.n	8007b70 <_malloc_r+0xdc>
 8007ae4:	2c00      	cmp	r4, #0
 8007ae6:	d048      	beq.n	8007b7a <_malloc_r+0xe6>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	4631      	mov	r1, r6
 8007aec:	4638      	mov	r0, r7
 8007aee:	eb04 0903 	add.w	r9, r4, r3
 8007af2:	f000 fb5d 	bl	80081b0 <_sbrk_r>
 8007af6:	4581      	cmp	r9, r0
 8007af8:	d13f      	bne.n	8007b7a <_malloc_r+0xe6>
 8007afa:	6821      	ldr	r1, [r4, #0]
 8007afc:	1a6d      	subs	r5, r5, r1
 8007afe:	4629      	mov	r1, r5
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff ffa7 	bl	8007a54 <sbrk_aligned>
 8007b06:	3001      	adds	r0, #1
 8007b08:	d037      	beq.n	8007b7a <_malloc_r+0xe6>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	442b      	add	r3, r5
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	f8d8 3000 	ldr.w	r3, [r8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d038      	beq.n	8007b8a <_malloc_r+0xf6>
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	42a2      	cmp	r2, r4
 8007b1c:	d12b      	bne.n	8007b76 <_malloc_r+0xe2>
 8007b1e:	2200      	movs	r2, #0
 8007b20:	605a      	str	r2, [r3, #4]
 8007b22:	e00f      	b.n	8007b44 <_malloc_r+0xb0>
 8007b24:	6822      	ldr	r2, [r4, #0]
 8007b26:	1b52      	subs	r2, r2, r5
 8007b28:	d41f      	bmi.n	8007b6a <_malloc_r+0xd6>
 8007b2a:	2a0b      	cmp	r2, #11
 8007b2c:	d917      	bls.n	8007b5e <_malloc_r+0xca>
 8007b2e:	1961      	adds	r1, r4, r5
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	6025      	str	r5, [r4, #0]
 8007b34:	bf18      	it	ne
 8007b36:	6059      	strne	r1, [r3, #4]
 8007b38:	6863      	ldr	r3, [r4, #4]
 8007b3a:	bf08      	it	eq
 8007b3c:	f8c8 1000 	streq.w	r1, [r8]
 8007b40:	5162      	str	r2, [r4, r5]
 8007b42:	604b      	str	r3, [r1, #4]
 8007b44:	4638      	mov	r0, r7
 8007b46:	f104 060b 	add.w	r6, r4, #11
 8007b4a:	f000 f829 	bl	8007ba0 <__malloc_unlock>
 8007b4e:	f026 0607 	bic.w	r6, r6, #7
 8007b52:	1d23      	adds	r3, r4, #4
 8007b54:	1af2      	subs	r2, r6, r3
 8007b56:	d0ae      	beq.n	8007ab6 <_malloc_r+0x22>
 8007b58:	1b9b      	subs	r3, r3, r6
 8007b5a:	50a3      	str	r3, [r4, r2]
 8007b5c:	e7ab      	b.n	8007ab6 <_malloc_r+0x22>
 8007b5e:	42a3      	cmp	r3, r4
 8007b60:	6862      	ldr	r2, [r4, #4]
 8007b62:	d1dd      	bne.n	8007b20 <_malloc_r+0x8c>
 8007b64:	f8c8 2000 	str.w	r2, [r8]
 8007b68:	e7ec      	b.n	8007b44 <_malloc_r+0xb0>
 8007b6a:	4623      	mov	r3, r4
 8007b6c:	6864      	ldr	r4, [r4, #4]
 8007b6e:	e7ac      	b.n	8007aca <_malloc_r+0x36>
 8007b70:	4634      	mov	r4, r6
 8007b72:	6876      	ldr	r6, [r6, #4]
 8007b74:	e7b4      	b.n	8007ae0 <_malloc_r+0x4c>
 8007b76:	4613      	mov	r3, r2
 8007b78:	e7cc      	b.n	8007b14 <_malloc_r+0x80>
 8007b7a:	230c      	movs	r3, #12
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f000 f80e 	bl	8007ba0 <__malloc_unlock>
 8007b84:	e797      	b.n	8007ab6 <_malloc_r+0x22>
 8007b86:	6025      	str	r5, [r4, #0]
 8007b88:	e7dc      	b.n	8007b44 <_malloc_r+0xb0>
 8007b8a:	605b      	str	r3, [r3, #4]
 8007b8c:	deff      	udf	#255	; 0xff
 8007b8e:	bf00      	nop
 8007b90:	200004b0 	.word	0x200004b0

08007b94 <__malloc_lock>:
 8007b94:	4801      	ldr	r0, [pc, #4]	; (8007b9c <__malloc_lock+0x8>)
 8007b96:	f7ff bf01 	b.w	800799c <__retarget_lock_acquire_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	200004ac 	.word	0x200004ac

08007ba0 <__malloc_unlock>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	; (8007ba8 <__malloc_unlock+0x8>)
 8007ba2:	f7ff befc 	b.w	800799e <__retarget_lock_release_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	200004ac 	.word	0x200004ac

08007bac <__ssputs_r>:
 8007bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb0:	688e      	ldr	r6, [r1, #8]
 8007bb2:	461f      	mov	r7, r3
 8007bb4:	42be      	cmp	r6, r7
 8007bb6:	680b      	ldr	r3, [r1, #0]
 8007bb8:	4682      	mov	sl, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	4690      	mov	r8, r2
 8007bbe:	d82c      	bhi.n	8007c1a <__ssputs_r+0x6e>
 8007bc0:	898a      	ldrh	r2, [r1, #12]
 8007bc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bc6:	d026      	beq.n	8007c16 <__ssputs_r+0x6a>
 8007bc8:	6965      	ldr	r5, [r4, #20]
 8007bca:	6909      	ldr	r1, [r1, #16]
 8007bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bd0:	eba3 0901 	sub.w	r9, r3, r1
 8007bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bd8:	1c7b      	adds	r3, r7, #1
 8007bda:	444b      	add	r3, r9
 8007bdc:	106d      	asrs	r5, r5, #1
 8007bde:	429d      	cmp	r5, r3
 8007be0:	bf38      	it	cc
 8007be2:	461d      	movcc	r5, r3
 8007be4:	0553      	lsls	r3, r2, #21
 8007be6:	d527      	bpl.n	8007c38 <__ssputs_r+0x8c>
 8007be8:	4629      	mov	r1, r5
 8007bea:	f7ff ff53 	bl	8007a94 <_malloc_r>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	b360      	cbz	r0, 8007c4c <__ssputs_r+0xa0>
 8007bf2:	6921      	ldr	r1, [r4, #16]
 8007bf4:	464a      	mov	r2, r9
 8007bf6:	f7ff fed3 	bl	80079a0 <memcpy>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	6126      	str	r6, [r4, #16]
 8007c08:	6165      	str	r5, [r4, #20]
 8007c0a:	444e      	add	r6, r9
 8007c0c:	eba5 0509 	sub.w	r5, r5, r9
 8007c10:	6026      	str	r6, [r4, #0]
 8007c12:	60a5      	str	r5, [r4, #8]
 8007c14:	463e      	mov	r6, r7
 8007c16:	42be      	cmp	r6, r7
 8007c18:	d900      	bls.n	8007c1c <__ssputs_r+0x70>
 8007c1a:	463e      	mov	r6, r7
 8007c1c:	6820      	ldr	r0, [r4, #0]
 8007c1e:	4632      	mov	r2, r6
 8007c20:	4641      	mov	r1, r8
 8007c22:	f000 faab 	bl	800817c <memmove>
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	1b9b      	subs	r3, r3, r6
 8007c2a:	60a3      	str	r3, [r4, #8]
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	4433      	add	r3, r6
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	2000      	movs	r0, #0
 8007c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c38:	462a      	mov	r2, r5
 8007c3a:	f000 fac9 	bl	80081d0 <_realloc_r>
 8007c3e:	4606      	mov	r6, r0
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d1e0      	bne.n	8007c06 <__ssputs_r+0x5a>
 8007c44:	6921      	ldr	r1, [r4, #16]
 8007c46:	4650      	mov	r0, sl
 8007c48:	f7ff feb8 	bl	80079bc <_free_r>
 8007c4c:	230c      	movs	r3, #12
 8007c4e:	f8ca 3000 	str.w	r3, [sl]
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5e:	e7e9      	b.n	8007c34 <__ssputs_r+0x88>

08007c60 <_svfiprintf_r>:
 8007c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	4698      	mov	r8, r3
 8007c66:	898b      	ldrh	r3, [r1, #12]
 8007c68:	061b      	lsls	r3, r3, #24
 8007c6a:	b09d      	sub	sp, #116	; 0x74
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	4614      	mov	r4, r2
 8007c72:	d50e      	bpl.n	8007c92 <_svfiprintf_r+0x32>
 8007c74:	690b      	ldr	r3, [r1, #16]
 8007c76:	b963      	cbnz	r3, 8007c92 <_svfiprintf_r+0x32>
 8007c78:	2140      	movs	r1, #64	; 0x40
 8007c7a:	f7ff ff0b 	bl	8007a94 <_malloc_r>
 8007c7e:	6028      	str	r0, [r5, #0]
 8007c80:	6128      	str	r0, [r5, #16]
 8007c82:	b920      	cbnz	r0, 8007c8e <_svfiprintf_r+0x2e>
 8007c84:	230c      	movs	r3, #12
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	e0d0      	b.n	8007e30 <_svfiprintf_r+0x1d0>
 8007c8e:	2340      	movs	r3, #64	; 0x40
 8007c90:	616b      	str	r3, [r5, #20]
 8007c92:	2300      	movs	r3, #0
 8007c94:	9309      	str	r3, [sp, #36]	; 0x24
 8007c96:	2320      	movs	r3, #32
 8007c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ca0:	2330      	movs	r3, #48	; 0x30
 8007ca2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e48 <_svfiprintf_r+0x1e8>
 8007ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007caa:	f04f 0901 	mov.w	r9, #1
 8007cae:	4623      	mov	r3, r4
 8007cb0:	469a      	mov	sl, r3
 8007cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cb6:	b10a      	cbz	r2, 8007cbc <_svfiprintf_r+0x5c>
 8007cb8:	2a25      	cmp	r2, #37	; 0x25
 8007cba:	d1f9      	bne.n	8007cb0 <_svfiprintf_r+0x50>
 8007cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8007cc0:	d00b      	beq.n	8007cda <_svfiprintf_r+0x7a>
 8007cc2:	465b      	mov	r3, fp
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff ff6f 	bl	8007bac <__ssputs_r>
 8007cce:	3001      	adds	r0, #1
 8007cd0:	f000 80a9 	beq.w	8007e26 <_svfiprintf_r+0x1c6>
 8007cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cd6:	445a      	add	r2, fp
 8007cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8007cda:	f89a 3000 	ldrb.w	r3, [sl]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 80a1 	beq.w	8007e26 <_svfiprintf_r+0x1c6>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cee:	f10a 0a01 	add.w	sl, sl, #1
 8007cf2:	9304      	str	r3, [sp, #16]
 8007cf4:	9307      	str	r3, [sp, #28]
 8007cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8007cfc:	4654      	mov	r4, sl
 8007cfe:	2205      	movs	r2, #5
 8007d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d04:	4850      	ldr	r0, [pc, #320]	; (8007e48 <_svfiprintf_r+0x1e8>)
 8007d06:	f7f8 fa8b 	bl	8000220 <memchr>
 8007d0a:	9a04      	ldr	r2, [sp, #16]
 8007d0c:	b9d8      	cbnz	r0, 8007d46 <_svfiprintf_r+0xe6>
 8007d0e:	06d0      	lsls	r0, r2, #27
 8007d10:	bf44      	itt	mi
 8007d12:	2320      	movmi	r3, #32
 8007d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d18:	0711      	lsls	r1, r2, #28
 8007d1a:	bf44      	itt	mi
 8007d1c:	232b      	movmi	r3, #43	; 0x2b
 8007d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d22:	f89a 3000 	ldrb.w	r3, [sl]
 8007d26:	2b2a      	cmp	r3, #42	; 0x2a
 8007d28:	d015      	beq.n	8007d56 <_svfiprintf_r+0xf6>
 8007d2a:	9a07      	ldr	r2, [sp, #28]
 8007d2c:	4654      	mov	r4, sl
 8007d2e:	2000      	movs	r0, #0
 8007d30:	f04f 0c0a 	mov.w	ip, #10
 8007d34:	4621      	mov	r1, r4
 8007d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d3a:	3b30      	subs	r3, #48	; 0x30
 8007d3c:	2b09      	cmp	r3, #9
 8007d3e:	d94d      	bls.n	8007ddc <_svfiprintf_r+0x17c>
 8007d40:	b1b0      	cbz	r0, 8007d70 <_svfiprintf_r+0x110>
 8007d42:	9207      	str	r2, [sp, #28]
 8007d44:	e014      	b.n	8007d70 <_svfiprintf_r+0x110>
 8007d46:	eba0 0308 	sub.w	r3, r0, r8
 8007d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	9304      	str	r3, [sp, #16]
 8007d52:	46a2      	mov	sl, r4
 8007d54:	e7d2      	b.n	8007cfc <_svfiprintf_r+0x9c>
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	1d19      	adds	r1, r3, #4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	9103      	str	r1, [sp, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfbb      	ittet	lt
 8007d62:	425b      	neglt	r3, r3
 8007d64:	f042 0202 	orrlt.w	r2, r2, #2
 8007d68:	9307      	strge	r3, [sp, #28]
 8007d6a:	9307      	strlt	r3, [sp, #28]
 8007d6c:	bfb8      	it	lt
 8007d6e:	9204      	strlt	r2, [sp, #16]
 8007d70:	7823      	ldrb	r3, [r4, #0]
 8007d72:	2b2e      	cmp	r3, #46	; 0x2e
 8007d74:	d10c      	bne.n	8007d90 <_svfiprintf_r+0x130>
 8007d76:	7863      	ldrb	r3, [r4, #1]
 8007d78:	2b2a      	cmp	r3, #42	; 0x2a
 8007d7a:	d134      	bne.n	8007de6 <_svfiprintf_r+0x186>
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	1d1a      	adds	r2, r3, #4
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	9203      	str	r2, [sp, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bfb8      	it	lt
 8007d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d8c:	3402      	adds	r4, #2
 8007d8e:	9305      	str	r3, [sp, #20]
 8007d90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e58 <_svfiprintf_r+0x1f8>
 8007d94:	7821      	ldrb	r1, [r4, #0]
 8007d96:	2203      	movs	r2, #3
 8007d98:	4650      	mov	r0, sl
 8007d9a:	f7f8 fa41 	bl	8000220 <memchr>
 8007d9e:	b138      	cbz	r0, 8007db0 <_svfiprintf_r+0x150>
 8007da0:	9b04      	ldr	r3, [sp, #16]
 8007da2:	eba0 000a 	sub.w	r0, r0, sl
 8007da6:	2240      	movs	r2, #64	; 0x40
 8007da8:	4082      	lsls	r2, r0
 8007daa:	4313      	orrs	r3, r2
 8007dac:	3401      	adds	r4, #1
 8007dae:	9304      	str	r3, [sp, #16]
 8007db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db4:	4825      	ldr	r0, [pc, #148]	; (8007e4c <_svfiprintf_r+0x1ec>)
 8007db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dba:	2206      	movs	r2, #6
 8007dbc:	f7f8 fa30 	bl	8000220 <memchr>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d038      	beq.n	8007e36 <_svfiprintf_r+0x1d6>
 8007dc4:	4b22      	ldr	r3, [pc, #136]	; (8007e50 <_svfiprintf_r+0x1f0>)
 8007dc6:	bb1b      	cbnz	r3, 8007e10 <_svfiprintf_r+0x1b0>
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	3307      	adds	r3, #7
 8007dcc:	f023 0307 	bic.w	r3, r3, #7
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	9303      	str	r3, [sp, #12]
 8007dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd6:	4433      	add	r3, r6
 8007dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dda:	e768      	b.n	8007cae <_svfiprintf_r+0x4e>
 8007ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007de0:	460c      	mov	r4, r1
 8007de2:	2001      	movs	r0, #1
 8007de4:	e7a6      	b.n	8007d34 <_svfiprintf_r+0xd4>
 8007de6:	2300      	movs	r3, #0
 8007de8:	3401      	adds	r4, #1
 8007dea:	9305      	str	r3, [sp, #20]
 8007dec:	4619      	mov	r1, r3
 8007dee:	f04f 0c0a 	mov.w	ip, #10
 8007df2:	4620      	mov	r0, r4
 8007df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007df8:	3a30      	subs	r2, #48	; 0x30
 8007dfa:	2a09      	cmp	r2, #9
 8007dfc:	d903      	bls.n	8007e06 <_svfiprintf_r+0x1a6>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0c6      	beq.n	8007d90 <_svfiprintf_r+0x130>
 8007e02:	9105      	str	r1, [sp, #20]
 8007e04:	e7c4      	b.n	8007d90 <_svfiprintf_r+0x130>
 8007e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e7f0      	b.n	8007df2 <_svfiprintf_r+0x192>
 8007e10:	ab03      	add	r3, sp, #12
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	462a      	mov	r2, r5
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <_svfiprintf_r+0x1f4>)
 8007e18:	a904      	add	r1, sp, #16
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	f3af 8000 	nop.w
 8007e20:	1c42      	adds	r2, r0, #1
 8007e22:	4606      	mov	r6, r0
 8007e24:	d1d6      	bne.n	8007dd4 <_svfiprintf_r+0x174>
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	065b      	lsls	r3, r3, #25
 8007e2a:	f53f af2d 	bmi.w	8007c88 <_svfiprintf_r+0x28>
 8007e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e30:	b01d      	add	sp, #116	; 0x74
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e36:	ab03      	add	r3, sp, #12
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	462a      	mov	r2, r5
 8007e3c:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <_svfiprintf_r+0x1f4>)
 8007e3e:	a904      	add	r1, sp, #16
 8007e40:	4638      	mov	r0, r7
 8007e42:	f000 f879 	bl	8007f38 <_printf_i>
 8007e46:	e7eb      	b.n	8007e20 <_svfiprintf_r+0x1c0>
 8007e48:	08008449 	.word	0x08008449
 8007e4c:	08008453 	.word	0x08008453
 8007e50:	00000000 	.word	0x00000000
 8007e54:	08007bad 	.word	0x08007bad
 8007e58:	0800844f 	.word	0x0800844f

08007e5c <_printf_common>:
 8007e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	4616      	mov	r6, r2
 8007e62:	4699      	mov	r9, r3
 8007e64:	688a      	ldr	r2, [r1, #8]
 8007e66:	690b      	ldr	r3, [r1, #16]
 8007e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	bfb8      	it	lt
 8007e70:	4613      	movlt	r3, r2
 8007e72:	6033      	str	r3, [r6, #0]
 8007e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e78:	4607      	mov	r7, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	b10a      	cbz	r2, 8007e82 <_printf_common+0x26>
 8007e7e:	3301      	adds	r3, #1
 8007e80:	6033      	str	r3, [r6, #0]
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	0699      	lsls	r1, r3, #26
 8007e86:	bf42      	ittt	mi
 8007e88:	6833      	ldrmi	r3, [r6, #0]
 8007e8a:	3302      	addmi	r3, #2
 8007e8c:	6033      	strmi	r3, [r6, #0]
 8007e8e:	6825      	ldr	r5, [r4, #0]
 8007e90:	f015 0506 	ands.w	r5, r5, #6
 8007e94:	d106      	bne.n	8007ea4 <_printf_common+0x48>
 8007e96:	f104 0a19 	add.w	sl, r4, #25
 8007e9a:	68e3      	ldr	r3, [r4, #12]
 8007e9c:	6832      	ldr	r2, [r6, #0]
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	42ab      	cmp	r3, r5
 8007ea2:	dc26      	bgt.n	8007ef2 <_printf_common+0x96>
 8007ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ea8:	1e13      	subs	r3, r2, #0
 8007eaa:	6822      	ldr	r2, [r4, #0]
 8007eac:	bf18      	it	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	0692      	lsls	r2, r2, #26
 8007eb2:	d42b      	bmi.n	8007f0c <_printf_common+0xb0>
 8007eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eb8:	4649      	mov	r1, r9
 8007eba:	4638      	mov	r0, r7
 8007ebc:	47c0      	blx	r8
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	d01e      	beq.n	8007f00 <_printf_common+0xa4>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	6922      	ldr	r2, [r4, #16]
 8007ec6:	f003 0306 	and.w	r3, r3, #6
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	bf02      	ittt	eq
 8007ece:	68e5      	ldreq	r5, [r4, #12]
 8007ed0:	6833      	ldreq	r3, [r6, #0]
 8007ed2:	1aed      	subeq	r5, r5, r3
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	bf0c      	ite	eq
 8007ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007edc:	2500      	movne	r5, #0
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	bfc4      	itt	gt
 8007ee2:	1a9b      	subgt	r3, r3, r2
 8007ee4:	18ed      	addgt	r5, r5, r3
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	341a      	adds	r4, #26
 8007eea:	42b5      	cmp	r5, r6
 8007eec:	d11a      	bne.n	8007f24 <_printf_common+0xc8>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	e008      	b.n	8007f04 <_printf_common+0xa8>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	4638      	mov	r0, r7
 8007efa:	47c0      	blx	r8
 8007efc:	3001      	adds	r0, #1
 8007efe:	d103      	bne.n	8007f08 <_printf_common+0xac>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f08:	3501      	adds	r5, #1
 8007f0a:	e7c6      	b.n	8007e9a <_printf_common+0x3e>
 8007f0c:	18e1      	adds	r1, r4, r3
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	2030      	movs	r0, #48	; 0x30
 8007f12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f16:	4422      	add	r2, r4
 8007f18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f20:	3302      	adds	r3, #2
 8007f22:	e7c7      	b.n	8007eb4 <_printf_common+0x58>
 8007f24:	2301      	movs	r3, #1
 8007f26:	4622      	mov	r2, r4
 8007f28:	4649      	mov	r1, r9
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	47c0      	blx	r8
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d0e6      	beq.n	8007f00 <_printf_common+0xa4>
 8007f32:	3601      	adds	r6, #1
 8007f34:	e7d9      	b.n	8007eea <_printf_common+0x8e>
	...

08007f38 <_printf_i>:
 8007f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	7e0f      	ldrb	r7, [r1, #24]
 8007f3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f40:	2f78      	cmp	r7, #120	; 0x78
 8007f42:	4691      	mov	r9, r2
 8007f44:	4680      	mov	r8, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	469a      	mov	sl, r3
 8007f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f4e:	d807      	bhi.n	8007f60 <_printf_i+0x28>
 8007f50:	2f62      	cmp	r7, #98	; 0x62
 8007f52:	d80a      	bhi.n	8007f6a <_printf_i+0x32>
 8007f54:	2f00      	cmp	r7, #0
 8007f56:	f000 80d4 	beq.w	8008102 <_printf_i+0x1ca>
 8007f5a:	2f58      	cmp	r7, #88	; 0x58
 8007f5c:	f000 80c0 	beq.w	80080e0 <_printf_i+0x1a8>
 8007f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f68:	e03a      	b.n	8007fe0 <_printf_i+0xa8>
 8007f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f6e:	2b15      	cmp	r3, #21
 8007f70:	d8f6      	bhi.n	8007f60 <_printf_i+0x28>
 8007f72:	a101      	add	r1, pc, #4	; (adr r1, 8007f78 <_printf_i+0x40>)
 8007f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f78:	08007fd1 	.word	0x08007fd1
 8007f7c:	08007fe5 	.word	0x08007fe5
 8007f80:	08007f61 	.word	0x08007f61
 8007f84:	08007f61 	.word	0x08007f61
 8007f88:	08007f61 	.word	0x08007f61
 8007f8c:	08007f61 	.word	0x08007f61
 8007f90:	08007fe5 	.word	0x08007fe5
 8007f94:	08007f61 	.word	0x08007f61
 8007f98:	08007f61 	.word	0x08007f61
 8007f9c:	08007f61 	.word	0x08007f61
 8007fa0:	08007f61 	.word	0x08007f61
 8007fa4:	080080e9 	.word	0x080080e9
 8007fa8:	08008011 	.word	0x08008011
 8007fac:	080080a3 	.word	0x080080a3
 8007fb0:	08007f61 	.word	0x08007f61
 8007fb4:	08007f61 	.word	0x08007f61
 8007fb8:	0800810b 	.word	0x0800810b
 8007fbc:	08007f61 	.word	0x08007f61
 8007fc0:	08008011 	.word	0x08008011
 8007fc4:	08007f61 	.word	0x08007f61
 8007fc8:	08007f61 	.word	0x08007f61
 8007fcc:	080080ab 	.word	0x080080ab
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	1d1a      	adds	r2, r3, #4
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	602a      	str	r2, [r5, #0]
 8007fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e09f      	b.n	8008124 <_printf_i+0x1ec>
 8007fe4:	6820      	ldr	r0, [r4, #0]
 8007fe6:	682b      	ldr	r3, [r5, #0]
 8007fe8:	0607      	lsls	r7, r0, #24
 8007fea:	f103 0104 	add.w	r1, r3, #4
 8007fee:	6029      	str	r1, [r5, #0]
 8007ff0:	d501      	bpl.n	8007ff6 <_printf_i+0xbe>
 8007ff2:	681e      	ldr	r6, [r3, #0]
 8007ff4:	e003      	b.n	8007ffe <_printf_i+0xc6>
 8007ff6:	0646      	lsls	r6, r0, #25
 8007ff8:	d5fb      	bpl.n	8007ff2 <_printf_i+0xba>
 8007ffa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ffe:	2e00      	cmp	r6, #0
 8008000:	da03      	bge.n	800800a <_printf_i+0xd2>
 8008002:	232d      	movs	r3, #45	; 0x2d
 8008004:	4276      	negs	r6, r6
 8008006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800800a:	485a      	ldr	r0, [pc, #360]	; (8008174 <_printf_i+0x23c>)
 800800c:	230a      	movs	r3, #10
 800800e:	e012      	b.n	8008036 <_printf_i+0xfe>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	6820      	ldr	r0, [r4, #0]
 8008014:	1d19      	adds	r1, r3, #4
 8008016:	6029      	str	r1, [r5, #0]
 8008018:	0605      	lsls	r5, r0, #24
 800801a:	d501      	bpl.n	8008020 <_printf_i+0xe8>
 800801c:	681e      	ldr	r6, [r3, #0]
 800801e:	e002      	b.n	8008026 <_printf_i+0xee>
 8008020:	0641      	lsls	r1, r0, #25
 8008022:	d5fb      	bpl.n	800801c <_printf_i+0xe4>
 8008024:	881e      	ldrh	r6, [r3, #0]
 8008026:	4853      	ldr	r0, [pc, #332]	; (8008174 <_printf_i+0x23c>)
 8008028:	2f6f      	cmp	r7, #111	; 0x6f
 800802a:	bf0c      	ite	eq
 800802c:	2308      	moveq	r3, #8
 800802e:	230a      	movne	r3, #10
 8008030:	2100      	movs	r1, #0
 8008032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008036:	6865      	ldr	r5, [r4, #4]
 8008038:	60a5      	str	r5, [r4, #8]
 800803a:	2d00      	cmp	r5, #0
 800803c:	bfa2      	ittt	ge
 800803e:	6821      	ldrge	r1, [r4, #0]
 8008040:	f021 0104 	bicge.w	r1, r1, #4
 8008044:	6021      	strge	r1, [r4, #0]
 8008046:	b90e      	cbnz	r6, 800804c <_printf_i+0x114>
 8008048:	2d00      	cmp	r5, #0
 800804a:	d04b      	beq.n	80080e4 <_printf_i+0x1ac>
 800804c:	4615      	mov	r5, r2
 800804e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008052:	fb03 6711 	mls	r7, r3, r1, r6
 8008056:	5dc7      	ldrb	r7, [r0, r7]
 8008058:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800805c:	4637      	mov	r7, r6
 800805e:	42bb      	cmp	r3, r7
 8008060:	460e      	mov	r6, r1
 8008062:	d9f4      	bls.n	800804e <_printf_i+0x116>
 8008064:	2b08      	cmp	r3, #8
 8008066:	d10b      	bne.n	8008080 <_printf_i+0x148>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	07de      	lsls	r6, r3, #31
 800806c:	d508      	bpl.n	8008080 <_printf_i+0x148>
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	6861      	ldr	r1, [r4, #4]
 8008072:	4299      	cmp	r1, r3
 8008074:	bfde      	ittt	le
 8008076:	2330      	movle	r3, #48	; 0x30
 8008078:	f805 3c01 	strble.w	r3, [r5, #-1]
 800807c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008080:	1b52      	subs	r2, r2, r5
 8008082:	6122      	str	r2, [r4, #16]
 8008084:	f8cd a000 	str.w	sl, [sp]
 8008088:	464b      	mov	r3, r9
 800808a:	aa03      	add	r2, sp, #12
 800808c:	4621      	mov	r1, r4
 800808e:	4640      	mov	r0, r8
 8008090:	f7ff fee4 	bl	8007e5c <_printf_common>
 8008094:	3001      	adds	r0, #1
 8008096:	d14a      	bne.n	800812e <_printf_i+0x1f6>
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	b004      	add	sp, #16
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	f043 0320 	orr.w	r3, r3, #32
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	4833      	ldr	r0, [pc, #204]	; (8008178 <_printf_i+0x240>)
 80080ac:	2778      	movs	r7, #120	; 0x78
 80080ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	6829      	ldr	r1, [r5, #0]
 80080b6:	061f      	lsls	r7, r3, #24
 80080b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80080bc:	d402      	bmi.n	80080c4 <_printf_i+0x18c>
 80080be:	065f      	lsls	r7, r3, #25
 80080c0:	bf48      	it	mi
 80080c2:	b2b6      	uxthmi	r6, r6
 80080c4:	07df      	lsls	r7, r3, #31
 80080c6:	bf48      	it	mi
 80080c8:	f043 0320 	orrmi.w	r3, r3, #32
 80080cc:	6029      	str	r1, [r5, #0]
 80080ce:	bf48      	it	mi
 80080d0:	6023      	strmi	r3, [r4, #0]
 80080d2:	b91e      	cbnz	r6, 80080dc <_printf_i+0x1a4>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	f023 0320 	bic.w	r3, r3, #32
 80080da:	6023      	str	r3, [r4, #0]
 80080dc:	2310      	movs	r3, #16
 80080de:	e7a7      	b.n	8008030 <_printf_i+0xf8>
 80080e0:	4824      	ldr	r0, [pc, #144]	; (8008174 <_printf_i+0x23c>)
 80080e2:	e7e4      	b.n	80080ae <_printf_i+0x176>
 80080e4:	4615      	mov	r5, r2
 80080e6:	e7bd      	b.n	8008064 <_printf_i+0x12c>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	6826      	ldr	r6, [r4, #0]
 80080ec:	6961      	ldr	r1, [r4, #20]
 80080ee:	1d18      	adds	r0, r3, #4
 80080f0:	6028      	str	r0, [r5, #0]
 80080f2:	0635      	lsls	r5, r6, #24
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	d501      	bpl.n	80080fc <_printf_i+0x1c4>
 80080f8:	6019      	str	r1, [r3, #0]
 80080fa:	e002      	b.n	8008102 <_printf_i+0x1ca>
 80080fc:	0670      	lsls	r0, r6, #25
 80080fe:	d5fb      	bpl.n	80080f8 <_printf_i+0x1c0>
 8008100:	8019      	strh	r1, [r3, #0]
 8008102:	2300      	movs	r3, #0
 8008104:	6123      	str	r3, [r4, #16]
 8008106:	4615      	mov	r5, r2
 8008108:	e7bc      	b.n	8008084 <_printf_i+0x14c>
 800810a:	682b      	ldr	r3, [r5, #0]
 800810c:	1d1a      	adds	r2, r3, #4
 800810e:	602a      	str	r2, [r5, #0]
 8008110:	681d      	ldr	r5, [r3, #0]
 8008112:	6862      	ldr	r2, [r4, #4]
 8008114:	2100      	movs	r1, #0
 8008116:	4628      	mov	r0, r5
 8008118:	f7f8 f882 	bl	8000220 <memchr>
 800811c:	b108      	cbz	r0, 8008122 <_printf_i+0x1ea>
 800811e:	1b40      	subs	r0, r0, r5
 8008120:	6060      	str	r0, [r4, #4]
 8008122:	6863      	ldr	r3, [r4, #4]
 8008124:	6123      	str	r3, [r4, #16]
 8008126:	2300      	movs	r3, #0
 8008128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800812c:	e7aa      	b.n	8008084 <_printf_i+0x14c>
 800812e:	6923      	ldr	r3, [r4, #16]
 8008130:	462a      	mov	r2, r5
 8008132:	4649      	mov	r1, r9
 8008134:	4640      	mov	r0, r8
 8008136:	47d0      	blx	sl
 8008138:	3001      	adds	r0, #1
 800813a:	d0ad      	beq.n	8008098 <_printf_i+0x160>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	079b      	lsls	r3, r3, #30
 8008140:	d413      	bmi.n	800816a <_printf_i+0x232>
 8008142:	68e0      	ldr	r0, [r4, #12]
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	4298      	cmp	r0, r3
 8008148:	bfb8      	it	lt
 800814a:	4618      	movlt	r0, r3
 800814c:	e7a6      	b.n	800809c <_printf_i+0x164>
 800814e:	2301      	movs	r3, #1
 8008150:	4632      	mov	r2, r6
 8008152:	4649      	mov	r1, r9
 8008154:	4640      	mov	r0, r8
 8008156:	47d0      	blx	sl
 8008158:	3001      	adds	r0, #1
 800815a:	d09d      	beq.n	8008098 <_printf_i+0x160>
 800815c:	3501      	adds	r5, #1
 800815e:	68e3      	ldr	r3, [r4, #12]
 8008160:	9903      	ldr	r1, [sp, #12]
 8008162:	1a5b      	subs	r3, r3, r1
 8008164:	42ab      	cmp	r3, r5
 8008166:	dcf2      	bgt.n	800814e <_printf_i+0x216>
 8008168:	e7eb      	b.n	8008142 <_printf_i+0x20a>
 800816a:	2500      	movs	r5, #0
 800816c:	f104 0619 	add.w	r6, r4, #25
 8008170:	e7f5      	b.n	800815e <_printf_i+0x226>
 8008172:	bf00      	nop
 8008174:	0800845a 	.word	0x0800845a
 8008178:	0800846b 	.word	0x0800846b

0800817c <memmove>:
 800817c:	4288      	cmp	r0, r1
 800817e:	b510      	push	{r4, lr}
 8008180:	eb01 0402 	add.w	r4, r1, r2
 8008184:	d902      	bls.n	800818c <memmove+0x10>
 8008186:	4284      	cmp	r4, r0
 8008188:	4623      	mov	r3, r4
 800818a:	d807      	bhi.n	800819c <memmove+0x20>
 800818c:	1e43      	subs	r3, r0, #1
 800818e:	42a1      	cmp	r1, r4
 8008190:	d008      	beq.n	80081a4 <memmove+0x28>
 8008192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800819a:	e7f8      	b.n	800818e <memmove+0x12>
 800819c:	4402      	add	r2, r0
 800819e:	4601      	mov	r1, r0
 80081a0:	428a      	cmp	r2, r1
 80081a2:	d100      	bne.n	80081a6 <memmove+0x2a>
 80081a4:	bd10      	pop	{r4, pc}
 80081a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081ae:	e7f7      	b.n	80081a0 <memmove+0x24>

080081b0 <_sbrk_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4d06      	ldr	r5, [pc, #24]	; (80081cc <_sbrk_r+0x1c>)
 80081b4:	2300      	movs	r3, #0
 80081b6:	4604      	mov	r4, r0
 80081b8:	4608      	mov	r0, r1
 80081ba:	602b      	str	r3, [r5, #0]
 80081bc:	f7f9 fc64 	bl	8001a88 <_sbrk>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d102      	bne.n	80081ca <_sbrk_r+0x1a>
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	b103      	cbz	r3, 80081ca <_sbrk_r+0x1a>
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	200004a8 	.word	0x200004a8

080081d0 <_realloc_r>:
 80081d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d4:	4680      	mov	r8, r0
 80081d6:	4614      	mov	r4, r2
 80081d8:	460e      	mov	r6, r1
 80081da:	b921      	cbnz	r1, 80081e6 <_realloc_r+0x16>
 80081dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e0:	4611      	mov	r1, r2
 80081e2:	f7ff bc57 	b.w	8007a94 <_malloc_r>
 80081e6:	b92a      	cbnz	r2, 80081f4 <_realloc_r+0x24>
 80081e8:	f7ff fbe8 	bl	80079bc <_free_r>
 80081ec:	4625      	mov	r5, r4
 80081ee:	4628      	mov	r0, r5
 80081f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f4:	f000 f81b 	bl	800822e <_malloc_usable_size_r>
 80081f8:	4284      	cmp	r4, r0
 80081fa:	4607      	mov	r7, r0
 80081fc:	d802      	bhi.n	8008204 <_realloc_r+0x34>
 80081fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008202:	d812      	bhi.n	800822a <_realloc_r+0x5a>
 8008204:	4621      	mov	r1, r4
 8008206:	4640      	mov	r0, r8
 8008208:	f7ff fc44 	bl	8007a94 <_malloc_r>
 800820c:	4605      	mov	r5, r0
 800820e:	2800      	cmp	r0, #0
 8008210:	d0ed      	beq.n	80081ee <_realloc_r+0x1e>
 8008212:	42bc      	cmp	r4, r7
 8008214:	4622      	mov	r2, r4
 8008216:	4631      	mov	r1, r6
 8008218:	bf28      	it	cs
 800821a:	463a      	movcs	r2, r7
 800821c:	f7ff fbc0 	bl	80079a0 <memcpy>
 8008220:	4631      	mov	r1, r6
 8008222:	4640      	mov	r0, r8
 8008224:	f7ff fbca 	bl	80079bc <_free_r>
 8008228:	e7e1      	b.n	80081ee <_realloc_r+0x1e>
 800822a:	4635      	mov	r5, r6
 800822c:	e7df      	b.n	80081ee <_realloc_r+0x1e>

0800822e <_malloc_usable_size_r>:
 800822e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008232:	1f18      	subs	r0, r3, #4
 8008234:	2b00      	cmp	r3, #0
 8008236:	bfbc      	itt	lt
 8008238:	580b      	ldrlt	r3, [r1, r0]
 800823a:	18c0      	addlt	r0, r0, r3
 800823c:	4770      	bx	lr

0800823e <fmaxf>:
 800823e:	b508      	push	{r3, lr}
 8008240:	ed2d 8b02 	vpush	{d8}
 8008244:	eeb0 8a40 	vmov.f32	s16, s0
 8008248:	eef0 8a60 	vmov.f32	s17, s1
 800824c:	f000 f82e 	bl	80082ac <__fpclassifyf>
 8008250:	b148      	cbz	r0, 8008266 <fmaxf+0x28>
 8008252:	eeb0 0a68 	vmov.f32	s0, s17
 8008256:	f000 f829 	bl	80082ac <__fpclassifyf>
 800825a:	b130      	cbz	r0, 800826a <fmaxf+0x2c>
 800825c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008264:	dc01      	bgt.n	800826a <fmaxf+0x2c>
 8008266:	eeb0 8a68 	vmov.f32	s16, s17
 800826a:	eeb0 0a48 	vmov.f32	s0, s16
 800826e:	ecbd 8b02 	vpop	{d8}
 8008272:	bd08      	pop	{r3, pc}

08008274 <fminf>:
 8008274:	b508      	push	{r3, lr}
 8008276:	ed2d 8b02 	vpush	{d8}
 800827a:	eeb0 8a40 	vmov.f32	s16, s0
 800827e:	eef0 8a60 	vmov.f32	s17, s1
 8008282:	f000 f813 	bl	80082ac <__fpclassifyf>
 8008286:	b148      	cbz	r0, 800829c <fminf+0x28>
 8008288:	eeb0 0a68 	vmov.f32	s0, s17
 800828c:	f000 f80e 	bl	80082ac <__fpclassifyf>
 8008290:	b130      	cbz	r0, 80082a0 <fminf+0x2c>
 8008292:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829a:	d401      	bmi.n	80082a0 <fminf+0x2c>
 800829c:	eeb0 8a68 	vmov.f32	s16, s17
 80082a0:	eeb0 0a48 	vmov.f32	s0, s16
 80082a4:	ecbd 8b02 	vpop	{d8}
 80082a8:	bd08      	pop	{r3, pc}
	...

080082ac <__fpclassifyf>:
 80082ac:	ee10 3a10 	vmov	r3, s0
 80082b0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80082b4:	d00d      	beq.n	80082d2 <__fpclassifyf+0x26>
 80082b6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80082ba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80082be:	d30a      	bcc.n	80082d6 <__fpclassifyf+0x2a>
 80082c0:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <__fpclassifyf+0x34>)
 80082c2:	1e42      	subs	r2, r0, #1
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d908      	bls.n	80082da <__fpclassifyf+0x2e>
 80082c8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80082cc:	4258      	negs	r0, r3
 80082ce:	4158      	adcs	r0, r3
 80082d0:	4770      	bx	lr
 80082d2:	2002      	movs	r0, #2
 80082d4:	4770      	bx	lr
 80082d6:	2004      	movs	r0, #4
 80082d8:	4770      	bx	lr
 80082da:	2003      	movs	r0, #3
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	007ffffe 	.word	0x007ffffe

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
