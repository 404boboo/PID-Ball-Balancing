
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006104  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e8  080063e8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f0  080063f0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080063f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000006c  08006464  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08006464  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cfe  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027cb  00000000  00000000  00031ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  000345a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b84  00000000  00000000  00035478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003aa4  00000000  00000000  00035ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013108  00000000  00000000  00039aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f07d7  00000000  00000000  0004cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f48  00000000  00000000  0013d380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001412c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080062b4 	.word	0x080062b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000070 	.word	0x20000070
 8000204:	080062b4 	.word	0x080062b4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <IFX_EMA_Init>:
 *
 *  Created on: Jan 26, 2024
 *      Author: yazed almazroua
 */
#include "HP_filter.h"
void IFX_EMA_Init(IFX_EMA *filt , float beta){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	ed87 0a00 	vstr	s0, [r7]

	//set filter coef
	IFX_EMA_SetBeta(filt,beta);
 8000510:	ed97 0a00 	vldr	s0, [r7]
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 f80c 	bl	8000532 <IFX_EMA_SetBeta>

	//clear filter input
	filt->inp = 0.0f;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f04f 0200 	mov.w	r2, #0
 8000520:	605a      	str	r2, [r3, #4]

	//clear filter output

	filt->out = 0.0f;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f04f 0200 	mov.w	r2, #0
 8000528:	609a      	str	r2, [r3, #8]



}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <IFX_EMA_SetBeta>:
void IFX_EMA_SetBeta(IFX_EMA *filt,float beta){
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	ed87 0a00 	vstr	s0, [r7]

	//clamp beta 0 to 1.00
	if(beta > 1.0f){
 800053e:	edd7 7a00 	vldr	s15, [r7]
 8000542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800054a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800054e:	dd03      	ble.n	8000558 <IFX_EMA_SetBeta+0x26>
		beta = 1.0f;
 8000550:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	e009      	b.n	800056c <IFX_EMA_SetBeta+0x3a>
	}
	else if(beta <0.0f){
 8000558:	edd7 7a00 	vldr	s15, [r7]
 800055c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000564:	d502      	bpl.n	800056c <IFX_EMA_SetBeta+0x3a>
		beta = 0.0f;
 8000566:	f04f 0300 	mov.w	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
	}
	//set beta coef
	filt->beta = beta;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	601a      	str	r2, [r3, #0]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <IFX_EMA_Update>:
float IFX_EMA_Update(IFX_EMA *filt,float inp){
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	ed87 0a00 	vstr	s0, [r7]

	//compute current output sample
	filt->out = 0.5f *(2.0f - filt->beta) * (inp - filt->inp) + (1.0f - filt->beta) * filt->out;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000598:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800059c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80005a6:	edd7 6a00 	vldr	s13, [r7]
 80005aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80005ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80005bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80005c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edc3 7a02 	vstr	s15, [r3, #8]

	//store current filter input for next output

	filt->inp = inp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	605a      	str	r2, [r3, #4]

	return filt->out;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	ee07 3a90 	vmov	s15, r3
}
 80005e2:	eeb0 0a67 	vmov.f32	s0, s15
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <SERVO_Init>:
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 90.0f);
 80005f8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000614 <SERVO_Init+0x24>
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f80b 	bl	8000618 <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f8d9 	bl	80007bc <PWM_Init>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	42b40000 	.word	0x42b40000

08000618 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 120.0f, 160.0f);
 8000624:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000688 <SERVO_WritePosition+0x70>
 8000628:	ed97 0a00 	vldr	s0, [r7]
 800062c:	f005 fe0b 	bl	8006246 <fminf>
 8000630:	eef0 7a40 	vmov.f32	s15, s0
 8000634:	eddf 0a15 	vldr	s1, [pc, #84]	; 800068c <SERVO_WritePosition+0x74>
 8000638:	eeb0 0a67 	vmov.f32	s0, s15
 800063c:	f005 fde8 	bl	8006210 <fmaxf>
 8000640:	eef0 7a40 	vmov.f32	s15, s0
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 120.0f, 160.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000650:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800068c <SERVO_WritePosition+0x74>
 8000654:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000658:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000690 <SERVO_WritePosition+0x78>
 800065c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000660:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000668:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800066c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000670:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	ed97 0a03 	vldr	s0, [r7, #12]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f8b6 	bl	80007ec <PWM_WriteDuty>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	43200000 	.word	0x43200000
 800068c:	42f00000 	.word	0x42f00000
 8000690:	42200000 	.word	0x42200000

08000694 <hc_sr04_init>:
/* Public variables ----------------------------------------------------------*/

/*Private functions------------------------------------------------*/

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fedc 	bl	8003478 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4610      	mov	r0, r2
 80006cc:	f002 fd78 	bl	80031c0 <HAL_TIM_PWM_Start>
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <hc_sr04_convert_us_to_cm>:

uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <hc_sr04_convert_us_to_cm+0x20>)
 80006e4:	fba2 2303 	umull	r2, r3, r2, r3
 80006e8:	095b      	lsrs	r3, r3, #5
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	8d3dcb09 	.word	0x8d3dcb09

080006fc <position>:
int position(float dis1, float dis2, float pos)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	ed87 0a03 	vstr	s0, [r7, #12]
 8000706:	edc7 0a02 	vstr	s1, [r7, #8]
 800070a:	ed87 1a01 	vstr	s2, [r7, #4]
 pos = 0;
 800070e:	f04f 0300 	mov.w	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
if (dis1<29){
 8000714:	edd7 7a03 	vldr	s15, [r7, #12]
 8000718:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 800071c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000724:	d502      	bpl.n	800072c <position+0x30>
    pos = dis1;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	e037      	b.n	800079c <position+0xa0>
}
else if(dis1 >=29 )
 800072c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000730:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073c:	db08      	blt.n	8000750 <position+0x54>
{
    pos = 60- dis2;
 800073e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80007b4 <position+0xb8>
 8000742:	edd7 7a02 	vldr	s15, [r7, #8]
 8000746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800074a:	edc7 7a01 	vstr	s15, [r7, #4]
 800074e:	e025      	b.n	800079c <position+0xa0>
}
else if (dis1>= 29 && dis1 <= 31 && dis2 >= 29 && dis2 <= 31){
 8000750:	edd7 7a03 	vldr	s15, [r7, #12]
 8000754:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000760:	db1c      	blt.n	800079c <position+0xa0>
 8000762:	edd7 7a03 	vldr	s15, [r7, #12]
 8000766:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800076a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800076e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000772:	d813      	bhi.n	800079c <position+0xa0>
 8000774:	edd7 7a02 	vldr	s15, [r7, #8]
 8000778:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 800077c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000784:	db0a      	blt.n	800079c <position+0xa0>
 8000786:	edd7 7a02 	vldr	s15, [r7, #8]
 800078a:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800078e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000796:	d801      	bhi.n	800079c <position+0xa0>
    pos = 30;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <position+0xbc>)
 800079a:	607b      	str	r3, [r7, #4]
}
return pos;
 800079c:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a4:	ee17 3a90 	vmov	r3, s15
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	42700000 	.word	0x42700000
 80007b8:	41f00000 	.word	0x41f00000

080007bc <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80007ca:	eeb0 0a67 	vmov.f32	s0, s15
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f80c 	bl	80007ec <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	4619      	mov	r1, r3
 80007de:	4610      	mov	r0, r2
 80007e0:	f002 fcee 	bl	80031c0 <HAL_TIM_PWM_Start>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80007f8:	edd7 7a00 	vldr	s15, [r7]
 80007fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000804:	d503      	bpl.n	800080e <PWM_WriteDuty+0x22>
    duty = 0.0;
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	e00a      	b.n	8000824 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800080e:	edd7 7a00 	vldr	s15, [r7]
 8000812:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80008d0 <PWM_WriteDuty+0xe4>
 8000816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800081a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081e:	dd01      	ble.n	8000824 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <PWM_WriteDuty+0xe8>)
 8000822:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	3301      	adds	r3, #1
 8000834:	ee07 3a90 	vmov	s15, r3
 8000838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800083c:	edd7 7a00 	vldr	s15, [r7]
 8000840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000844:	eddf 6a22 	vldr	s13, [pc, #136]	; 80008d0 <PWM_WriteDuty+0xe4>
 8000848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800084c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000850:	ee17 3a90 	vmov	r3, s15
 8000854:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d105      	bne.n	800086a <PWM_WriteDuty+0x7e>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000868:	e02c      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d105      	bne.n	800087e <PWM_WriteDuty+0x92>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800087c:	e022      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b08      	cmp	r3, #8
 8000884:	d105      	bne.n	8000892 <PWM_WriteDuty+0xa6>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000890:	e018      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b0c      	cmp	r3, #12
 8000898:	d105      	bne.n	80008a6 <PWM_WriteDuty+0xba>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008a4:	e00e      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b10      	cmp	r3, #16
 80008ac:	d105      	bne.n	80008ba <PWM_WriteDuty+0xce>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80008b8:	e004      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	42c80000 	.word	0x42c80000
 80008d4:	42c80000 	.word	0x42c80000

080008d8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM9_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]


}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <HAL_UART_RxCpltCallback+0x48>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d117      	bne.n	800092c <HAL_UART_RxCpltCallback+0x40>
  {
	SERVO_WritePosition(&hservo1, 180 - strtol((char*)tx_buffer, 0, 10));
 80008fc:	220a      	movs	r2, #10
 80008fe:	2100      	movs	r1, #0
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <HAL_UART_RxCpltCallback+0x4c>)
 8000902:	f005 fc49 	bl	8006198 <strtol>
 8000906:	4603      	mov	r3, r0
 8000908:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000914:	eeb0 0a67 	vmov.f32	s0, s15
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <HAL_UART_RxCpltCallback+0x50>)
 800091a:	f7ff fe7d 	bl	8000618 <SERVO_WritePosition>
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 800091e:	2303      	movs	r3, #3
 8000920:	b29b      	uxth	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	4904      	ldr	r1, [pc, #16]	; (8000938 <HAL_UART_RxCpltCallback+0x4c>)
 8000926:	4803      	ldr	r0, [pc, #12]	; (8000934 <HAL_UART_RxCpltCallback+0x48>)
 8000928:	f004 f9aa 	bl	8004c80 <HAL_UART_Receive_IT>
  }
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001b8 	.word	0x200001b8
 8000938:	2000027c 	.word	0x2000027c
 800093c:	20000000 	.word	0x20000000

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 fead 	bl	80016a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f844 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 fade 	bl	8000f0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000950:	f000 faac 	bl	8000eac <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000954:	f000 f8ac 	bl	8000ab0 <MX_TIM1_Init>
  MX_TIM9_Init();
 8000958:	f000 fa46 	bl	8000de8 <MX_TIM9_Init>
  MX_TIM2_Init();
 800095c:	f000 f94c 	bl	8000bf8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000960:	f000 f9a4 	bl	8000cac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //initializing the high pass filter
  IFX_EMA_Init(&hpFilter, BETA_VALUE);
 8000964:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80009a8 <main+0x68>
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <main+0x6c>)
 800096a:	f7ff fdcb 	bl	8000504 <IFX_EMA_Init>
  // Start Sensor 1 & 2
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 800096e:	2308      	movs	r3, #8
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <main+0x70>)
 8000972:	4910      	ldr	r1, [pc, #64]	; (80009b4 <main+0x74>)
 8000974:	4810      	ldr	r0, [pc, #64]	; (80009b8 <main+0x78>)
 8000976:	f7ff fe8d 	bl	8000694 <hc_sr04_init>
  hc_sr04_init(&distance_sensor2, &htim3, &htim2, TIM_CHANNEL_3);
 800097a:	2308      	movs	r3, #8
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <main+0x70>)
 800097e:	490f      	ldr	r1, [pc, #60]	; (80009bc <main+0x7c>)
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <main+0x80>)
 8000982:	f7ff fe87 	bl	8000694 <hc_sr04_init>

  SERVO_Init(&hservo1);
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <main+0x84>)
 8000988:	f7ff fe32 	bl	80005f0 <SERVO_Init>
  SERVO_WritePosition(&hservo1, 130.0f);
 800098c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80009c8 <main+0x88>
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <main+0x84>)
 8000992:	f7ff fe41 	bl	8000618 <SERVO_WritePosition>
 HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8000996:	2303      	movs	r3, #3
 8000998:	b29b      	uxth	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	490b      	ldr	r1, [pc, #44]	; (80009cc <main+0x8c>)
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <main+0x90>)
 80009a0:	f004 f96e 	bl	8004c80 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0x64>
 80009a6:	bf00      	nop
 80009a8:	3f4ccccd 	.word	0x3f4ccccd
 80009ac:	20000270 	.word	0x20000270
 80009b0:	200000d4 	.word	0x200000d4
 80009b4:	20000088 	.word	0x20000088
 80009b8:	20000250 	.word	0x20000250
 80009bc:	20000120 	.word	0x20000120
 80009c0:	20000260 	.word	0x20000260
 80009c4:	20000000 	.word	0x20000000
 80009c8:	43020000 	.word	0x43020000
 80009cc:	2000027c 	.word	0x2000027c
 80009d0:	200001b8 	.word	0x200001b8

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fbe2 	bl	80061ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009f8:	f001 fa1a 	bl	8001e30 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <SystemClock_Config+0xd4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <SystemClock_Config+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a24      	ldr	r2, [pc, #144]	; (8000aac <SystemClock_Config+0xd8>)
 8000a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <SystemClock_Config+0xd8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a40:	2304      	movs	r3, #4
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a44:	23d8      	movs	r3, #216	; 0xd8
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a4c:	2309      	movs	r3, #9
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fa4b 	bl	8001ef0 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a60:	f000 fbf6 	bl	8001250 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a64:	f001 f9f4 	bl	8001e50 <HAL_PWREx_EnableOverDrive>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a6e:	f000 fbef 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2107      	movs	r1, #7
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fcd1 	bl	8002438 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a9c:	f000 fbd8 	bl	8001250 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	; 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	; 0x40
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aec:	4b40      	ldr	r3, [pc, #256]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000aee:	4a41      	ldr	r2, [pc, #260]	; (8000bf4 <MX_TIM1_Init+0x144>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 8000af2:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000af4:	226b      	movs	r2, #107	; 0x6b
 8000af6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b3d      	ldr	r3, [pc, #244]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000afe:	4b3c      	ldr	r3, [pc, #240]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b0c:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b37      	ldr	r3, [pc, #220]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b18:	4835      	ldr	r0, [pc, #212]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b1a:	f002 faa3 	bl	8003064 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b24:	f000 fb94 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b32:	4619      	mov	r1, r3
 8000b34:	482e      	ldr	r0, [pc, #184]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b36:	f003 f8bf 	bl	8003cb8 <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b40:	f000 fb86 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b44:	482a      	ldr	r0, [pc, #168]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b46:	f002 fc35 	bl	80033b4 <HAL_TIM_IC_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b50:	f000 fb7e 	bl	8001250 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b54:	2304      	movs	r3, #4
 8000b56:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b58:	2350      	movs	r3, #80	; 0x50
 8000b5a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b70:	f003 f96c 	bl	8003e4c <HAL_TIM_SlaveConfigSynchro>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000b7a:	f000 fb69 	bl	8001250 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b82:	2301      	movs	r3, #1
 8000b84:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	4816      	ldr	r0, [pc, #88]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b98:	f002 fedd 	bl	8003956 <HAL_TIM_IC_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ba2:	f000 fb55 	bl	8001250 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000baa:	2302      	movs	r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000bb8:	f002 fecd 	bl	8003956 <HAL_TIM_IC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bc2:	f000 fb45 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000bd8:	f003 ff58 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000be2:	f000 fb35 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3740      	adds	r7, #64	; 0x40
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000088 	.word	0x20000088
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c26:	226b      	movs	r2, #107	; 0x6b
 8000c28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c32:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <MX_TIM2_Init+0xb0>)
 8000c34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c42:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c44:	f002 fa65 	bl	8003112 <HAL_TIM_PWM_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c4e:	f000 faff 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c62:	f003 ff13 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c6c:	f000 faf0 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c70:	2360      	movs	r3, #96	; 0x60
 8000c72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000c74:	230a      	movs	r3, #10
 8000c76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	2208      	movs	r2, #8
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c88:	f002 ff02 	bl	8003a90 <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c92:	f000 fadd 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c98:	f000 fbbc 	bl	8001414 <HAL_TIM_MspPostInit>

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000d4 	.word	0x200000d4
 8000ca8:	00030d3f 	.word	0x00030d3f

08000cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000cea:	4a3e      	ldr	r2, [pc, #248]	; (8000de4 <MX_TIM3_Init+0x138>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8000cee:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000cf0:	226b      	movs	r2, #107	; 0x6b
 8000cf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cfa:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d0e:	4834      	ldr	r0, [pc, #208]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d10:	f002 f9a8 	bl	8003064 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000d1a:	f000 fa99 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d28:	4619      	mov	r1, r3
 8000d2a:	482d      	ldr	r0, [pc, #180]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d2c:	f002 ffc4 	bl	8003cb8 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d36:	f000 fa8b 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d3c:	f002 fb3a 	bl	80033b4 <HAL_TIM_IC_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d46:	f000 fa83 	bl	8001250 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d4e:	2350      	movs	r3, #80	; 0x50
 8000d50:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	481e      	ldr	r0, [pc, #120]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d66:	f003 f871 	bl	8003e4c <HAL_TIM_SlaveConfigSynchro>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000d70:	f000 fa6e 	bl	8001250 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4814      	ldr	r0, [pc, #80]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d8e:	f002 fde2 	bl	8003956 <HAL_TIM_IC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000d98:	f000 fa5a 	bl	8001250 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000da0:	2302      	movs	r3, #2
 8000da2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2204      	movs	r2, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000dae:	f002 fdd2 	bl	8003956 <HAL_TIM_IC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8000db8:	f000 fa4a 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000dca:	f003 fe5f 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8000dd4:	f000 fa3c 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3740      	adds	r7, #64	; 0x40
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000120 	.word	0x20000120
 8000de4:	40000400 	.word	0x40000400

08000de8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <MX_TIM9_Init+0xc0>)
 8000e12:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e16:	226b      	movs	r2, #107	; 0x6b
 8000e18:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e22:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e26:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000e34:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e36:	f002 f915 	bl	8003064 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 fa06 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e52:	f002 ff31 	bl	8003cb8 <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000e5c:	f000 f9f8 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000e60:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e62:	f002 f956 	bl	8003112 <HAL_TIM_PWM_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000e6c:	f000 f9f0 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e70:	2360      	movs	r3, #96	; 0x60
 8000e72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e88:	f002 fe02 	bl	8003a90 <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000e92:	f000 f9dd 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e98:	f000 fabc 	bl	8001414 <HAL_TIM_MspPostInit>

}
 8000e9c:	bf00      	nop
 8000e9e:	3730      	adds	r7, #48	; 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000016c 	.word	0x2000016c
 8000ea8:	40014000 	.word	0x40014000

08000eac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_USART3_UART_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ef0:	f003 fe78 	bl	8004be4 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000efa:	f000 f9a9 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001b8 	.word	0x200001b8
 8000f08:	40004800 	.word	0x40004800

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f22:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a8b      	ldr	r2, [pc, #556]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b89      	ldr	r3, [pc, #548]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b86      	ldr	r3, [pc, #536]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a85      	ldr	r2, [pc, #532]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b83      	ldr	r3, [pc, #524]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	4b80      	ldr	r3, [pc, #512]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a7f      	ldr	r2, [pc, #508]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a79      	ldr	r2, [pc, #484]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b77      	ldr	r3, [pc, #476]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b74      	ldr	r3, [pc, #464]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a73      	ldr	r2, [pc, #460]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b71      	ldr	r3, [pc, #452]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a6d      	ldr	r2, [pc, #436]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb2:	4b68      	ldr	r3, [pc, #416]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a67      	ldr	r2, [pc, #412]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b65      	ldr	r3, [pc, #404]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4862      	ldr	r0, [pc, #392]	; (8001158 <MX_GPIO_Init+0x24c>)
 8000fd0:	f000 ff14 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fda:	4860      	ldr	r0, [pc, #384]	; (800115c <MX_GPIO_Init+0x250>)
 8000fdc:	f000 ff0e 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	485e      	ldr	r0, [pc, #376]	; (8001160 <MX_GPIO_Init+0x254>)
 8000fe6:	f000 ff09 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4855      	ldr	r0, [pc, #340]	; (8001158 <MX_GPIO_Init+0x24c>)
 8001002:	f000 fd4f 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	484e      	ldr	r0, [pc, #312]	; (8001158 <MX_GPIO_Init+0x24c>)
 800101e:	f000 fd41 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001022:	2332      	movs	r3, #50	; 0x32
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001032:	230b      	movs	r3, #11
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4846      	ldr	r0, [pc, #280]	; (8001158 <MX_GPIO_Init+0x24c>)
 800103e:	f000 fd31 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001042:	2386      	movs	r3, #134	; 0x86
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001052:	230b      	movs	r3, #11
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4841      	ldr	r0, [pc, #260]	; (8001164 <MX_GPIO_Init+0x258>)
 800105e:	f000 fd21 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001062:	2308      	movs	r3, #8
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	483b      	ldr	r0, [pc, #236]	; (8001164 <MX_GPIO_Init+0x258>)
 8001076:	f000 fd15 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800107a:	f244 0381 	movw	r3, #16513	; 0x4081
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4832      	ldr	r0, [pc, #200]	; (800115c <MX_GPIO_Init+0x250>)
 8001094:	f000 fd06 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010aa:	230b      	movs	r3, #11
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4829      	ldr	r0, [pc, #164]	; (800115c <MX_GPIO_Init+0x250>)
 80010b6:	f000 fcf5 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010ba:	2340      	movs	r3, #64	; 0x40
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4823      	ldr	r0, [pc, #140]	; (8001160 <MX_GPIO_Init+0x254>)
 80010d2:	f000 fce7 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	481d      	ldr	r0, [pc, #116]	; (8001160 <MX_GPIO_Init+0x254>)
 80010ea:	f000 fcdb 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001100:	230a      	movs	r3, #10
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4816      	ldr	r0, [pc, #88]	; (8001164 <MX_GPIO_Init+0x258>)
 800110c:	f000 fcca 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <MX_GPIO_Init+0x258>)
 8001126:	f000 fcbd 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800112a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113c:	230b      	movs	r3, #11
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <MX_GPIO_Init+0x254>)
 8001148:	f000 fcac 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114c:	bf00      	nop
 800114e:	3730      	adds	r7, #48	; 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40020800 	.word	0x40020800
 800115c:	40020400 	.word	0x40020400
 8001160:	40021800 	.word	0x40021800
 8001164:	40020000 	.word	0x40020000

08001168 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a2d      	ldr	r2, [pc, #180]	; (800122c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d111      	bne.n	800119e <HAL_TIM_IC_CaptureCallback+0x36>
	{
		uint32_t echo_us;
          // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800117a:	2104      	movs	r1, #4
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f002 fea7 	bl	8003ed0 <HAL_TIM_ReadCapturedValue>
 8001182:	6178      	str	r0, [r7, #20]
		dx_cm = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8001184:	6978      	ldr	r0, [r7, #20]
 8001186:	f7ff faa7 	bl	80006d8 <hc_sr04_convert_us_to_cm>
 800118a:	4602      	mov	r2, r0
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	ee07 2a90 	vmov	s15, r2
 8001194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
	}

	if(TIM3 == htim->Instance)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d111      	bne.n	80011cc <HAL_TIM_IC_CaptureCallback+0x64>
	{
		uint32_t echo_us;
        // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80011a8:	2104      	movs	r1, #4
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f002 fe90 	bl	8003ed0 <HAL_TIM_ReadCapturedValue>
 80011b0:	6138      	str	r0, [r7, #16]
		dx_cm2 = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 80011b2:	6938      	ldr	r0, [r7, #16]
 80011b4:	f7ff fa90 	bl	80006d8 <hc_sr04_convert_us_to_cm>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	ee07 2a90 	vmov	s15, r2
 80011c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_TIM_IC_CaptureCallback+0xd4>)
 80011c8:	edc3 7a00 	vstr	s15, [r3]
	}
	IFX_EMA_SetBeta(&hpFilter, BETA_VALUE);
 80011cc:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001240 <HAL_TIM_IC_CaptureCallback+0xd8>
 80011d0:	481c      	ldr	r0, [pc, #112]	; (8001244 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80011d2:	f7ff f9ae 	bl	8000532 <IFX_EMA_SetBeta>
	    float filteredData1 = IFX_EMA_Update(&hpFilter, dx_cm);
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eeb0 0a67 	vmov.f32	s0, s15
 80011e0:	4818      	ldr	r0, [pc, #96]	; (8001244 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80011e2:	f7ff f9cc 	bl	800057e <IFX_EMA_Update>
 80011e6:	ed87 0a03 	vstr	s0, [r7, #12]
	    float filteredData2 = IFX_EMA_Update(&hpFilter, dx_cm2);
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_TIM_IC_CaptureCallback+0xd4>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80011f6:	f7ff f9c2 	bl	800057e <IFX_EMA_Update>
 80011fa:	ed87 0a02 	vstr	s0, [r7, #8]

	    // Calculate average distance or perform any other processing
	    average_distance = position(filteredData1, filteredData2, pos);
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	eeb0 1a67 	vmov.f32	s2, s15
 8001208:	edd7 0a02 	vldr	s1, [r7, #8]
 800120c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001210:	f7ff fa74 	bl	80006fc <position>
 8001214:	ee07 0a90 	vmov	s15, r0
 8001218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_TIM_IC_CaptureCallback+0xe4>)
 800121e:	edc3 7a00 	vstr	s15, [r3]
	//average_distance = position(dx_cm,dx_cm2,pos);

}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40010000 	.word	0x40010000
 8001230:	20000250 	.word	0x20000250
 8001234:	20000240 	.word	0x20000240
 8001238:	40000400 	.word	0x40000400
 800123c:	20000244 	.word	0x20000244
 8001240:	3f4ccccd 	.word	0x3f4ccccd
 8001244:	20000270 	.word	0x20000270
 8001248:	2000024c 	.word	0x2000024c
 800124c:	20000248 	.word	0x20000248

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_MspInit+0x44>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_MspInit+0x44>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_MspInit+0x44>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x44>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x44>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x44>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a3f      	ldr	r2, [pc, #252]	; (80013c0 <HAL_TIM_Base_MspInit+0x11c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d131      	bne.n	800132a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012de:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001308:	2301      	movs	r3, #1
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	482d      	ldr	r0, [pc, #180]	; (80013c8 <HAL_TIM_Base_MspInit+0x124>)
 8001314:	f000 fbc6 	bl	8001aa4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	201b      	movs	r0, #27
 800131e:	f000 faf8 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001322:	201b      	movs	r0, #27
 8001324:	f000 fb11 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001328:	e046      	b.n	80013b8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a27      	ldr	r2, [pc, #156]	; (80013cc <HAL_TIM_Base_MspInit+0x128>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d130      	bne.n	8001396 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6313      	str	r3, [r2, #48]	; 0x30
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001364:	2340      	movs	r3, #64	; 0x40
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001374:	2302      	movs	r3, #2
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4814      	ldr	r0, [pc, #80]	; (80013d0 <HAL_TIM_Base_MspInit+0x12c>)
 8001380:	f000 fb90 	bl	8001aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	201d      	movs	r0, #29
 800138a:	f000 fac2 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800138e:	201d      	movs	r0, #29
 8001390:	f000 fadb 	bl	800194a <HAL_NVIC_EnableIRQ>
}
 8001394:	e010      	b.n	80013b8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM9)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_TIM_Base_MspInit+0x130>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d10b      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013aa:	6453      	str	r3, [r2, #68]	; 0x44
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_TIM_Base_MspInit+0x120>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
}
 80013b8:	bf00      	nop
 80013ba:	3730      	adds	r7, #48	; 0x30
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40010000 	.word	0x40010000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40000400 	.word	0x40000400
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40014000 	.word	0x40014000

080013d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e8:	d10b      	bne.n	8001402 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_TIM_PWM_MspInit+0x38>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_TIM_PWM_MspInit+0x38>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_TIM_PWM_MspInit+0x38>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001434:	d11d      	bne.n	8001472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_TIM_MspPostInit+0xa8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a20      	ldr	r2, [pc, #128]	; (80014bc <HAL_TIM_MspPostInit+0xa8>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_TIM_MspPostInit+0xa8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800144e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001460:	2301      	movs	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4815      	ldr	r0, [pc, #84]	; (80014c0 <HAL_TIM_MspPostInit+0xac>)
 800146c:	f000 fb1a 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001470:	e020      	b.n	80014b4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM9)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_TIM_MspPostInit+0xb0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d11b      	bne.n	80014b4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_TIM_MspPostInit+0xa8>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_TIM_MspPostInit+0xa8>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_TIM_MspPostInit+0xa8>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001494:	2320      	movs	r3, #32
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80014a4:	2303      	movs	r3, #3
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <HAL_TIM_MspPostInit+0xb4>)
 80014b0:	f000 faf8 	bl	8001aa4 <HAL_GPIO_Init>
}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	; 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40014000 	.word	0x40014000
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0aa      	sub	sp, #168	; 0xa8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2284      	movs	r2, #132	; 0x84
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fe5d 	bl	80061ac <memset>
  if(huart->Instance==USART3)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_UART_MspInit+0xc4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d144      	bne.n	8001586 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001500:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001502:	2300      	movs	r3, #0
 8001504:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4618      	mov	r0, r3
 800150c:	f001 f9ba 	bl	8002884 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001516:	f7ff fe9b 	bl	8001250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_UART_MspInit+0xc8>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_UART_MspInit+0xc8>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_UART_MspInit+0xc8>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_UART_MspInit+0xc8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <HAL_UART_MspInit+0xc8>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_UART_MspInit+0xc8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800154a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800154e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001558:	2301      	movs	r3, #1
 800155a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001564:	2307      	movs	r3, #7
 8001566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800156e:	4619      	mov	r1, r3
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <HAL_UART_MspInit+0xcc>)
 8001572:	f000 fa97 	bl	8001aa4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2027      	movs	r0, #39	; 0x27
 800157c:	f000 f9c9 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001580:	2027      	movs	r0, #39	; 0x27
 8001582:	f000 f9e2 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	37a8      	adds	r7, #168	; 0xa8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40004800 	.word	0x40004800
 8001594:	40023800 	.word	0x40023800
 8001598:	40020c00 	.word	0x40020c00

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <NMI_Handler+0x4>

080015a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler+0x4>

080015ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e8:	f000 f898 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM1_CC_IRQHandler+0x10>)
 80015f6:	f002 f88f 	bl	8003718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000088 	.word	0x20000088

08001604 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM3_IRQHandler+0x10>)
 800160a:	f002 f885 	bl	8003718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000120 	.word	0x20000120

08001618 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <USART3_IRQHandler+0x10>)
 800161e:	f003 fb73 	bl	8004d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200001b8 	.word	0x200001b8

0800162c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001656:	490e      	ldr	r1, [pc, #56]	; (8001690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800166c:	4c0b      	ldr	r4, [pc, #44]	; (800169c <LoopFillZerobss+0x26>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167a:	f7ff ffd7 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167e:	f004 fda3 	bl	80061c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff f95d 	bl	8000940 <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001694:	080063f8 	.word	0x080063f8
  ldr r2, =_sbss
 8001698:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800169c:	200003bc 	.word	0x200003bc

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>

080016a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a6:	2003      	movs	r0, #3
 80016a8:	f000 f928 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f000 f805 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b2:	f7ff fdd3 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f943 	bl	8001966 <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 f90b 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x5c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000010 	.word	0x20000010
 8001714:	20000018 	.word	0x20000018
 8001718:	20000014 	.word	0x20000014

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000018 	.word	0x20000018
 8001740:	20000280 	.word	0x20000280

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000280 	.word	0x20000280

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <__NVIC_SetPriorityGrouping+0x40>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	4313      	orrs	r3, r2
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x40>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00
 80017a0:	05fa0000 	.word	0x05fa0000

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff29 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff3e 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff8e 	bl	8001850 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5d 	bl	80017fc <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff31 	bl	80017c0 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff feda 	bl	8001744 <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d008      	beq.n	80019b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2280      	movs	r2, #128	; 0x80
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e052      	b.n	8001a56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0216 	bic.w	r2, r2, #22
 80019be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d103      	bne.n	80019e0 <HAL_DMA_Abort+0x62>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0208 	bic.w	r2, r2, #8
 80019ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a00:	e013      	b.n	8001a2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a02:	f7ff fe9f 	bl	8001744 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d90c      	bls.n	8001a2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2220      	movs	r2, #32
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e015      	b.n	8001a56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e4      	bne.n	8001a02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	223f      	movs	r2, #63	; 0x3f
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d004      	beq.n	8001a7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e00c      	b.n	8001a96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2205      	movs	r2, #5
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e175      	b.n	8001db0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f040 8164 	bne.w	8001daa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d005      	beq.n	8001afa <HAL_GPIO_Init+0x56>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d130      	bne.n	8001b5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d017      	beq.n	8001b98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d123      	bne.n	8001bec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	08da      	lsrs	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3208      	adds	r2, #8
 8001bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	69b9      	ldr	r1, [r7, #24]
 8001be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80be 	beq.w	8001daa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a65      	ldr	r2, [pc, #404]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c46:	4a61      	ldr	r2, [pc, #388]	; (8001dcc <HAL_GPIO_Init+0x328>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d037      	beq.n	8001ce2 <HAL_GPIO_Init+0x23e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a57      	ldr	r2, [pc, #348]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d031      	beq.n	8001cde <HAL_GPIO_Init+0x23a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a56      	ldr	r2, [pc, #344]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d02b      	beq.n	8001cda <HAL_GPIO_Init+0x236>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a55      	ldr	r2, [pc, #340]	; (8001ddc <HAL_GPIO_Init+0x338>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d025      	beq.n	8001cd6 <HAL_GPIO_Init+0x232>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <HAL_GPIO_Init+0x33c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01f      	beq.n	8001cd2 <HAL_GPIO_Init+0x22e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a53      	ldr	r2, [pc, #332]	; (8001de4 <HAL_GPIO_Init+0x340>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d019      	beq.n	8001cce <HAL_GPIO_Init+0x22a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	; (8001de8 <HAL_GPIO_Init+0x344>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x226>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a51      	ldr	r2, [pc, #324]	; (8001dec <HAL_GPIO_Init+0x348>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x222>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a50      	ldr	r2, [pc, #320]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x21e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4f      	ldr	r2, [pc, #316]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x21a>
 8001cba:	2309      	movs	r3, #9
 8001cbc:	e012      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	e010      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	e00e      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e00c      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e00a      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e008      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cf4:	4935      	ldr	r1, [pc, #212]	; (8001dcc <HAL_GPIO_Init+0x328>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <HAL_GPIO_Init+0x354>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d26:	4a34      	ldr	r2, [pc, #208]	; (8001df8 <HAL_GPIO_Init+0x354>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d2c:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <HAL_GPIO_Init+0x354>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d50:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_GPIO_Init+0x354>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_GPIO_Init+0x354>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_GPIO_Init+0x354>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_GPIO_Init+0x354>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <HAL_GPIO_Init+0x354>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	f67f ae86 	bls.w	8001ac4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40021400 	.word	0x40021400
 8001de8:	40021800 	.word	0x40021800
 8001dec:	40021c00 	.word	0x40021c00
 8001df0:	40022000 	.word	0x40022000
 8001df4:	40022400 	.word	0x40022400
 8001df8:	40013c00 	.word	0x40013c00

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e18:	e003      	b.n	8001e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	041a      	lsls	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	619a      	str	r2, [r3, #24]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40007000 	.word	0x40007000

08001e50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e72:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e7e:	f7ff fc61 	bl	8001744 <HAL_GetTick>
 8001e82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e84:	e009      	b.n	8001e9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e86:	f7ff fc5d 	bl	8001744 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e94:	d901      	bls.n	8001e9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e022      	b.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb4:	f7ff fc46 	bl	8001744 <HAL_GetTick>
 8001eb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eba:	e009      	b.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ebc:	f7ff fc42 	bl	8001744 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eca:	d901      	bls.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e007      	b.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001edc:	d1ee      	bne.n	8001ebc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000

08001ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e291      	b.n	800242a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b96      	ldr	r3, [pc, #600]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f20:	4b93      	ldr	r3, [pc, #588]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62>
 8001f2c:	4b90      	ldr	r3, [pc, #576]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f38:	d10b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	4b8d      	ldr	r3, [pc, #564]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06c      	beq.n	8002020 <HAL_RCC_OscConfig+0x130>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d168      	bne.n	8002020 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e26b      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x7a>
 8001f5c:	4b84      	ldr	r3, [pc, #528]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a83      	ldr	r2, [pc, #524]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e02e      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x9c>
 8001f72:	4b7f      	ldr	r3, [pc, #508]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7e      	ldr	r2, [pc, #504]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b7c      	ldr	r3, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7b      	ldr	r2, [pc, #492]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xc0>
 8001f96:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a75      	ldr	r2, [pc, #468]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b73      	ldr	r3, [pc, #460]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a72      	ldr	r2, [pc, #456]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd8>
 8001fb0:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6e      	ldr	r2, [pc, #440]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b6c      	ldr	r3, [pc, #432]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6b      	ldr	r2, [pc, #428]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fbb8 	bl	8001744 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fbb4 	bl	8001744 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e21f      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b61      	ldr	r3, [pc, #388]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe8>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fba4 	bl	8001744 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff fba0 	bl	8001744 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e20b      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	4b57      	ldr	r3, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x110>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d069      	beq.n	8002102 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202e:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203a:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x190>
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x17a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1df      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	493d      	ldr	r1, [pc, #244]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e040      	b.n	8002102 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d023      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fb56 	bl	8001744 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff fb52 	bl	8001744 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1bd      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4929      	ldr	r1, [pc, #164]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
 80020ce:	e018      	b.n	8002102 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff fb32 	bl	8001744 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff fb2e 	bl	8001744 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e199      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d038      	beq.n	8002180 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d019      	beq.n	800214a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8002118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002122:	f7ff fb0f 	bl	8001744 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212a:	f7ff fb0b 	bl	8001744 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e176      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 800213e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x23a>
 8002148:	e01a      	b.n	8002180 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 800214c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_RCC_OscConfig+0x280>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff faf5 	bl	8001744 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215e:	f7ff faf1 	bl	8001744 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d903      	bls.n	8002174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e15c      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
 8002170:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	4b91      	ldr	r3, [pc, #580]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ee      	bne.n	800215e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80a4 	beq.w	80022d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b8b      	ldr	r3, [pc, #556]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b88      	ldr	r3, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a87      	ldr	r2, [pc, #540]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b85      	ldr	r3, [pc, #532]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b6:	4b82      	ldr	r3, [pc, #520]	; (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021c2:	4b7f      	ldr	r3, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7e      	ldr	r2, [pc, #504]	; (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fab9 	bl	8001744 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7ff fab5 	bl	8001744 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	; 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e120      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e8:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <HAL_RCC_OscConfig+0x4d0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x31a>
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a6e      	ldr	r2, [pc, #440]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
 8002208:	e02d      	b.n	8002266 <HAL_RCC_OscConfig+0x376>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x33c>
 8002212:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a69      	ldr	r2, [pc, #420]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	4b67      	ldr	r3, [pc, #412]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a66      	ldr	r2, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
 800222a:	e01c      	b.n	8002266 <HAL_RCC_OscConfig+0x376>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d10c      	bne.n	800224e <HAL_RCC_OscConfig+0x35e>
 8002234:	4b61      	ldr	r3, [pc, #388]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	4a60      	ldr	r2, [pc, #384]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6713      	str	r3, [r2, #112]	; 0x70
 8002240:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	4a5d      	ldr	r2, [pc, #372]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	; 0x70
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0x376>
 800224e:	4b5b      	ldr	r3, [pc, #364]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	4a5a      	ldr	r2, [pc, #360]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6713      	str	r3, [r2, #112]	; 0x70
 800225a:	4b58      	ldr	r3, [pc, #352]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	4a57      	ldr	r2, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002260:	f023 0304 	bic.w	r3, r3, #4
 8002264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226e:	f7ff fa69 	bl	8001744 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7ff fa65 	bl	8001744 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0ce      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ee      	beq.n	8002276 <HAL_RCC_OscConfig+0x386>
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7ff fa53 	bl	8001744 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7ff fa4f 	bl	8001744 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0b8      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b8:	4b40      	ldr	r3, [pc, #256]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b3c      	ldr	r3, [pc, #240]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a3b      	ldr	r2, [pc, #236]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80a4 	beq.w	8002428 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e0:	4b36      	ldr	r3, [pc, #216]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d06b      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d149      	bne.n	8002388 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a30      	ldr	r2, [pc, #192]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff fa20 	bl	8001744 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff fa1c 	bl	8001744 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e087      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b28      	ldr	r3, [pc, #160]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	4313      	orrs	r3, r2
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800234e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002352:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff f9f0 	bl	8001744 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff f9ec 	bl	8001744 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e057      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x478>
 8002386:	e04f      	b.n	8002428 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 800238e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff f9d6 	bl	8001744 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7ff f9d2 	bl	8001744 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e03d      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCC_OscConfig+0x4cc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x4ac>
 80023ba:	e035      	b.n	8002428 <HAL_RCC_OscConfig+0x538>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x544>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d028      	beq.n	8002424 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d121      	bne.n	8002424 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11a      	bne.n	8002424 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d111      	bne.n	8002424 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0d0      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d910      	bls.n	8002480 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b67      	ldr	r3, [pc, #412]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 020f 	bic.w	r2, r3, #15
 8002466:	4965      	ldr	r1, [pc, #404]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b63      	ldr	r3, [pc, #396]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b8      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002498:	4b59      	ldr	r3, [pc, #356]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a58      	ldr	r2, [pc, #352]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a52      	ldr	r2, [pc, #328]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024bc:	4b50      	ldr	r3, [pc, #320]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	494d      	ldr	r1, [pc, #308]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d040      	beq.n	800255c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d115      	bne.n	800251a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e07f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fa:	4b41      	ldr	r3, [pc, #260]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e073      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e06b      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251a:	4b39      	ldr	r3, [pc, #228]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 0203 	bic.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4936      	ldr	r1, [pc, #216]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7ff f90a 	bl	8001744 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	e00a      	b.n	800254a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7ff f906 	bl	8001744 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e053      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 020c 	and.w	r2, r3, #12
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	429a      	cmp	r2, r3
 800255a:	d1eb      	bne.n	8002534 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d210      	bcs.n	800258c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 020f 	bic.w	r2, r3, #15
 8002572:	4922      	ldr	r1, [pc, #136]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e032      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4916      	ldr	r1, [pc, #88]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	490e      	ldr	r1, [pc, #56]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ca:	f000 f821 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	490a      	ldr	r1, [pc, #40]	; (8002604 <HAL_RCC_ClockConfig+0x1cc>)
 80025dc:	5ccb      	ldrb	r3, [r1, r3]
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1d0>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1d4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f866 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00
 8002600:	40023800 	.word	0x40023800
 8002604:	080062cc 	.word	0x080062cc
 8002608:	20000010 	.word	0x20000010
 800260c:	20000014 	.word	0x20000014

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b094      	sub	sp, #80	; 0x50
 8002616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
 800261c:	2300      	movs	r3, #0
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002620:	2300      	movs	r3, #0
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002628:	4b79      	ldr	r3, [pc, #484]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x40>
 8002634:	2b08      	cmp	r3, #8
 8002636:	f200 80e1 	bhi.w	80027fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x34>
 800263e:	2b04      	cmp	r3, #4
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x3a>
 8002642:	e0db      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b73      	ldr	r3, [pc, #460]	; (8002814 <HAL_RCC_GetSysClockFreq+0x204>)
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002648:	e0db      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264a:	4b73      	ldr	r3, [pc, #460]	; (8002818 <HAL_RCC_GetSysClockFreq+0x208>)
 800264c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800264e:	e0d8      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002650:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	2200      	movs	r2, #0
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002670:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
 800267e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002682:	4622      	mov	r2, r4
 8002684:	462b      	mov	r3, r5
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	0159      	lsls	r1, r3, #5
 8002690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002694:	0150      	lsls	r0, r2, #5
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4621      	mov	r1, r4
 800269c:	1a51      	subs	r1, r2, r1
 800269e:	6139      	str	r1, [r7, #16]
 80026a0:	4629      	mov	r1, r5
 80026a2:	eb63 0301 	sbc.w	r3, r3, r1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b4:	4659      	mov	r1, fp
 80026b6:	018b      	lsls	r3, r1, #6
 80026b8:	4651      	mov	r1, sl
 80026ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026be:	4651      	mov	r1, sl
 80026c0:	018a      	lsls	r2, r1, #6
 80026c2:	4651      	mov	r1, sl
 80026c4:	ebb2 0801 	subs.w	r8, r2, r1
 80026c8:	4659      	mov	r1, fp
 80026ca:	eb63 0901 	sbc.w	r9, r3, r1
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e2:	4690      	mov	r8, r2
 80026e4:	4699      	mov	r9, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	eb18 0303 	adds.w	r3, r8, r3
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	462b      	mov	r3, r5
 80026f0:	eb49 0303 	adc.w	r3, r9, r3
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002702:	4629      	mov	r1, r5
 8002704:	024b      	lsls	r3, r1, #9
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800270c:	4621      	mov	r1, r4
 800270e:	024a      	lsls	r2, r1, #9
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
 800271a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800271c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002720:	f7fd fd72 	bl	8000208 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800272c:	e058      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	2200      	movs	r2, #0
 8002736:	4618      	mov	r0, r3
 8002738:	4611      	mov	r1, r2
 800273a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002748:	4642      	mov	r2, r8
 800274a:	464b      	mov	r3, r9
 800274c:	f04f 0000 	mov.w	r0, #0
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	0159      	lsls	r1, r3, #5
 8002756:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275a:	0150      	lsls	r0, r2, #5
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4641      	mov	r1, r8
 8002762:	ebb2 0a01 	subs.w	sl, r2, r1
 8002766:	4649      	mov	r1, r9
 8002768:	eb63 0b01 	sbc.w	fp, r3, r1
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002778:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800277c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002780:	ebb2 040a 	subs.w	r4, r2, sl
 8002784:	eb63 050b 	sbc.w	r5, r3, fp
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	00eb      	lsls	r3, r5, #3
 8002792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002796:	00e2      	lsls	r2, r4, #3
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	4643      	mov	r3, r8
 800279e:	18e3      	adds	r3, r4, r3
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	464b      	mov	r3, r9
 80027a4:	eb45 0303 	adc.w	r3, r5, r3
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b6:	4629      	mov	r1, r5
 80027b8:	028b      	lsls	r3, r1, #10
 80027ba:	4621      	mov	r1, r4
 80027bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027c0:	4621      	mov	r1, r4
 80027c2:	028a      	lsls	r2, r1, #10
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ca:	2200      	movs	r2, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	61fa      	str	r2, [r7, #28]
 80027d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d4:	f7fd fd18 	bl	8000208 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002804:	4618      	mov	r0, r3
 8002806:	3750      	adds	r7, #80	; 0x50
 8002808:	46bd      	mov	sp, r7
 800280a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	00f42400 	.word	0x00f42400
 8002818:	007a1200 	.word	0x007a1200

0800281c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCC_GetHCLKFreq+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000010 	.word	0x20000010

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002838:	f7ff fff0 	bl	800281c <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0a9b      	lsrs	r3, r3, #10
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	080062dc 	.word	0x080062dc

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffdc 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0b5b      	lsrs	r3, r3, #13
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	080062dc 	.word	0x080062dc

08002884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d012      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028ac:	4b69      	ldr	r3, [pc, #420]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028b6:	6093      	str	r3, [r2, #8]
 80028b8:	4b66      	ldr	r3, [pc, #408]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	4964      	ldr	r1, [pc, #400]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d017      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028de:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ec:	4959      	ldr	r1, [pc, #356]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028fc:	d101      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d017      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800291a:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002920:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	494a      	ldr	r1, [pc, #296]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002938:	d101      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002946:	2301      	movs	r3, #1
 8002948:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 808b 	beq.w	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4a39      	ldr	r2, [pc, #228]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002972:	6413      	str	r3, [r2, #64]	; 0x40
 8002974:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7fe feda 	bl	8001744 <HAL_GetTick>
 8002990:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fed6 	bl	8001744 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e357      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d035      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d02e      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d114      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fe9e 	bl	8001744 <HAL_GetTick>
 8002a08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fe9a 	bl	8001744 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e319      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ee      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a3a:	d111      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	4901      	ldr	r1, [pc, #4]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	0ffffcff 	.word	0x0ffffcff
 8002a60:	4baa      	ldr	r3, [pc, #680]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4aa9      	ldr	r2, [pc, #676]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a6a:	6093      	str	r3, [r2, #8]
 8002a6c:	4ba7      	ldr	r3, [pc, #668]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	49a4      	ldr	r1, [pc, #656]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d010      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a8a:	4ba0      	ldr	r3, [pc, #640]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a90:	4a9e      	ldr	r2, [pc, #632]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a9a:	4b9c      	ldr	r3, [pc, #624]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	4999      	ldr	r1, [pc, #612]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab8:	4b94      	ldr	r3, [pc, #592]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac6:	4991      	ldr	r1, [pc, #580]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ada:	4b8c      	ldr	r3, [pc, #560]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae8:	4988      	ldr	r1, [pc, #544]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002afc:	4b83      	ldr	r3, [pc, #524]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0a:	4980      	ldr	r1, [pc, #512]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b1e:	4b7b      	ldr	r3, [pc, #492]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	4977      	ldr	r1, [pc, #476]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b40:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	496f      	ldr	r1, [pc, #444]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b62:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f023 020c 	bic.w	r2, r3, #12
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	4966      	ldr	r1, [pc, #408]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b84:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	495e      	ldr	r1, [pc, #376]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ba6:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb4:	4955      	ldr	r1, [pc, #340]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	494d      	ldr	r1, [pc, #308]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bea:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	4944      	ldr	r1, [pc, #272]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	493c      	ldr	r1, [pc, #240]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c2e:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3c:	4933      	ldr	r1, [pc, #204]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c50:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c5e:	492b      	ldr	r1, [pc, #172]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d011      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c80:	4922      	ldr	r1, [pc, #136]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c90:	d101      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc0:	4912      	ldr	r1, [pc, #72]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce4:	4909      	ldr	r1, [pc, #36]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d006      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80d9 	beq.w	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a01      	ldr	r2, [pc, #4]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d0a:	e001      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d12:	f7fe fd17 	bl	8001744 <HAL_GetTick>
 8002d16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d1a:	f7fe fd13 	bl	8001744 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b64      	cmp	r3, #100	; 0x64
 8002d26:	d901      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e194      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d021      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11d      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d4c:	4b64      	ldr	r3, [pc, #400]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d5a:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d60:	0e1b      	lsrs	r3, r3, #24
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	019a      	lsls	r2, r3, #6
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	071b      	lsls	r3, r3, #28
 8002d80:	4957      	ldr	r1, [pc, #348]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02e      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db2:	d129      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002db4:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc8:	0f1b      	lsrs	r3, r3, #28
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	019a      	lsls	r2, r3, #6
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	071b      	lsls	r3, r3, #28
 8002de8:	493d      	ldr	r1, [pc, #244]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002df0:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df6:	f023 021f 	bic.w	r2, r3, #31
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01d      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e14:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1a:	0e1b      	lsrs	r3, r3, #24
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e22:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e28:	0f1b      	lsrs	r3, r3, #28
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	019a      	lsls	r2, r3, #6
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	071b      	lsls	r3, r3, #28
 8002e48:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d011      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	019a      	lsls	r2, r3, #6
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	061b      	lsls	r3, r3, #24
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	071b      	lsls	r3, r3, #28
 8002e78:	4919      	ldr	r1, [pc, #100]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fc5a 	bl	8001744 <HAL_GetTick>
 8002e90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e94:	f7fe fc56 	bl	8001744 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0d7      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f040 80cd 	bne.w	8003054 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a08      	ldr	r2, [pc, #32]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec6:	f7fe fc3d 	bl	8001744 <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ece:	f7fe fc39 	bl	8001744 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b64      	cmp	r3, #100	; 0x64
 8002eda:	d903      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0ba      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ee0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d0ed      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02e      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d12a      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f1a:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f28:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	0f1b      	lsrs	r3, r3, #28
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	019a      	lsls	r2, r3, #6
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	4944      	ldr	r1, [pc, #272]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f56:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	3b01      	subs	r3, #1
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	493d      	ldr	r1, [pc, #244]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d022      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f84:	d11d      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	0e1b      	lsrs	r3, r3, #24
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	0f1b      	lsrs	r3, r3, #28
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	019a      	lsls	r2, r3, #6
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	4929      	ldr	r1, [pc, #164]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d028      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	0e1b      	lsrs	r3, r3, #24
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	019a      	lsls	r2, r3, #6
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	071b      	lsls	r3, r3, #28
 8003002:	4917      	ldr	r1, [pc, #92]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800300c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	4911      	ldr	r1, [pc, #68]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302c:	f7fe fb8a 	bl	8001744 <HAL_GetTick>
 8003030:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003034:	f7fe fb86 	bl	8001744 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e007      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003052:	d1ef      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800

08003064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e049      	b.n	800310a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe f90a 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f000 ff76 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e049      	b.n	80031b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fe f94d 	bl	80013d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f000 ff1f 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <HAL_TIM_PWM_Start+0x24>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e03c      	b.n	800325e <HAL_TIM_PWM_Start+0x9e>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d109      	bne.n	80031fe <HAL_TIM_PWM_Start+0x3e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	bf14      	ite	ne
 80031f6:	2301      	movne	r3, #1
 80031f8:	2300      	moveq	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	e02f      	b.n	800325e <HAL_TIM_PWM_Start+0x9e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d109      	bne.n	8003218 <HAL_TIM_PWM_Start+0x58>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e022      	b.n	800325e <HAL_TIM_PWM_Start+0x9e>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d109      	bne.n	8003232 <HAL_TIM_PWM_Start+0x72>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b01      	cmp	r3, #1
 8003228:	bf14      	ite	ne
 800322a:	2301      	movne	r3, #1
 800322c:	2300      	moveq	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e015      	b.n	800325e <HAL_TIM_PWM_Start+0x9e>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b10      	cmp	r3, #16
 8003236:	d109      	bne.n	800324c <HAL_TIM_PWM_Start+0x8c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e008      	b.n	800325e <HAL_TIM_PWM_Start+0x9e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e092      	b.n	800338c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <HAL_TIM_PWM_Start+0xb6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003274:	e023      	b.n	80032be <HAL_TIM_PWM_Start+0xfe>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d104      	bne.n	8003286 <HAL_TIM_PWM_Start+0xc6>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003284:	e01b      	b.n	80032be <HAL_TIM_PWM_Start+0xfe>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d104      	bne.n	8003296 <HAL_TIM_PWM_Start+0xd6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003294:	e013      	b.n	80032be <HAL_TIM_PWM_Start+0xfe>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_PWM_Start+0xe6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032a4:	e00b      	b.n	80032be <HAL_TIM_PWM_Start+0xfe>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_PWM_Start+0xf6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032b4:	e003      	b.n	80032be <HAL_TIM_PWM_Start+0xfe>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	6839      	ldr	r1, [r7, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fbba 	bl	8004a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a30      	ldr	r2, [pc, #192]	; (8003394 <HAL_TIM_PWM_Start+0x1d4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_TIM_PWM_Start+0x120>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2f      	ldr	r2, [pc, #188]	; (8003398 <HAL_TIM_PWM_Start+0x1d8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_TIM_PWM_Start+0x124>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <HAL_TIM_PWM_Start+0x126>
 80032e4:	2300      	movs	r3, #0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a25      	ldr	r2, [pc, #148]	; (8003394 <HAL_TIM_PWM_Start+0x1d4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <HAL_TIM_PWM_Start+0x18a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330c:	d01d      	beq.n	800334a <HAL_TIM_PWM_Start+0x18a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_TIM_PWM_Start+0x1dc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d018      	beq.n	800334a <HAL_TIM_PWM_Start+0x18a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a20      	ldr	r2, [pc, #128]	; (80033a0 <HAL_TIM_PWM_Start+0x1e0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_TIM_PWM_Start+0x18a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_TIM_PWM_Start+0x1e4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_TIM_PWM_Start+0x18a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <HAL_TIM_PWM_Start+0x1d8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_TIM_PWM_Start+0x18a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <HAL_TIM_PWM_Start+0x1e8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d004      	beq.n	800334a <HAL_TIM_PWM_Start+0x18a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <HAL_TIM_PWM_Start+0x1ec>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d115      	bne.n	8003376 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <HAL_TIM_PWM_Start+0x1f0>)
 8003352:	4013      	ands	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b06      	cmp	r3, #6
 800335a:	d015      	beq.n	8003388 <HAL_TIM_PWM_Start+0x1c8>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d011      	beq.n	8003388 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003374:	e008      	b.n	8003388 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e000      	b.n	800338a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40010000 	.word	0x40010000
 8003398:	40010400 	.word	0x40010400
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40014000 	.word	0x40014000
 80033ac:	40001800 	.word	0x40001800
 80033b0:	00010007 	.word	0x00010007

080033b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e049      	b.n	800345a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f841 	bl	8003462 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f000 fdce 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <HAL_TIM_IC_Start_IT+0x1e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e023      	b.n	80034de <HAL_TIM_IC_Start_IT+0x66>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_IC_Start_IT+0x2e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e01b      	b.n	80034de <HAL_TIM_IC_Start_IT+0x66>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_IC_Start_IT+0x3e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	e013      	b.n	80034de <HAL_TIM_IC_Start_IT+0x66>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	d104      	bne.n	80034c6 <HAL_TIM_IC_Start_IT+0x4e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e00b      	b.n	80034de <HAL_TIM_IC_Start_IT+0x66>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_IC_Start_IT+0x5e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e003      	b.n	80034de <HAL_TIM_IC_Start_IT+0x66>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <HAL_TIM_IC_Start_IT+0x78>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e013      	b.n	8003518 <HAL_TIM_IC_Start_IT+0xa0>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d104      	bne.n	8003500 <HAL_TIM_IC_Start_IT+0x88>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e00b      	b.n	8003518 <HAL_TIM_IC_Start_IT+0xa0>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b08      	cmp	r3, #8
 8003504:	d104      	bne.n	8003510 <HAL_TIM_IC_Start_IT+0x98>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e003      	b.n	8003518 <HAL_TIM_IC_Start_IT+0xa0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003516:	b2db      	uxtb	r3, r3
 8003518:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800351a:	7bbb      	ldrb	r3, [r7, #14]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003520:	7b7b      	ldrb	r3, [r7, #13]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d001      	beq.n	800352a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0e2      	b.n	80036f0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <HAL_TIM_IC_Start_IT+0xc2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003538:	e023      	b.n	8003582 <HAL_TIM_IC_Start_IT+0x10a>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d104      	bne.n	800354a <HAL_TIM_IC_Start_IT+0xd2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003548:	e01b      	b.n	8003582 <HAL_TIM_IC_Start_IT+0x10a>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d104      	bne.n	800355a <HAL_TIM_IC_Start_IT+0xe2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003558:	e013      	b.n	8003582 <HAL_TIM_IC_Start_IT+0x10a>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d104      	bne.n	800356a <HAL_TIM_IC_Start_IT+0xf2>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003568:	e00b      	b.n	8003582 <HAL_TIM_IC_Start_IT+0x10a>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b10      	cmp	r3, #16
 800356e:	d104      	bne.n	800357a <HAL_TIM_IC_Start_IT+0x102>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003578:	e003      	b.n	8003582 <HAL_TIM_IC_Start_IT+0x10a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <HAL_TIM_IC_Start_IT+0x11a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003590:	e013      	b.n	80035ba <HAL_TIM_IC_Start_IT+0x142>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_IC_Start_IT+0x12a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a0:	e00b      	b.n	80035ba <HAL_TIM_IC_Start_IT+0x142>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_IC_Start_IT+0x13a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035b0:	e003      	b.n	80035ba <HAL_TIM_IC_Start_IT+0x142>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b0c      	cmp	r3, #12
 80035be:	d841      	bhi.n	8003644 <HAL_TIM_IC_Start_IT+0x1cc>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_TIM_IC_Start_IT+0x150>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035fd 	.word	0x080035fd
 80035cc:	08003645 	.word	0x08003645
 80035d0:	08003645 	.word	0x08003645
 80035d4:	08003645 	.word	0x08003645
 80035d8:	0800360f 	.word	0x0800360f
 80035dc:	08003645 	.word	0x08003645
 80035e0:	08003645 	.word	0x08003645
 80035e4:	08003645 	.word	0x08003645
 80035e8:	08003621 	.word	0x08003621
 80035ec:	08003645 	.word	0x08003645
 80035f0:	08003645 	.word	0x08003645
 80035f4:	08003645 	.word	0x08003645
 80035f8:	08003633 	.word	0x08003633
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0202 	orr.w	r2, r2, #2
 800360a:	60da      	str	r2, [r3, #12]
      break;
 800360c:	e01d      	b.n	800364a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0204 	orr.w	r2, r2, #4
 800361c:	60da      	str	r2, [r3, #12]
      break;
 800361e:	e014      	b.n	800364a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0208 	orr.w	r2, r2, #8
 800362e:	60da      	str	r2, [r3, #12]
      break;
 8003630:	e00b      	b.n	800364a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0210 	orr.w	r2, r2, #16
 8003640:	60da      	str	r2, [r3, #12]
      break;
 8003642:	e002      	b.n	800364a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      break;
 8003648:	bf00      	nop
  }

  if (status == HAL_OK)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d14e      	bne.n	80036ee <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2201      	movs	r2, #1
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f001 f9f1 	bl	8004a40 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <HAL_TIM_IC_Start_IT+0x280>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d022      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x236>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d01d      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x236>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_TIM_IC_Start_IT+0x284>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x236>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_TIM_IC_Start_IT+0x288>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x236>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_TIM_IC_Start_IT+0x28c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x236>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_TIM_IC_Start_IT+0x290>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x236>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_TIM_IC_Start_IT+0x294>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x236>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_TIM_IC_Start_IT+0x298>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d115      	bne.n	80036da <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_TIM_IC_Start_IT+0x29c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d015      	beq.n	80036ec <HAL_TIM_IC_Start_IT+0x274>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c6:	d011      	beq.n	80036ec <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	e008      	b.n	80036ec <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e000      	b.n	80036ee <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40010400 	.word	0x40010400
 800370c:	40014000 	.word	0x40014000
 8003710:	40001800 	.word	0x40001800
 8003714:	00010007 	.word	0x00010007

08003718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b02      	cmp	r3, #2
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0202 	mvn.w	r2, #2
 8003744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fd fd04 	bl	8001168 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fbf8 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fbff 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b04      	cmp	r3, #4
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0204 	mvn.w	r2, #4
 8003798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fcda 	bl	8001168 <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fbce 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fbd5 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0208 	mvn.w	r2, #8
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fcb0 	bl	8001168 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fba4 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fbab 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b10      	cmp	r3, #16
 8003828:	d122      	bne.n	8003870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b10      	cmp	r3, #16
 8003836:	d11b      	bne.n	8003870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0210 	mvn.w	r2, #16
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2208      	movs	r2, #8
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fc86 	bl	8001168 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fb7a 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fb81 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0201 	mvn.w	r2, #1
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd f81e 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d10e      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d107      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f001 f97a 	bl	8004bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d6:	d10e      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d107      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 f96d 	bl	8004bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d10e      	bne.n	8003922 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d107      	bne.n	8003922 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800391a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fb2f 	bl	8003f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b20      	cmp	r3, #32
 800392e:	d10e      	bne.n	800394e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b20      	cmp	r3, #32
 800393c:	d107      	bne.n	800394e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f06f 0220 	mvn.w	r2, #32
 8003946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f001 f92d 	bl	8004ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003970:	2302      	movs	r3, #2
 8003972:	e088      	b.n	8003a86 <HAL_TIM_IC_ConfigChannel+0x130>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d11b      	bne.n	80039ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003992:	f000 fe91 	bl	80046b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 020c 	bic.w	r2, r2, #12
 80039a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6999      	ldr	r1, [r3, #24]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	619a      	str	r2, [r3, #24]
 80039b8:	e060      	b.n	8003a7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d11c      	bne.n	80039fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80039d0:	f000 ff15 	bl	80047fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6999      	ldr	r1, [r3, #24]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	021a      	lsls	r2, r3, #8
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	619a      	str	r2, [r3, #24]
 80039f8:	e040      	b.n	8003a7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d11b      	bne.n	8003a38 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003a10:	f000 ff62 	bl	80048d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 020c 	bic.w	r2, r2, #12
 8003a22:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69d9      	ldr	r1, [r3, #28]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	61da      	str	r2, [r3, #28]
 8003a36:	e021      	b.n	8003a7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d11c      	bne.n	8003a78 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003a4e:	f000 ff7f 	bl	8004950 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69d9      	ldr	r1, [r3, #28]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	021a      	lsls	r2, r3, #8
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	61da      	str	r2, [r3, #28]
 8003a76:	e001      	b.n	8003a7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0ff      	b.n	8003cae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b14      	cmp	r3, #20
 8003aba:	f200 80f0 	bhi.w	8003c9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003b19 	.word	0x08003b19
 8003ac8:	08003c9f 	.word	0x08003c9f
 8003acc:	08003c9f 	.word	0x08003c9f
 8003ad0:	08003c9f 	.word	0x08003c9f
 8003ad4:	08003b59 	.word	0x08003b59
 8003ad8:	08003c9f 	.word	0x08003c9f
 8003adc:	08003c9f 	.word	0x08003c9f
 8003ae0:	08003c9f 	.word	0x08003c9f
 8003ae4:	08003b9b 	.word	0x08003b9b
 8003ae8:	08003c9f 	.word	0x08003c9f
 8003aec:	08003c9f 	.word	0x08003c9f
 8003af0:	08003c9f 	.word	0x08003c9f
 8003af4:	08003bdb 	.word	0x08003bdb
 8003af8:	08003c9f 	.word	0x08003c9f
 8003afc:	08003c9f 	.word	0x08003c9f
 8003b00:	08003c9f 	.word	0x08003c9f
 8003b04:	08003c1d 	.word	0x08003c1d
 8003b08:	08003c9f 	.word	0x08003c9f
 8003b0c:	08003c9f 	.word	0x08003c9f
 8003b10:	08003c9f 	.word	0x08003c9f
 8003b14:	08003c5d 	.word	0x08003c5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fad8 	bl	80040d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0208 	orr.w	r2, r2, #8
 8003b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6999      	ldr	r1, [r3, #24]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	619a      	str	r2, [r3, #24]
      break;
 8003b56:	e0a5      	b.n	8003ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fb2a 	bl	80041b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6999      	ldr	r1, [r3, #24]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	021a      	lsls	r2, r3, #8
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	619a      	str	r2, [r3, #24]
      break;
 8003b98:	e084      	b.n	8003ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fb81 	bl	80042a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0208 	orr.w	r2, r2, #8
 8003bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0204 	bic.w	r2, r2, #4
 8003bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69d9      	ldr	r1, [r3, #28]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	61da      	str	r2, [r3, #28]
      break;
 8003bd8:	e064      	b.n	8003ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fbd7 	bl	8004394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69d9      	ldr	r1, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	021a      	lsls	r2, r3, #8
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	61da      	str	r2, [r3, #28]
      break;
 8003c1a:	e043      	b.n	8003ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fc0e 	bl	8004444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0208 	orr.w	r2, r2, #8
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c5a:	e023      	b.n	8003ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fc40 	bl	80044e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c9c:	e002      	b.n	8003ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop

08003cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e0b4      	b.n	8003e3e <HAL_TIM_ConfigClockSource+0x186>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	4b56      	ldr	r3, [pc, #344]	; (8003e48 <HAL_TIM_ConfigClockSource+0x190>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0c:	d03e      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0xd4>
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d12:	f200 8087 	bhi.w	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1a:	f000 8086 	beq.w	8003e2a <HAL_TIM_ConfigClockSource+0x172>
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d22:	d87f      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b70      	cmp	r3, #112	; 0x70
 8003d26:	d01a      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0xa6>
 8003d28:	2b70      	cmp	r3, #112	; 0x70
 8003d2a:	d87b      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b60      	cmp	r3, #96	; 0x60
 8003d2e:	d050      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d30:	2b60      	cmp	r3, #96	; 0x60
 8003d32:	d877      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b50      	cmp	r3, #80	; 0x50
 8003d36:	d03c      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0xfa>
 8003d38:	2b50      	cmp	r3, #80	; 0x50
 8003d3a:	d873      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d058      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d86f      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d44:	2b30      	cmp	r3, #48	; 0x30
 8003d46:	d064      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x15a>
 8003d48:	2b30      	cmp	r3, #48	; 0x30
 8003d4a:	d86b      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d060      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x15a>
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d867      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05c      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x15a>
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d05a      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x15a>
 8003d5c:	e062      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d6e:	f000 fe47 	bl	8004a00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	609a      	str	r2, [r3, #8]
      break;
 8003d8a:	e04f      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d9c:	f000 fe30 	bl	8004a00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dae:	609a      	str	r2, [r3, #8]
      break;
 8003db0:	e03c      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f000 fcee 	bl	80047a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2150      	movs	r1, #80	; 0x50
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fdfd 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e02c      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dde:	461a      	mov	r2, r3
 8003de0:	f000 fd4a 	bl	8004878 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2160      	movs	r1, #96	; 0x60
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fded 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 8003df0:	e01c      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f000 fcce 	bl	80047a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2140      	movs	r1, #64	; 0x40
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fddd 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 8003e10:	e00c      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f000 fdd4 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 8003e22:	e003      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      break;
 8003e28:	e000      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	fffeff88 	.word	0xfffeff88

08003e4c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e031      	b.n	8003ec8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003e74:	6839      	ldr	r1, [r7, #0]
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fb8a 	bl	8004590 <TIM_SlaveTimer_SetConfig>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e018      	b.n	8003ec8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eb4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b0c      	cmp	r3, #12
 8003ee2:	d831      	bhi.n	8003f48 <HAL_TIM_ReadCapturedValue+0x78>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f49 	.word	0x08003f49
 8003ef4:	08003f49 	.word	0x08003f49
 8003ef8:	08003f49 	.word	0x08003f49
 8003efc:	08003f2b 	.word	0x08003f2b
 8003f00:	08003f49 	.word	0x08003f49
 8003f04:	08003f49 	.word	0x08003f49
 8003f08:	08003f49 	.word	0x08003f49
 8003f0c:	08003f35 	.word	0x08003f35
 8003f10:	08003f49 	.word	0x08003f49
 8003f14:	08003f49 	.word	0x08003f49
 8003f18:	08003f49 	.word	0x08003f49
 8003f1c:	08003f3f 	.word	0x08003f3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	60fb      	str	r3, [r7, #12]

      break;
 8003f28:	e00f      	b.n	8003f4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	60fb      	str	r3, [r7, #12]

      break;
 8003f32:	e00a      	b.n	8003f4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	60fb      	str	r3, [r7, #12]

      break;
 8003f3c:	e005      	b.n	8003f4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	60fb      	str	r3, [r7, #12]

      break;
 8003f46:	e000      	b.n	8003f4a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003f48:	bf00      	nop
  }

  return tmpreg;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a40      	ldr	r2, [pc, #256]	; (80040a8 <TIM_Base_SetConfig+0x114>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d00f      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a3d      	ldr	r2, [pc, #244]	; (80040ac <TIM_Base_SetConfig+0x118>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a3c      	ldr	r2, [pc, #240]	; (80040b0 <TIM_Base_SetConfig+0x11c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3b      	ldr	r2, [pc, #236]	; (80040b4 <TIM_Base_SetConfig+0x120>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3a      	ldr	r2, [pc, #232]	; (80040b8 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d108      	bne.n	8003fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <TIM_Base_SetConfig+0x114>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d02b      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d027      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <TIM_Base_SetConfig+0x118>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d023      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2b      	ldr	r2, [pc, #172]	; (80040b0 <TIM_Base_SetConfig+0x11c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01f      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <TIM_Base_SetConfig+0x120>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01b      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <TIM_Base_SetConfig+0x124>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d017      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a28      	ldr	r2, [pc, #160]	; (80040bc <TIM_Base_SetConfig+0x128>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <TIM_Base_SetConfig+0x12c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00f      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <TIM_Base_SetConfig+0x130>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <TIM_Base_SetConfig+0x134>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a24      	ldr	r2, [pc, #144]	; (80040cc <TIM_Base_SetConfig+0x138>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <TIM_Base_SetConfig+0x13c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <TIM_Base_SetConfig+0x114>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0xf8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <TIM_Base_SetConfig+0x124>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d103      	bne.n	8004094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	615a      	str	r2, [r3, #20]
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800
 80040b4:	40000c00 	.word	0x40000c00
 80040b8:	40010400 	.word	0x40010400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800
 80040c8:	40001800 	.word	0x40001800
 80040cc:	40001c00 	.word	0x40001c00
 80040d0:	40002000 	.word	0x40002000

080040d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <TIM_OC1_SetConfig+0xd8>)
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f023 0302 	bic.w	r3, r3, #2
 800411c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a21      	ldr	r2, [pc, #132]	; (80041b0 <TIM_OC1_SetConfig+0xdc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_OC1_SetConfig+0x64>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <TIM_OC1_SetConfig+0xe0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d10c      	bne.n	8004152 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0308 	bic.w	r3, r3, #8
 800413e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 0304 	bic.w	r3, r3, #4
 8004150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <TIM_OC1_SetConfig+0xdc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_OC1_SetConfig+0x8e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <TIM_OC1_SetConfig+0xe0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d111      	bne.n	8004186 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	621a      	str	r2, [r3, #32]
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	fffeff8f 	.word	0xfffeff8f
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40010400 	.word	0x40010400

080041b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4b2e      	ldr	r3, [pc, #184]	; (800429c <TIM_OC2_SetConfig+0xe4>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0320 	bic.w	r3, r3, #32
 8004202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a23      	ldr	r2, [pc, #140]	; (80042a0 <TIM_OC2_SetConfig+0xe8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_OC2_SetConfig+0x68>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <TIM_OC2_SetConfig+0xec>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d10d      	bne.n	800423c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <TIM_OC2_SetConfig+0xe8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC2_SetConfig+0x94>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <TIM_OC2_SetConfig+0xec>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d113      	bne.n	8004274 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800425a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	621a      	str	r2, [r3, #32]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	feff8fff 	.word	0xfeff8fff
 80042a0:	40010000 	.word	0x40010000
 80042a4:	40010400 	.word	0x40010400

080042a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <TIM_OC3_SetConfig+0xe0>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <TIM_OC3_SetConfig+0xe4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_OC3_SetConfig+0x66>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <TIM_OC3_SetConfig+0xe8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10d      	bne.n	800432a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a17      	ldr	r2, [pc, #92]	; (800438c <TIM_OC3_SetConfig+0xe4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_OC3_SetConfig+0x92>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a16      	ldr	r2, [pc, #88]	; (8004390 <TIM_OC3_SetConfig+0xe8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d113      	bne.n	8004362 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	621a      	str	r2, [r3, #32]
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	fffeff8f 	.word	0xfffeff8f
 800438c:	40010000 	.word	0x40010000
 8004390:	40010400 	.word	0x40010400

08004394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <TIM_OC4_SetConfig+0xa4>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a13      	ldr	r2, [pc, #76]	; (800443c <TIM_OC4_SetConfig+0xa8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_OC4_SetConfig+0x68>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a12      	ldr	r2, [pc, #72]	; (8004440 <TIM_OC4_SetConfig+0xac>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d109      	bne.n	8004410 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	feff8fff 	.word	0xfeff8fff
 800443c:	40010000 	.word	0x40010000
 8004440:	40010400 	.word	0x40010400

08004444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <TIM_OC5_SetConfig+0x98>)
 8004470:	4013      	ands	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004484:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <TIM_OC5_SetConfig+0x9c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d003      	beq.n	80044a2 <TIM_OC5_SetConfig+0x5e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a11      	ldr	r2, [pc, #68]	; (80044e4 <TIM_OC5_SetConfig+0xa0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d109      	bne.n	80044b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	fffeff8f 	.word	0xfffeff8f
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40010400 	.word	0x40010400

080044e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <TIM_OC6_SetConfig+0x9c>)
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800452a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	051b      	lsls	r3, r3, #20
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a13      	ldr	r2, [pc, #76]	; (8004588 <TIM_OC6_SetConfig+0xa0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_OC6_SetConfig+0x60>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <TIM_OC6_SetConfig+0xa4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d109      	bne.n	800455c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800454e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	029b      	lsls	r3, r3, #10
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	feff8fff 	.word	0xfeff8fff
 8004588:	40010000 	.word	0x40010000
 800458c:	40010400 	.word	0x40010400

08004590 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4b3e      	ldr	r3, [pc, #248]	; (80046b4 <TIM_SlaveTimer_SetConfig+0x124>)
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b70      	cmp	r3, #112	; 0x70
 80045d8:	d01a      	beq.n	8004610 <TIM_SlaveTimer_SetConfig+0x80>
 80045da:	2b70      	cmp	r3, #112	; 0x70
 80045dc:	d860      	bhi.n	80046a0 <TIM_SlaveTimer_SetConfig+0x110>
 80045de:	2b60      	cmp	r3, #96	; 0x60
 80045e0:	d054      	beq.n	800468c <TIM_SlaveTimer_SetConfig+0xfc>
 80045e2:	2b60      	cmp	r3, #96	; 0x60
 80045e4:	d85c      	bhi.n	80046a0 <TIM_SlaveTimer_SetConfig+0x110>
 80045e6:	2b50      	cmp	r3, #80	; 0x50
 80045e8:	d046      	beq.n	8004678 <TIM_SlaveTimer_SetConfig+0xe8>
 80045ea:	2b50      	cmp	r3, #80	; 0x50
 80045ec:	d858      	bhi.n	80046a0 <TIM_SlaveTimer_SetConfig+0x110>
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d019      	beq.n	8004626 <TIM_SlaveTimer_SetConfig+0x96>
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d854      	bhi.n	80046a0 <TIM_SlaveTimer_SetConfig+0x110>
 80045f6:	2b30      	cmp	r3, #48	; 0x30
 80045f8:	d055      	beq.n	80046a6 <TIM_SlaveTimer_SetConfig+0x116>
 80045fa:	2b30      	cmp	r3, #48	; 0x30
 80045fc:	d850      	bhi.n	80046a0 <TIM_SlaveTimer_SetConfig+0x110>
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d051      	beq.n	80046a6 <TIM_SlaveTimer_SetConfig+0x116>
 8004602:	2b20      	cmp	r3, #32
 8004604:	d84c      	bhi.n	80046a0 <TIM_SlaveTimer_SetConfig+0x110>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d04d      	beq.n	80046a6 <TIM_SlaveTimer_SetConfig+0x116>
 800460a:	2b10      	cmp	r3, #16
 800460c:	d04b      	beq.n	80046a6 <TIM_SlaveTimer_SetConfig+0x116>
 800460e:	e047      	b.n	80046a0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004620:	f000 f9ee 	bl	8004a00 <TIM_ETR_SetConfig>
      break;
 8004624:	e040      	b.n	80046a8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b05      	cmp	r3, #5
 800462c:	d101      	bne.n	8004632 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e03b      	b.n	80046aa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004658:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	4313      	orrs	r3, r2
 8004664:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	621a      	str	r2, [r3, #32]
      break;
 8004676:	e017      	b.n	80046a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004684:	461a      	mov	r2, r3
 8004686:	f000 f88b 	bl	80047a0 <TIM_TI1_ConfigInputStage>
      break;
 800468a:	e00d      	b.n	80046a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004698:	461a      	mov	r2, r3
 800469a:	f000 f8ed 	bl	8004878 <TIM_TI2_ConfigInputStage>
      break;
 800469e:	e003      	b.n	80046a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	75fb      	strb	r3, [r7, #23]
      break;
 80046a4:	e000      	b.n	80046a8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80046a6:	bf00      	nop
  }

  return status;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	fffefff8 	.word	0xfffefff8

080046b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f023 0201 	bic.w	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a28      	ldr	r2, [pc, #160]	; (8004784 <TIM_TI1_SetConfig+0xcc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01b      	beq.n	800471e <TIM_TI1_SetConfig+0x66>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d017      	beq.n	800471e <TIM_TI1_SetConfig+0x66>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a25      	ldr	r2, [pc, #148]	; (8004788 <TIM_TI1_SetConfig+0xd0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <TIM_TI1_SetConfig+0x66>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a24      	ldr	r2, [pc, #144]	; (800478c <TIM_TI1_SetConfig+0xd4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00f      	beq.n	800471e <TIM_TI1_SetConfig+0x66>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a23      	ldr	r2, [pc, #140]	; (8004790 <TIM_TI1_SetConfig+0xd8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00b      	beq.n	800471e <TIM_TI1_SetConfig+0x66>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a22      	ldr	r2, [pc, #136]	; (8004794 <TIM_TI1_SetConfig+0xdc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <TIM_TI1_SetConfig+0x66>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <TIM_TI1_SetConfig+0xe0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_TI1_SetConfig+0x66>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <TIM_TI1_SetConfig+0xe4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <TIM_TI1_SetConfig+0x6a>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <TIM_TI1_SetConfig+0x6c>
 8004722:	2300      	movs	r3, #0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e003      	b.n	8004742 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	b2db      	uxtb	r3, r3
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f023 030a 	bic.w	r3, r3, #10
 800475c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f003 030a 	and.w	r3, r3, #10
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40010000 	.word	0x40010000
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	40000c00 	.word	0x40000c00
 8004794:	40010400 	.word	0x40010400
 8004798:	40014000 	.word	0x40014000
 800479c:	40001800 	.word	0x40001800

080047a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 030a 	bic.w	r3, r3, #10
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047fe:	b480      	push	{r7}
 8004800:	b087      	sub	sp, #28
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f023 0210 	bic.w	r2, r3, #16
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800483c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	b29b      	uxth	r3, r3
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004850:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	621a      	str	r2, [r3, #32]
}
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f023 0210 	bic.w	r2, r3, #16
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	031b      	lsls	r3, r3, #12
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	621a      	str	r2, [r3, #32]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 0303 	bic.w	r3, r3, #3
 8004904:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004914:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	b2db      	uxtb	r3, r3
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004928:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	621a      	str	r2, [r3, #32]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800498e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	031b      	lsls	r3, r3, #12
 8004994:	b29b      	uxth	r3, r3
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80049a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	031b      	lsls	r3, r3, #12
 80049a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f043 0307 	orr.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	2201      	movs	r2, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	401a      	ands	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e06d      	b.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2f      	ldr	r2, [pc, #188]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d108      	bne.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d022      	beq.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b16:	d01d      	beq.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d018      	beq.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1a      	ldr	r2, [pc, #104]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00e      	beq.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d10c      	bne.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40010400 	.word	0x40010400
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40001800 	.word	0x40001800

08004ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e040      	b.n	8004c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc fc60 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2224      	movs	r2, #36	; 0x24
 8004c10:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fb62 	bl	80052ec <UART_SetConfig>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e022      	b.n	8004c78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fdba 	bl	80057b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fe41 	bl	80058f8 <UART_CheckIdleState>
 8004c76:	4603      	mov	r3, r0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d132      	bne.n	8004cfe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Receive_IT+0x24>
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e02b      	b.n	8004d00 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d018      	beq.n	8004cee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	623b      	str	r3, [r7, #32]
 8004cdc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	69f9      	ldr	r1, [r7, #28]
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fefd 	bl	8005af4 <UART_Start_Receive_IT>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	e000      	b.n	8004d00 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3728      	adds	r7, #40	; 0x28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b0ba      	sub	sp, #232	; 0xe8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d32:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d36:	4013      	ands	r3, r2
 8004d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d115      	bne.n	8004d70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00f      	beq.n	8004d70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8297 	beq.w	8005294 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
      }
      return;
 8004d6e:	e291      	b.n	8005294 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8117 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <HAL_UART_IRQHandler+0x298>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 810a 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d011      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xbc>
 8004da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00b      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2201      	movs	r2, #1
 8004db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d011      	beq.n	8004df4 <HAL_UART_IRQHandler+0xec>
 8004dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00b      	beq.n	8004df4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2202      	movs	r2, #2
 8004de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dea:	f043 0204 	orr.w	r2, r3, #4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d011      	beq.n	8004e24 <HAL_UART_IRQHandler+0x11c>
 8004e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2204      	movs	r2, #4
 8004e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1a:	f043 0202 	orr.w	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d017      	beq.n	8004e60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d105      	bne.n	8004e48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00b      	beq.n	8004e60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e56:	f043 0208 	orr.w	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d012      	beq.n	8004e92 <HAL_UART_IRQHandler+0x18a>
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00c      	beq.n	8004e92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e88:	f043 0220 	orr.w	r2, r3, #32
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 81fd 	beq.w	8005298 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00d      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d005      	beq.n	8004eea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ee2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d04f      	beq.n	8004f8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fec8 	bl	8005c80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d141      	bne.n	8004f82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3308      	adds	r3, #8
 8004f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1d9      	bne.n	8004efe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d013      	beq.n	8004f7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f56:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <HAL_UART_IRQHandler+0x29c>)
 8004f58:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fc fd7d 	bl	8001a5e <HAL_DMA_Abort_IT>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d017      	beq.n	8004f9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f74:	4610      	mov	r0, r2
 8004f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	e00f      	b.n	8004f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f9a0 	bl	80052c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	e00b      	b.n	8004f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f99c 	bl	80052c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	e007      	b.n	8004f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f998 	bl	80052c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004f98:	e17e      	b.n	8005298 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9a:	bf00      	nop
    return;
 8004f9c:	e17c      	b.n	8005298 <HAL_UART_IRQHandler+0x590>
 8004f9e:	bf00      	nop
 8004fa0:	04000120 	.word	0x04000120
 8004fa4:	08005d49 	.word	0x08005d49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	f040 814c 	bne.w	800524a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8145 	beq.w	800524a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 813e 	beq.w	800524a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2210      	movs	r2, #16
 8004fd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	f040 80b6 	bne.w	8005152 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ff2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8150 	beq.w	800529c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005006:	429a      	cmp	r2, r3
 8005008:	f080 8148 	bcs.w	800529c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005012:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005020:	f000 8086 	beq.w	8005130 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800503c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800504e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005052:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800505a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1da      	bne.n	8005024 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800507e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005092:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005096:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800509a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e1      	bne.n	800506e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3308      	adds	r3, #8
 80050b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3308      	adds	r3, #8
 80050ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e3      	bne.n	80050aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	f023 0310 	bic.w	r3, r3, #16
 8005104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005112:	65bb      	str	r3, [r7, #88]	; 0x58
 8005114:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005118:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e4      	bne.n	80050f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512a:	4618      	mov	r0, r3
 800512c:	f7fc fc27 	bl	800197e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005142:	b29b      	uxth	r3, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	b29b      	uxth	r3, r3
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f8c2 	bl	80052d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005150:	e0a4      	b.n	800529c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800515e:	b29b      	uxth	r3, r3
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8096 	beq.w	80052a0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8091 	beq.w	80052a0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051a0:	647b      	str	r3, [r7, #68]	; 0x44
 80051a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e4      	bne.n	800517e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	623b      	str	r3, [r7, #32]
   return(result);
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3308      	adds	r3, #8
 80051d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051d8:	633a      	str	r2, [r7, #48]	; 0x30
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e3      	bne.n	80051b4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	60fb      	str	r3, [r7, #12]
   return(result);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f023 0310 	bic.w	r3, r3, #16
 8005214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	69b9      	ldr	r1, [r7, #24]
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	617b      	str	r3, [r7, #20]
   return(result);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e4      	bne.n	8005200 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800523c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f846 	bl	80052d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005248:	e02a      	b.n	80052a0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00e      	beq.n	8005274 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01c      	beq.n	80052a4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	4798      	blx	r3
    }
    return;
 8005272:	e017      	b.n	80052a4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d012      	beq.n	80052a6 <HAL_UART_IRQHandler+0x59e>
 8005280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fd71 	bl	8005d74 <UART_EndTransmit_IT>
    return;
 8005292:	e008      	b.n	80052a6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005294:	bf00      	nop
 8005296:	e006      	b.n	80052a6 <HAL_UART_IRQHandler+0x59e>
    return;
 8005298:	bf00      	nop
 800529a:	e004      	b.n	80052a6 <HAL_UART_IRQHandler+0x59e>
      return;
 800529c:	bf00      	nop
 800529e:	e002      	b.n	80052a6 <HAL_UART_IRQHandler+0x59e>
      return;
 80052a0:	bf00      	nop
 80052a2:	e000      	b.n	80052a6 <HAL_UART_IRQHandler+0x59e>
    return;
 80052a4:	bf00      	nop
  }

}
 80052a6:	37e8      	adds	r7, #232	; 0xe8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4ba6      	ldr	r3, [pc, #664]	; (80055b0 <UART_SetConfig+0x2c4>)
 8005318:	4013      	ands	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	6979      	ldr	r1, [r7, #20]
 8005320:	430b      	orrs	r3, r1
 8005322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a94      	ldr	r2, [pc, #592]	; (80055b4 <UART_SetConfig+0x2c8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d120      	bne.n	80053aa <UART_SetConfig+0xbe>
 8005368:	4b93      	ldr	r3, [pc, #588]	; (80055b8 <UART_SetConfig+0x2cc>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b03      	cmp	r3, #3
 8005374:	d816      	bhi.n	80053a4 <UART_SetConfig+0xb8>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <UART_SetConfig+0x90>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	0800538d 	.word	0x0800538d
 8005380:	08005399 	.word	0x08005399
 8005384:	08005393 	.word	0x08005393
 8005388:	0800539f 	.word	0x0800539f
 800538c:	2301      	movs	r3, #1
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e150      	b.n	8005634 <UART_SetConfig+0x348>
 8005392:	2302      	movs	r3, #2
 8005394:	77fb      	strb	r3, [r7, #31]
 8005396:	e14d      	b.n	8005634 <UART_SetConfig+0x348>
 8005398:	2304      	movs	r3, #4
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e14a      	b.n	8005634 <UART_SetConfig+0x348>
 800539e:	2308      	movs	r3, #8
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	e147      	b.n	8005634 <UART_SetConfig+0x348>
 80053a4:	2310      	movs	r3, #16
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e144      	b.n	8005634 <UART_SetConfig+0x348>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a83      	ldr	r2, [pc, #524]	; (80055bc <UART_SetConfig+0x2d0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d132      	bne.n	800541a <UART_SetConfig+0x12e>
 80053b4:	4b80      	ldr	r3, [pc, #512]	; (80055b8 <UART_SetConfig+0x2cc>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	d828      	bhi.n	8005414 <UART_SetConfig+0x128>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <UART_SetConfig+0xdc>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053fd 	.word	0x080053fd
 80053cc:	08005415 	.word	0x08005415
 80053d0:	08005415 	.word	0x08005415
 80053d4:	08005415 	.word	0x08005415
 80053d8:	08005409 	.word	0x08005409
 80053dc:	08005415 	.word	0x08005415
 80053e0:	08005415 	.word	0x08005415
 80053e4:	08005415 	.word	0x08005415
 80053e8:	08005403 	.word	0x08005403
 80053ec:	08005415 	.word	0x08005415
 80053f0:	08005415 	.word	0x08005415
 80053f4:	08005415 	.word	0x08005415
 80053f8:	0800540f 	.word	0x0800540f
 80053fc:	2300      	movs	r3, #0
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e118      	b.n	8005634 <UART_SetConfig+0x348>
 8005402:	2302      	movs	r3, #2
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e115      	b.n	8005634 <UART_SetConfig+0x348>
 8005408:	2304      	movs	r3, #4
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e112      	b.n	8005634 <UART_SetConfig+0x348>
 800540e:	2308      	movs	r3, #8
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e10f      	b.n	8005634 <UART_SetConfig+0x348>
 8005414:	2310      	movs	r3, #16
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e10c      	b.n	8005634 <UART_SetConfig+0x348>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a68      	ldr	r2, [pc, #416]	; (80055c0 <UART_SetConfig+0x2d4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d120      	bne.n	8005466 <UART_SetConfig+0x17a>
 8005424:	4b64      	ldr	r3, [pc, #400]	; (80055b8 <UART_SetConfig+0x2cc>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800542e:	2b30      	cmp	r3, #48	; 0x30
 8005430:	d013      	beq.n	800545a <UART_SetConfig+0x16e>
 8005432:	2b30      	cmp	r3, #48	; 0x30
 8005434:	d814      	bhi.n	8005460 <UART_SetConfig+0x174>
 8005436:	2b20      	cmp	r3, #32
 8005438:	d009      	beq.n	800544e <UART_SetConfig+0x162>
 800543a:	2b20      	cmp	r3, #32
 800543c:	d810      	bhi.n	8005460 <UART_SetConfig+0x174>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <UART_SetConfig+0x15c>
 8005442:	2b10      	cmp	r3, #16
 8005444:	d006      	beq.n	8005454 <UART_SetConfig+0x168>
 8005446:	e00b      	b.n	8005460 <UART_SetConfig+0x174>
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e0f2      	b.n	8005634 <UART_SetConfig+0x348>
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e0ef      	b.n	8005634 <UART_SetConfig+0x348>
 8005454:	2304      	movs	r3, #4
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e0ec      	b.n	8005634 <UART_SetConfig+0x348>
 800545a:	2308      	movs	r3, #8
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e0e9      	b.n	8005634 <UART_SetConfig+0x348>
 8005460:	2310      	movs	r3, #16
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e0e6      	b.n	8005634 <UART_SetConfig+0x348>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a56      	ldr	r2, [pc, #344]	; (80055c4 <UART_SetConfig+0x2d8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d120      	bne.n	80054b2 <UART_SetConfig+0x1c6>
 8005470:	4b51      	ldr	r3, [pc, #324]	; (80055b8 <UART_SetConfig+0x2cc>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800547a:	2bc0      	cmp	r3, #192	; 0xc0
 800547c:	d013      	beq.n	80054a6 <UART_SetConfig+0x1ba>
 800547e:	2bc0      	cmp	r3, #192	; 0xc0
 8005480:	d814      	bhi.n	80054ac <UART_SetConfig+0x1c0>
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d009      	beq.n	800549a <UART_SetConfig+0x1ae>
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d810      	bhi.n	80054ac <UART_SetConfig+0x1c0>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <UART_SetConfig+0x1a8>
 800548e:	2b40      	cmp	r3, #64	; 0x40
 8005490:	d006      	beq.n	80054a0 <UART_SetConfig+0x1b4>
 8005492:	e00b      	b.n	80054ac <UART_SetConfig+0x1c0>
 8005494:	2300      	movs	r3, #0
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e0cc      	b.n	8005634 <UART_SetConfig+0x348>
 800549a:	2302      	movs	r3, #2
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e0c9      	b.n	8005634 <UART_SetConfig+0x348>
 80054a0:	2304      	movs	r3, #4
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e0c6      	b.n	8005634 <UART_SetConfig+0x348>
 80054a6:	2308      	movs	r3, #8
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e0c3      	b.n	8005634 <UART_SetConfig+0x348>
 80054ac:	2310      	movs	r3, #16
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e0c0      	b.n	8005634 <UART_SetConfig+0x348>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a44      	ldr	r2, [pc, #272]	; (80055c8 <UART_SetConfig+0x2dc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d125      	bne.n	8005508 <UART_SetConfig+0x21c>
 80054bc:	4b3e      	ldr	r3, [pc, #248]	; (80055b8 <UART_SetConfig+0x2cc>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ca:	d017      	beq.n	80054fc <UART_SetConfig+0x210>
 80054cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d0:	d817      	bhi.n	8005502 <UART_SetConfig+0x216>
 80054d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d6:	d00b      	beq.n	80054f0 <UART_SetConfig+0x204>
 80054d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054dc:	d811      	bhi.n	8005502 <UART_SetConfig+0x216>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <UART_SetConfig+0x1fe>
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	d006      	beq.n	80054f6 <UART_SetConfig+0x20a>
 80054e8:	e00b      	b.n	8005502 <UART_SetConfig+0x216>
 80054ea:	2300      	movs	r3, #0
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e0a1      	b.n	8005634 <UART_SetConfig+0x348>
 80054f0:	2302      	movs	r3, #2
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e09e      	b.n	8005634 <UART_SetConfig+0x348>
 80054f6:	2304      	movs	r3, #4
 80054f8:	77fb      	strb	r3, [r7, #31]
 80054fa:	e09b      	b.n	8005634 <UART_SetConfig+0x348>
 80054fc:	2308      	movs	r3, #8
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e098      	b.n	8005634 <UART_SetConfig+0x348>
 8005502:	2310      	movs	r3, #16
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e095      	b.n	8005634 <UART_SetConfig+0x348>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2f      	ldr	r2, [pc, #188]	; (80055cc <UART_SetConfig+0x2e0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d125      	bne.n	800555e <UART_SetConfig+0x272>
 8005512:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <UART_SetConfig+0x2cc>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800551c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005520:	d017      	beq.n	8005552 <UART_SetConfig+0x266>
 8005522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005526:	d817      	bhi.n	8005558 <UART_SetConfig+0x26c>
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552c:	d00b      	beq.n	8005546 <UART_SetConfig+0x25a>
 800552e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005532:	d811      	bhi.n	8005558 <UART_SetConfig+0x26c>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <UART_SetConfig+0x254>
 8005538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553c:	d006      	beq.n	800554c <UART_SetConfig+0x260>
 800553e:	e00b      	b.n	8005558 <UART_SetConfig+0x26c>
 8005540:	2301      	movs	r3, #1
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e076      	b.n	8005634 <UART_SetConfig+0x348>
 8005546:	2302      	movs	r3, #2
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e073      	b.n	8005634 <UART_SetConfig+0x348>
 800554c:	2304      	movs	r3, #4
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e070      	b.n	8005634 <UART_SetConfig+0x348>
 8005552:	2308      	movs	r3, #8
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e06d      	b.n	8005634 <UART_SetConfig+0x348>
 8005558:	2310      	movs	r3, #16
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e06a      	b.n	8005634 <UART_SetConfig+0x348>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <UART_SetConfig+0x2e4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d138      	bne.n	80055da <UART_SetConfig+0x2ee>
 8005568:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <UART_SetConfig+0x2cc>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005576:	d017      	beq.n	80055a8 <UART_SetConfig+0x2bc>
 8005578:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800557c:	d82a      	bhi.n	80055d4 <UART_SetConfig+0x2e8>
 800557e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005582:	d00b      	beq.n	800559c <UART_SetConfig+0x2b0>
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005588:	d824      	bhi.n	80055d4 <UART_SetConfig+0x2e8>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <UART_SetConfig+0x2aa>
 800558e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005592:	d006      	beq.n	80055a2 <UART_SetConfig+0x2b6>
 8005594:	e01e      	b.n	80055d4 <UART_SetConfig+0x2e8>
 8005596:	2300      	movs	r3, #0
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e04b      	b.n	8005634 <UART_SetConfig+0x348>
 800559c:	2302      	movs	r3, #2
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e048      	b.n	8005634 <UART_SetConfig+0x348>
 80055a2:	2304      	movs	r3, #4
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e045      	b.n	8005634 <UART_SetConfig+0x348>
 80055a8:	2308      	movs	r3, #8
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e042      	b.n	8005634 <UART_SetConfig+0x348>
 80055ae:	bf00      	nop
 80055b0:	efff69f3 	.word	0xefff69f3
 80055b4:	40011000 	.word	0x40011000
 80055b8:	40023800 	.word	0x40023800
 80055bc:	40004400 	.word	0x40004400
 80055c0:	40004800 	.word	0x40004800
 80055c4:	40004c00 	.word	0x40004c00
 80055c8:	40005000 	.word	0x40005000
 80055cc:	40011400 	.word	0x40011400
 80055d0:	40007800 	.word	0x40007800
 80055d4:	2310      	movs	r3, #16
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	e02c      	b.n	8005634 <UART_SetConfig+0x348>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a72      	ldr	r2, [pc, #456]	; (80057a8 <UART_SetConfig+0x4bc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d125      	bne.n	8005630 <UART_SetConfig+0x344>
 80055e4:	4b71      	ldr	r3, [pc, #452]	; (80057ac <UART_SetConfig+0x4c0>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055f2:	d017      	beq.n	8005624 <UART_SetConfig+0x338>
 80055f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055f8:	d817      	bhi.n	800562a <UART_SetConfig+0x33e>
 80055fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fe:	d00b      	beq.n	8005618 <UART_SetConfig+0x32c>
 8005600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005604:	d811      	bhi.n	800562a <UART_SetConfig+0x33e>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <UART_SetConfig+0x326>
 800560a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800560e:	d006      	beq.n	800561e <UART_SetConfig+0x332>
 8005610:	e00b      	b.n	800562a <UART_SetConfig+0x33e>
 8005612:	2300      	movs	r3, #0
 8005614:	77fb      	strb	r3, [r7, #31]
 8005616:	e00d      	b.n	8005634 <UART_SetConfig+0x348>
 8005618:	2302      	movs	r3, #2
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e00a      	b.n	8005634 <UART_SetConfig+0x348>
 800561e:	2304      	movs	r3, #4
 8005620:	77fb      	strb	r3, [r7, #31]
 8005622:	e007      	b.n	8005634 <UART_SetConfig+0x348>
 8005624:	2308      	movs	r3, #8
 8005626:	77fb      	strb	r3, [r7, #31]
 8005628:	e004      	b.n	8005634 <UART_SetConfig+0x348>
 800562a:	2310      	movs	r3, #16
 800562c:	77fb      	strb	r3, [r7, #31]
 800562e:	e001      	b.n	8005634 <UART_SetConfig+0x348>
 8005630:	2310      	movs	r3, #16
 8005632:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563c:	d15b      	bne.n	80056f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800563e:	7ffb      	ldrb	r3, [r7, #31]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d828      	bhi.n	8005696 <UART_SetConfig+0x3aa>
 8005644:	a201      	add	r2, pc, #4	; (adr r2, 800564c <UART_SetConfig+0x360>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	08005671 	.word	0x08005671
 8005650:	08005679 	.word	0x08005679
 8005654:	08005681 	.word	0x08005681
 8005658:	08005697 	.word	0x08005697
 800565c:	08005687 	.word	0x08005687
 8005660:	08005697 	.word	0x08005697
 8005664:	08005697 	.word	0x08005697
 8005668:	08005697 	.word	0x08005697
 800566c:	0800568f 	.word	0x0800568f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005670:	f7fd f8e0 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 8005674:	61b8      	str	r0, [r7, #24]
        break;
 8005676:	e013      	b.n	80056a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005678:	f7fd f8f0 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 800567c:	61b8      	str	r0, [r7, #24]
        break;
 800567e:	e00f      	b.n	80056a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005680:	4b4b      	ldr	r3, [pc, #300]	; (80057b0 <UART_SetConfig+0x4c4>)
 8005682:	61bb      	str	r3, [r7, #24]
        break;
 8005684:	e00c      	b.n	80056a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005686:	f7fc ffc3 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 800568a:	61b8      	str	r0, [r7, #24]
        break;
 800568c:	e008      	b.n	80056a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005692:	61bb      	str	r3, [r7, #24]
        break;
 8005694:	e004      	b.n	80056a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	77bb      	strb	r3, [r7, #30]
        break;
 800569e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d074      	beq.n	8005790 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	005a      	lsls	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	441a      	add	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2b0f      	cmp	r3, #15
 80056c0:	d916      	bls.n	80056f0 <UART_SetConfig+0x404>
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c8:	d212      	bcs.n	80056f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f023 030f 	bic.w	r3, r3, #15
 80056d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	b29a      	uxth	r2, r3
 80056e0:	89fb      	ldrh	r3, [r7, #14]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	89fa      	ldrh	r2, [r7, #14]
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	e04f      	b.n	8005790 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	77bb      	strb	r3, [r7, #30]
 80056f4:	e04c      	b.n	8005790 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056f6:	7ffb      	ldrb	r3, [r7, #31]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d828      	bhi.n	800574e <UART_SetConfig+0x462>
 80056fc:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0x418>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005729 	.word	0x08005729
 8005708:	08005731 	.word	0x08005731
 800570c:	08005739 	.word	0x08005739
 8005710:	0800574f 	.word	0x0800574f
 8005714:	0800573f 	.word	0x0800573f
 8005718:	0800574f 	.word	0x0800574f
 800571c:	0800574f 	.word	0x0800574f
 8005720:	0800574f 	.word	0x0800574f
 8005724:	08005747 	.word	0x08005747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005728:	f7fd f884 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 800572c:	61b8      	str	r0, [r7, #24]
        break;
 800572e:	e013      	b.n	8005758 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005730:	f7fd f894 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8005734:	61b8      	str	r0, [r7, #24]
        break;
 8005736:	e00f      	b.n	8005758 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005738:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <UART_SetConfig+0x4c4>)
 800573a:	61bb      	str	r3, [r7, #24]
        break;
 800573c:	e00c      	b.n	8005758 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573e:	f7fc ff67 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8005742:	61b8      	str	r0, [r7, #24]
        break;
 8005744:	e008      	b.n	8005758 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574a:	61bb      	str	r3, [r7, #24]
        break;
 800574c:	e004      	b.n	8005758 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	77bb      	strb	r3, [r7, #30]
        break;
 8005756:	bf00      	nop
    }

    if (pclk != 0U)
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d018      	beq.n	8005790 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	085a      	lsrs	r2, r3, #1
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	441a      	add	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005770:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b0f      	cmp	r3, #15
 8005776:	d909      	bls.n	800578c <UART_SetConfig+0x4a0>
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577e:	d205      	bcs.n	800578c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60da      	str	r2, [r3, #12]
 800578a:	e001      	b.n	8005790 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800579c:	7fbb      	ldrb	r3, [r7, #30]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40007c00 	.word	0x40007c00
 80057ac:	40023800 	.word	0x40023800
 80057b0:	00f42400 	.word	0x00f42400

080057b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01a      	beq.n	80058ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058b2:	d10a      	bne.n	80058ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	605a      	str	r2, [r3, #4]
  }
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005908:	f7fb ff1c 	bl	8001744 <HAL_GetTick>
 800590c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b08      	cmp	r3, #8
 800591a:	d10e      	bne.n	800593a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800591c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f81b 	bl	8005966 <UART_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e011      	b.n	800595e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b09c      	sub	sp, #112	; 0x70
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	4613      	mov	r3, r2
 8005974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005976:	e0a7      	b.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	f000 80a3 	beq.w	8005ac8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005982:	f7fb fedf 	bl	8001744 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800598e:	429a      	cmp	r2, r3
 8005990:	d302      	bcc.n	8005998 <UART_WaitOnFlagUntilTimeout+0x32>
 8005992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005994:	2b00      	cmp	r3, #0
 8005996:	d13f      	bne.n	8005a18 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ac:	667b      	str	r3, [r7, #100]	; 0x64
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e6      	bne.n	8005998 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	663b      	str	r3, [r7, #96]	; 0x60
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80059ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e5      	bne.n	80059ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e068      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d050      	beq.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a34:	d148      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a3e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a60:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e6      	bne.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	613b      	str	r3, [r7, #16]
   return(result);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a92:	623a      	str	r2, [r7, #32]
 8005a94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	69f9      	ldr	r1, [r7, #28]
 8005a98:	6a3a      	ldr	r2, [r7, #32]
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e5      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e010      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69da      	ldr	r2, [r3, #28]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	f43f af48 	beq.w	8005978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3770      	adds	r7, #112	; 0x70
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b097      	sub	sp, #92	; 0x5c
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	88fa      	ldrh	r2, [r7, #6]
 8005b0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	88fa      	ldrh	r2, [r7, #6]
 8005b14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d10e      	bne.n	8005b46 <UART_Start_Receive_IT+0x52>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <UART_Start_Receive_IT+0x48>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b3a:	e02d      	b.n	8005b98 <UART_Start_Receive_IT+0xa4>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	22ff      	movs	r2, #255	; 0xff
 8005b40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b44:	e028      	b.n	8005b98 <UART_Start_Receive_IT+0xa4>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10d      	bne.n	8005b6a <UART_Start_Receive_IT+0x76>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <UART_Start_Receive_IT+0x6c>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	22ff      	movs	r2, #255	; 0xff
 8005b5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b5e:	e01b      	b.n	8005b98 <UART_Start_Receive_IT+0xa4>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	227f      	movs	r2, #127	; 0x7f
 8005b64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b68:	e016      	b.n	8005b98 <UART_Start_Receive_IT+0xa4>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b72:	d10d      	bne.n	8005b90 <UART_Start_Receive_IT+0x9c>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d104      	bne.n	8005b86 <UART_Start_Receive_IT+0x92>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	227f      	movs	r2, #127	; 0x7f
 8005b80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b84:	e008      	b.n	8005b98 <UART_Start_Receive_IT+0xa4>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	223f      	movs	r2, #63	; 0x3f
 8005b8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b8e:	e003      	b.n	8005b98 <UART_Start_Receive_IT+0xa4>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2222      	movs	r2, #34	; 0x22
 8005ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3308      	adds	r3, #8
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bc8:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e5      	bne.n	8005ba8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be4:	d107      	bne.n	8005bf6 <UART_Start_Receive_IT+0x102>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <UART_Start_Receive_IT+0x184>)
 8005bf2:	669a      	str	r2, [r3, #104]	; 0x68
 8005bf4:	e002      	b.n	8005bfc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <UART_Start_Receive_IT+0x188>)
 8005bfa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d019      	beq.n	8005c38 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
 8005c24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e6      	bne.n	8005c04 <UART_Start_Receive_IT+0x110>
 8005c36:	e018      	b.n	8005c6a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	613b      	str	r3, [r7, #16]
   return(result);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f043 0320 	orr.w	r3, r3, #32
 8005c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c56:	623b      	str	r3, [r7, #32]
 8005c58:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	69f9      	ldr	r1, [r7, #28]
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e6      	bne.n	8005c38 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	375c      	adds	r7, #92	; 0x5c
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	08005f2f 	.word	0x08005f2f
 8005c7c:	08005dc9 	.word	0x08005dc9

08005c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b095      	sub	sp, #84	; 0x54
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e6      	bne.n	8005c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d118      	bne.n	8005d28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f023 0310 	bic.w	r3, r3, #16
 8005d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6979      	ldr	r1, [r7, #20]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	613b      	str	r3, [r7, #16]
   return(result);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e6      	bne.n	8005cf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d3c:	bf00      	nop
 8005d3e:	3754      	adds	r7, #84	; 0x54
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f7ff faaa 	bl	80052c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6979      	ldr	r1, [r7, #20]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	613b      	str	r3, [r7, #16]
   return(result);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e6      	bne.n	8005d7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff fa76 	bl	80052ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc0:	bf00      	nop
 8005dc2:	3720      	adds	r7, #32
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b096      	sub	sp, #88	; 0x58
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dd6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de0:	2b22      	cmp	r3, #34	; 0x22
 8005de2:	f040 8098 	bne.w	8005f16 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005df0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005df4:	b2d9      	uxtb	r1, r3
 8005df6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e00:	400a      	ands	r2, r1
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d17b      	bne.n	8005f26 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e42:	653b      	str	r3, [r7, #80]	; 0x50
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e6      	bne.n	8005e2e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e80:	633a      	str	r2, [r7, #48]	; 0x30
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d12e      	bne.n	8005f0e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0310 	bic.w	r3, r3, #16
 8005eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e6      	bne.n	8005eb6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d103      	bne.n	8005efe <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2210      	movs	r2, #16
 8005efc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff f9e4 	bl	80052d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f0c:	e00b      	b.n	8005f26 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fa fcec 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8005f14:	e007      	b.n	8005f26 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699a      	ldr	r2, [r3, #24]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0208 	orr.w	r2, r2, #8
 8005f24:	619a      	str	r2, [r3, #24]
}
 8005f26:	bf00      	nop
 8005f28:	3758      	adds	r7, #88	; 0x58
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b096      	sub	sp, #88	; 0x58
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f46:	2b22      	cmp	r3, #34	; 0x22
 8005f48:	f040 8098 	bne.w	800607c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f5c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005f60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f64:	4013      	ands	r3, r2
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d17b      	bne.n	800608c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8005fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e6      	bne.n	8005f94 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006012:	2b01      	cmp	r3, #1
 8006014:	d12e      	bne.n	8006074 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	60bb      	str	r3, [r7, #8]
   return(result);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f023 0310 	bic.w	r3, r3, #16
 8006030:	647b      	str	r3, [r7, #68]	; 0x44
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6979      	ldr	r1, [r7, #20]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	613b      	str	r3, [r7, #16]
   return(result);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e6      	bne.n	800601c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b10      	cmp	r3, #16
 800605a:	d103      	bne.n	8006064 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2210      	movs	r2, #16
 8006062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff f931 	bl	80052d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006072:	e00b      	b.n	800608c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7fa fc39 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 800607a:	e007      	b.n	800608c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0208 	orr.w	r2, r2, #8
 800608a:	619a      	str	r2, [r3, #24]
}
 800608c:	bf00      	nop
 800608e:	3758      	adds	r7, #88	; 0x58
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <_strtol_l.constprop.0>:
 8006094:	2b01      	cmp	r3, #1
 8006096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800609a:	d001      	beq.n	80060a0 <_strtol_l.constprop.0+0xc>
 800609c:	2b24      	cmp	r3, #36	; 0x24
 800609e:	d906      	bls.n	80060ae <_strtol_l.constprop.0+0x1a>
 80060a0:	f000 f88c 	bl	80061bc <__errno>
 80060a4:	2316      	movs	r3, #22
 80060a6:	6003      	str	r3, [r0, #0]
 80060a8:	2000      	movs	r0, #0
 80060aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006194 <_strtol_l.constprop.0+0x100>
 80060b2:	460d      	mov	r5, r1
 80060b4:	462e      	mov	r6, r5
 80060b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80060be:	f017 0708 	ands.w	r7, r7, #8
 80060c2:	d1f7      	bne.n	80060b4 <_strtol_l.constprop.0+0x20>
 80060c4:	2c2d      	cmp	r4, #45	; 0x2d
 80060c6:	d132      	bne.n	800612e <_strtol_l.constprop.0+0x9a>
 80060c8:	782c      	ldrb	r4, [r5, #0]
 80060ca:	2701      	movs	r7, #1
 80060cc:	1cb5      	adds	r5, r6, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d05b      	beq.n	800618a <_strtol_l.constprop.0+0xf6>
 80060d2:	2b10      	cmp	r3, #16
 80060d4:	d109      	bne.n	80060ea <_strtol_l.constprop.0+0x56>
 80060d6:	2c30      	cmp	r4, #48	; 0x30
 80060d8:	d107      	bne.n	80060ea <_strtol_l.constprop.0+0x56>
 80060da:	782c      	ldrb	r4, [r5, #0]
 80060dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80060e0:	2c58      	cmp	r4, #88	; 0x58
 80060e2:	d14d      	bne.n	8006180 <_strtol_l.constprop.0+0xec>
 80060e4:	786c      	ldrb	r4, [r5, #1]
 80060e6:	2310      	movs	r3, #16
 80060e8:	3502      	adds	r5, #2
 80060ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80060ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80060f2:	f04f 0e00 	mov.w	lr, #0
 80060f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80060fa:	4676      	mov	r6, lr
 80060fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006100:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006104:	f1bc 0f09 	cmp.w	ip, #9
 8006108:	d816      	bhi.n	8006138 <_strtol_l.constprop.0+0xa4>
 800610a:	4664      	mov	r4, ip
 800610c:	42a3      	cmp	r3, r4
 800610e:	dd24      	ble.n	800615a <_strtol_l.constprop.0+0xc6>
 8006110:	f1be 3fff 	cmp.w	lr, #4294967295
 8006114:	d008      	beq.n	8006128 <_strtol_l.constprop.0+0x94>
 8006116:	45b1      	cmp	r9, r6
 8006118:	d31c      	bcc.n	8006154 <_strtol_l.constprop.0+0xc0>
 800611a:	d101      	bne.n	8006120 <_strtol_l.constprop.0+0x8c>
 800611c:	45a2      	cmp	sl, r4
 800611e:	db19      	blt.n	8006154 <_strtol_l.constprop.0+0xc0>
 8006120:	fb06 4603 	mla	r6, r6, r3, r4
 8006124:	f04f 0e01 	mov.w	lr, #1
 8006128:	f815 4b01 	ldrb.w	r4, [r5], #1
 800612c:	e7e8      	b.n	8006100 <_strtol_l.constprop.0+0x6c>
 800612e:	2c2b      	cmp	r4, #43	; 0x2b
 8006130:	bf04      	itt	eq
 8006132:	782c      	ldrbeq	r4, [r5, #0]
 8006134:	1cb5      	addeq	r5, r6, #2
 8006136:	e7ca      	b.n	80060ce <_strtol_l.constprop.0+0x3a>
 8006138:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800613c:	f1bc 0f19 	cmp.w	ip, #25
 8006140:	d801      	bhi.n	8006146 <_strtol_l.constprop.0+0xb2>
 8006142:	3c37      	subs	r4, #55	; 0x37
 8006144:	e7e2      	b.n	800610c <_strtol_l.constprop.0+0x78>
 8006146:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800614a:	f1bc 0f19 	cmp.w	ip, #25
 800614e:	d804      	bhi.n	800615a <_strtol_l.constprop.0+0xc6>
 8006150:	3c57      	subs	r4, #87	; 0x57
 8006152:	e7db      	b.n	800610c <_strtol_l.constprop.0+0x78>
 8006154:	f04f 3eff 	mov.w	lr, #4294967295
 8006158:	e7e6      	b.n	8006128 <_strtol_l.constprop.0+0x94>
 800615a:	f1be 3fff 	cmp.w	lr, #4294967295
 800615e:	d105      	bne.n	800616c <_strtol_l.constprop.0+0xd8>
 8006160:	2322      	movs	r3, #34	; 0x22
 8006162:	6003      	str	r3, [r0, #0]
 8006164:	4646      	mov	r6, r8
 8006166:	b942      	cbnz	r2, 800617a <_strtol_l.constprop.0+0xe6>
 8006168:	4630      	mov	r0, r6
 800616a:	e79e      	b.n	80060aa <_strtol_l.constprop.0+0x16>
 800616c:	b107      	cbz	r7, 8006170 <_strtol_l.constprop.0+0xdc>
 800616e:	4276      	negs	r6, r6
 8006170:	2a00      	cmp	r2, #0
 8006172:	d0f9      	beq.n	8006168 <_strtol_l.constprop.0+0xd4>
 8006174:	f1be 0f00 	cmp.w	lr, #0
 8006178:	d000      	beq.n	800617c <_strtol_l.constprop.0+0xe8>
 800617a:	1e69      	subs	r1, r5, #1
 800617c:	6011      	str	r1, [r2, #0]
 800617e:	e7f3      	b.n	8006168 <_strtol_l.constprop.0+0xd4>
 8006180:	2430      	movs	r4, #48	; 0x30
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1b1      	bne.n	80060ea <_strtol_l.constprop.0+0x56>
 8006186:	2308      	movs	r3, #8
 8006188:	e7af      	b.n	80060ea <_strtol_l.constprop.0+0x56>
 800618a:	2c30      	cmp	r4, #48	; 0x30
 800618c:	d0a5      	beq.n	80060da <_strtol_l.constprop.0+0x46>
 800618e:	230a      	movs	r3, #10
 8006190:	e7ab      	b.n	80060ea <_strtol_l.constprop.0+0x56>
 8006192:	bf00      	nop
 8006194:	080062e5 	.word	0x080062e5

08006198 <strtol>:
 8006198:	4613      	mov	r3, r2
 800619a:	460a      	mov	r2, r1
 800619c:	4601      	mov	r1, r0
 800619e:	4802      	ldr	r0, [pc, #8]	; (80061a8 <strtol+0x10>)
 80061a0:	6800      	ldr	r0, [r0, #0]
 80061a2:	f7ff bf77 	b.w	8006094 <_strtol_l.constprop.0>
 80061a6:	bf00      	nop
 80061a8:	20000068 	.word	0x20000068

080061ac <memset>:
 80061ac:	4402      	add	r2, r0
 80061ae:	4603      	mov	r3, r0
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d100      	bne.n	80061b6 <memset+0xa>
 80061b4:	4770      	bx	lr
 80061b6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ba:	e7f9      	b.n	80061b0 <memset+0x4>

080061bc <__errno>:
 80061bc:	4b01      	ldr	r3, [pc, #4]	; (80061c4 <__errno+0x8>)
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20000068 	.word	0x20000068

080061c8 <__libc_init_array>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	4d0d      	ldr	r5, [pc, #52]	; (8006200 <__libc_init_array+0x38>)
 80061cc:	4c0d      	ldr	r4, [pc, #52]	; (8006204 <__libc_init_array+0x3c>)
 80061ce:	1b64      	subs	r4, r4, r5
 80061d0:	10a4      	asrs	r4, r4, #2
 80061d2:	2600      	movs	r6, #0
 80061d4:	42a6      	cmp	r6, r4
 80061d6:	d109      	bne.n	80061ec <__libc_init_array+0x24>
 80061d8:	4d0b      	ldr	r5, [pc, #44]	; (8006208 <__libc_init_array+0x40>)
 80061da:	4c0c      	ldr	r4, [pc, #48]	; (800620c <__libc_init_array+0x44>)
 80061dc:	f000 f86a 	bl	80062b4 <_init>
 80061e0:	1b64      	subs	r4, r4, r5
 80061e2:	10a4      	asrs	r4, r4, #2
 80061e4:	2600      	movs	r6, #0
 80061e6:	42a6      	cmp	r6, r4
 80061e8:	d105      	bne.n	80061f6 <__libc_init_array+0x2e>
 80061ea:	bd70      	pop	{r4, r5, r6, pc}
 80061ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f0:	4798      	blx	r3
 80061f2:	3601      	adds	r6, #1
 80061f4:	e7ee      	b.n	80061d4 <__libc_init_array+0xc>
 80061f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fa:	4798      	blx	r3
 80061fc:	3601      	adds	r6, #1
 80061fe:	e7f2      	b.n	80061e6 <__libc_init_array+0x1e>
 8006200:	080063f0 	.word	0x080063f0
 8006204:	080063f0 	.word	0x080063f0
 8006208:	080063f0 	.word	0x080063f0
 800620c:	080063f4 	.word	0x080063f4

08006210 <fmaxf>:
 8006210:	b508      	push	{r3, lr}
 8006212:	ed2d 8b02 	vpush	{d8}
 8006216:	eeb0 8a40 	vmov.f32	s16, s0
 800621a:	eef0 8a60 	vmov.f32	s17, s1
 800621e:	f000 f82d 	bl	800627c <__fpclassifyf>
 8006222:	b148      	cbz	r0, 8006238 <fmaxf+0x28>
 8006224:	eeb0 0a68 	vmov.f32	s0, s17
 8006228:	f000 f828 	bl	800627c <__fpclassifyf>
 800622c:	b130      	cbz	r0, 800623c <fmaxf+0x2c>
 800622e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006236:	dc01      	bgt.n	800623c <fmaxf+0x2c>
 8006238:	eeb0 8a68 	vmov.f32	s16, s17
 800623c:	eeb0 0a48 	vmov.f32	s0, s16
 8006240:	ecbd 8b02 	vpop	{d8}
 8006244:	bd08      	pop	{r3, pc}

08006246 <fminf>:
 8006246:	b508      	push	{r3, lr}
 8006248:	ed2d 8b02 	vpush	{d8}
 800624c:	eeb0 8a40 	vmov.f32	s16, s0
 8006250:	eef0 8a60 	vmov.f32	s17, s1
 8006254:	f000 f812 	bl	800627c <__fpclassifyf>
 8006258:	b148      	cbz	r0, 800626e <fminf+0x28>
 800625a:	eeb0 0a68 	vmov.f32	s0, s17
 800625e:	f000 f80d 	bl	800627c <__fpclassifyf>
 8006262:	b130      	cbz	r0, 8006272 <fminf+0x2c>
 8006264:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626c:	d401      	bmi.n	8006272 <fminf+0x2c>
 800626e:	eeb0 8a68 	vmov.f32	s16, s17
 8006272:	eeb0 0a48 	vmov.f32	s0, s16
 8006276:	ecbd 8b02 	vpop	{d8}
 800627a:	bd08      	pop	{r3, pc}

0800627c <__fpclassifyf>:
 800627c:	ee10 3a10 	vmov	r3, s0
 8006280:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8006284:	d00d      	beq.n	80062a2 <__fpclassifyf+0x26>
 8006286:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800628a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800628e:	d30a      	bcc.n	80062a6 <__fpclassifyf+0x2a>
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <__fpclassifyf+0x34>)
 8006292:	1e42      	subs	r2, r0, #1
 8006294:	429a      	cmp	r2, r3
 8006296:	d908      	bls.n	80062aa <__fpclassifyf+0x2e>
 8006298:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800629c:	4258      	negs	r0, r3
 800629e:	4158      	adcs	r0, r3
 80062a0:	4770      	bx	lr
 80062a2:	2002      	movs	r0, #2
 80062a4:	4770      	bx	lr
 80062a6:	2004      	movs	r0, #4
 80062a8:	4770      	bx	lr
 80062aa:	2003      	movs	r0, #3
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	007ffffe 	.word	0x007ffffe

080062b4 <_init>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr

080062c0 <_fini>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr
