
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fcc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800821c  0800821c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008224  08008224  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800822c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200000a0  080082c8  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  080082c8  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018697  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003771  00000000  00000000  000387a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  0003bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e84  00000000  00000000  0003d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000045e5  00000000  00000000  0003e06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b091  00000000  00000000  00042651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f311b  00000000  00000000  0005d6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005350  00000000  00000000  00150800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00155b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008184 	.word	0x08008184

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08008184 	.word	0x08008184

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295
 800093c:	f04f 30ff 	movne.w	r0, #4294967295
 8000940:	f000 b970 	b.w	8000c24 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9e08      	ldr	r6, [sp, #32]
 8000962:	460d      	mov	r5, r1
 8000964:	4604      	mov	r4, r0
 8000966:	460f      	mov	r7, r1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d14a      	bne.n	8000a02 <__udivmoddi4+0xa6>
 800096c:	428a      	cmp	r2, r1
 800096e:	4694      	mov	ip, r2
 8000970:	d965      	bls.n	8000a3e <__udivmoddi4+0xe2>
 8000972:	fab2 f382 	clz	r3, r2
 8000976:	b143      	cbz	r3, 800098a <__udivmoddi4+0x2e>
 8000978:	fa02 fc03 	lsl.w	ip, r2, r3
 800097c:	f1c3 0220 	rsb	r2, r3, #32
 8000980:	409f      	lsls	r7, r3
 8000982:	fa20 f202 	lsr.w	r2, r0, r2
 8000986:	4317      	orrs	r7, r2
 8000988:	409c      	lsls	r4, r3
 800098a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800098e:	fa1f f58c 	uxth.w	r5, ip
 8000992:	fbb7 f1fe 	udiv	r1, r7, lr
 8000996:	0c22      	lsrs	r2, r4, #16
 8000998:	fb0e 7711 	mls	r7, lr, r1, r7
 800099c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009a0:	fb01 f005 	mul.w	r0, r1, r5
 80009a4:	4290      	cmp	r0, r2
 80009a6:	d90a      	bls.n	80009be <__udivmoddi4+0x62>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f101 37ff 	add.w	r7, r1, #4294967295
 80009b0:	f080 811c 	bcs.w	8000bec <__udivmoddi4+0x290>
 80009b4:	4290      	cmp	r0, r2
 80009b6:	f240 8119 	bls.w	8000bec <__udivmoddi4+0x290>
 80009ba:	3902      	subs	r1, #2
 80009bc:	4462      	add	r2, ip
 80009be:	1a12      	subs	r2, r2, r0
 80009c0:	b2a4      	uxth	r4, r4
 80009c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ce:	fb00 f505 	mul.w	r5, r0, r5
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	d90a      	bls.n	80009ec <__udivmoddi4+0x90>
 80009d6:	eb1c 0404 	adds.w	r4, ip, r4
 80009da:	f100 32ff 	add.w	r2, r0, #4294967295
 80009de:	f080 8107 	bcs.w	8000bf0 <__udivmoddi4+0x294>
 80009e2:	42a5      	cmp	r5, r4
 80009e4:	f240 8104 	bls.w	8000bf0 <__udivmoddi4+0x294>
 80009e8:	4464      	add	r4, ip
 80009ea:	3802      	subs	r0, #2
 80009ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009f0:	1b64      	subs	r4, r4, r5
 80009f2:	2100      	movs	r1, #0
 80009f4:	b11e      	cbz	r6, 80009fe <__udivmoddi4+0xa2>
 80009f6:	40dc      	lsrs	r4, r3
 80009f8:	2300      	movs	r3, #0
 80009fa:	e9c6 4300 	strd	r4, r3, [r6]
 80009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0xbc>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	f000 80ed 	beq.w	8000be6 <__udivmoddi4+0x28a>
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a12:	4608      	mov	r0, r1
 8000a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a18:	fab3 f183 	clz	r1, r3
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d149      	bne.n	8000ab4 <__udivmoddi4+0x158>
 8000a20:	42ab      	cmp	r3, r5
 8000a22:	d302      	bcc.n	8000a2a <__udivmoddi4+0xce>
 8000a24:	4282      	cmp	r2, r0
 8000a26:	f200 80f8 	bhi.w	8000c1a <__udivmoddi4+0x2be>
 8000a2a:	1a84      	subs	r4, r0, r2
 8000a2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a30:	2001      	movs	r0, #1
 8000a32:	4617      	mov	r7, r2
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d0e2      	beq.n	80009fe <__udivmoddi4+0xa2>
 8000a38:	e9c6 4700 	strd	r4, r7, [r6]
 8000a3c:	e7df      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a3e:	b902      	cbnz	r2, 8000a42 <__udivmoddi4+0xe6>
 8000a40:	deff      	udf	#255	; 0xff
 8000a42:	fab2 f382 	clz	r3, r2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8090 	bne.w	8000b6c <__udivmoddi4+0x210>
 8000a4c:	1a8a      	subs	r2, r1, r2
 8000a4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a52:	fa1f fe8c 	uxth.w	lr, ip
 8000a56:	2101      	movs	r1, #1
 8000a58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a60:	0c22      	lsrs	r2, r4, #16
 8000a62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a66:	fb0e f005 	mul.w	r0, lr, r5
 8000a6a:	4290      	cmp	r0, r2
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0x124>
 8000a6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a76:	d202      	bcs.n	8000a7e <__udivmoddi4+0x122>
 8000a78:	4290      	cmp	r0, r2
 8000a7a:	f200 80cb 	bhi.w	8000c14 <__udivmoddi4+0x2b8>
 8000a7e:	4645      	mov	r5, r8
 8000a80:	1a12      	subs	r2, r2, r0
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a88:	fb07 2210 	mls	r2, r7, r0, r2
 8000a8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a90:	fb0e fe00 	mul.w	lr, lr, r0
 8000a94:	45a6      	cmp	lr, r4
 8000a96:	d908      	bls.n	8000aaa <__udivmoddi4+0x14e>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa0:	d202      	bcs.n	8000aa8 <__udivmoddi4+0x14c>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f200 80bb 	bhi.w	8000c1e <__udivmoddi4+0x2c2>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	eba4 040e 	sub.w	r4, r4, lr
 8000aae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ab2:	e79f      	b.n	80009f4 <__udivmoddi4+0x98>
 8000ab4:	f1c1 0720 	rsb	r7, r1, #32
 8000ab8:	408b      	lsls	r3, r1
 8000aba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000abe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ac2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ac6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aca:	40fd      	lsrs	r5, r7
 8000acc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ad0:	4323      	orrs	r3, r4
 8000ad2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ad6:	fa1f fe8c 	uxth.w	lr, ip
 8000ada:	fb09 5518 	mls	r5, r9, r8, r5
 8000ade:	0c1c      	lsrs	r4, r3, #16
 8000ae0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ae4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ae8:	42a5      	cmp	r5, r4
 8000aea:	fa02 f201 	lsl.w	r2, r2, r1
 8000aee:	fa00 f001 	lsl.w	r0, r0, r1
 8000af2:	d90b      	bls.n	8000b0c <__udivmoddi4+0x1b0>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000afc:	f080 8088 	bcs.w	8000c10 <__udivmoddi4+0x2b4>
 8000b00:	42a5      	cmp	r5, r4
 8000b02:	f240 8085 	bls.w	8000c10 <__udivmoddi4+0x2b4>
 8000b06:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0a:	4464      	add	r4, ip
 8000b0c:	1b64      	subs	r4, r4, r5
 8000b0e:	b29d      	uxth	r5, r3
 8000b10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b14:	fb09 4413 	mls	r4, r9, r3, r4
 8000b18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x1da>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b2c:	d26c      	bcs.n	8000c08 <__udivmoddi4+0x2ac>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	d96a      	bls.n	8000c08 <__udivmoddi4+0x2ac>
 8000b32:	3b02      	subs	r3, #2
 8000b34:	4464      	add	r4, ip
 8000b36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b3e:	eba4 040e 	sub.w	r4, r4, lr
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	46c8      	mov	r8, r9
 8000b46:	46ae      	mov	lr, r5
 8000b48:	d356      	bcc.n	8000bf8 <__udivmoddi4+0x29c>
 8000b4a:	d053      	beq.n	8000bf4 <__udivmoddi4+0x298>
 8000b4c:	b156      	cbz	r6, 8000b64 <__udivmoddi4+0x208>
 8000b4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b52:	eb64 040e 	sbc.w	r4, r4, lr
 8000b56:	fa04 f707 	lsl.w	r7, r4, r7
 8000b5a:	40ca      	lsrs	r2, r1
 8000b5c:	40cc      	lsrs	r4, r1
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	e9c6 7400 	strd	r7, r4, [r6]
 8000b64:	4618      	mov	r0, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6c:	f1c3 0120 	rsb	r1, r3, #32
 8000b70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b74:	fa20 f201 	lsr.w	r2, r0, r1
 8000b78:	fa25 f101 	lsr.w	r1, r5, r1
 8000b7c:	409d      	lsls	r5, r3
 8000b7e:	432a      	orrs	r2, r5
 8000b80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b90:	0c11      	lsrs	r1, r2, #16
 8000b92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b96:	fb00 f50e 	mul.w	r5, r0, lr
 8000b9a:	428d      	cmp	r5, r1
 8000b9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x258>
 8000ba2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000baa:	d22f      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bac:	428d      	cmp	r5, r1
 8000bae:	d92d      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1b49      	subs	r1, r1, r5
 8000bb6:	b292      	uxth	r2, r2
 8000bb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000bc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bc8:	4291      	cmp	r1, r2
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x282>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd4:	d216      	bcs.n	8000c04 <__udivmoddi4+0x2a8>
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d914      	bls.n	8000c04 <__udivmoddi4+0x2a8>
 8000bda:	3d02      	subs	r5, #2
 8000bdc:	4462      	add	r2, ip
 8000bde:	1a52      	subs	r2, r2, r1
 8000be0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000be4:	e738      	b.n	8000a58 <__udivmoddi4+0xfc>
 8000be6:	4631      	mov	r1, r6
 8000be8:	4630      	mov	r0, r6
 8000bea:	e708      	b.n	80009fe <__udivmoddi4+0xa2>
 8000bec:	4639      	mov	r1, r7
 8000bee:	e6e6      	b.n	80009be <__udivmoddi4+0x62>
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	e6fb      	b.n	80009ec <__udivmoddi4+0x90>
 8000bf4:	4548      	cmp	r0, r9
 8000bf6:	d2a9      	bcs.n	8000b4c <__udivmoddi4+0x1f0>
 8000bf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c00:	3b01      	subs	r3, #1
 8000c02:	e7a3      	b.n	8000b4c <__udivmoddi4+0x1f0>
 8000c04:	4645      	mov	r5, r8
 8000c06:	e7ea      	b.n	8000bde <__udivmoddi4+0x282>
 8000c08:	462b      	mov	r3, r5
 8000c0a:	e794      	b.n	8000b36 <__udivmoddi4+0x1da>
 8000c0c:	4640      	mov	r0, r8
 8000c0e:	e7d1      	b.n	8000bb4 <__udivmoddi4+0x258>
 8000c10:	46d0      	mov	r8, sl
 8000c12:	e77b      	b.n	8000b0c <__udivmoddi4+0x1b0>
 8000c14:	3d02      	subs	r5, #2
 8000c16:	4462      	add	r2, ip
 8000c18:	e732      	b.n	8000a80 <__udivmoddi4+0x124>
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	e70a      	b.n	8000a34 <__udivmoddi4+0xd8>
 8000c1e:	4464      	add	r4, ip
 8000c20:	3802      	subs	r0, #2
 8000c22:	e742      	b.n	8000aaa <__udivmoddi4+0x14e>

08000c24 <__aeabi_idiv0>:
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <PID>:
*@brief: Calculate the PID control output based on the Proportional, Integral, and Derivative components
*@param:
*@retval: None
*/
void PID(SERVO_Handle_TypeDef* servo, int Position, int SetP)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]

    static double priError = 0;
    static double toError = 0;
    float dis = Position;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c3e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float error = setP - dis;
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <PID+0xf4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c56:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // calculating PID values
    double Pvalue = error * kp;
 8000c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c5c:	f7ff fdbe 	bl	80007dc <__aeabi_f2d>
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <PID+0xf8>)
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	f7ff fb2b 	bl	80002c0 <__aeabi_dmul>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double Ivalue = toError * ki;
 8000c72:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <PID+0xfc>)
 8000c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <PID+0x100>)
 8000c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7e:	f7ff fb1f 	bl	80002c0 <__aeabi_dmul>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double Dvalue = (error - priError) * kd;
 8000c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c8c:	f7ff fda6 	bl	80007dc <__aeabi_f2d>
 8000c90:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <PID+0x104>)
 8000c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c96:	f7ff fc41 	bl	800051c <__aeabi_dsub>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <PID+0x108>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f7ff fb0a 	bl	80002c0 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double PIDvalue = Pvalue + Ivalue + Dvalue;
 8000cb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000cbc:	f7ff fc30 	bl	8000520 <__adddf3>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cc8:	f7ff fc2a 	bl	8000520 <__adddf3>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    priError = error;     // previous error (DValue)
 8000cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cd6:	f7ff fd81 	bl	80007dc <__aeabi_f2d>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4913      	ldr	r1, [pc, #76]	; (8000d2c <PID+0x104>)
 8000ce0:	e9c1 2300 	strd	r2, r3, [r1]
    toError += error;      // total error {IValue}
 8000ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ce6:	f7ff fd79 	bl	80007dc <__aeabi_f2d>
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <PID+0xfc>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	f7ff fc16 	bl	8000520 <__adddf3>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	490a      	ldr	r1, [pc, #40]	; (8000d24 <PID+0xfc>)
 8000cfa:	e9c1 2300 	strd	r2, r3, [r1]

    SERVO_WritePosition(servo, PIDvalue);
 8000cfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d02:	f7ff fdc3 	bl	800088c <__aeabi_d2f>
 8000d06:	4603      	mov	r3, r0
 8000d08:	ee00 3a10 	vmov	s0, r3
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f825 	bl	8000d5c <SERVO_WritePosition>
}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000002c 	.word	0x2000002c
 8000d20:	20000000 	.word	0x20000000
 8000d24:	200000c0 	.word	0x200000c0
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	200000c8 	.word	0x200000c8
 8000d30:	20000010 	.word	0x20000010

08000d34 <SERVO_Init>:
  * @param[in/out] hservo : Servo motor handler.
  * @retval None
  */

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 90.0f);
 8000d3c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000d58 <SERVO_Init+0x24>
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f80b 	bl	8000d5c <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f9db 	bl	8001104 <PWM_Init>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	42b40000 	.word	0x42b40000

08000d5c <SERVO_WritePosition>:
  * @param[in] pos        : Desired position for the servo motor.
  * @retval None
  */

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 70.0f);
 8000d68:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000dc4 <SERVO_WritePosition+0x68>
 8000d6c:	ed97 0a00 	vldr	s0, [r7]
 8000d70:	f007 f9d0 	bl	8008114 <fminf>
 8000d74:	eef0 7a40 	vmov.f32	s15, s0
 8000d78:	eddf 0a13 	vldr	s1, [pc, #76]	; 8000dc8 <SERVO_WritePosition+0x6c>
 8000d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d80:	f007 f9ad 	bl	80080de <fmaxf>
 8000d84:	eef0 7a40 	vmov.f32	s15, s0
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d94:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000dcc <SERVO_WritePosition+0x70>
 8000d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dac:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f9bc 	bl	8001134 <PWM_WriteDuty>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	428c0000 	.word	0x428c0000
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	43340000 	.word	0x43340000

08000dd0 <hc_sr04_init>:
  * @param  htim_trig: Pointer to the timer handle for trigger.
  * @param  trig_channel: Timer channel for trigger.
  * @retval None
  */
void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	603b      	str	r3, [r7, #0]
    us_sensor->htim_echo = htim_echo;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	601a      	str	r2, [r3, #0]
    us_sensor->htim_trig = htim_trig;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	605a      	str	r2, [r3, #4]
    us_sensor->trig_channel = trig_channel;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	609a      	str	r2, [r3, #8]

    HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2104      	movs	r1, #4
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 fe3c 	bl	8004a74 <HAL_TIM_IC_Start_IT>
    HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4610      	mov	r0, r2
 8000e08:	f003 fcd8 	bl	80047bc <HAL_TIM_PWM_Start>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <hc_sr04_convert_us_to_cm>:
  * @brief  Converts ultrasonic sensor distance from microseconds to centimeters.
  * @param  distance_us: Distance in microseconds.
  * @retval Distance in centimeters.
  */
uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <hc_sr04_convert_us_to_cm+0x20>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	095b      	lsrs	r3, r3, #5
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	8d3dcb09 	.word	0x8d3dcb09

08000e38 <CalulatePosition>:
  * @param  dis1: Distance 1 value.
  * @param  dis2: Distance 2 value.
  * @retval Calculated position value.
  */
int CalulatePosition(int dis1, int dis2)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    int position = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
    if (dis1 < 29)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b1c      	cmp	r3, #28
 8000e4a:	dc02      	bgt.n	8000e52 <CalulatePosition+0x1a>
        position = dis1;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e015      	b.n	8000e7e <CalulatePosition+0x46>
    else if (dis1 >= 29)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b1c      	cmp	r3, #28
 8000e56:	dd04      	ble.n	8000e62 <CalulatePosition+0x2a>
        position = 60 - dis2;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e00d      	b.n	8000e7e <CalulatePosition+0x46>
    else if (dis1 >= 29 && dis1 <= 31 && dis2 >= 29 && dis2 <= 31)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b1c      	cmp	r3, #28
 8000e66:	dd0a      	ble.n	8000e7e <CalulatePosition+0x46>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b1f      	cmp	r3, #31
 8000e6c:	dc07      	bgt.n	8000e7e <CalulatePosition+0x46>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b1c      	cmp	r3, #28
 8000e72:	dd04      	ble.n	8000e7e <CalulatePosition+0x46>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2b1f      	cmp	r3, #31
 8000e78:	dc01      	bgt.n	8000e7e <CalulatePosition+0x46>
        position = 30;
 8000e7a:	231e      	movs	r3, #30
 8000e7c:	60fb      	str	r3, [r7, #12]

    return position;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(htim);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f003 fb9d 	bl	80045e0 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000ea6:	bf00      	nop
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d3f9      	bcc.n	8000ea8 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f003 fc03 	bl	80046c0 <HAL_TIM_Base_Stop>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000ed4:	78bb      	ldrb	r3, [r7, #2]
 8000ed6:	f023 030f 	bic.w	r3, r3, #15
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f043 030c 	orr.w	r3, r3, #12
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <__lcd_i2c_write+0xac>)
 8000eea:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <__lcd_i2c_write+0xac>)
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <__lcd_i2c_write+0xac>)
 8000ef2:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	f023 030f 	bic.w	r3, r3, #15
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <__lcd_i2c_write+0xac>)
 8000f0a:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000f0c:	78bb      	ldrb	r3, [r7, #2]
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f043 030c 	orr.w	r3, r3, #12
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <__lcd_i2c_write+0xac>)
 8000f20:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <__lcd_i2c_write+0xac>)
 8000f24:	78da      	ldrb	r2, [r3, #3]
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <__lcd_i2c_write+0xac>)
 8000f28:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000f2a:	78bb      	ldrb	r3, [r7, #2]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__lcd_i2c_write+0xac>)
 8000f3e:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	889b      	ldrh	r3, [r3, #4]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2306      	movs	r3, #6
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <__lcd_i2c_write+0xac>)
 8000f56:	f001 fe53 	bl	8002c00 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2132      	movs	r1, #50	; 0x32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff93 	bl	8000e8c <__lcd_delay_us>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000d0 	.word	0x200000d0

08000f74 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	461a      	mov	r2, r3
 8000f84:	2100      	movs	r1, #0
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff9c 	bl	8000ec4 <__lcd_i2c_write>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff8c 	bl	8000ec4 <__lcd_i2c_write>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  __lcd_delay(hlcd->Timer, 15.2);  // >15 ms
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff61 	bl	8000e8c <__lcd_delay_us>

  // 4-bit mode
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000fca:	2103      	movs	r1, #3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ffd1 	bl	8000f74 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 4.1 ms
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f241 0103 	movw	r1, #4099	; 0x1003
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff56 	bl	8000e8c <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffc6 	bl	8000f74 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 0.1 ms
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f241 0103 	movw	r1, #4099	; 0x1003
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff4b 	bl	8000e8c <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffbb 	bl	8000f74 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, 0x02);  // 0001
 8000ffe:	2102      	movs	r1, #2
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffb7 	bl	8000f74 <__lcd_i2c_write_command>

  hlcd->IsInitialized = 1;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	741a      	strb	r2, [r3, #16]

  __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 800100c:	2128      	movs	r1, #40	; 0x28
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffb0 	bl	8000f74 <__lcd_i2c_write_command>

  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                      // Clear screen
 8001014:	2101      	movs	r1, #1
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffac 	bl	8000f74 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 1.6);                                         // > 1.52 ms
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // LCD on, Cursor off, On blink
 800102a:	210c      	movs	r1, #12
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ffa1 	bl	8000f74 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);       // Cursor increment on
 8001032:	2106      	movs	r1, #6
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff9d 	bl	8000f74 <__lcd_i2c_write_command>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <LCD_I2C_printDecInt>:
 * @param[in] hlcd   : LCD handler with I2C interface
 * @param[in] number : Decimal number
 * @return None
 */
void LCD_I2C_printDecInt(LCD_I2C_HandleTypeDef* hlcd, int number)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  char buffer[LCD_NUMBER_BUF_SIZE];
  if( number >= 10)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b09      	cmp	r3, #9
 8001052:	dd07      	ble.n	8001064 <LCD_I2C_printDecInt+0x20>
      sprintf(buffer, "%d", number);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	490b      	ldr	r1, [pc, #44]	; (8001088 <LCD_I2C_printDecInt+0x44>)
 800105c:	4618      	mov	r0, r3
 800105e:	f006 fb9b 	bl	8007798 <siprintf>
 8001062:	e006      	b.n	8001072 <LCD_I2C_printDecInt+0x2e>
  else
	  sprintf(buffer, "0%d", number);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <LCD_I2C_printDecInt+0x48>)
 800106c:	4618      	mov	r0, r3
 800106e:	f006 fb93 	bl	8007798 <siprintf>

  LCD_I2C_printStr(hlcd, buffer);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f809 	bl	8001090 <LCD_I2C_printStr>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	0800819c 	.word	0x0800819c
 800108c:	080081a0 	.word	0x080081a0

08001090 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e00a      	b.n	80010b6 <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff72 	bl	8000f94 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3301      	adds	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	7bfc      	ldrb	r4, [r7, #15]
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f7ff f8a9 	bl	8000210 <strlen>
 80010be:	4603      	mov	r3, r0
 80010c0:	429c      	cmp	r4, r3
 80010c2:	d3ed      	bcc.n	80010a0 <LCD_I2C_printStr+0x10>
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
	...

080010d0 <LCD_I2C_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
 80010dc:	4613      	mov	r3, r2
 80010de:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <LCD_I2C_SetCursor+0x30>)
 80010e4:	5cd2      	ldrb	r2, [r2, r3]
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	4413      	add	r3, r2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	3b80      	subs	r3, #128	; 0x80
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff3e 	bl	8000f74 <__lcd_i2c_write_command>
  #endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	080081cc 	.word	0x080081cc

08001104 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f80c 	bl	8001134 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4619      	mov	r1, r3
 8001126:	4610      	mov	r0, r2
 8001128:	f003 fb48 	bl	80047bc <HAL_TIM_PWM_Start>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8001140:	edd7 7a00 	vldr	s15, [r7]
 8001144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	d503      	bpl.n	8001156 <PWM_WriteDuty+0x22>
    duty = 0.0;
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	e00a      	b.n	800116c <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8001156:	edd7 7a00 	vldr	s15, [r7]
 800115a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001218 <PWM_WriteDuty+0xe4>
 800115e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	dd01      	ble.n	800116c <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <PWM_WriteDuty+0xe8>)
 800116a:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	3301      	adds	r3, #1
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001184:	edd7 7a00 	vldr	s15, [r7]
 8001188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800118c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001218 <PWM_WriteDuty+0xe4>
 8001190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001198:	ee17 3a90 	vmov	r3, s15
 800119c:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d105      	bne.n	80011b2 <PWM_WriteDuty+0x7e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011b0:	e02c      	b.n	800120c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d105      	bne.n	80011c6 <PWM_WriteDuty+0x92>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011c4:	e022      	b.n	800120c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d105      	bne.n	80011da <PWM_WriteDuty+0xa6>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80011d8:	e018      	b.n	800120c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b0c      	cmp	r3, #12
 80011e0:	d105      	bne.n	80011ee <PWM_WriteDuty+0xba>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011ec:	e00e      	b.n	800120c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b10      	cmp	r3, #16
 80011f4:	d105      	bne.n	8001202 <PWM_WriteDuty+0xce>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001200:	e004      	b.n	800120c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	42c80000 	.word	0x42c80000
 800121c:	42c80000 	.word	0x42c80000

08001220 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001236:	4bb4      	ldr	r3, [pc, #720]	; (8001508 <MX_GPIO_Init+0x2e8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4ab3      	ldr	r2, [pc, #716]	; (8001508 <MX_GPIO_Init+0x2e8>)
 800123c:	f043 0310 	orr.w	r3, r3, #16
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4bb1      	ldr	r3, [pc, #708]	; (8001508 <MX_GPIO_Init+0x2e8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	623b      	str	r3, [r7, #32]
 800124c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4bae      	ldr	r3, [pc, #696]	; (8001508 <MX_GPIO_Init+0x2e8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4aad      	ldr	r2, [pc, #692]	; (8001508 <MX_GPIO_Init+0x2e8>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4bab      	ldr	r3, [pc, #684]	; (8001508 <MX_GPIO_Init+0x2e8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001266:	4ba8      	ldr	r3, [pc, #672]	; (8001508 <MX_GPIO_Init+0x2e8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4aa7      	ldr	r2, [pc, #668]	; (8001508 <MX_GPIO_Init+0x2e8>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4ba5      	ldr	r3, [pc, #660]	; (8001508 <MX_GPIO_Init+0x2e8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4ba2      	ldr	r3, [pc, #648]	; (8001508 <MX_GPIO_Init+0x2e8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4aa1      	ldr	r2, [pc, #644]	; (8001508 <MX_GPIO_Init+0x2e8>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b9f      	ldr	r3, [pc, #636]	; (8001508 <MX_GPIO_Init+0x2e8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <MX_GPIO_Init+0x2e8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a9b      	ldr	r2, [pc, #620]	; (8001508 <MX_GPIO_Init+0x2e8>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b99      	ldr	r3, [pc, #612]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ae:	4b96      	ldr	r3, [pc, #600]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a95      	ldr	r2, [pc, #596]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b93      	ldr	r3, [pc, #588]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b90      	ldr	r3, [pc, #576]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a8f      	ldr	r2, [pc, #572]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012de:	4b8a      	ldr	r3, [pc, #552]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a89      	ldr	r2, [pc, #548]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b87      	ldr	r3, [pc, #540]	; (8001508 <MX_GPIO_Init+0x2e8>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2101      	movs	r1, #1
 80012fa:	4884      	ldr	r0, [pc, #528]	; (800150c <MX_GPIO_Init+0x2ec>)
 80012fc:	f001 fbd6 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f244 0181 	movw	r1, #16513	; 0x4081
 8001306:	4882      	ldr	r0, [pc, #520]	; (8001510 <MX_GPIO_Init+0x2f0>)
 8001308:	f001 fbd0 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, KEYPAD_COL4_Pin|KEYPAD_COL2_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001312:	4880      	ldr	r0, [pc, #512]	; (8001514 <MX_GPIO_Init+0x2f4>)
 8001314:	f001 fbca 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, KEYPAD_COL3_Pin|KEYPAD_COL1_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800131e:	487e      	ldr	r0, [pc, #504]	; (8001518 <MX_GPIO_Init+0x2f8>)
 8001320:	f001 fbc4 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2140      	movs	r1, #64	; 0x40
 8001328:	487c      	ldr	r0, [pc, #496]	; (800151c <MX_GPIO_Init+0x2fc>)
 800132a:	f001 fbbf 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001334:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	4871      	ldr	r0, [pc, #452]	; (800150c <MX_GPIO_Init+0x2ec>)
 8001346:	f001 fa05 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134a:	2301      	movs	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	486a      	ldr	r0, [pc, #424]	; (800150c <MX_GPIO_Init+0x2ec>)
 8001362:	f001 f9f7 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001366:	2332      	movs	r3, #50	; 0x32
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001376:	230b      	movs	r3, #11
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4862      	ldr	r0, [pc, #392]	; (800150c <MX_GPIO_Init+0x2ec>)
 8001382:	f001 f9e7 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001386:	2386      	movs	r3, #134	; 0x86
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001396:	230b      	movs	r3, #11
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	485f      	ldr	r0, [pc, #380]	; (8001520 <MX_GPIO_Init+0x300>)
 80013a2:	f001 f9d7 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a6:	2308      	movs	r3, #8
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	4859      	ldr	r0, [pc, #356]	; (8001520 <MX_GPIO_Init+0x300>)
 80013ba:	f001 f9cb 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013be:	f244 0381 	movw	r3, #16513	; 0x4081
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	484e      	ldr	r0, [pc, #312]	; (8001510 <MX_GPIO_Init+0x2f0>)
 80013d8:	f001 f9bc 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = KEYPAD_COL4_Pin|KEYPAD_COL2_Pin;
 80013dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	4847      	ldr	r0, [pc, #284]	; (8001514 <MX_GPIO_Init+0x2f4>)
 80013f6:	f001 f9ad 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW4_Pin;
 80013fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEYPAD_ROW4_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4841      	ldr	r0, [pc, #260]	; (8001514 <MX_GPIO_Init+0x2f4>)
 8001410:	f001 f9a0 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin;
 8001414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEYPAD_ROW1_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	483b      	ldr	r0, [pc, #236]	; (8001518 <MX_GPIO_Init+0x2f8>)
 800142a:	f001 f993 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEYPAD_COL3_Pin|KEYPAD_COL1_Pin;
 800142e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	4834      	ldr	r0, [pc, #208]	; (8001518 <MX_GPIO_Init+0x2f8>)
 8001448:	f001 f984 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800145e:	230b      	movs	r3, #11
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	4829      	ldr	r0, [pc, #164]	; (8001510 <MX_GPIO_Init+0x2f0>)
 800146a:	f001 f973 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800146e:	2340      	movs	r3, #64	; 0x40
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	4825      	ldr	r0, [pc, #148]	; (800151c <MX_GPIO_Init+0x2fc>)
 8001486:	f001 f965 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin;
 800148a:	f44f 4385 	mov.w	r3, #17024	; 0x4280
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	481f      	ldr	r0, [pc, #124]	; (800151c <MX_GPIO_Init+0x2fc>)
 80014a0:	f001 f958 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014b6:	230a      	movs	r3, #10
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4817      	ldr	r0, [pc, #92]	; (8001520 <MX_GPIO_Init+0x300>)
 80014c2:	f001 f947 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	4619      	mov	r1, r3
 80014da:	4811      	ldr	r0, [pc, #68]	; (8001520 <MX_GPIO_Init+0x300>)
 80014dc:	f001 f93a 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014f2:	230b      	movs	r3, #11
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <MX_GPIO_Init+0x2fc>)
 80014fe:	f001 f929 	bl	8002754 <HAL_GPIO_Init>

}
 8001502:	bf00      	nop
 8001504:	3738      	adds	r7, #56	; 0x38
 8001506:	e00d      	b.n	8001524 <MX_GPIO_Init+0x304>
 8001508:	40023800 	.word	0x40023800
 800150c:	40020800 	.word	0x40020800
 8001510:	40020400 	.word	0x40020400
 8001514:	40021400 	.word	0x40021400
 8001518:	40021000 	.word	0x40021000
 800151c:	40021800 	.word	0x40021800
 8001520:	40020000 	.word	0x40020000
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_I2C1_Init+0x74>)
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_I2C1_Init+0x74>)
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <MX_I2C1_Init+0x7c>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_I2C1_Init+0x74>)
 8001540:	2201      	movs	r2, #1
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_I2C1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_I2C1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_I2C1_Init+0x74>)
 8001564:	f001 fabc 	bl	8002ae0 <HAL_I2C_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800156e:	f000 f9f5 	bl	800195c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001572:	2100      	movs	r1, #0
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <MX_I2C1_Init+0x74>)
 8001576:	f001 fe29 	bl	80031cc <HAL_I2CEx_ConfigAnalogFilter>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001580:	f000 f9ec 	bl	800195c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001584:	2100      	movs	r1, #0
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_I2C1_Init+0x74>)
 8001588:	f001 fe6b 	bl	8003262 <HAL_I2CEx_ConfigDigitalFilter>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001592:	f000 f9e3 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000d8 	.word	0x200000d8
 80015a0:	40005400 	.word	0x40005400
 80015a4:	20404768 	.word	0x20404768

080015a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0aa      	sub	sp, #168	; 0xa8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	2284      	movs	r2, #132	; 0x84
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 f905 	bl	80077d8 <memset>
  if(i2cHandle->Instance==I2C1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_I2C_MspInit+0xb4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d13c      	bne.n	8001652 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015de:	2300      	movs	r3, #0
 80015e0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fbb2 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015f2:	f000 f9b3 	bl	800195c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_I2C_MspInit+0xb8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_I2C_MspInit+0xb8>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_I2C_MspInit+0xb8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800160e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001616:	2312      	movs	r3, #18
 8001618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001628:	2304      	movs	r3, #4
 800162a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001632:	4619      	mov	r1, r3
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <HAL_I2C_MspInit+0xbc>)
 8001636:	f001 f88d 	bl	8002754 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_I2C_MspInit+0xb8>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_I2C_MspInit+0xb8>)
 8001640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_I2C_MspInit+0xb8>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001652:	bf00      	nop
 8001654:	37a8      	adds	r7, #168	; 0xa8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40005400 	.word	0x40005400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]


}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f000 fe39 	bl	800230a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f8a0 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f7ff fdc0 	bl	8001220 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80016a0:	f000 fd72 	bl	8002188 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80016a4:	f000 fa14 	bl	8001ad0 <MX_TIM1_Init>
  MX_TIM9_Init();
 80016a8:	f000 fbe4 	bl	8001e74 <MX_TIM9_Init>
  MX_TIM2_Init();
 80016ac:	f000 fab4 	bl	8001c18 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016b0:	f000 fb0c 	bl	8001ccc <MX_TIM3_Init>
  MX_I2C1_Init();
 80016b4:	f7ff ff38 	bl	8001528 <MX_I2C1_Init>
  MX_TIM7_Init();
 80016b8:	f000 fba6 	bl	8001e08 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Start Sensor 1 & 2
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 80016bc:	2308      	movs	r3, #8
 80016be:	4a36      	ldr	r2, [pc, #216]	; (8001798 <main+0x108>)
 80016c0:	4936      	ldr	r1, [pc, #216]	; (800179c <main+0x10c>)
 80016c2:	4837      	ldr	r0, [pc, #220]	; (80017a0 <main+0x110>)
 80016c4:	f7ff fb84 	bl	8000dd0 <hc_sr04_init>
  hc_sr04_init(&distance_sensor2, &htim3, &htim2, TIM_CHANNEL_3);
 80016c8:	2308      	movs	r3, #8
 80016ca:	4a33      	ldr	r2, [pc, #204]	; (8001798 <main+0x108>)
 80016cc:	4935      	ldr	r1, [pc, #212]	; (80017a4 <main+0x114>)
 80016ce:	4836      	ldr	r0, [pc, #216]	; (80017a8 <main+0x118>)
 80016d0:	f7ff fb7e 	bl	8000dd0 <hc_sr04_init>

  // Start Servos
  SERVO_Init(&hservo1);
 80016d4:	4835      	ldr	r0, [pc, #212]	; (80017ac <main+0x11c>)
 80016d6:	f7ff fb2d 	bl	8000d34 <SERVO_Init>
  SERVO_WritePosition(&hservo1, 130.0f);
 80016da:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80017b0 <main+0x120>
 80016de:	4833      	ldr	r0, [pc, #204]	; (80017ac <main+0x11c>)
 80016e0:	f7ff fb3c 	bl	8000d5c <SERVO_WritePosition>
  HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 80016e4:	2303      	movs	r3, #3
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	4932      	ldr	r1, [pc, #200]	; (80017b4 <main+0x124>)
 80016ec:	4832      	ldr	r0, [pc, #200]	; (80017b8 <main+0x128>)
 80016ee:	f004 fe48 	bl	8006382 <HAL_UART_Receive_IT>


 // Start LCD and set up GUI
  LCD_I2C_Init(&hlcd3);
 80016f2:	4832      	ldr	r0, [pc, #200]	; (80017bc <main+0x12c>)
 80016f4:	f7ff fc5e 	bl	8000fb4 <LCD_I2C_Init>
  LCD_I2C_SetCursor(&hlcd3, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	482f      	ldr	r0, [pc, #188]	; (80017bc <main+0x12c>)
 80016fe:	f7ff fce7 	bl	80010d0 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "Position: ");
 8001702:	492f      	ldr	r1, [pc, #188]	; (80017c0 <main+0x130>)
 8001704:	482d      	ldr	r0, [pc, #180]	; (80017bc <main+0x12c>)
 8001706:	f7ff fcc3 	bl	8001090 <LCD_I2C_printStr>


  LCD_I2C_SetCursor(&hlcd3, 0, 13);
 800170a:	220d      	movs	r2, #13
 800170c:	2100      	movs	r1, #0
 800170e:	482b      	ldr	r0, [pc, #172]	; (80017bc <main+0x12c>)
 8001710:	f7ff fcde 	bl	80010d0 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "cm");
 8001714:	492b      	ldr	r1, [pc, #172]	; (80017c4 <main+0x134>)
 8001716:	4829      	ldr	r0, [pc, #164]	; (80017bc <main+0x12c>)
 8001718:	f7ff fcba 	bl	8001090 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2101      	movs	r1, #1
 8001720:	4826      	ldr	r0, [pc, #152]	; (80017bc <main+0x12c>)
 8001722:	f7ff fcd5 	bl	80010d0 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "Set Point: ");
 8001726:	4928      	ldr	r1, [pc, #160]	; (80017c8 <main+0x138>)
 8001728:	4824      	ldr	r0, [pc, #144]	; (80017bc <main+0x12c>)
 800172a:	f7ff fcb1 	bl	8001090 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 14);
 800172e:	220e      	movs	r2, #14
 8001730:	2101      	movs	r1, #1
 8001732:	4822      	ldr	r0, [pc, #136]	; (80017bc <main+0x12c>)
 8001734:	f7ff fccc 	bl	80010d0 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "cm");
 8001738:	4922      	ldr	r1, [pc, #136]	; (80017c4 <main+0x134>)
 800173a:	4820      	ldr	r0, [pc, #128]	; (80017bc <main+0x12c>)
 800173c:	f7ff fca8 	bl	8001090 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 11);
 8001740:	220b      	movs	r2, #11
 8001742:	2101      	movs	r1, #1
 8001744:	481d      	ldr	r0, [pc, #116]	; (80017bc <main+0x12c>)
 8001746:	f7ff fcc3 	bl	80010d0 <LCD_I2C_SetCursor>
  LCD_I2C_printDecInt(&hlcd3, setP);
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <main+0x13c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	481a      	ldr	r0, [pc, #104]	; (80017bc <main+0x12c>)
 8001752:	f7ff fc77 	bl	8001044 <LCD_I2C_printDecInt>
  while (1)
  {
	 // PID(&hservo1,position,setP);

	  // Send Value of Position to LCD
	  LCD_I2C_SetCursor(&hlcd3, 0, 10);
 8001756:	220a      	movs	r2, #10
 8001758:	2100      	movs	r1, #0
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <main+0x12c>)
 800175c:	f7ff fcb8 	bl	80010d0 <LCD_I2C_SetCursor>
	  LCD_I2C_printDecInt(&hlcd3, position);
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <main+0x140>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	4815      	ldr	r0, [pc, #84]	; (80017bc <main+0x12c>)
 8001768:	f7ff fc6c 	bl	8001044 <LCD_I2C_printDecInt>

	  // Convert position into string
	  sprintf(position_buffer, "%d\r\n", position);
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <main+0x140>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4918      	ldr	r1, [pc, #96]	; (80017d4 <main+0x144>)
 8001774:	4818      	ldr	r0, [pc, #96]	; (80017d8 <main+0x148>)
 8001776:	f006 f80f 	bl	8007798 <siprintf>

	  // Transmit position through UART
	   HAL_UART_Transmit(&huart3, (uint8_t*)position_buffer, strlen(position_buffer), HAL_MAX_DELAY);
 800177a:	4817      	ldr	r0, [pc, #92]	; (80017d8 <main+0x148>)
 800177c:	f7fe fd48 	bl	8000210 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	b29a      	uxth	r2, r3
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	4913      	ldr	r1, [pc, #76]	; (80017d8 <main+0x148>)
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <main+0x128>)
 800178c:	f004 fd76 	bl	800627c <HAL_UART_Transmit>

	  HAL_Delay(100);
 8001790:	2064      	movs	r0, #100	; 0x64
 8001792:	f000 fe17 	bl	80023c4 <HAL_Delay>
	  LCD_I2C_SetCursor(&hlcd3, 0, 10);
 8001796:	e7de      	b.n	8001756 <main+0xc6>
 8001798:	200001b4 	.word	0x200001b4
 800179c:	20000168 	.word	0x20000168
 80017a0:	20000138 	.word	0x20000138
 80017a4:	20000200 	.word	0x20000200
 80017a8:	20000148 	.word	0x20000148
 80017ac:	20000030 	.word	0x20000030
 80017b0:	43020000 	.word	0x43020000
 80017b4:	20000160 	.word	0x20000160
 80017b8:	200002e4 	.word	0x200002e4
 80017bc:	20000018 	.word	0x20000018
 80017c0:	080081a8 	.word	0x080081a8
 80017c4:	080081b4 	.word	0x080081b4
 80017c8:	080081b8 	.word	0x080081b8
 80017cc:	2000002c 	.word	0x2000002c
 80017d0:	20000134 	.word	0x20000134
 80017d4:	080081c4 	.word	0x080081c4
 80017d8:	20000158 	.word	0x20000158

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	; 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	2230      	movs	r2, #48	; 0x30
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 fff4 	bl	80077d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001800:	f001 fd7c 	bl	80032fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <SystemClock_Config+0xd4>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <SystemClock_Config+0xd4>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <SystemClock_Config+0xd4>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800181c:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <SystemClock_Config+0xd8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a24      	ldr	r2, [pc, #144]	; (80018b4 <SystemClock_Config+0xd8>)
 8001822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <SystemClock_Config+0xd8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001834:	2301      	movs	r3, #1
 8001836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001838:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183e:	2302      	movs	r3, #2
 8001840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001848:	2304      	movs	r3, #4
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800184c:	23d8      	movs	r3, #216	; 0xd8
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001850:	2302      	movs	r3, #2
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001854:	2309      	movs	r3, #9
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001858:	f107 0320 	add.w	r3, r7, #32
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fdad 	bl	80033bc <HAL_RCC_OscConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001868:	f000 f878 	bl	800195c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800186c:	f001 fd56 	bl	800331c <HAL_PWREx_EnableOverDrive>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001876:	f000 f871 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187a:	230f      	movs	r3, #15
 800187c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187e:	2302      	movs	r3, #2
 8001880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800188a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800188c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001890:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	2107      	movs	r1, #7
 8001898:	4618      	mov	r0, r3
 800189a:	f002 f833 	bl	8003904 <HAL_RCC_ClockConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80018a4:	f000 f85a 	bl	800195c <Error_Handler>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3750      	adds	r7, #80	; 0x50
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000

080018b8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_TIM_IC_CaptureCallback+0x84>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10d      	bne.n	80018e6 <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		uint32_t echo_us;
          // Convert and assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80018ca:	2104      	movs	r1, #4
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f003 fdfd 	bl	80054cc <HAL_TIM_ReadCapturedValue>
 80018d2:	60f8      	str	r0, [r7, #12]
		dx_cm = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fa9d 	bl	8000e14 <hc_sr04_convert_us_to_cm>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a18      	ldr	r2, [pc, #96]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x88>)
 80018de:	60d3      	str	r3, [r2, #12]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80018e4:	601a      	str	r2, [r3, #0]
	}

	if(TIM3 == htim->Instance)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x90>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d10d      	bne.n	800190c <HAL_TIM_IC_CaptureCallback+0x54>
	{
		uint32_t echo_us;
        // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80018f0:	2104      	movs	r1, #4
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f003 fdea 	bl	80054cc <HAL_TIM_ReadCapturedValue>
 80018f8:	60b8      	str	r0, [r7, #8]
		dx_cm2 = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 80018fa:	68b8      	ldr	r0, [r7, #8]
 80018fc:	f7ff fa8a 	bl	8000e14 <hc_sr04_convert_us_to_cm>
 8001900:	4603      	mov	r3, r0
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001904:	60d3      	str	r3, [r2, #12]
 8001906:	461a      	mov	r2, r3
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_TIM_IC_CaptureCallback+0x94>)
 800190a:	601a      	str	r2, [r3, #0]
	}

	    // Calculate average distance or perform any other processing
	      position = CalulatePosition(dx_cm, dx_cm2);
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_TIM_IC_CaptureCallback+0x94>)
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa8e 	bl	8000e38 <CalulatePosition>
 800191c:	4603      	mov	r3, r0
 800191e:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001920:	6013      	str	r3, [r2, #0]
		  PID(&hservo1,position,setP);
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	4619      	mov	r1, r3
 800192c:	480a      	ldr	r0, [pc, #40]	; (8001958 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800192e:	f7ff f97b 	bl	8000c28 <PID>

}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40010000 	.word	0x40010000
 8001940:	20000138 	.word	0x20000138
 8001944:	2000012c 	.word	0x2000012c
 8001948:	40000400 	.word	0x40000400
 800194c:	20000130 	.word	0x20000130
 8001950:	20000134 	.word	0x20000134
 8001954:	2000002c 	.word	0x2000002c
 8001958:	20000030 	.word	0x20000030

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_MspInit+0x44>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_MspInit+0x44>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_MspInit+0x44>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_MspInit+0x44>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_MspInit+0x44>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_MspInit+0x44>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fc:	f000 fcc2 	bl	8002384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <TIM1_CC_IRQHandler+0x10>)
 8001a0a:	f003 f983 	bl	8004d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000168 	.word	0x20000168

08001a18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <TIM3_IRQHandler+0x10>)
 8001a1e:	f003 f979 	bl	8004d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000200 	.word	0x20000200

08001a2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <USART3_IRQHandler+0x10>)
 8001a32:	f004 fceb 	bl	800640c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002e4 	.word	0x200002e4

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f005 feba 	bl	80077e8 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20050000 	.word	0x20050000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	20000164 	.word	0x20000164
 8001aa8:	200004b8 	.word	0x200004b8

08001aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b090      	sub	sp, #64	; 0x40
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	463b      	mov	r3, r7
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b0c:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b0e:	4a41      	ldr	r2, [pc, #260]	; (8001c14 <MX_TIM1_Init+0x144>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 8001b12:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b14:	226b      	movs	r2, #107	; 0x6b
 8001b16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b2c:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b38:	4835      	ldr	r0, [pc, #212]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b3a:	f002 fcf9 	bl	8004530 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001b44:	f7ff ff0a 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b52:	4619      	mov	r1, r3
 8001b54:	482e      	ldr	r0, [pc, #184]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b56:	f003 fbad 	bl	80052b4 <HAL_TIM_ConfigClockSource>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001b60:	f7ff fefc 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001b64:	482a      	ldr	r0, [pc, #168]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b66:	f002 ff23 	bl	80049b0 <HAL_TIM_IC_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b70:	f7ff fef4 	bl	800195c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b74:	2304      	movs	r3, #4
 8001b76:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b78:	2350      	movs	r3, #80	; 0x50
 8001b7a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4820      	ldr	r0, [pc, #128]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001b90:	f003 fc5a 	bl	8005448 <HAL_TIM_SlaveConfigSynchro>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001b9a:	f7ff fedf 	bl	800195c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4816      	ldr	r0, [pc, #88]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001bb8:	f003 f9cb 	bl	8004f52 <HAL_TIM_IC_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001bc2:	f7ff fecb 	bl	800195c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480e      	ldr	r0, [pc, #56]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001bd8:	f003 f9bb 	bl	8004f52 <HAL_TIM_IC_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001be2:	f7ff febb 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_TIM1_Init+0x140>)
 8001bf8:	f004 fa46 	bl	8006088 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001c02:	f7ff feab 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	3740      	adds	r7, #64	; 0x40
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000168 	.word	0x20000168
 8001c14:	40010000 	.word	0x40010000

08001c18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001c46:	226b      	movs	r2, #107	; 0x6b
 8001c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001c52:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <MX_TIM2_Init+0xb0>)
 8001c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c62:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001c64:	f002 fd53 	bl	800470e <HAL_TIM_PWM_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c6e:	f7ff fe75 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001c82:	f004 fa01 	bl	8006088 <HAL_TIMEx_MasterConfigSynchronization>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c8c:	f7ff fe66 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c90:	2360      	movs	r3, #96	; 0x60
 8001c92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001c94:	230a      	movs	r3, #10
 8001c96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001ca8:	f003 f9f0 	bl	800508c <HAL_TIM_PWM_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001cb2:	f7ff fe53 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <MX_TIM2_Init+0xac>)
 8001cb8:	f000 fa0a 	bl	80020d0 <HAL_TIM_MspPostInit>

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200001b4 	.word	0x200001b4
 8001cc8:	00030d3f 	.word	0x00030d3f

08001ccc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b090      	sub	sp, #64	; 0x40
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d08:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d0a:	4a3e      	ldr	r2, [pc, #248]	; (8001e04 <MX_TIM3_Init+0x138>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8001d0e:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d10:	226b      	movs	r2, #107	; 0x6b
 8001d12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d2e:	4834      	ldr	r0, [pc, #208]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d30:	f002 fbfe 	bl	8004530 <HAL_TIM_Base_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001d3a:	f7ff fe0f 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d48:	4619      	mov	r1, r3
 8001d4a:	482d      	ldr	r0, [pc, #180]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d4c:	f003 fab2 	bl	80052b4 <HAL_TIM_ConfigClockSource>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001d56:	f7ff fe01 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001d5a:	4829      	ldr	r0, [pc, #164]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d5c:	f002 fe28 	bl	80049b0 <HAL_TIM_IC_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001d66:	f7ff fdf9 	bl	800195c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001d6e:	2350      	movs	r3, #80	; 0x50
 8001d70:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	481e      	ldr	r0, [pc, #120]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001d86:	f003 fb5f 	bl	8005448 <HAL_TIM_SlaveConfigSynchro>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001d90:	f7ff fde4 	bl	800195c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	2200      	movs	r2, #0
 8001daa:	4619      	mov	r1, r3
 8001dac:	4814      	ldr	r0, [pc, #80]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001dae:	f003 f8d0 	bl	8004f52 <HAL_TIM_IC_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001db8:	f7ff fdd0 	bl	800195c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2204      	movs	r2, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001dce:	f003 f8c0 	bl	8004f52 <HAL_TIM_IC_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001dd8:	f7ff fdc0 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de4:	463b      	mov	r3, r7
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_TIM3_Init+0x134>)
 8001dea:	f004 f94d 	bl	8006088 <HAL_TIMEx_MasterConfigSynchronization>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8001df4:	f7ff fdb2 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3740      	adds	r7, #64	; 0x40
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000200 	.word	0x20000200
 8001e04:	40000400 	.word	0x40000400

08001e08 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <MX_TIM7_Init+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e20:	226b      	movs	r2, #107	; 0x6b
 8001e22:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e30:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e3a:	f002 fb79 	bl	8004530 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e44:	f7ff fd8a 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_TIM7_Init+0x64>)
 8001e56:	f004 f917 	bl	8006088 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e60:	f7ff fd7c 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000024c 	.word	0x2000024c
 8001e70:	40001400 	.word	0x40001400

08001e74 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	; 0x30
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0320 	add.w	r3, r7, #32
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001e9c:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <MX_TIM9_Init+0xc0>)
 8001e9e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001ea2:	226b      	movs	r2, #107	; 0x6b
 8001ea4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001eae:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001eb2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001ec0:	481b      	ldr	r0, [pc, #108]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001ec2:	f002 fb35 	bl	8004530 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001ecc:	f7ff fd46 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	4619      	mov	r1, r3
 8001edc:	4814      	ldr	r0, [pc, #80]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001ede:	f003 f9e9 	bl	80052b4 <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001ee8:	f7ff fd38 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001eec:	4810      	ldr	r0, [pc, #64]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001eee:	f002 fc0e 	bl	800470e <HAL_TIM_PWM_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001ef8:	f7ff fd30 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efc:	2360      	movs	r3, #96	; 0x60
 8001efe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4619      	mov	r1, r3
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001f14:	f003 f8ba 	bl	800508c <HAL_TIM_PWM_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001f1e:	f7ff fd1d 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001f22:	4803      	ldr	r0, [pc, #12]	; (8001f30 <MX_TIM9_Init+0xbc>)
 8001f24:	f000 f8d4 	bl	80020d0 <HAL_TIM_MspPostInit>

}
 8001f28:	bf00      	nop
 8001f2a:	3730      	adds	r7, #48	; 0x30
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000298 	.word	0x20000298
 8001f34:	40014000 	.word	0x40014000

08001f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	; 0x38
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a48      	ldr	r2, [pc, #288]	; (8002078 <HAL_TIM_Base_MspInit+0x140>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d131      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f5a:	4b48      	ldr	r3, [pc, #288]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a47      	ldr	r2, [pc, #284]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b45      	ldr	r3, [pc, #276]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a41      	ldr	r2, [pc, #260]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001f78:	f043 0310 	orr.w	r3, r3, #16
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4836      	ldr	r0, [pc, #216]	; (8002080 <HAL_TIM_Base_MspInit+0x148>)
 8001fa8:	f000 fbd4 	bl	8002754 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	201b      	movs	r0, #27
 8001fb2:	f000 fb06 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001fb6:	201b      	movs	r0, #27
 8001fb8:	f000 fb1f 	bl	80025fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001fbc:	e058      	b.n	8002070 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM3)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a30      	ldr	r2, [pc, #192]	; (8002084 <HAL_TIM_Base_MspInit+0x14c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d130      	bne.n	800202a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	4a25      	ldr	r2, [pc, #148]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6313      	str	r3, [r2, #48]	; 0x30
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002008:	2302      	movs	r3, #2
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	481d      	ldr	r0, [pc, #116]	; (8002088 <HAL_TIM_Base_MspInit+0x150>)
 8002014:	f000 fb9e 	bl	8002754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	201d      	movs	r0, #29
 800201e:	f000 fad0 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002022:	201d      	movs	r0, #29
 8002024:	f000 fae9 	bl	80025fa <HAL_NVIC_EnableIRQ>
}
 8002028:	e022      	b.n	8002070 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM7)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_TIM_Base_MspInit+0x154>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d10c      	bne.n	800204e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	4a10      	ldr	r2, [pc, #64]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	6413      	str	r3, [r2, #64]	; 0x40
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
}
 800204c:	e010      	b.n	8002070 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM9)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <HAL_TIM_Base_MspInit+0x158>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d10b      	bne.n	8002070 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	6453      	str	r3, [r2, #68]	; 0x44
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_TIM_Base_MspInit+0x144>)
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	bf00      	nop
 8002072:	3738      	adds	r7, #56	; 0x38
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40010000 	.word	0x40010000
 800207c:	40023800 	.word	0x40023800
 8002080:	40021000 	.word	0x40021000
 8002084:	40000400 	.word	0x40000400
 8002088:	40020000 	.word	0x40020000
 800208c:	40001400 	.word	0x40001400
 8002090:	40014000 	.word	0x40014000

08002094 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d10b      	bne.n	80020be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_TIM_PWM_MspInit+0x38>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_TIM_PWM_MspInit+0x38>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_TIM_PWM_MspInit+0x38>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d11d      	bne.n	800212e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	4b21      	ldr	r3, [pc, #132]	; (8002178 <HAL_TIM_MspPostInit+0xa8>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a20      	ldr	r2, [pc, #128]	; (8002178 <HAL_TIM_MspPostInit+0xa8>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_TIM_MspPostInit+0xa8>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800210a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800210e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800211c:	2301      	movs	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	4815      	ldr	r0, [pc, #84]	; (800217c <HAL_TIM_MspPostInit+0xac>)
 8002128:	f000 fb14 	bl	8002754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800212c:	e020      	b.n	8002170 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a13      	ldr	r2, [pc, #76]	; (8002180 <HAL_TIM_MspPostInit+0xb0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d11b      	bne.n	8002170 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_TIM_MspPostInit+0xa8>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_TIM_MspPostInit+0xa8>)
 800213e:	f043 0310 	orr.w	r3, r3, #16
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_TIM_MspPostInit+0xa8>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8002150:	2320      	movs	r3, #32
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002160:	2303      	movs	r3, #3
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	4806      	ldr	r0, [pc, #24]	; (8002184 <HAL_TIM_MspPostInit+0xb4>)
 800216c:	f000 faf2 	bl	8002754 <HAL_GPIO_Init>
}
 8002170:	bf00      	nop
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	40020400 	.word	0x40020400
 8002180:	40014000 	.word	0x40014000
 8002184:	40021000 	.word	0x40021000

08002188 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <MX_USART3_UART_Init+0x5c>)
 8002190:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_USART3_UART_Init+0x58>)
 80021cc:	f004 f808 	bl	80061e0 <HAL_UART_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80021d6:	f7ff fbc1 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200002e4 	.word	0x200002e4
 80021e4:	40004800 	.word	0x40004800

080021e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0aa      	sub	sp, #168	; 0xa8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	2284      	movs	r2, #132	; 0x84
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f005 fae5 	bl	80077d8 <memset>
  if(uartHandle->Instance==USART3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a26      	ldr	r2, [pc, #152]	; (80022ac <HAL_UART_MspInit+0xc4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d144      	bne.n	80022a2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800221e:	2300      	movs	r3, #0
 8002220:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	4618      	mov	r0, r3
 8002228:	f001 fd92 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002232:	f7ff fb93 	bl	800195c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_UART_MspInit+0xc8>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_UART_MspInit+0xc8>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_UART_MspInit+0xc8>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_UART_MspInit+0xc8>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_UART_MspInit+0xc8>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_UART_MspInit+0xc8>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002266:	f44f 7340 	mov.w	r3, #768	; 0x300
 800226a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002274:	2301      	movs	r3, #1
 8002276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002280:	2307      	movs	r3, #7
 8002282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002286:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800228a:	4619      	mov	r1, r3
 800228c:	4809      	ldr	r0, [pc, #36]	; (80022b4 <HAL_UART_MspInit+0xcc>)
 800228e:	f000 fa61 	bl	8002754 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	2027      	movs	r0, #39	; 0x27
 8002298:	f000 f993 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800229c:	2027      	movs	r0, #39	; 0x27
 800229e:	f000 f9ac 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022a2:	bf00      	nop
 80022a4:	37a8      	adds	r7, #168	; 0xa8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40004800 	.word	0x40004800
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020c00 	.word	0x40020c00

080022b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022be:	490e      	ldr	r1, [pc, #56]	; (80022f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c4:	e002      	b.n	80022cc <LoopCopyDataInit>

080022c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ca:	3304      	adds	r3, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d0:	d3f9      	bcc.n	80022c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d2:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022d4:	4c0b      	ldr	r4, [pc, #44]	; (8002304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d8:	e001      	b.n	80022de <LoopFillZerobss>

080022da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022dc:	3204      	adds	r2, #4

080022de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e0:	d3fb      	bcc.n	80022da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022e2:	f7ff fbe3 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e6:	f005 fa85 	bl	80077f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ea:	f7ff f9d1 	bl	8001690 <main>
  bx  lr    
 80022ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80022fc:	0800822c 	.word	0x0800822c
  ldr r2, =_sbss
 8002300:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002304:	200004b8 	.word	0x200004b8

08002308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC_IRQHandler>

0800230a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230e:	2003      	movs	r0, #3
 8002310:	f000 f94c 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002314:	2000      	movs	r0, #0
 8002316:	f000 f805 	bl	8002324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800231a:	f7ff fb25 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_InitTick+0x54>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_InitTick+0x58>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233a:	fbb3 f3f1 	udiv	r3, r3, r1
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f967 	bl	8002616 <HAL_SYSTICK_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e00e      	b.n	8002370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b0f      	cmp	r3, #15
 8002356:	d80a      	bhi.n	800236e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002358:	2200      	movs	r2, #0
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f000 f92f 	bl	80025c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002364:	4a06      	ldr	r2, [pc, #24]	; (8002380 <HAL_InitTick+0x5c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000040 	.word	0x20000040
 800237c:	20000048 	.word	0x20000048
 8002380:	20000044 	.word	0x20000044

08002384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_IncTick+0x20>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x24>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_IncTick+0x24>)
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000048 	.word	0x20000048
 80023a8:	2000036c 	.word	0x2000036c

080023ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_GetTick+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	2000036c 	.word	0x2000036c

080023c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff ffee 	bl	80023ac <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d005      	beq.n	80023ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_Delay+0x44>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ea:	bf00      	nop
 80023ec:	f7ff ffde 	bl	80023ac <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d8f7      	bhi.n	80023ec <HAL_Delay+0x28>
  {
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000048 	.word	0x20000048

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <__NVIC_SetPriorityGrouping+0x40>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	4313      	orrs	r3, r2
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	; (800244c <__NVIC_SetPriorityGrouping+0x40>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00
 8002450:	05fa0000 	.word	0x05fa0000

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0b      	blt.n	800249a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4907      	ldr	r1, [pc, #28]	; (80024a8 <__NVIC_EnableIRQ+0x38>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	; (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002578:	d301      	bcc.n	800257e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e00f      	b.n	800259e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <SysTick_Config+0x40>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	210f      	movs	r1, #15
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f7ff ff8e 	bl	80024ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <SysTick_Config+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002596:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <SysTick_Config+0x40>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff29 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff3e 	bl	8002454 <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff8e 	bl	8002500 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5d 	bl	80024ac <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff31 	bl	8002470 <__NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa2 	bl	8002568 <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800263c:	f7ff feb6 	bl	80023ac <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d008      	beq.n	8002660 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e052      	b.n	8002706 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0216 	bic.w	r2, r2, #22
 800266e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800267e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <HAL_DMA_Abort+0x62>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0208 	bic.w	r2, r2, #8
 800269e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b0:	e013      	b.n	80026da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026b2:	f7ff fe7b 	bl	80023ac <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d90c      	bls.n	80026da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e015      	b.n	8002706 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1e4      	bne.n	80026b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	223f      	movs	r2, #63	; 0x3f
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d004      	beq.n	800272c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e00c      	b.n	8002746 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2205      	movs	r2, #5
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e175      	b.n	8002a60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 8164 	bne.w	8002a5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_GPIO_Init+0x56>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d130      	bne.n	800280c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 0201 	and.w	r2, r3, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b03      	cmp	r3, #3
 8002816:	d017      	beq.n	8002848 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80be 	beq.w	8002a5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <HAL_GPIO_Init+0x324>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a65      	ldr	r2, [pc, #404]	; (8002a78 <HAL_GPIO_Init+0x324>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_GPIO_Init+0x324>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028f6:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_GPIO_Init+0x328>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_GPIO_Init+0x32c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d037      	beq.n	8002992 <HAL_GPIO_Init+0x23e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <HAL_GPIO_Init+0x330>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d031      	beq.n	800298e <HAL_GPIO_Init+0x23a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_GPIO_Init+0x334>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d02b      	beq.n	800298a <HAL_GPIO_Init+0x236>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a55      	ldr	r2, [pc, #340]	; (8002a8c <HAL_GPIO_Init+0x338>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d025      	beq.n	8002986 <HAL_GPIO_Init+0x232>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a54      	ldr	r2, [pc, #336]	; (8002a90 <HAL_GPIO_Init+0x33c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01f      	beq.n	8002982 <HAL_GPIO_Init+0x22e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a53      	ldr	r2, [pc, #332]	; (8002a94 <HAL_GPIO_Init+0x340>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d019      	beq.n	800297e <HAL_GPIO_Init+0x22a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_GPIO_Init+0x344>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0x226>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <HAL_GPIO_Init+0x348>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00d      	beq.n	8002976 <HAL_GPIO_Init+0x222>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a50      	ldr	r2, [pc, #320]	; (8002aa0 <HAL_GPIO_Init+0x34c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <HAL_GPIO_Init+0x21e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4f      	ldr	r2, [pc, #316]	; (8002aa4 <HAL_GPIO_Init+0x350>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_GPIO_Init+0x21a>
 800296a:	2309      	movs	r3, #9
 800296c:	e012      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800296e:	230a      	movs	r3, #10
 8002970:	e010      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002972:	2308      	movs	r3, #8
 8002974:	e00e      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002976:	2307      	movs	r3, #7
 8002978:	e00c      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800297a:	2306      	movs	r3, #6
 800297c:	e00a      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800297e:	2305      	movs	r3, #5
 8002980:	e008      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002982:	2304      	movs	r3, #4
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002986:	2303      	movs	r3, #3
 8002988:	e004      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800298a:	2302      	movs	r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x240>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_GPIO_Init+0x240>
 8002992:	2300      	movs	r3, #0
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f002 0203 	and.w	r2, r2, #3
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	4093      	lsls	r3, r2
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029a4:	4935      	ldr	r1, [pc, #212]	; (8002a7c <HAL_GPIO_Init+0x328>)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029dc:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a00:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a2a:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_GPIO_Init+0x354>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	f67f ae86 	bls.w	8002774 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40021400 	.word	0x40021400
 8002a98:	40021800 	.word	0x40021800
 8002a9c:	40021c00 	.word	0x40021c00
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40022400 	.word	0x40022400
 8002aa8:	40013c00 	.word	0x40013c00

08002aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002abc:	787b      	ldrb	r3, [r7, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ac8:	e003      	b.n	8002ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	041a      	lsls	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe fd4e 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2224      	movs	r2, #36	; 0x24
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	e006      	b.n	8002b68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d104      	bne.n	8002b7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_I2C_Init+0x11c>)
 8002b86:	430b      	orrs	r3, r1
 8002b88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	02008000 	.word	0x02008000

08002c00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	817b      	strh	r3, [r7, #10]
 8002c10:	4613      	mov	r3, r2
 8002c12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	f040 80da 	bne.w	8002dd6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x30>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0d3      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0x1d8>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c38:	f7ff fbb8 	bl	80023ac <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2319      	movs	r3, #25
 8002c44:	2201      	movs	r2, #1
 8002c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8f0 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0be      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2221      	movs	r2, #33	; 0x21
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2210      	movs	r2, #16
 8002c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2bff      	cmp	r3, #255	; 0xff
 8002c8a:	d90e      	bls.n	8002caa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	22ff      	movs	r2, #255	; 0xff
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	8979      	ldrh	r1, [r7, #10]
 8002c9a:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa60 	bl	8003168 <I2C_TransferConfig>
 8002ca8:	e06c      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	8979      	ldrh	r1, [r7, #10]
 8002cbc:	4b48      	ldr	r3, [pc, #288]	; (8002de0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fa4f 	bl	8003168 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002cca:	e05b      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	6a39      	ldr	r1, [r7, #32]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f8ed 	bl	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e07b      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d034      	beq.n	8002d84 <HAL_I2C_Master_Transmit+0x184>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d130      	bne.n	8002d84 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f87f 	bl	8002e30 <I2C_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e04d      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2bff      	cmp	r3, #255	; 0xff
 8002d44:	d90e      	bls.n	8002d64 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	22ff      	movs	r2, #255	; 0xff
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	8979      	ldrh	r1, [r7, #10]
 8002d54:	2300      	movs	r3, #0
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fa03 	bl	8003168 <I2C_TransferConfig>
 8002d62:	e00f      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	2300      	movs	r3, #0
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f9f2 	bl	8003168 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d19e      	bne.n	8002ccc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	6a39      	ldr	r1, [r7, #32]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f8cc 	bl	8002f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e01a      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2220      	movs	r2, #32
 8002da8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002db6:	400b      	ands	r3, r1
 8002db8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
  }
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	80002000 	.word	0x80002000
 8002de4:	fe00e800 	.word	0xfe00e800

08002de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d103      	bne.n	8002e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d007      	beq.n	8002e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	619a      	str	r2, [r3, #24]
  }
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e40:	e022      	b.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d01e      	beq.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7ff faaf 	bl	80023ac <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d302      	bcc.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d113      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00f      	b.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d0cd      	beq.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ebc:	e02c      	b.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f870 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e02a      	b.n	8002f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d01e      	beq.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7ff fa67 	bl	80023ac <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d113      	bne.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e007      	b.n	8002f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d1cb      	bne.n	8002ebe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f3c:	e028      	b.n	8002f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f830 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e026      	b.n	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7ff fa2b 	bl	80023ac <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d113      	bne.n	8002f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e007      	b.n	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d1cf      	bne.n	8002f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d068      	beq.n	80030a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fdc:	e049      	b.n	8003072 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d045      	beq.n	8003072 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7ff f9e1 	bl	80023ac <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_IsErrorOccurred+0x54>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d13a      	bne.n	8003072 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800300e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301e:	d121      	bne.n	8003064 <I2C_IsErrorOccurred+0xbc>
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003026:	d01d      	beq.n	8003064 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b20      	cmp	r3, #32
 800302c:	d01a      	beq.n	8003064 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800303c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800303e:	f7ff f9b5 	bl	80023ac <HAL_GetTick>
 8003042:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003044:	e00e      	b.n	8003064 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003046:	f7ff f9b1 	bl	80023ac <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b19      	cmp	r3, #25
 8003052:	d907      	bls.n	8003064 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f043 0320 	orr.w	r3, r3, #32
 800305a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003062:	e006      	b.n	8003072 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b20      	cmp	r3, #32
 8003070:	d1e9      	bne.n	8003046 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b20      	cmp	r3, #32
 800307e:	d003      	beq.n	8003088 <I2C_IsErrorOccurred+0xe0>
 8003080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0aa      	beq.n	8002fde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2220      	movs	r2, #32
 8003096:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800310c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01c      	beq.n	8003156 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fe63 	bl	8002de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <I2C_IsErrorOccurred+0x1bc>)
 800312e:	400b      	ands	r3, r1
 8003130:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800315a:	4618      	mov	r0, r3
 800315c:	3728      	adds	r7, #40	; 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	fe00e800 	.word	0xfe00e800

08003168 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	817b      	strh	r3, [r7, #10]
 8003176:	4613      	mov	r3, r2
 8003178:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003180:	7a7b      	ldrb	r3, [r7, #9]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003188:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	4313      	orrs	r3, r2
 8003192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003196:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	0d5b      	lsrs	r3, r3, #21
 80031a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <I2C_TransferConfig+0x60>)
 80031a8:	430b      	orrs	r3, r1
 80031aa:	43db      	mvns	r3, r3
 80031ac:	ea02 0103 	and.w	r1, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	03ff63ff 	.word	0x03ff63ff

080031cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d138      	bne.n	8003254 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e032      	b.n	8003256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	; 0x24
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800321e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d139      	bne.n	80032ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003282:	2302      	movs	r3, #2
 8003284:	e033      	b.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2224      	movs	r2, #36	; 0x24
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a04      	ldr	r2, [pc, #16]	; (8003318 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40007000 	.word	0x40007000

0800331c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800334a:	f7ff f82f 	bl	80023ac <HAL_GetTick>
 800334e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003350:	e009      	b.n	8003366 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003352:	f7ff f82b 	bl	80023ac <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003360:	d901      	bls.n	8003366 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e022      	b.n	80033ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003372:	d1ee      	bne.n	8003352 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800337a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003380:	f7ff f814 	bl	80023ac <HAL_GetTick>
 8003384:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003386:	e009      	b.n	800339c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003388:	f7ff f810 	bl	80023ac <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003396:	d901      	bls.n	800339c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e007      	b.n	80033ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a8:	d1ee      	bne.n	8003388 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40007000 	.word	0x40007000

080033bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e291      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8087 	beq.w	80034ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e0:	4b96      	ldr	r3, [pc, #600]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d00c      	beq.n	8003406 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ec:	4b93      	ldr	r3, [pc, #588]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d112      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
 80033f8:	4b90      	ldr	r3, [pc, #576]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003404:	d10b      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003406:	4b8d      	ldr	r3, [pc, #564]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d06c      	beq.n	80034ec <HAL_RCC_OscConfig+0x130>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d168      	bne.n	80034ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e26b      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x7a>
 8003428:	4b84      	ldr	r3, [pc, #528]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a83      	ldr	r2, [pc, #524]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e02e      	b.n	8003494 <HAL_RCC_OscConfig+0xd8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x9c>
 800343e:	4b7f      	ldr	r3, [pc, #508]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7e      	ldr	r2, [pc, #504]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b7c      	ldr	r3, [pc, #496]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7b      	ldr	r2, [pc, #492]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xd8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0xc0>
 8003462:	4b76      	ldr	r3, [pc, #472]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a75      	ldr	r2, [pc, #468]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b73      	ldr	r3, [pc, #460]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a72      	ldr	r2, [pc, #456]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xd8>
 800347c:	4b6f      	ldr	r3, [pc, #444]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6e      	ldr	r2, [pc, #440]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b6c      	ldr	r3, [pc, #432]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6b      	ldr	r2, [pc, #428]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe ff86 	bl	80023ac <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe ff82 	bl	80023ac <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e21f      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xe8>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe ff72 	bl	80023ac <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fe ff6e 	bl	80023ac <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e20b      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	4b57      	ldr	r3, [pc, #348]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x110>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d069      	beq.n	80035ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034fa:	4b50      	ldr	r3, [pc, #320]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b4d      	ldr	r3, [pc, #308]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b08      	cmp	r3, #8
 8003510:	d11c      	bne.n	800354c <HAL_RCC_OscConfig+0x190>
 8003512:	4b4a      	ldr	r3, [pc, #296]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x17a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1df      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b41      	ldr	r3, [pc, #260]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	493d      	ldr	r1, [pc, #244]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	e040      	b.n	80035ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a38      	ldr	r2, [pc, #224]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe ff24 	bl	80023ac <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003568:	f7fe ff20 	bl	80023ac <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1bd      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4929      	ldr	r1, [pc, #164]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
 800359a:	e018      	b.n	80035ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe ff00 	bl	80023ac <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fe fefc 	bl	80023ac <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e199      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d038      	beq.n	800364c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d019      	beq.n	8003616 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e2:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	4a15      	ldr	r2, [pc, #84]	; (800363c <HAL_RCC_OscConfig+0x280>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7fe fedd 	bl	80023ac <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f6:	f7fe fed9 	bl	80023ac <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e176      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x23a>
 8003614:	e01a      	b.n	800364c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_OscConfig+0x280>)
 8003618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361a:	4a08      	ldr	r2, [pc, #32]	; (800363c <HAL_RCC_OscConfig+0x280>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003622:	f7fe fec3 	bl	80023ac <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362a:	f7fe febf 	bl	80023ac <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d903      	bls.n	8003640 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e15c      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
 800363c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b91      	ldr	r3, [pc, #580]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ee      	bne.n	800362a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a4 	beq.w	80037a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365a:	4b8b      	ldr	r3, [pc, #556]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10d      	bne.n	8003682 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	4b88      	ldr	r3, [pc, #544]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a87      	ldr	r2, [pc, #540]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b85      	ldr	r3, [pc, #532]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003682:	4b82      	ldr	r3, [pc, #520]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d118      	bne.n	80036c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800368e:	4b7f      	ldr	r3, [pc, #508]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a7e      	ldr	r2, [pc, #504]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369a:	f7fe fe87 	bl	80023ac <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a2:	f7fe fe83 	bl	80023ac <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b64      	cmp	r3, #100	; 0x64
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e120      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b4:	4b75      	ldr	r3, [pc, #468]	; (800388c <HAL_RCC_OscConfig+0x4d0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_OscConfig+0x31a>
 80036c8:	4b6f      	ldr	r3, [pc, #444]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a6e      	ldr	r2, [pc, #440]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	e02d      	b.n	8003732 <HAL_RCC_OscConfig+0x376>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x33c>
 80036de:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a69      	ldr	r2, [pc, #420]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ea:	4b67      	ldr	r3, [pc, #412]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a66      	ldr	r2, [pc, #408]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	e01c      	b.n	8003732 <HAL_RCC_OscConfig+0x376>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b05      	cmp	r3, #5
 80036fe:	d10c      	bne.n	800371a <HAL_RCC_OscConfig+0x35e>
 8003700:	4b61      	ldr	r3, [pc, #388]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a60      	ldr	r2, [pc, #384]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003706:	f043 0304 	orr.w	r3, r3, #4
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	4b5e      	ldr	r3, [pc, #376]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a5d      	ldr	r2, [pc, #372]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
 8003718:	e00b      	b.n	8003732 <HAL_RCC_OscConfig+0x376>
 800371a:	4b5b      	ldr	r3, [pc, #364]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a5a      	ldr	r2, [pc, #360]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
 8003726:	4b58      	ldr	r3, [pc, #352]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a57      	ldr	r2, [pc, #348]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d015      	beq.n	8003766 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fe fe37 	bl	80023ac <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe fe33 	bl	80023ac <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e0ce      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ee      	beq.n	8003742 <HAL_RCC_OscConfig+0x386>
 8003764:	e014      	b.n	8003790 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fe fe21 	bl	80023ac <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe fe1d 	bl	80023ac <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0b8      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003784:	4b40      	ldr	r3, [pc, #256]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ee      	bne.n	800376e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003796:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a3b      	ldr	r2, [pc, #236]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800379c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80a4 	beq.w	80038f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ac:	4b36      	ldr	r3, [pc, #216]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d06b      	beq.n	8003890 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d149      	bne.n	8003854 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c0:	4b31      	ldr	r3, [pc, #196]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a30      	ldr	r2, [pc, #192]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80037c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fdee 	bl	80023ac <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fe fdea 	bl	80023ac <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e087      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e6:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69da      	ldr	r2, [r3, #28]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	019b      	lsls	r3, r3, #6
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	061b      	lsls	r3, r3, #24
 8003816:	4313      	orrs	r3, r2
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800381a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800381e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a18      	ldr	r2, [pc, #96]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fdbe 	bl	80023ac <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe fdba 	bl	80023ac <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e057      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b10      	ldr	r3, [pc, #64]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x478>
 8003852:	e04f      	b.n	80038f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800385a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe fda4 	bl	80023ac <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe fda0 	bl	80023ac <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e03d      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_OscConfig+0x4cc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x4ac>
 8003886:	e035      	b.n	80038f4 <HAL_RCC_OscConfig+0x538>
 8003888:	40023800 	.word	0x40023800
 800388c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x544>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d028      	beq.n	80038f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d121      	bne.n	80038f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d11a      	bne.n	80038f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038c0:	4013      	ands	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d111      	bne.n	80038f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	3b01      	subs	r3, #1
 80038da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0d0      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800391c:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d910      	bls.n	800394c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b67      	ldr	r3, [pc, #412]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 020f 	bic.w	r2, r3, #15
 8003932:	4965      	ldr	r1, [pc, #404]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b8      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003964:	4b59      	ldr	r3, [pc, #356]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a58      	ldr	r2, [pc, #352]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 800396a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800396e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800397c:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a52      	ldr	r2, [pc, #328]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003986:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	494d      	ldr	r1, [pc, #308]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d040      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d115      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c6:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e073      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d6:	4b3d      	ldr	r3, [pc, #244]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e06b      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b39      	ldr	r3, [pc, #228]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4936      	ldr	r1, [pc, #216]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f8:	f7fe fcd8 	bl	80023ac <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fe fcd4 	bl	80023ac <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e053      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b2d      	ldr	r3, [pc, #180]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d210      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 020f 	bic.w	r2, r3, #15
 8003a3e:	4922      	ldr	r1, [pc, #136]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e032      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4916      	ldr	r1, [pc, #88]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	490e      	ldr	r1, [pc, #56]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a96:	f000 f821 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	490a      	ldr	r1, [pc, #40]	; (8003ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8003aa8:	5ccb      	ldrb	r3, [r1, r3]
 8003aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fc34 	bl	8002324 <HAL_InitTick>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023c00 	.word	0x40023c00
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	080081d0 	.word	0x080081d0
 8003ad4:	20000040 	.word	0x20000040
 8003ad8:	20000044 	.word	0x20000044

08003adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b094      	sub	sp, #80	; 0x50
 8003ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae8:	2300      	movs	r3, #0
 8003aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aec:	2300      	movs	r3, #0
 8003aee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af4:	4b79      	ldr	r3, [pc, #484]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 030c 	and.w	r3, r3, #12
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d00d      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x40>
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	f200 80e1 	bhi.w	8003cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b0e:	e0db      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b10:	4b73      	ldr	r3, [pc, #460]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b14:	e0db      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b16:	4b73      	ldr	r3, [pc, #460]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b1a:	e0d8      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b1c:	4b6f      	ldr	r3, [pc, #444]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b24:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b26:	4b6d      	ldr	r3, [pc, #436]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d063      	beq.n	8003bfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b32:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	099b      	lsrs	r3, r3, #6
 8003b38:	2200      	movs	r2, #0
 8003b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
 8003b46:	2300      	movs	r3, #0
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b4e:	4622      	mov	r2, r4
 8003b50:	462b      	mov	r3, r5
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	0159      	lsls	r1, r3, #5
 8003b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b60:	0150      	lsls	r0, r2, #5
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4621      	mov	r1, r4
 8003b68:	1a51      	subs	r1, r2, r1
 8003b6a:	6139      	str	r1, [r7, #16]
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b80:	4659      	mov	r1, fp
 8003b82:	018b      	lsls	r3, r1, #6
 8003b84:	4651      	mov	r1, sl
 8003b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	018a      	lsls	r2, r1, #6
 8003b8e:	4651      	mov	r1, sl
 8003b90:	ebb2 0801 	subs.w	r8, r2, r1
 8003b94:	4659      	mov	r1, fp
 8003b96:	eb63 0901 	sbc.w	r9, r3, r1
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bae:	4690      	mov	r8, r2
 8003bb0:	4699      	mov	r9, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	eb18 0303 	adds.w	r3, r8, r3
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	462b      	mov	r3, r5
 8003bbc:	eb49 0303 	adc.w	r3, r9, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bce:	4629      	mov	r1, r5
 8003bd0:	024b      	lsls	r3, r1, #9
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bd8:	4621      	mov	r1, r4
 8003bda:	024a      	lsls	r2, r1, #9
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be2:	2200      	movs	r2, #0
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bec:	f7fc fe9e 	bl	800092c <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf8:	e058      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfa:	4b38      	ldr	r3, [pc, #224]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	2200      	movs	r2, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	4611      	mov	r1, r2
 8003c06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c14:	4642      	mov	r2, r8
 8003c16:	464b      	mov	r3, r9
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	0159      	lsls	r1, r3, #5
 8003c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c26:	0150      	lsls	r0, r2, #5
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c32:	4649      	mov	r1, r9
 8003c34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c50:	eb63 050b 	sbc.w	r5, r3, fp
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	00eb      	lsls	r3, r5, #3
 8003c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c62:	00e2      	lsls	r2, r4, #3
 8003c64:	4614      	mov	r4, r2
 8003c66:	461d      	mov	r5, r3
 8003c68:	4643      	mov	r3, r8
 8003c6a:	18e3      	adds	r3, r4, r3
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	464b      	mov	r3, r9
 8003c70:	eb45 0303 	adc.w	r3, r5, r3
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c82:	4629      	mov	r1, r5
 8003c84:	028b      	lsls	r3, r1, #10
 8003c86:	4621      	mov	r1, r4
 8003c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	028a      	lsls	r2, r1, #10
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c96:	2200      	movs	r2, #0
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	61fa      	str	r2, [r7, #28]
 8003c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca0:	f7fc fe44 	bl	800092c <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4613      	mov	r3, r2
 8003caa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003cbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cc6:	e002      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3750      	adds	r7, #80	; 0x50
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	00f42400 	.word	0x00f42400
 8003ce4:	007a1200 	.word	0x007a1200

08003ce8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cec:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000040 	.word	0x20000040

08003d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d04:	f7ff fff0 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	0a9b      	lsrs	r3, r3, #10
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4903      	ldr	r1, [pc, #12]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800
 8003d24:	080081e0 	.word	0x080081e0

08003d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d2c:	f7ff ffdc 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	0b5b      	lsrs	r3, r3, #13
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4903      	ldr	r1, [pc, #12]	; (8003d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	080081e0 	.word	0x080081e0

08003d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d012      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d78:	4b69      	ldr	r3, [pc, #420]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a68      	ldr	r2, [pc, #416]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	4b66      	ldr	r3, [pc, #408]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	4964      	ldr	r1, [pc, #400]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d017      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003daa:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	4959      	ldr	r1, [pc, #356]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc8:	d101      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003de6:	4b4e      	ldr	r3, [pc, #312]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	494a      	ldr	r1, [pc, #296]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 808b 	beq.w	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e34:	4b3a      	ldr	r3, [pc, #232]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	4a39      	ldr	r2, [pc, #228]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e40:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e4c:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a34      	ldr	r2, [pc, #208]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e58:	f7fe faa8 	bl	80023ac <HAL_GetTick>
 8003e5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fe faa4 	bl	80023ac <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	; 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e357      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e7e:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d035      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d02e      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e9c:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ebe:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ec4:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d114      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fa6c 	bl	80023ac <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fe fa68 	bl	80023ac <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e319      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ee      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f06:	d111      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f16:	400b      	ands	r3, r1
 8003f18:	4901      	ldr	r1, [pc, #4]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40007000 	.word	0x40007000
 8003f28:	0ffffcff 	.word	0x0ffffcff
 8003f2c:	4baa      	ldr	r3, [pc, #680]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4aa9      	ldr	r2, [pc, #676]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f36:	6093      	str	r3, [r2, #8]
 8003f38:	4ba7      	ldr	r3, [pc, #668]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f44:	49a4      	ldr	r1, [pc, #656]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d010      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f56:	4ba0      	ldr	r3, [pc, #640]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5c:	4a9e      	ldr	r2, [pc, #632]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f66:	4b9c      	ldr	r3, [pc, #624]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	4999      	ldr	r1, [pc, #612]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f84:	4b94      	ldr	r3, [pc, #592]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f92:	4991      	ldr	r1, [pc, #580]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa6:	4b8c      	ldr	r3, [pc, #560]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb4:	4988      	ldr	r1, [pc, #544]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fc8:	4b83      	ldr	r3, [pc, #524]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd6:	4980      	ldr	r1, [pc, #512]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fea:	4b7b      	ldr	r3, [pc, #492]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4977      	ldr	r1, [pc, #476]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400c:	4b72      	ldr	r3, [pc, #456]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	496f      	ldr	r1, [pc, #444]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800402e:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f023 020c 	bic.w	r2, r3, #12
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403c:	4966      	ldr	r1, [pc, #408]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004050:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	495e      	ldr	r1, [pc, #376]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004072:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004080:	4955      	ldr	r1, [pc, #340]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004094:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	494d      	ldr	r1, [pc, #308]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040b6:	4b48      	ldr	r3, [pc, #288]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	4944      	ldr	r1, [pc, #272]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040d8:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e6:	493c      	ldr	r1, [pc, #240]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040fa:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004108:	4933      	ldr	r1, [pc, #204]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800411c:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412a:	492b      	ldr	r1, [pc, #172]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d011      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414c:	4922      	ldr	r1, [pc, #136]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415c:	d101      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417e:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418c:	4912      	ldr	r1, [pc, #72]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b0:	4909      	ldr	r1, [pc, #36]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d006      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80d9 	beq.w	800437e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041cc:	4b02      	ldr	r3, [pc, #8]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a01      	ldr	r2, [pc, #4]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d6:	e001      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80041d8:	40023800 	.word	0x40023800
 80041dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041de:	f7fe f8e5 	bl	80023ac <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041e6:	f7fe f8e1 	bl	80023ac <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	; 0x64
 80041f2:	d901      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e194      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f8:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d021      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004214:	2b00      	cmp	r3, #0
 8004216:	d11d      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004218:	4b64      	ldr	r3, [pc, #400]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800421a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422c:	0e1b      	lsrs	r3, r3, #24
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	019a      	lsls	r2, r3, #6
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	061b      	lsls	r3, r3, #24
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	071b      	lsls	r3, r3, #28
 800424c:	4957      	ldr	r1, [pc, #348]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004272:	2b00      	cmp	r3, #0
 8004274:	d02e      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427e:	d129      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004280:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004294:	0f1b      	lsrs	r3, r3, #28
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	019a      	lsls	r2, r3, #6
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	071b      	lsls	r3, r3, #28
 80042b4:	493d      	ldr	r1, [pc, #244]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042bc:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c2:	f023 021f 	bic.w	r2, r3, #31
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	3b01      	subs	r3, #1
 80042cc:	4937      	ldr	r1, [pc, #220]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01d      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042e0:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e6:	0e1b      	lsrs	r3, r3, #24
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f4:	0f1b      	lsrs	r3, r3, #28
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	019a      	lsls	r2, r3, #6
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	431a      	orrs	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	431a      	orrs	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	071b      	lsls	r3, r3, #28
 8004314:	4925      	ldr	r1, [pc, #148]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d011      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	019a      	lsls	r2, r3, #6
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	071b      	lsls	r3, r3, #28
 8004344:	4919      	ldr	r1, [pc, #100]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800434c:	4b17      	ldr	r3, [pc, #92]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a16      	ldr	r2, [pc, #88]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004358:	f7fe f828 	bl	80023ac <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004360:	f7fe f824 	bl	80023ac <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	; 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0d7      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b01      	cmp	r3, #1
 8004382:	f040 80cd 	bne.w	8004520 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a08      	ldr	r2, [pc, #32]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004392:	f7fe f80b 	bl	80023ac <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800439a:	f7fe f807 	bl	80023ac <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b64      	cmp	r3, #100	; 0x64
 80043a6:	d903      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0ba      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043b0:	4b5e      	ldr	r3, [pc, #376]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043bc:	d0ed      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d02e      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d12a      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043e6:	4b51      	ldr	r3, [pc, #324]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043f4:	4b4d      	ldr	r3, [pc, #308]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	0f1b      	lsrs	r3, r3, #28
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	019a      	lsls	r2, r3, #6
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	071b      	lsls	r3, r3, #28
 800441a:	4944      	ldr	r1, [pc, #272]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004422:	4b42      	ldr	r3, [pc, #264]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	3b01      	subs	r3, #1
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	493d      	ldr	r1, [pc, #244]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d022      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004450:	d11d      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	0e1b      	lsrs	r3, r3, #24
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004460:	4b32      	ldr	r3, [pc, #200]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	0f1b      	lsrs	r3, r3, #28
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	019a      	lsls	r2, r3, #6
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	061b      	lsls	r3, r3, #24
 8004480:	431a      	orrs	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	071b      	lsls	r3, r3, #28
 8004486:	4929      	ldr	r1, [pc, #164]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d028      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	0e1b      	lsrs	r3, r3, #24
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044a8:	4b20      	ldr	r3, [pc, #128]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	0c1b      	lsrs	r3, r3, #16
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	019a      	lsls	r2, r3, #6
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	431a      	orrs	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	071b      	lsls	r3, r3, #28
 80044ce:	4917      	ldr	r1, [pc, #92]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4911      	ldr	r1, [pc, #68]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0e      	ldr	r2, [pc, #56]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f8:	f7fd ff58 	bl	80023ac <HAL_GetTick>
 80044fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004500:	f7fd ff54 	bl	80023ac <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e007      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800451e:	d1ef      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800

08004530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e049      	b.n	80045d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd fcee 	bl	8001f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f001 f80e 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d001      	beq.n	80045f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e04c      	b.n	8004692 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <HAL_TIM_Base_Start+0xc0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d022      	beq.n	8004650 <HAL_TIM_Base_Start+0x70>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d01d      	beq.n	8004650 <HAL_TIM_Base_Start+0x70>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <HAL_TIM_Base_Start+0xc4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d018      	beq.n	8004650 <HAL_TIM_Base_Start+0x70>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a21      	ldr	r2, [pc, #132]	; (80046a8 <HAL_TIM_Base_Start+0xc8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_TIM_Base_Start+0x70>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <HAL_TIM_Base_Start+0xcc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00e      	beq.n	8004650 <HAL_TIM_Base_Start+0x70>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <HAL_TIM_Base_Start+0xd0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d009      	beq.n	8004650 <HAL_TIM_Base_Start+0x70>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <HAL_TIM_Base_Start+0xd4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_TIM_Base_Start+0x70>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <HAL_TIM_Base_Start+0xd8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d115      	bne.n	800467c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	4b19      	ldr	r3, [pc, #100]	; (80046bc <HAL_TIM_Base_Start+0xdc>)
 8004658:	4013      	ands	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b06      	cmp	r3, #6
 8004660:	d015      	beq.n	800468e <HAL_TIM_Base_Start+0xae>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d011      	beq.n	800468e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467a:	e008      	b.n	800468e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e000      	b.n	8004690 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40010400 	.word	0x40010400
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40001800 	.word	0x40001800
 80046bc:	00010007 	.word	0x00010007

080046c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10f      	bne.n	80046f8 <HAL_TIM_Base_Stop+0x38>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a1a      	ldr	r2, [r3, #32]
 80046de:	f240 4344 	movw	r3, #1092	; 0x444
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d107      	bne.n	80046f8 <HAL_TIM_Base_Stop+0x38>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e049      	b.n	80047b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fd fcad 	bl	8002094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f000 ff1f 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HAL_TIM_PWM_Start+0x24>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e03c      	b.n	800485a <HAL_TIM_PWM_Start+0x9e>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d109      	bne.n	80047fa <HAL_TIM_PWM_Start+0x3e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	bf14      	ite	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	2300      	moveq	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	e02f      	b.n	800485a <HAL_TIM_PWM_Start+0x9e>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d109      	bne.n	8004814 <HAL_TIM_PWM_Start+0x58>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e022      	b.n	800485a <HAL_TIM_PWM_Start+0x9e>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d109      	bne.n	800482e <HAL_TIM_PWM_Start+0x72>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	e015      	b.n	800485a <HAL_TIM_PWM_Start+0x9e>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b10      	cmp	r3, #16
 8004832:	d109      	bne.n	8004848 <HAL_TIM_PWM_Start+0x8c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	e008      	b.n	800485a <HAL_TIM_PWM_Start+0x9e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e092      	b.n	8004988 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Start+0xb6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004870:	e023      	b.n	80048ba <HAL_TIM_PWM_Start+0xfe>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b04      	cmp	r3, #4
 8004876:	d104      	bne.n	8004882 <HAL_TIM_PWM_Start+0xc6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004880:	e01b      	b.n	80048ba <HAL_TIM_PWM_Start+0xfe>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d104      	bne.n	8004892 <HAL_TIM_PWM_Start+0xd6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004890:	e013      	b.n	80048ba <HAL_TIM_PWM_Start+0xfe>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_PWM_Start+0xe6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a0:	e00b      	b.n	80048ba <HAL_TIM_PWM_Start+0xfe>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_PWM_Start+0xf6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b0:	e003      	b.n	80048ba <HAL_TIM_PWM_Start+0xfe>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fbba 	bl	800603c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a30      	ldr	r2, [pc, #192]	; (8004990 <HAL_TIM_PWM_Start+0x1d4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_TIM_PWM_Start+0x120>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2f      	ldr	r2, [pc, #188]	; (8004994 <HAL_TIM_PWM_Start+0x1d8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d101      	bne.n	80048e0 <HAL_TIM_PWM_Start+0x124>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <HAL_TIM_PWM_Start+0x126>
 80048e0:	2300      	movs	r3, #0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a25      	ldr	r2, [pc, #148]	; (8004990 <HAL_TIM_PWM_Start+0x1d4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d022      	beq.n	8004946 <HAL_TIM_PWM_Start+0x18a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d01d      	beq.n	8004946 <HAL_TIM_PWM_Start+0x18a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a22      	ldr	r2, [pc, #136]	; (8004998 <HAL_TIM_PWM_Start+0x1dc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d018      	beq.n	8004946 <HAL_TIM_PWM_Start+0x18a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a20      	ldr	r2, [pc, #128]	; (800499c <HAL_TIM_PWM_Start+0x1e0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_TIM_PWM_Start+0x18a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <HAL_TIM_PWM_Start+0x1e4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00e      	beq.n	8004946 <HAL_TIM_PWM_Start+0x18a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a19      	ldr	r2, [pc, #100]	; (8004994 <HAL_TIM_PWM_Start+0x1d8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_TIM_PWM_Start+0x18a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <HAL_TIM_PWM_Start+0x1e8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIM_PWM_Start+0x18a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a19      	ldr	r2, [pc, #100]	; (80049a8 <HAL_TIM_PWM_Start+0x1ec>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d115      	bne.n	8004972 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <HAL_TIM_PWM_Start+0x1f0>)
 800494e:	4013      	ands	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b06      	cmp	r3, #6
 8004956:	d015      	beq.n	8004984 <HAL_TIM_PWM_Start+0x1c8>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495e:	d011      	beq.n	8004984 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	e008      	b.n	8004984 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e000      	b.n	8004986 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40010000 	.word	0x40010000
 8004994:	40010400 	.word	0x40010400
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40001800 	.word	0x40001800
 80049ac:	00010007 	.word	0x00010007

080049b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e049      	b.n	8004a56 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f841 	bl	8004a5e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f000 fdce 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_IC_Start_IT+0x1e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e023      	b.n	8004ada <HAL_TIM_IC_Start_IT+0x66>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_IC_Start_IT+0x2e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	e01b      	b.n	8004ada <HAL_TIM_IC_Start_IT+0x66>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_IC_Start_IT+0x3e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	e013      	b.n	8004ada <HAL_TIM_IC_Start_IT+0x66>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_IC_Start_IT+0x4e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	e00b      	b.n	8004ada <HAL_TIM_IC_Start_IT+0x66>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_IC_Start_IT+0x5e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	e003      	b.n	8004ada <HAL_TIM_IC_Start_IT+0x66>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <HAL_TIM_IC_Start_IT+0x78>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e013      	b.n	8004b14 <HAL_TIM_IC_Start_IT+0xa0>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d104      	bne.n	8004afc <HAL_TIM_IC_Start_IT+0x88>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e00b      	b.n	8004b14 <HAL_TIM_IC_Start_IT+0xa0>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d104      	bne.n	8004b0c <HAL_TIM_IC_Start_IT+0x98>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	e003      	b.n	8004b14 <HAL_TIM_IC_Start_IT+0xa0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b16:	7bbb      	ldrb	r3, [r7, #14]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d102      	bne.n	8004b22 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b1c:	7b7b      	ldrb	r3, [r7, #13]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d001      	beq.n	8004b26 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0e2      	b.n	8004cec <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_IC_Start_IT+0xc2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b34:	e023      	b.n	8004b7e <HAL_TIM_IC_Start_IT+0x10a>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_IC_Start_IT+0xd2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b44:	e01b      	b.n	8004b7e <HAL_TIM_IC_Start_IT+0x10a>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_IC_Start_IT+0xe2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b54:	e013      	b.n	8004b7e <HAL_TIM_IC_Start_IT+0x10a>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b0c      	cmp	r3, #12
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_IC_Start_IT+0xf2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b64:	e00b      	b.n	8004b7e <HAL_TIM_IC_Start_IT+0x10a>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d104      	bne.n	8004b76 <HAL_TIM_IC_Start_IT+0x102>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b74:	e003      	b.n	8004b7e <HAL_TIM_IC_Start_IT+0x10a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_IC_Start_IT+0x11a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8c:	e013      	b.n	8004bb6 <HAL_TIM_IC_Start_IT+0x142>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_IC_Start_IT+0x12a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9c:	e00b      	b.n	8004bb6 <HAL_TIM_IC_Start_IT+0x142>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_IC_Start_IT+0x13a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bac:	e003      	b.n	8004bb6 <HAL_TIM_IC_Start_IT+0x142>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d841      	bhi.n	8004c40 <HAL_TIM_IC_Start_IT+0x1cc>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <HAL_TIM_IC_Start_IT+0x150>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c41 	.word	0x08004c41
 8004bcc:	08004c41 	.word	0x08004c41
 8004bd0:	08004c41 	.word	0x08004c41
 8004bd4:	08004c0b 	.word	0x08004c0b
 8004bd8:	08004c41 	.word	0x08004c41
 8004bdc:	08004c41 	.word	0x08004c41
 8004be0:	08004c41 	.word	0x08004c41
 8004be4:	08004c1d 	.word	0x08004c1d
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c41 	.word	0x08004c41
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c2f 	.word	0x08004c2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0202 	orr.w	r2, r2, #2
 8004c06:	60da      	str	r2, [r3, #12]
      break;
 8004c08:	e01d      	b.n	8004c46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0204 	orr.w	r2, r2, #4
 8004c18:	60da      	str	r2, [r3, #12]
      break;
 8004c1a:	e014      	b.n	8004c46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0208 	orr.w	r2, r2, #8
 8004c2a:	60da      	str	r2, [r3, #12]
      break;
 8004c2c:	e00b      	b.n	8004c46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0210 	orr.w	r2, r2, #16
 8004c3c:	60da      	str	r2, [r3, #12]
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      break;
 8004c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d14e      	bne.n	8004cea <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2201      	movs	r2, #1
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 f9f1 	bl	800603c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <HAL_TIM_IC_Start_IT+0x280>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d022      	beq.n	8004caa <HAL_TIM_IC_Start_IT+0x236>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6c:	d01d      	beq.n	8004caa <HAL_TIM_IC_Start_IT+0x236>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <HAL_TIM_IC_Start_IT+0x284>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d018      	beq.n	8004caa <HAL_TIM_IC_Start_IT+0x236>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <HAL_TIM_IC_Start_IT+0x288>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_TIM_IC_Start_IT+0x236>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <HAL_TIM_IC_Start_IT+0x28c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_TIM_IC_Start_IT+0x236>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1c      	ldr	r2, [pc, #112]	; (8004d04 <HAL_TIM_IC_Start_IT+0x290>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_TIM_IC_Start_IT+0x236>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <HAL_TIM_IC_Start_IT+0x294>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_TIM_IC_Start_IT+0x236>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <HAL_TIM_IC_Start_IT+0x298>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d115      	bne.n	8004cd6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <HAL_TIM_IC_Start_IT+0x29c>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b06      	cmp	r3, #6
 8004cba:	d015      	beq.n	8004ce8 <HAL_TIM_IC_Start_IT+0x274>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc2:	d011      	beq.n	8004ce8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	e008      	b.n	8004ce8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0201 	orr.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e000      	b.n	8004cea <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40010400 	.word	0x40010400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40001800 	.word	0x40001800
 8004d10:	00010007 	.word	0x00010007

08004d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d122      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d11b      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0202 	mvn.w	r2, #2
 8004d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc fdae 	bl	80018b8 <HAL_TIM_IC_CaptureCallback>
 8004d5c:	e005      	b.n	8004d6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fbf8 	bl	8005554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fbff 	bl	8005568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d122      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d11b      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0204 	mvn.w	r2, #4
 8004d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc fd84 	bl	80018b8 <HAL_TIM_IC_CaptureCallback>
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fbce 	bl	8005554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fbd5 	bl	8005568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d122      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d11b      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f06f 0208 	mvn.w	r2, #8
 8004de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2204      	movs	r2, #4
 8004dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc fd5a 	bl	80018b8 <HAL_TIM_IC_CaptureCallback>
 8004e04:	e005      	b.n	8004e12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fba4 	bl	8005554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fbab 	bl	8005568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d122      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d11b      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0210 	mvn.w	r2, #16
 8004e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2208      	movs	r2, #8
 8004e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fd30 	bl	80018b8 <HAL_TIM_IC_CaptureCallback>
 8004e58:	e005      	b.n	8004e66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fb7a 	bl	8005554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fb81 	bl	8005568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10e      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0201 	mvn.w	r2, #1
 8004e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc fbe8 	bl	8001668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb0:	2b80      	cmp	r3, #128	; 0x80
 8004eb2:	d107      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f001 f97a 	bl	80061b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed2:	d10e      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b80      	cmp	r3, #128	; 0x80
 8004ee0:	d107      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f001 f96d 	bl	80061cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	d10e      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d107      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fb2f 	bl	800557c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d10e      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d107      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f06f 0220 	mvn.w	r2, #32
 8004f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 f92d 	bl	80061a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e088      	b.n	8005082 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d11b      	bne.n	8004fb6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004f8e:	f000 fe91 	bl	8005cb4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 020c 	bic.w	r2, r2, #12
 8004fa0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6999      	ldr	r1, [r3, #24]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	619a      	str	r2, [r3, #24]
 8004fb4:	e060      	b.n	8005078 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d11c      	bne.n	8004ff6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004fcc:	f000 ff15 	bl	8005dfa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fde:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6999      	ldr	r1, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	021a      	lsls	r2, r3, #8
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	619a      	str	r2, [r3, #24]
 8004ff4:	e040      	b.n	8005078 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d11b      	bne.n	8005034 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800500c:	f000 ff62 	bl	8005ed4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69da      	ldr	r2, [r3, #28]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 020c 	bic.w	r2, r2, #12
 800501e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69d9      	ldr	r1, [r3, #28]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	61da      	str	r2, [r3, #28]
 8005032:	e021      	b.n	8005078 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d11c      	bne.n	8005074 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800504a:	f000 ff7f 	bl	8005f4c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800505c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69d9      	ldr	r1, [r3, #28]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	021a      	lsls	r2, r3, #8
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	61da      	str	r2, [r3, #28]
 8005072:	e001      	b.n	8005078 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005080:	7dfb      	ldrb	r3, [r7, #23]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e0ff      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b14      	cmp	r3, #20
 80050b6:	f200 80f0 	bhi.w	800529a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	08005115 	.word	0x08005115
 80050c4:	0800529b 	.word	0x0800529b
 80050c8:	0800529b 	.word	0x0800529b
 80050cc:	0800529b 	.word	0x0800529b
 80050d0:	08005155 	.word	0x08005155
 80050d4:	0800529b 	.word	0x0800529b
 80050d8:	0800529b 	.word	0x0800529b
 80050dc:	0800529b 	.word	0x0800529b
 80050e0:	08005197 	.word	0x08005197
 80050e4:	0800529b 	.word	0x0800529b
 80050e8:	0800529b 	.word	0x0800529b
 80050ec:	0800529b 	.word	0x0800529b
 80050f0:	080051d7 	.word	0x080051d7
 80050f4:	0800529b 	.word	0x0800529b
 80050f8:	0800529b 	.word	0x0800529b
 80050fc:	0800529b 	.word	0x0800529b
 8005100:	08005219 	.word	0x08005219
 8005104:	0800529b 	.word	0x0800529b
 8005108:	0800529b 	.word	0x0800529b
 800510c:	0800529b 	.word	0x0800529b
 8005110:	08005259 	.word	0x08005259
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fad8 	bl	80056d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0208 	orr.w	r2, r2, #8
 800512e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0204 	bic.w	r2, r2, #4
 800513e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6999      	ldr	r1, [r3, #24]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	619a      	str	r2, [r3, #24]
      break;
 8005152:	e0a5      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fb2a 	bl	80057b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6999      	ldr	r1, [r3, #24]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	021a      	lsls	r2, r3, #8
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	619a      	str	r2, [r3, #24]
      break;
 8005194:	e084      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fb81 	bl	80058a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0208 	orr.w	r2, r2, #8
 80051b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0204 	bic.w	r2, r2, #4
 80051c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69d9      	ldr	r1, [r3, #28]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	61da      	str	r2, [r3, #28]
      break;
 80051d4:	e064      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fbd7 	bl	8005990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69d9      	ldr	r1, [r3, #28]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	021a      	lsls	r2, r3, #8
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	61da      	str	r2, [r3, #28]
      break;
 8005216:	e043      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fc0e 	bl	8005a40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0208 	orr.w	r2, r2, #8
 8005232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005256:	e023      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fc40 	bl	8005ae4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005298:	e002      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
      break;
 800529e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop

080052b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_TIM_ConfigClockSource+0x1c>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e0b4      	b.n	800543a <HAL_TIM_ConfigClockSource+0x186>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	4b56      	ldr	r3, [pc, #344]	; (8005444 <HAL_TIM_ConfigClockSource+0x190>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005308:	d03e      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0xd4>
 800530a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800530e:	f200 8087 	bhi.w	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005316:	f000 8086 	beq.w	8005426 <HAL_TIM_ConfigClockSource+0x172>
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531e:	d87f      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b70      	cmp	r3, #112	; 0x70
 8005322:	d01a      	beq.n	800535a <HAL_TIM_ConfigClockSource+0xa6>
 8005324:	2b70      	cmp	r3, #112	; 0x70
 8005326:	d87b      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b60      	cmp	r3, #96	; 0x60
 800532a:	d050      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x11a>
 800532c:	2b60      	cmp	r3, #96	; 0x60
 800532e:	d877      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b50      	cmp	r3, #80	; 0x50
 8005332:	d03c      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0xfa>
 8005334:	2b50      	cmp	r3, #80	; 0x50
 8005336:	d873      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d058      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x13a>
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d86f      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b30      	cmp	r3, #48	; 0x30
 8005342:	d064      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x15a>
 8005344:	2b30      	cmp	r3, #48	; 0x30
 8005346:	d86b      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b20      	cmp	r3, #32
 800534a:	d060      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x15a>
 800534c:	2b20      	cmp	r3, #32
 800534e:	d867      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d05c      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x15a>
 8005354:	2b10      	cmp	r3, #16
 8005356:	d05a      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x15a>
 8005358:	e062      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800536a:	f000 fe47 	bl	8005ffc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800537c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	609a      	str	r2, [r3, #8]
      break;
 8005386:	e04f      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005398:	f000 fe30 	bl	8005ffc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053aa:	609a      	str	r2, [r3, #8]
      break;
 80053ac:	e03c      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ba:	461a      	mov	r2, r3
 80053bc:	f000 fcee 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2150      	movs	r1, #80	; 0x50
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fdfd 	bl	8005fc6 <TIM_ITRx_SetConfig>
      break;
 80053cc:	e02c      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053da:	461a      	mov	r2, r3
 80053dc:	f000 fd4a 	bl	8005e74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2160      	movs	r1, #96	; 0x60
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fded 	bl	8005fc6 <TIM_ITRx_SetConfig>
      break;
 80053ec:	e01c      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fa:	461a      	mov	r2, r3
 80053fc:	f000 fcce 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2140      	movs	r1, #64	; 0x40
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fddd 	bl	8005fc6 <TIM_ITRx_SetConfig>
      break;
 800540c:	e00c      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f000 fdd4 	bl	8005fc6 <TIM_ITRx_SetConfig>
      break;
 800541e:	e003      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
      break;
 8005424:	e000      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	fffeff88 	.word	0xfffeff88

08005448 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_TIM_SlaveConfigSynchro+0x18>
 800545c:	2302      	movs	r3, #2
 800545e:	e031      	b.n	80054c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fb8a 	bl	8005b8c <TIM_SlaveTimer_SetConfig>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e018      	b.n	80054c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b0c      	cmp	r3, #12
 80054de:	d831      	bhi.n	8005544 <HAL_TIM_ReadCapturedValue+0x78>
 80054e0:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	0800551d 	.word	0x0800551d
 80054ec:	08005545 	.word	0x08005545
 80054f0:	08005545 	.word	0x08005545
 80054f4:	08005545 	.word	0x08005545
 80054f8:	08005527 	.word	0x08005527
 80054fc:	08005545 	.word	0x08005545
 8005500:	08005545 	.word	0x08005545
 8005504:	08005545 	.word	0x08005545
 8005508:	08005531 	.word	0x08005531
 800550c:	08005545 	.word	0x08005545
 8005510:	08005545 	.word	0x08005545
 8005514:	08005545 	.word	0x08005545
 8005518:	0800553b 	.word	0x0800553b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	60fb      	str	r3, [r7, #12]

      break;
 8005524:	e00f      	b.n	8005546 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	60fb      	str	r3, [r7, #12]

      break;
 800552e:	e00a      	b.n	8005546 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005536:	60fb      	str	r3, [r7, #12]

      break;
 8005538:	e005      	b.n	8005546 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	60fb      	str	r3, [r7, #12]

      break;
 8005542:	e000      	b.n	8005546 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005544:	bf00      	nop
  }

  return tmpreg;
 8005546:	68fb      	ldr	r3, [r7, #12]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a40      	ldr	r2, [pc, #256]	; (80056a4 <TIM_Base_SetConfig+0x114>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d00f      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a3d      	ldr	r2, [pc, #244]	; (80056a8 <TIM_Base_SetConfig+0x118>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00b      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a3c      	ldr	r2, [pc, #240]	; (80056ac <TIM_Base_SetConfig+0x11c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3b      	ldr	r2, [pc, #236]	; (80056b0 <TIM_Base_SetConfig+0x120>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a3a      	ldr	r2, [pc, #232]	; (80056b4 <TIM_Base_SetConfig+0x124>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d108      	bne.n	80055e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2f      	ldr	r2, [pc, #188]	; (80056a4 <TIM_Base_SetConfig+0x114>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d02b      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f0:	d027      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2c      	ldr	r2, [pc, #176]	; (80056a8 <TIM_Base_SetConfig+0x118>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d023      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2b      	ldr	r2, [pc, #172]	; (80056ac <TIM_Base_SetConfig+0x11c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01f      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2a      	ldr	r2, [pc, #168]	; (80056b0 <TIM_Base_SetConfig+0x120>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d01b      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a29      	ldr	r2, [pc, #164]	; (80056b4 <TIM_Base_SetConfig+0x124>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d017      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a28      	ldr	r2, [pc, #160]	; (80056b8 <TIM_Base_SetConfig+0x128>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d013      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a27      	ldr	r2, [pc, #156]	; (80056bc <TIM_Base_SetConfig+0x12c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00f      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a26      	ldr	r2, [pc, #152]	; (80056c0 <TIM_Base_SetConfig+0x130>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00b      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <TIM_Base_SetConfig+0x134>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d007      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a24      	ldr	r2, [pc, #144]	; (80056c8 <TIM_Base_SetConfig+0x138>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a23      	ldr	r2, [pc, #140]	; (80056cc <TIM_Base_SetConfig+0x13c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d108      	bne.n	8005654 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <TIM_Base_SetConfig+0x114>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0xf8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <TIM_Base_SetConfig+0x124>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d103      	bne.n	8005690 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	615a      	str	r2, [r3, #20]
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800
 80056b0:	40000c00 	.word	0x40000c00
 80056b4:	40010400 	.word	0x40010400
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40014400 	.word	0x40014400
 80056c0:	40014800 	.word	0x40014800
 80056c4:	40001800 	.word	0x40001800
 80056c8:	40001c00 	.word	0x40001c00
 80056cc:	40002000 	.word	0x40002000

080056d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 0201 	bic.w	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <TIM_OC1_SetConfig+0xd8>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f023 0302 	bic.w	r3, r3, #2
 8005718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a21      	ldr	r2, [pc, #132]	; (80057ac <TIM_OC1_SetConfig+0xdc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_OC1_SetConfig+0x64>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a20      	ldr	r2, [pc, #128]	; (80057b0 <TIM_OC1_SetConfig+0xe0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d10c      	bne.n	800574e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0308 	bic.w	r3, r3, #8
 800573a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a16      	ldr	r2, [pc, #88]	; (80057ac <TIM_OC1_SetConfig+0xdc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_OC1_SetConfig+0x8e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <TIM_OC1_SetConfig+0xe0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d111      	bne.n	8005782 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	fffeff8f 	.word	0xfffeff8f
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40010400 	.word	0x40010400

080057b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0210 	bic.w	r2, r3, #16
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4b2e      	ldr	r3, [pc, #184]	; (8005898 <TIM_OC2_SetConfig+0xe4>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0320 	bic.w	r3, r3, #32
 80057fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a23      	ldr	r2, [pc, #140]	; (800589c <TIM_OC2_SetConfig+0xe8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_OC2_SetConfig+0x68>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <TIM_OC2_SetConfig+0xec>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d10d      	bne.n	8005838 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005836:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <TIM_OC2_SetConfig+0xe8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_OC2_SetConfig+0x94>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <TIM_OC2_SetConfig+0xec>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d113      	bne.n	8005870 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800584e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	feff8fff 	.word	0xfeff8fff
 800589c:	40010000 	.word	0x40010000
 80058a0:	40010400 	.word	0x40010400

080058a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4b2d      	ldr	r3, [pc, #180]	; (8005984 <TIM_OC3_SetConfig+0xe0>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a22      	ldr	r2, [pc, #136]	; (8005988 <TIM_OC3_SetConfig+0xe4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_OC3_SetConfig+0x66>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <TIM_OC3_SetConfig+0xe8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10d      	bne.n	8005926 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a17      	ldr	r2, [pc, #92]	; (8005988 <TIM_OC3_SetConfig+0xe4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d003      	beq.n	8005936 <TIM_OC3_SetConfig+0x92>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a16      	ldr	r2, [pc, #88]	; (800598c <TIM_OC3_SetConfig+0xe8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d113      	bne.n	800595e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800593c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	621a      	str	r2, [r3, #32]
}
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	fffeff8f 	.word	0xfffeff8f
 8005988:	40010000 	.word	0x40010000
 800598c:	40010400 	.word	0x40010400

08005990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <TIM_OC4_SetConfig+0xa4>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	031b      	lsls	r3, r3, #12
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <TIM_OC4_SetConfig+0xa8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC4_SetConfig+0x68>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <TIM_OC4_SetConfig+0xac>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d109      	bne.n	8005a0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	feff8fff 	.word	0xfeff8fff
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <TIM_OC5_SetConfig+0x98>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a12      	ldr	r2, [pc, #72]	; (8005adc <TIM_OC5_SetConfig+0x9c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC5_SetConfig+0x5e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <TIM_OC5_SetConfig+0xa0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d109      	bne.n	8005ab2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	621a      	str	r2, [r3, #32]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	fffeff8f 	.word	0xfffeff8f
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <TIM_OC6_SetConfig+0x9c>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	051b      	lsls	r3, r3, #20
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <TIM_OC6_SetConfig+0xa0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_OC6_SetConfig+0x60>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a12      	ldr	r2, [pc, #72]	; (8005b88 <TIM_OC6_SetConfig+0xa4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d109      	bne.n	8005b58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	feff8fff 	.word	0xfeff8fff
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010400 	.word	0x40010400

08005b8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4b3e      	ldr	r3, [pc, #248]	; (8005cb0 <TIM_SlaveTimer_SetConfig+0x124>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b70      	cmp	r3, #112	; 0x70
 8005bd4:	d01a      	beq.n	8005c0c <TIM_SlaveTimer_SetConfig+0x80>
 8005bd6:	2b70      	cmp	r3, #112	; 0x70
 8005bd8:	d860      	bhi.n	8005c9c <TIM_SlaveTimer_SetConfig+0x110>
 8005bda:	2b60      	cmp	r3, #96	; 0x60
 8005bdc:	d054      	beq.n	8005c88 <TIM_SlaveTimer_SetConfig+0xfc>
 8005bde:	2b60      	cmp	r3, #96	; 0x60
 8005be0:	d85c      	bhi.n	8005c9c <TIM_SlaveTimer_SetConfig+0x110>
 8005be2:	2b50      	cmp	r3, #80	; 0x50
 8005be4:	d046      	beq.n	8005c74 <TIM_SlaveTimer_SetConfig+0xe8>
 8005be6:	2b50      	cmp	r3, #80	; 0x50
 8005be8:	d858      	bhi.n	8005c9c <TIM_SlaveTimer_SetConfig+0x110>
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d019      	beq.n	8005c22 <TIM_SlaveTimer_SetConfig+0x96>
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d854      	bhi.n	8005c9c <TIM_SlaveTimer_SetConfig+0x110>
 8005bf2:	2b30      	cmp	r3, #48	; 0x30
 8005bf4:	d055      	beq.n	8005ca2 <TIM_SlaveTimer_SetConfig+0x116>
 8005bf6:	2b30      	cmp	r3, #48	; 0x30
 8005bf8:	d850      	bhi.n	8005c9c <TIM_SlaveTimer_SetConfig+0x110>
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d051      	beq.n	8005ca2 <TIM_SlaveTimer_SetConfig+0x116>
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d84c      	bhi.n	8005c9c <TIM_SlaveTimer_SetConfig+0x110>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d04d      	beq.n	8005ca2 <TIM_SlaveTimer_SetConfig+0x116>
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d04b      	beq.n	8005ca2 <TIM_SlaveTimer_SetConfig+0x116>
 8005c0a:	e047      	b.n	8005c9c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005c1c:	f000 f9ee 	bl	8005ffc <TIM_ETR_SetConfig>
      break;
 8005c20:	e040      	b.n	8005ca4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d101      	bne.n	8005c2e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e03b      	b.n	8005ca6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a1a      	ldr	r2, [r3, #32]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
      break;
 8005c72:	e017      	b.n	8005ca4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c80:	461a      	mov	r2, r3
 8005c82:	f000 f88b 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      break;
 8005c86:	e00d      	b.n	8005ca4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c94:	461a      	mov	r2, r3
 8005c96:	f000 f8ed 	bl	8005e74 <TIM_TI2_ConfigInputStage>
      break;
 8005c9a:	e003      	b.n	8005ca4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca0:	e000      	b.n	8005ca4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005ca2:	bf00      	nop
  }

  return status;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	fffefff8 	.word	0xfffefff8

08005cb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f023 0201 	bic.w	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	; (8005d80 <TIM_TI1_SetConfig+0xcc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01b      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce8:	d017      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <TIM_TI1_SetConfig+0xd0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <TIM_TI1_SetConfig+0xd4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a23      	ldr	r2, [pc, #140]	; (8005d8c <TIM_TI1_SetConfig+0xd8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <TIM_TI1_SetConfig+0xdc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4a21      	ldr	r2, [pc, #132]	; (8005d94 <TIM_TI1_SetConfig+0xe0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a20      	ldr	r2, [pc, #128]	; (8005d98 <TIM_TI1_SetConfig+0xe4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d101      	bne.n	8005d1e <TIM_TI1_SetConfig+0x6a>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <TIM_TI1_SetConfig+0x6c>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e003      	b.n	8005d3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f023 030a 	bic.w	r3, r3, #10
 8005d58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f003 030a 	and.w	r3, r3, #10
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40010000 	.word	0x40010000
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	40010400 	.word	0x40010400
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40001800 	.word	0x40001800

08005d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0201 	bic.w	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 030a 	bic.w	r3, r3, #10
 8005dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b087      	sub	sp, #28
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f023 0210 	bic.w	r2, r3, #16
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	031b      	lsls	r3, r3, #12
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f023 0210 	bic.w	r2, r3, #16
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	031b      	lsls	r3, r3, #12
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f023 0303 	bic.w	r3, r3, #3
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	031b      	lsls	r3, r3, #12
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	031b      	lsls	r3, r3, #12
 8005fa4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f043 0307 	orr.w	r3, r3, #7
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	609a      	str	r2, [r3, #8]
}
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	021a      	lsls	r2, r3, #8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	431a      	orrs	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4313      	orrs	r3, r2
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	609a      	str	r2, [r3, #8]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	2201      	movs	r2, #1
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1a      	ldr	r2, [r3, #32]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	43db      	mvns	r3, r3
 800605e:	401a      	ands	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1a      	ldr	r2, [r3, #32]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	431a      	orrs	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800609c:	2302      	movs	r3, #2
 800609e:	e06d      	b.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a30      	ldr	r2, [pc, #192]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2f      	ldr	r2, [pc, #188]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d108      	bne.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a20      	ldr	r2, [pc, #128]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d022      	beq.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d01d      	beq.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d018      	beq.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1c      	ldr	r2, [pc, #112]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d013      	beq.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00e      	beq.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a15      	ldr	r2, [pc, #84]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d009      	beq.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a16      	ldr	r2, [pc, #88]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a15      	ldr	r2, [pc, #84]	; (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d10c      	bne.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006156:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	4313      	orrs	r3, r2
 8006160:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	40010000 	.word	0x40010000
 800618c:	40010400 	.word	0x40010400
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40014000 	.word	0x40014000
 80061a0:	40001800 	.word	0x40001800

080061a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e040      	b.n	8006274 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb fff0 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2224      	movs	r2, #36	; 0x24
 800620c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fbe6 	bl	80069f0 <UART_SetConfig>
 8006224:	4603      	mov	r3, r0
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e022      	b.n	8006274 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fe3e 	bl	8006eb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800624a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800625a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fec5 	bl	8006ffc <UART_CheckIdleState>
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	; 0x28
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006290:	2b20      	cmp	r3, #32
 8006292:	d171      	bne.n	8006378 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_UART_Transmit+0x24>
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e06a      	b.n	800637a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2221      	movs	r2, #33	; 0x21
 80062b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062b2:	f7fc f87b 	bl	80023ac <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d0:	d108      	bne.n	80062e4 <HAL_UART_Transmit+0x68>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	e003      	b.n	80062ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062ec:	e02c      	b.n	8006348 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2180      	movs	r1, #128	; 0x80
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 feb6 	bl	800706a <UART_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e038      	b.n	800637a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800631c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	3302      	adds	r3, #2
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	e007      	b.n	8006336 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	781a      	ldrb	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	3301      	adds	r3, #1
 8006334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1cc      	bne.n	80062ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2200      	movs	r2, #0
 800635c:	2140      	movs	r1, #64	; 0x40
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fe83 	bl	800706a <UART_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e005      	b.n	800637a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	e000      	b.n	800637a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006378:	2302      	movs	r3, #2
  }
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b08a      	sub	sp, #40	; 0x28
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	4613      	mov	r3, r2
 800638e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006396:	2b20      	cmp	r3, #32
 8006398:	d132      	bne.n	8006400 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_UART_Receive_IT+0x24>
 80063a0:	88fb      	ldrh	r3, [r7, #6]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e02b      	b.n	8006402 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d018      	beq.n	80063f0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	613b      	str	r3, [r7, #16]
   return(result);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	623b      	str	r3, [r7, #32]
 80063de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	69f9      	ldr	r1, [r7, #28]
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e6      	bne.n	80063be <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	461a      	mov	r2, r3
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 fefe 	bl	80071f8 <UART_Start_Receive_IT>
 80063fc:	4603      	mov	r3, r0
 80063fe:	e000      	b.n	8006402 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006400:	2302      	movs	r3, #2
  }
}
 8006402:	4618      	mov	r0, r3
 8006404:	3728      	adds	r7, #40	; 0x28
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b0ba      	sub	sp, #232	; 0xe8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006432:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006436:	f640 030f 	movw	r3, #2063	; 0x80f
 800643a:	4013      	ands	r3, r2
 800643c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d115      	bne.n	8006474 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00f      	beq.n	8006474 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8297 	beq.w	8006998 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
      }
      return;
 8006472:	e291      	b.n	8006998 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8117 	beq.w	80066ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800647e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800648a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800648e:	4b85      	ldr	r3, [pc, #532]	; (80066a4 <HAL_UART_IRQHandler+0x298>)
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 810a 	beq.w	80066ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d011      	beq.n	80064c8 <HAL_UART_IRQHandler+0xbc>
 80064a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2201      	movs	r2, #1
 80064b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064be:	f043 0201 	orr.w	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d011      	beq.n	80064f8 <HAL_UART_IRQHandler+0xec>
 80064d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2202      	movs	r2, #2
 80064e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ee:	f043 0204 	orr.w	r2, r3, #4
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d011      	beq.n	8006528 <HAL_UART_IRQHandler+0x11c>
 8006504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00b      	beq.n	8006528 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2204      	movs	r2, #4
 8006516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651e:	f043 0202 	orr.w	r2, r3, #2
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d017      	beq.n	8006564 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d105      	bne.n	800654c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006544:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2208      	movs	r2, #8
 8006552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655a:	f043 0208 	orr.w	r2, r3, #8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800656c:	2b00      	cmp	r3, #0
 800656e:	d012      	beq.n	8006596 <HAL_UART_IRQHandler+0x18a>
 8006570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00c      	beq.n	8006596 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006584:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658c:	f043 0220 	orr.w	r2, r3, #32
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 81fd 	beq.w	800699c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d005      	beq.n	80065ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d04f      	beq.n	800668e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fec8 	bl	8007384 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fe:	2b40      	cmp	r3, #64	; 0x40
 8006600:	d141      	bne.n	8006686 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3308      	adds	r3, #8
 8006608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800661c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800662e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800663a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1d9      	bne.n	8006602 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006652:	2b00      	cmp	r3, #0
 8006654:	d013      	beq.n	800667e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	4a13      	ldr	r2, [pc, #76]	; (80066a8 <HAL_UART_IRQHandler+0x29c>)
 800665c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006662:	4618      	mov	r0, r3
 8006664:	f7fc f853 	bl	800270e <HAL_DMA_Abort_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d017      	beq.n	800669e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	e00f      	b.n	800669e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9a0 	bl	80069c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	e00b      	b.n	800669e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f99c 	bl	80069c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	e007      	b.n	800669e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f998 	bl	80069c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800669c:	e17e      	b.n	800699c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669e:	bf00      	nop
    return;
 80066a0:	e17c      	b.n	800699c <HAL_UART_IRQHandler+0x590>
 80066a2:	bf00      	nop
 80066a4:	04000120 	.word	0x04000120
 80066a8:	0800744d 	.word	0x0800744d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	f040 814c 	bne.w	800694e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8145 	beq.w	800694e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 813e 	beq.w	800694e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2210      	movs	r2, #16
 80066d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	f040 80b6 	bne.w	8006856 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 8150 	beq.w	80069a0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800670a:	429a      	cmp	r2, r3
 800670c:	f080 8148 	bcs.w	80069a0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006716:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006724:	f000 8086 	beq.w	8006834 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800673c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006756:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800675e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800676a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1da      	bne.n	8006728 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3308      	adds	r3, #8
 8006778:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3308      	adds	r3, #8
 8006792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006796:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800679a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800679e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e1      	bne.n	8006772 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3308      	adds	r3, #8
 80067b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e3      	bne.n	80067ae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006804:	f023 0310 	bic.w	r3, r3, #16
 8006808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006816:	65bb      	str	r3, [r7, #88]	; 0x58
 8006818:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800681c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e4      	bne.n	80067f4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682e:	4618      	mov	r0, r3
 8006830:	f7fb fefd 	bl	800262e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006846:	b29b      	uxth	r3, r3
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	b29b      	uxth	r3, r3
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8c2 	bl	80069d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006854:	e0a4      	b.n	80069a0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006862:	b29b      	uxth	r3, r3
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8096 	beq.w	80069a4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8091 	beq.w	80069a4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068a4:	647b      	str	r3, [r7, #68]	; 0x44
 80068a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e4      	bne.n	8006882 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	623b      	str	r3, [r7, #32]
   return(result);
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	f023 0301 	bic.w	r3, r3, #1
 80068ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068dc:	633a      	str	r2, [r7, #48]	; 0x30
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e3      	bne.n	80068b8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	60fb      	str	r3, [r7, #12]
   return(result);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f023 0310 	bic.w	r3, r3, #16
 8006918:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	69b9      	ldr	r1, [r7, #24]
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	617b      	str	r3, [r7, #20]
   return(result);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e4      	bne.n	8006904 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f846 	bl	80069d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800694c:	e02a      	b.n	80069a4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800695a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800695e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01c      	beq.n	80069a8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	4798      	blx	r3
    }
    return;
 8006976:	e017      	b.n	80069a8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d012      	beq.n	80069aa <HAL_UART_IRQHandler+0x59e>
 8006984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00c      	beq.n	80069aa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fd71 	bl	8007478 <UART_EndTransmit_IT>
    return;
 8006996:	e008      	b.n	80069aa <HAL_UART_IRQHandler+0x59e>
      return;
 8006998:	bf00      	nop
 800699a:	e006      	b.n	80069aa <HAL_UART_IRQHandler+0x59e>
    return;
 800699c:	bf00      	nop
 800699e:	e004      	b.n	80069aa <HAL_UART_IRQHandler+0x59e>
      return;
 80069a0:	bf00      	nop
 80069a2:	e002      	b.n	80069aa <HAL_UART_IRQHandler+0x59e>
      return;
 80069a4:	bf00      	nop
 80069a6:	e000      	b.n	80069aa <HAL_UART_IRQHandler+0x59e>
    return;
 80069a8:	bf00      	nop
  }

}
 80069aa:	37e8      	adds	r7, #232	; 0xe8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4ba6      	ldr	r3, [pc, #664]	; (8006cb4 <UART_SetConfig+0x2c4>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	6979      	ldr	r1, [r7, #20]
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a94      	ldr	r2, [pc, #592]	; (8006cb8 <UART_SetConfig+0x2c8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d120      	bne.n	8006aae <UART_SetConfig+0xbe>
 8006a6c:	4b93      	ldr	r3, [pc, #588]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d816      	bhi.n	8006aa8 <UART_SetConfig+0xb8>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <UART_SetConfig+0x90>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006a91 	.word	0x08006a91
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006a97 	.word	0x08006a97
 8006a8c:	08006aa3 	.word	0x08006aa3
 8006a90:	2301      	movs	r3, #1
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e150      	b.n	8006d38 <UART_SetConfig+0x348>
 8006a96:	2302      	movs	r3, #2
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e14d      	b.n	8006d38 <UART_SetConfig+0x348>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e14a      	b.n	8006d38 <UART_SetConfig+0x348>
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	77fb      	strb	r3, [r7, #31]
 8006aa6:	e147      	b.n	8006d38 <UART_SetConfig+0x348>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	77fb      	strb	r3, [r7, #31]
 8006aac:	e144      	b.n	8006d38 <UART_SetConfig+0x348>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a83      	ldr	r2, [pc, #524]	; (8006cc0 <UART_SetConfig+0x2d0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d132      	bne.n	8006b1e <UART_SetConfig+0x12e>
 8006ab8:	4b80      	ldr	r3, [pc, #512]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d828      	bhi.n	8006b18 <UART_SetConfig+0x128>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <UART_SetConfig+0xdc>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006b01 	.word	0x08006b01
 8006ad0:	08006b19 	.word	0x08006b19
 8006ad4:	08006b19 	.word	0x08006b19
 8006ad8:	08006b19 	.word	0x08006b19
 8006adc:	08006b0d 	.word	0x08006b0d
 8006ae0:	08006b19 	.word	0x08006b19
 8006ae4:	08006b19 	.word	0x08006b19
 8006ae8:	08006b19 	.word	0x08006b19
 8006aec:	08006b07 	.word	0x08006b07
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b19 	.word	0x08006b19
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006b13 	.word	0x08006b13
 8006b00:	2300      	movs	r3, #0
 8006b02:	77fb      	strb	r3, [r7, #31]
 8006b04:	e118      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b06:	2302      	movs	r3, #2
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e115      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b0c:	2304      	movs	r3, #4
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e112      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b12:	2308      	movs	r3, #8
 8006b14:	77fb      	strb	r3, [r7, #31]
 8006b16:	e10f      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e10c      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a68      	ldr	r2, [pc, #416]	; (8006cc4 <UART_SetConfig+0x2d4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d120      	bne.n	8006b6a <UART_SetConfig+0x17a>
 8006b28:	4b64      	ldr	r3, [pc, #400]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b32:	2b30      	cmp	r3, #48	; 0x30
 8006b34:	d013      	beq.n	8006b5e <UART_SetConfig+0x16e>
 8006b36:	2b30      	cmp	r3, #48	; 0x30
 8006b38:	d814      	bhi.n	8006b64 <UART_SetConfig+0x174>
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d009      	beq.n	8006b52 <UART_SetConfig+0x162>
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d810      	bhi.n	8006b64 <UART_SetConfig+0x174>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <UART_SetConfig+0x15c>
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d006      	beq.n	8006b58 <UART_SetConfig+0x168>
 8006b4a:	e00b      	b.n	8006b64 <UART_SetConfig+0x174>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e0f2      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b52:	2302      	movs	r3, #2
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e0ef      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e0ec      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	77fb      	strb	r3, [r7, #31]
 8006b62:	e0e9      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b64:	2310      	movs	r3, #16
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e0e6      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a56      	ldr	r2, [pc, #344]	; (8006cc8 <UART_SetConfig+0x2d8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d120      	bne.n	8006bb6 <UART_SetConfig+0x1c6>
 8006b74:	4b51      	ldr	r3, [pc, #324]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b80:	d013      	beq.n	8006baa <UART_SetConfig+0x1ba>
 8006b82:	2bc0      	cmp	r3, #192	; 0xc0
 8006b84:	d814      	bhi.n	8006bb0 <UART_SetConfig+0x1c0>
 8006b86:	2b80      	cmp	r3, #128	; 0x80
 8006b88:	d009      	beq.n	8006b9e <UART_SetConfig+0x1ae>
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d810      	bhi.n	8006bb0 <UART_SetConfig+0x1c0>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <UART_SetConfig+0x1a8>
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d006      	beq.n	8006ba4 <UART_SetConfig+0x1b4>
 8006b96:	e00b      	b.n	8006bb0 <UART_SetConfig+0x1c0>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	77fb      	strb	r3, [r7, #31]
 8006b9c:	e0cc      	b.n	8006d38 <UART_SetConfig+0x348>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	77fb      	strb	r3, [r7, #31]
 8006ba2:	e0c9      	b.n	8006d38 <UART_SetConfig+0x348>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	77fb      	strb	r3, [r7, #31]
 8006ba8:	e0c6      	b.n	8006d38 <UART_SetConfig+0x348>
 8006baa:	2308      	movs	r3, #8
 8006bac:	77fb      	strb	r3, [r7, #31]
 8006bae:	e0c3      	b.n	8006d38 <UART_SetConfig+0x348>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	77fb      	strb	r3, [r7, #31]
 8006bb4:	e0c0      	b.n	8006d38 <UART_SetConfig+0x348>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a44      	ldr	r2, [pc, #272]	; (8006ccc <UART_SetConfig+0x2dc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d125      	bne.n	8006c0c <UART_SetConfig+0x21c>
 8006bc0:	4b3e      	ldr	r3, [pc, #248]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bce:	d017      	beq.n	8006c00 <UART_SetConfig+0x210>
 8006bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd4:	d817      	bhi.n	8006c06 <UART_SetConfig+0x216>
 8006bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bda:	d00b      	beq.n	8006bf4 <UART_SetConfig+0x204>
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be0:	d811      	bhi.n	8006c06 <UART_SetConfig+0x216>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <UART_SetConfig+0x1fe>
 8006be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bea:	d006      	beq.n	8006bfa <UART_SetConfig+0x20a>
 8006bec:	e00b      	b.n	8006c06 <UART_SetConfig+0x216>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e0a1      	b.n	8006d38 <UART_SetConfig+0x348>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e09e      	b.n	8006d38 <UART_SetConfig+0x348>
 8006bfa:	2304      	movs	r3, #4
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e09b      	b.n	8006d38 <UART_SetConfig+0x348>
 8006c00:	2308      	movs	r3, #8
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e098      	b.n	8006d38 <UART_SetConfig+0x348>
 8006c06:	2310      	movs	r3, #16
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e095      	b.n	8006d38 <UART_SetConfig+0x348>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a2f      	ldr	r2, [pc, #188]	; (8006cd0 <UART_SetConfig+0x2e0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d125      	bne.n	8006c62 <UART_SetConfig+0x272>
 8006c16:	4b29      	ldr	r3, [pc, #164]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c24:	d017      	beq.n	8006c56 <UART_SetConfig+0x266>
 8006c26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c2a:	d817      	bhi.n	8006c5c <UART_SetConfig+0x26c>
 8006c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c30:	d00b      	beq.n	8006c4a <UART_SetConfig+0x25a>
 8006c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c36:	d811      	bhi.n	8006c5c <UART_SetConfig+0x26c>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <UART_SetConfig+0x254>
 8006c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c40:	d006      	beq.n	8006c50 <UART_SetConfig+0x260>
 8006c42:	e00b      	b.n	8006c5c <UART_SetConfig+0x26c>
 8006c44:	2301      	movs	r3, #1
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e076      	b.n	8006d38 <UART_SetConfig+0x348>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	77fb      	strb	r3, [r7, #31]
 8006c4e:	e073      	b.n	8006d38 <UART_SetConfig+0x348>
 8006c50:	2304      	movs	r3, #4
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e070      	b.n	8006d38 <UART_SetConfig+0x348>
 8006c56:	2308      	movs	r3, #8
 8006c58:	77fb      	strb	r3, [r7, #31]
 8006c5a:	e06d      	b.n	8006d38 <UART_SetConfig+0x348>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	e06a      	b.n	8006d38 <UART_SetConfig+0x348>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <UART_SetConfig+0x2e4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d138      	bne.n	8006cde <UART_SetConfig+0x2ee>
 8006c6c:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c72:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c7a:	d017      	beq.n	8006cac <UART_SetConfig+0x2bc>
 8006c7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c80:	d82a      	bhi.n	8006cd8 <UART_SetConfig+0x2e8>
 8006c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c86:	d00b      	beq.n	8006ca0 <UART_SetConfig+0x2b0>
 8006c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8c:	d824      	bhi.n	8006cd8 <UART_SetConfig+0x2e8>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <UART_SetConfig+0x2aa>
 8006c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c96:	d006      	beq.n	8006ca6 <UART_SetConfig+0x2b6>
 8006c98:	e01e      	b.n	8006cd8 <UART_SetConfig+0x2e8>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e04b      	b.n	8006d38 <UART_SetConfig+0x348>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e048      	b.n	8006d38 <UART_SetConfig+0x348>
 8006ca6:	2304      	movs	r3, #4
 8006ca8:	77fb      	strb	r3, [r7, #31]
 8006caa:	e045      	b.n	8006d38 <UART_SetConfig+0x348>
 8006cac:	2308      	movs	r3, #8
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e042      	b.n	8006d38 <UART_SetConfig+0x348>
 8006cb2:	bf00      	nop
 8006cb4:	efff69f3 	.word	0xefff69f3
 8006cb8:	40011000 	.word	0x40011000
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	40004400 	.word	0x40004400
 8006cc4:	40004800 	.word	0x40004800
 8006cc8:	40004c00 	.word	0x40004c00
 8006ccc:	40005000 	.word	0x40005000
 8006cd0:	40011400 	.word	0x40011400
 8006cd4:	40007800 	.word	0x40007800
 8006cd8:	2310      	movs	r3, #16
 8006cda:	77fb      	strb	r3, [r7, #31]
 8006cdc:	e02c      	b.n	8006d38 <UART_SetConfig+0x348>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a72      	ldr	r2, [pc, #456]	; (8006eac <UART_SetConfig+0x4bc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d125      	bne.n	8006d34 <UART_SetConfig+0x344>
 8006ce8:	4b71      	ldr	r3, [pc, #452]	; (8006eb0 <UART_SetConfig+0x4c0>)
 8006cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cf6:	d017      	beq.n	8006d28 <UART_SetConfig+0x338>
 8006cf8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cfc:	d817      	bhi.n	8006d2e <UART_SetConfig+0x33e>
 8006cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d02:	d00b      	beq.n	8006d1c <UART_SetConfig+0x32c>
 8006d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d08:	d811      	bhi.n	8006d2e <UART_SetConfig+0x33e>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <UART_SetConfig+0x326>
 8006d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d12:	d006      	beq.n	8006d22 <UART_SetConfig+0x332>
 8006d14:	e00b      	b.n	8006d2e <UART_SetConfig+0x33e>
 8006d16:	2300      	movs	r3, #0
 8006d18:	77fb      	strb	r3, [r7, #31]
 8006d1a:	e00d      	b.n	8006d38 <UART_SetConfig+0x348>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	77fb      	strb	r3, [r7, #31]
 8006d20:	e00a      	b.n	8006d38 <UART_SetConfig+0x348>
 8006d22:	2304      	movs	r3, #4
 8006d24:	77fb      	strb	r3, [r7, #31]
 8006d26:	e007      	b.n	8006d38 <UART_SetConfig+0x348>
 8006d28:	2308      	movs	r3, #8
 8006d2a:	77fb      	strb	r3, [r7, #31]
 8006d2c:	e004      	b.n	8006d38 <UART_SetConfig+0x348>
 8006d2e:	2310      	movs	r3, #16
 8006d30:	77fb      	strb	r3, [r7, #31]
 8006d32:	e001      	b.n	8006d38 <UART_SetConfig+0x348>
 8006d34:	2310      	movs	r3, #16
 8006d36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d40:	d15b      	bne.n	8006dfa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006d42:	7ffb      	ldrb	r3, [r7, #31]
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d828      	bhi.n	8006d9a <UART_SetConfig+0x3aa>
 8006d48:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x360>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	08006d9b 	.word	0x08006d9b
 8006d60:	08006d8b 	.word	0x08006d8b
 8006d64:	08006d9b 	.word	0x08006d9b
 8006d68:	08006d9b 	.word	0x08006d9b
 8006d6c:	08006d9b 	.word	0x08006d9b
 8006d70:	08006d93 	.word	0x08006d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d74:	f7fc ffc4 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8006d78:	61b8      	str	r0, [r7, #24]
        break;
 8006d7a:	e013      	b.n	8006da4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d7c:	f7fc ffd4 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 8006d80:	61b8      	str	r0, [r7, #24]
        break;
 8006d82:	e00f      	b.n	8006da4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d84:	4b4b      	ldr	r3, [pc, #300]	; (8006eb4 <UART_SetConfig+0x4c4>)
 8006d86:	61bb      	str	r3, [r7, #24]
        break;
 8006d88:	e00c      	b.n	8006da4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8a:	f7fc fea7 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8006d8e:	61b8      	str	r0, [r7, #24]
        break;
 8006d90:	e008      	b.n	8006da4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d96:	61bb      	str	r3, [r7, #24]
        break;
 8006d98:	e004      	b.n	8006da4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	77bb      	strb	r3, [r7, #30]
        break;
 8006da2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d074      	beq.n	8006e94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	005a      	lsls	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	441a      	add	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	d916      	bls.n	8006df4 <UART_SetConfig+0x404>
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d212      	bcs.n	8006df4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f023 030f 	bic.w	r3, r3, #15
 8006dd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	89fa      	ldrh	r2, [r7, #14]
 8006df0:	60da      	str	r2, [r3, #12]
 8006df2:	e04f      	b.n	8006e94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	77bb      	strb	r3, [r7, #30]
 8006df8:	e04c      	b.n	8006e94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dfa:	7ffb      	ldrb	r3, [r7, #31]
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d828      	bhi.n	8006e52 <UART_SetConfig+0x462>
 8006e00:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <UART_SetConfig+0x418>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006e2d 	.word	0x08006e2d
 8006e0c:	08006e35 	.word	0x08006e35
 8006e10:	08006e3d 	.word	0x08006e3d
 8006e14:	08006e53 	.word	0x08006e53
 8006e18:	08006e43 	.word	0x08006e43
 8006e1c:	08006e53 	.word	0x08006e53
 8006e20:	08006e53 	.word	0x08006e53
 8006e24:	08006e53 	.word	0x08006e53
 8006e28:	08006e4b 	.word	0x08006e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e2c:	f7fc ff68 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8006e30:	61b8      	str	r0, [r7, #24]
        break;
 8006e32:	e013      	b.n	8006e5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e34:	f7fc ff78 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 8006e38:	61b8      	str	r0, [r7, #24]
        break;
 8006e3a:	e00f      	b.n	8006e5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e3c:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <UART_SetConfig+0x4c4>)
 8006e3e:	61bb      	str	r3, [r7, #24]
        break;
 8006e40:	e00c      	b.n	8006e5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e42:	f7fc fe4b 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8006e46:	61b8      	str	r0, [r7, #24]
        break;
 8006e48:	e008      	b.n	8006e5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e4e:	61bb      	str	r3, [r7, #24]
        break;
 8006e50:	e004      	b.n	8006e5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	77bb      	strb	r3, [r7, #30]
        break;
 8006e5a:	bf00      	nop
    }

    if (pclk != 0U)
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d018      	beq.n	8006e94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	085a      	lsrs	r2, r3, #1
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	441a      	add	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b0f      	cmp	r3, #15
 8006e7a:	d909      	bls.n	8006e90 <UART_SetConfig+0x4a0>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e82:	d205      	bcs.n	8006e90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60da      	str	r2, [r3, #12]
 8006e8e:	e001      	b.n	8006e94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ea0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3720      	adds	r7, #32
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40007c00 	.word	0x40007c00
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	00f42400 	.word	0x00f42400

08006eb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	f003 0308 	and.w	r3, r3, #8
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01a      	beq.n	8006fce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb6:	d10a      	bne.n	8006fce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	605a      	str	r2, [r3, #4]
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af02      	add	r7, sp, #8
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800700c:	f7fb f9ce 	bl	80023ac <HAL_GetTick>
 8007010:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b08      	cmp	r3, #8
 800701e:	d10e      	bne.n	800703e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f81b 	bl	800706a <UART_WaitOnFlagUntilTimeout>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e011      	b.n	8007062 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b09c      	sub	sp, #112	; 0x70
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	4613      	mov	r3, r2
 8007078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707a:	e0a7      	b.n	80071cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	f000 80a3 	beq.w	80071cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007086:	f7fb f991 	bl	80023ac <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007092:	429a      	cmp	r2, r3
 8007094:	d302      	bcc.n	800709c <UART_WaitOnFlagUntilTimeout+0x32>
 8007096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007098:	2b00      	cmp	r3, #0
 800709a:	d13f      	bne.n	800711c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070b0:	667b      	str	r3, [r7, #100]	; 0x64
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e6      	bne.n	800709c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3308      	adds	r3, #8
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	f023 0301 	bic.w	r3, r3, #1
 80070e4:	663b      	str	r3, [r7, #96]	; 0x60
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80070f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e5      	bne.n	80070ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2220      	movs	r2, #32
 8007106:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2220      	movs	r2, #32
 800710c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e068      	b.n	80071ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b00      	cmp	r3, #0
 8007128:	d050      	beq.n	80071cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007138:	d148      	bne.n	80071cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007142:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007162:	637b      	str	r3, [r7, #52]	; 0x34
 8007164:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e6      	bne.n	8007144 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3308      	adds	r3, #8
 800717c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	613b      	str	r3, [r7, #16]
   return(result);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f023 0301 	bic.w	r3, r3, #1
 800718c:	66bb      	str	r3, [r7, #104]	; 0x68
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007196:	623a      	str	r2, [r7, #32]
 8007198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	69f9      	ldr	r1, [r7, #28]
 800719c:	6a3a      	ldr	r2, [r7, #32]
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e5      	bne.n	8007176 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2220      	movs	r2, #32
 80071ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e010      	b.n	80071ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	69da      	ldr	r2, [r3, #28]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4013      	ands	r3, r2
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	429a      	cmp	r2, r3
 80071da:	bf0c      	ite	eq
 80071dc:	2301      	moveq	r3, #1
 80071de:	2300      	movne	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	f43f af48 	beq.w	800707c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3770      	adds	r7, #112	; 0x70
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b097      	sub	sp, #92	; 0x5c
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	88fa      	ldrh	r2, [r7, #6]
 8007210:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722a:	d10e      	bne.n	800724a <UART_Start_Receive_IT+0x52>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d105      	bne.n	8007240 <UART_Start_Receive_IT+0x48>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f240 12ff 	movw	r2, #511	; 0x1ff
 800723a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800723e:	e02d      	b.n	800729c <UART_Start_Receive_IT+0xa4>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	22ff      	movs	r2, #255	; 0xff
 8007244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007248:	e028      	b.n	800729c <UART_Start_Receive_IT+0xa4>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10d      	bne.n	800726e <UART_Start_Receive_IT+0x76>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <UART_Start_Receive_IT+0x6c>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	22ff      	movs	r2, #255	; 0xff
 800725e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007262:	e01b      	b.n	800729c <UART_Start_Receive_IT+0xa4>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	227f      	movs	r2, #127	; 0x7f
 8007268:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800726c:	e016      	b.n	800729c <UART_Start_Receive_IT+0xa4>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007276:	d10d      	bne.n	8007294 <UART_Start_Receive_IT+0x9c>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <UART_Start_Receive_IT+0x92>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	227f      	movs	r2, #127	; 0x7f
 8007284:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007288:	e008      	b.n	800729c <UART_Start_Receive_IT+0xa4>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	223f      	movs	r2, #63	; 0x3f
 800728e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007292:	e003      	b.n	800729c <UART_Start_Receive_IT+0xa4>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2222      	movs	r2, #34	; 0x22
 80072a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3308      	adds	r3, #8
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	f043 0301 	orr.w	r3, r3, #1
 80072c2:	657b      	str	r3, [r7, #84]	; 0x54
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3308      	adds	r3, #8
 80072ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80072ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e5      	bne.n	80072ac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e8:	d107      	bne.n	80072fa <UART_Start_Receive_IT+0x102>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4a21      	ldr	r2, [pc, #132]	; (800737c <UART_Start_Receive_IT+0x184>)
 80072f6:	669a      	str	r2, [r3, #104]	; 0x68
 80072f8:	e002      	b.n	8007300 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4a20      	ldr	r2, [pc, #128]	; (8007380 <UART_Start_Receive_IT+0x188>)
 80072fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d019      	beq.n	800733c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800731c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
 8007328:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800732c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e6      	bne.n	8007308 <UART_Start_Receive_IT+0x110>
 800733a:	e018      	b.n	800736e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	613b      	str	r3, [r7, #16]
   return(result);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f043 0320 	orr.w	r3, r3, #32
 8007350:	653b      	str	r3, [r7, #80]	; 0x50
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800735a:	623b      	str	r3, [r7, #32]
 800735c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	69f9      	ldr	r1, [r7, #28]
 8007360:	6a3a      	ldr	r2, [r7, #32]
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	61bb      	str	r3, [r7, #24]
   return(result);
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e6      	bne.n	800733c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	375c      	adds	r7, #92	; 0x5c
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	08007633 	.word	0x08007633
 8007380:	080074cd 	.word	0x080074cd

08007384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b095      	sub	sp, #84	; 0x54
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073aa:	643b      	str	r3, [r7, #64]	; 0x40
 80073ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e6      	bne.n	800738c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3308      	adds	r3, #8
 80073c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3308      	adds	r3, #8
 80073dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e5      	bne.n	80073be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d118      	bne.n	800742c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	e853 3f00 	ldrex	r3, [r3]
 8007406:	60bb      	str	r3, [r7, #8]
   return(result);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f023 0310 	bic.w	r3, r3, #16
 800740e:	647b      	str	r3, [r7, #68]	; 0x44
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6979      	ldr	r1, [r7, #20]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	613b      	str	r3, [r7, #16]
   return(result);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e6      	bne.n	80073fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007440:	bf00      	nop
 8007442:	3754      	adds	r7, #84	; 0x54
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff faaa 	bl	80069c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007470:	bf00      	nop
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	60bb      	str	r3, [r7, #8]
   return(result);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	613b      	str	r3, [r7, #16]
   return(result);
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e6      	bne.n	8007480 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fa76 	bl	80069b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c4:	bf00      	nop
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b096      	sub	sp, #88	; 0x58
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e4:	2b22      	cmp	r3, #34	; 0x22
 80074e6:	f040 8098 	bne.w	800761a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80074f8:	b2d9      	uxtb	r1, r3
 80074fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007504:	400a      	ands	r2, r1
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d17b      	bne.n	800762a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007546:	653b      	str	r3, [r7, #80]	; 0x50
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	461a      	mov	r2, r3
 800754e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007550:	647b      	str	r3, [r7, #68]	; 0x44
 8007552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800755e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e6      	bne.n	8007532 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3308      	adds	r3, #8
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	623b      	str	r3, [r7, #32]
   return(result);
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3308      	adds	r3, #8
 8007582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007584:	633a      	str	r2, [r7, #48]	; 0x30
 8007586:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800758a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e5      	bne.n	8007564 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d12e      	bne.n	8007612 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0310 	bic.w	r3, r3, #16
 80075ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	69b9      	ldr	r1, [r7, #24]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	617b      	str	r3, [r7, #20]
   return(result);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e6      	bne.n	80075ba <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b10      	cmp	r3, #16
 80075f8:	d103      	bne.n	8007602 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2210      	movs	r2, #16
 8007600:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff f9e4 	bl	80069d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007610:	e00b      	b.n	800762a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fa f832 	bl	800167c <HAL_UART_RxCpltCallback>
}
 8007618:	e007      	b.n	800762a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	699a      	ldr	r2, [r3, #24]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0208 	orr.w	r2, r2, #8
 8007628:	619a      	str	r2, [r3, #24]
}
 800762a:	bf00      	nop
 800762c:	3758      	adds	r7, #88	; 0x58
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b096      	sub	sp, #88	; 0x58
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007640:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800764a:	2b22      	cmp	r3, #34	; 0x22
 800764c:	f040 8098 	bne.w	8007780 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007660:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007664:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007668:	4013      	ands	r3, r2
 800766a:	b29a      	uxth	r2, r3
 800766c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800766e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007674:	1c9a      	adds	r2, r3, #2
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d17b      	bne.n	8007790 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b6:	643b      	str	r3, [r7, #64]	; 0x40
 80076b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e6      	bne.n	8007698 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3308      	adds	r3, #8
 80076d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e5      	bne.n	80076ca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007716:	2b01      	cmp	r3, #1
 8007718:	d12e      	bne.n	8007778 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	60bb      	str	r3, [r7, #8]
   return(result);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f023 0310 	bic.w	r3, r3, #16
 8007734:	647b      	str	r3, [r7, #68]	; 0x44
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800773e:	61bb      	str	r3, [r7, #24]
 8007740:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6979      	ldr	r1, [r7, #20]
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	613b      	str	r3, [r7, #16]
   return(result);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e6      	bne.n	8007720 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	f003 0310 	and.w	r3, r3, #16
 800775c:	2b10      	cmp	r3, #16
 800775e:	d103      	bne.n	8007768 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2210      	movs	r2, #16
 8007766:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff f931 	bl	80069d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007776:	e00b      	b.n	8007790 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7f9 ff7f 	bl	800167c <HAL_UART_RxCpltCallback>
}
 800777e:	e007      	b.n	8007790 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0208 	orr.w	r2, r2, #8
 800778e:	619a      	str	r2, [r3, #24]
}
 8007790:	bf00      	nop
 8007792:	3758      	adds	r7, #88	; 0x58
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <siprintf>:
 8007798:	b40e      	push	{r1, r2, r3}
 800779a:	b500      	push	{lr}
 800779c:	b09c      	sub	sp, #112	; 0x70
 800779e:	ab1d      	add	r3, sp, #116	; 0x74
 80077a0:	9002      	str	r0, [sp, #8]
 80077a2:	9006      	str	r0, [sp, #24]
 80077a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077a8:	4809      	ldr	r0, [pc, #36]	; (80077d0 <siprintf+0x38>)
 80077aa:	9107      	str	r1, [sp, #28]
 80077ac:	9104      	str	r1, [sp, #16]
 80077ae:	4909      	ldr	r1, [pc, #36]	; (80077d4 <siprintf+0x3c>)
 80077b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b4:	9105      	str	r1, [sp, #20]
 80077b6:	6800      	ldr	r0, [r0, #0]
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	a902      	add	r1, sp, #8
 80077bc:	f000 f9a0 	bl	8007b00 <_svfiprintf_r>
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	b01c      	add	sp, #112	; 0x70
 80077c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077cc:	b003      	add	sp, #12
 80077ce:	4770      	bx	lr
 80077d0:	20000098 	.word	0x20000098
 80077d4:	ffff0208 	.word	0xffff0208

080077d8 <memset>:
 80077d8:	4402      	add	r2, r0
 80077da:	4603      	mov	r3, r0
 80077dc:	4293      	cmp	r3, r2
 80077de:	d100      	bne.n	80077e2 <memset+0xa>
 80077e0:	4770      	bx	lr
 80077e2:	f803 1b01 	strb.w	r1, [r3], #1
 80077e6:	e7f9      	b.n	80077dc <memset+0x4>

080077e8 <__errno>:
 80077e8:	4b01      	ldr	r3, [pc, #4]	; (80077f0 <__errno+0x8>)
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	20000098 	.word	0x20000098

080077f4 <__libc_init_array>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4d0d      	ldr	r5, [pc, #52]	; (800782c <__libc_init_array+0x38>)
 80077f8:	4c0d      	ldr	r4, [pc, #52]	; (8007830 <__libc_init_array+0x3c>)
 80077fa:	1b64      	subs	r4, r4, r5
 80077fc:	10a4      	asrs	r4, r4, #2
 80077fe:	2600      	movs	r6, #0
 8007800:	42a6      	cmp	r6, r4
 8007802:	d109      	bne.n	8007818 <__libc_init_array+0x24>
 8007804:	4d0b      	ldr	r5, [pc, #44]	; (8007834 <__libc_init_array+0x40>)
 8007806:	4c0c      	ldr	r4, [pc, #48]	; (8007838 <__libc_init_array+0x44>)
 8007808:	f000 fcbc 	bl	8008184 <_init>
 800780c:	1b64      	subs	r4, r4, r5
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	2600      	movs	r6, #0
 8007812:	42a6      	cmp	r6, r4
 8007814:	d105      	bne.n	8007822 <__libc_init_array+0x2e>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	f855 3b04 	ldr.w	r3, [r5], #4
 800781c:	4798      	blx	r3
 800781e:	3601      	adds	r6, #1
 8007820:	e7ee      	b.n	8007800 <__libc_init_array+0xc>
 8007822:	f855 3b04 	ldr.w	r3, [r5], #4
 8007826:	4798      	blx	r3
 8007828:	3601      	adds	r6, #1
 800782a:	e7f2      	b.n	8007812 <__libc_init_array+0x1e>
 800782c:	08008224 	.word	0x08008224
 8007830:	08008224 	.word	0x08008224
 8007834:	08008224 	.word	0x08008224
 8007838:	08008228 	.word	0x08008228

0800783c <__retarget_lock_acquire_recursive>:
 800783c:	4770      	bx	lr

0800783e <__retarget_lock_release_recursive>:
 800783e:	4770      	bx	lr

08007840 <memcpy>:
 8007840:	440a      	add	r2, r1
 8007842:	4291      	cmp	r1, r2
 8007844:	f100 33ff 	add.w	r3, r0, #4294967295
 8007848:	d100      	bne.n	800784c <memcpy+0xc>
 800784a:	4770      	bx	lr
 800784c:	b510      	push	{r4, lr}
 800784e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007856:	4291      	cmp	r1, r2
 8007858:	d1f9      	bne.n	800784e <memcpy+0xe>
 800785a:	bd10      	pop	{r4, pc}

0800785c <_free_r>:
 800785c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800785e:	2900      	cmp	r1, #0
 8007860:	d044      	beq.n	80078ec <_free_r+0x90>
 8007862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007866:	9001      	str	r0, [sp, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f1a1 0404 	sub.w	r4, r1, #4
 800786e:	bfb8      	it	lt
 8007870:	18e4      	addlt	r4, r4, r3
 8007872:	f000 f8df 	bl	8007a34 <__malloc_lock>
 8007876:	4a1e      	ldr	r2, [pc, #120]	; (80078f0 <_free_r+0x94>)
 8007878:	9801      	ldr	r0, [sp, #4]
 800787a:	6813      	ldr	r3, [r2, #0]
 800787c:	b933      	cbnz	r3, 800788c <_free_r+0x30>
 800787e:	6063      	str	r3, [r4, #4]
 8007880:	6014      	str	r4, [r2, #0]
 8007882:	b003      	add	sp, #12
 8007884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007888:	f000 b8da 	b.w	8007a40 <__malloc_unlock>
 800788c:	42a3      	cmp	r3, r4
 800788e:	d908      	bls.n	80078a2 <_free_r+0x46>
 8007890:	6825      	ldr	r5, [r4, #0]
 8007892:	1961      	adds	r1, r4, r5
 8007894:	428b      	cmp	r3, r1
 8007896:	bf01      	itttt	eq
 8007898:	6819      	ldreq	r1, [r3, #0]
 800789a:	685b      	ldreq	r3, [r3, #4]
 800789c:	1949      	addeq	r1, r1, r5
 800789e:	6021      	streq	r1, [r4, #0]
 80078a0:	e7ed      	b.n	800787e <_free_r+0x22>
 80078a2:	461a      	mov	r2, r3
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	b10b      	cbz	r3, 80078ac <_free_r+0x50>
 80078a8:	42a3      	cmp	r3, r4
 80078aa:	d9fa      	bls.n	80078a2 <_free_r+0x46>
 80078ac:	6811      	ldr	r1, [r2, #0]
 80078ae:	1855      	adds	r5, r2, r1
 80078b0:	42a5      	cmp	r5, r4
 80078b2:	d10b      	bne.n	80078cc <_free_r+0x70>
 80078b4:	6824      	ldr	r4, [r4, #0]
 80078b6:	4421      	add	r1, r4
 80078b8:	1854      	adds	r4, r2, r1
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	6011      	str	r1, [r2, #0]
 80078be:	d1e0      	bne.n	8007882 <_free_r+0x26>
 80078c0:	681c      	ldr	r4, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	6053      	str	r3, [r2, #4]
 80078c6:	440c      	add	r4, r1
 80078c8:	6014      	str	r4, [r2, #0]
 80078ca:	e7da      	b.n	8007882 <_free_r+0x26>
 80078cc:	d902      	bls.n	80078d4 <_free_r+0x78>
 80078ce:	230c      	movs	r3, #12
 80078d0:	6003      	str	r3, [r0, #0]
 80078d2:	e7d6      	b.n	8007882 <_free_r+0x26>
 80078d4:	6825      	ldr	r5, [r4, #0]
 80078d6:	1961      	adds	r1, r4, r5
 80078d8:	428b      	cmp	r3, r1
 80078da:	bf04      	itt	eq
 80078dc:	6819      	ldreq	r1, [r3, #0]
 80078de:	685b      	ldreq	r3, [r3, #4]
 80078e0:	6063      	str	r3, [r4, #4]
 80078e2:	bf04      	itt	eq
 80078e4:	1949      	addeq	r1, r1, r5
 80078e6:	6021      	streq	r1, [r4, #0]
 80078e8:	6054      	str	r4, [r2, #4]
 80078ea:	e7ca      	b.n	8007882 <_free_r+0x26>
 80078ec:	b003      	add	sp, #12
 80078ee:	bd30      	pop	{r4, r5, pc}
 80078f0:	200004b0 	.word	0x200004b0

080078f4 <sbrk_aligned>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4e0e      	ldr	r6, [pc, #56]	; (8007930 <sbrk_aligned+0x3c>)
 80078f8:	460c      	mov	r4, r1
 80078fa:	6831      	ldr	r1, [r6, #0]
 80078fc:	4605      	mov	r5, r0
 80078fe:	b911      	cbnz	r1, 8007906 <sbrk_aligned+0x12>
 8007900:	f000 fba6 	bl	8008050 <_sbrk_r>
 8007904:	6030      	str	r0, [r6, #0]
 8007906:	4621      	mov	r1, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f000 fba1 	bl	8008050 <_sbrk_r>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	d00a      	beq.n	8007928 <sbrk_aligned+0x34>
 8007912:	1cc4      	adds	r4, r0, #3
 8007914:	f024 0403 	bic.w	r4, r4, #3
 8007918:	42a0      	cmp	r0, r4
 800791a:	d007      	beq.n	800792c <sbrk_aligned+0x38>
 800791c:	1a21      	subs	r1, r4, r0
 800791e:	4628      	mov	r0, r5
 8007920:	f000 fb96 	bl	8008050 <_sbrk_r>
 8007924:	3001      	adds	r0, #1
 8007926:	d101      	bne.n	800792c <sbrk_aligned+0x38>
 8007928:	f04f 34ff 	mov.w	r4, #4294967295
 800792c:	4620      	mov	r0, r4
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	200004b4 	.word	0x200004b4

08007934 <_malloc_r>:
 8007934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007938:	1ccd      	adds	r5, r1, #3
 800793a:	f025 0503 	bic.w	r5, r5, #3
 800793e:	3508      	adds	r5, #8
 8007940:	2d0c      	cmp	r5, #12
 8007942:	bf38      	it	cc
 8007944:	250c      	movcc	r5, #12
 8007946:	2d00      	cmp	r5, #0
 8007948:	4607      	mov	r7, r0
 800794a:	db01      	blt.n	8007950 <_malloc_r+0x1c>
 800794c:	42a9      	cmp	r1, r5
 800794e:	d905      	bls.n	800795c <_malloc_r+0x28>
 8007950:	230c      	movs	r3, #12
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	2600      	movs	r6, #0
 8007956:	4630      	mov	r0, r6
 8007958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a30 <_malloc_r+0xfc>
 8007960:	f000 f868 	bl	8007a34 <__malloc_lock>
 8007964:	f8d8 3000 	ldr.w	r3, [r8]
 8007968:	461c      	mov	r4, r3
 800796a:	bb5c      	cbnz	r4, 80079c4 <_malloc_r+0x90>
 800796c:	4629      	mov	r1, r5
 800796e:	4638      	mov	r0, r7
 8007970:	f7ff ffc0 	bl	80078f4 <sbrk_aligned>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	4604      	mov	r4, r0
 8007978:	d155      	bne.n	8007a26 <_malloc_r+0xf2>
 800797a:	f8d8 4000 	ldr.w	r4, [r8]
 800797e:	4626      	mov	r6, r4
 8007980:	2e00      	cmp	r6, #0
 8007982:	d145      	bne.n	8007a10 <_malloc_r+0xdc>
 8007984:	2c00      	cmp	r4, #0
 8007986:	d048      	beq.n	8007a1a <_malloc_r+0xe6>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	4631      	mov	r1, r6
 800798c:	4638      	mov	r0, r7
 800798e:	eb04 0903 	add.w	r9, r4, r3
 8007992:	f000 fb5d 	bl	8008050 <_sbrk_r>
 8007996:	4581      	cmp	r9, r0
 8007998:	d13f      	bne.n	8007a1a <_malloc_r+0xe6>
 800799a:	6821      	ldr	r1, [r4, #0]
 800799c:	1a6d      	subs	r5, r5, r1
 800799e:	4629      	mov	r1, r5
 80079a0:	4638      	mov	r0, r7
 80079a2:	f7ff ffa7 	bl	80078f4 <sbrk_aligned>
 80079a6:	3001      	adds	r0, #1
 80079a8:	d037      	beq.n	8007a1a <_malloc_r+0xe6>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	442b      	add	r3, r5
 80079ae:	6023      	str	r3, [r4, #0]
 80079b0:	f8d8 3000 	ldr.w	r3, [r8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d038      	beq.n	8007a2a <_malloc_r+0xf6>
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	42a2      	cmp	r2, r4
 80079bc:	d12b      	bne.n	8007a16 <_malloc_r+0xe2>
 80079be:	2200      	movs	r2, #0
 80079c0:	605a      	str	r2, [r3, #4]
 80079c2:	e00f      	b.n	80079e4 <_malloc_r+0xb0>
 80079c4:	6822      	ldr	r2, [r4, #0]
 80079c6:	1b52      	subs	r2, r2, r5
 80079c8:	d41f      	bmi.n	8007a0a <_malloc_r+0xd6>
 80079ca:	2a0b      	cmp	r2, #11
 80079cc:	d917      	bls.n	80079fe <_malloc_r+0xca>
 80079ce:	1961      	adds	r1, r4, r5
 80079d0:	42a3      	cmp	r3, r4
 80079d2:	6025      	str	r5, [r4, #0]
 80079d4:	bf18      	it	ne
 80079d6:	6059      	strne	r1, [r3, #4]
 80079d8:	6863      	ldr	r3, [r4, #4]
 80079da:	bf08      	it	eq
 80079dc:	f8c8 1000 	streq.w	r1, [r8]
 80079e0:	5162      	str	r2, [r4, r5]
 80079e2:	604b      	str	r3, [r1, #4]
 80079e4:	4638      	mov	r0, r7
 80079e6:	f104 060b 	add.w	r6, r4, #11
 80079ea:	f000 f829 	bl	8007a40 <__malloc_unlock>
 80079ee:	f026 0607 	bic.w	r6, r6, #7
 80079f2:	1d23      	adds	r3, r4, #4
 80079f4:	1af2      	subs	r2, r6, r3
 80079f6:	d0ae      	beq.n	8007956 <_malloc_r+0x22>
 80079f8:	1b9b      	subs	r3, r3, r6
 80079fa:	50a3      	str	r3, [r4, r2]
 80079fc:	e7ab      	b.n	8007956 <_malloc_r+0x22>
 80079fe:	42a3      	cmp	r3, r4
 8007a00:	6862      	ldr	r2, [r4, #4]
 8007a02:	d1dd      	bne.n	80079c0 <_malloc_r+0x8c>
 8007a04:	f8c8 2000 	str.w	r2, [r8]
 8007a08:	e7ec      	b.n	80079e4 <_malloc_r+0xb0>
 8007a0a:	4623      	mov	r3, r4
 8007a0c:	6864      	ldr	r4, [r4, #4]
 8007a0e:	e7ac      	b.n	800796a <_malloc_r+0x36>
 8007a10:	4634      	mov	r4, r6
 8007a12:	6876      	ldr	r6, [r6, #4]
 8007a14:	e7b4      	b.n	8007980 <_malloc_r+0x4c>
 8007a16:	4613      	mov	r3, r2
 8007a18:	e7cc      	b.n	80079b4 <_malloc_r+0x80>
 8007a1a:	230c      	movs	r3, #12
 8007a1c:	603b      	str	r3, [r7, #0]
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f000 f80e 	bl	8007a40 <__malloc_unlock>
 8007a24:	e797      	b.n	8007956 <_malloc_r+0x22>
 8007a26:	6025      	str	r5, [r4, #0]
 8007a28:	e7dc      	b.n	80079e4 <_malloc_r+0xb0>
 8007a2a:	605b      	str	r3, [r3, #4]
 8007a2c:	deff      	udf	#255	; 0xff
 8007a2e:	bf00      	nop
 8007a30:	200004b0 	.word	0x200004b0

08007a34 <__malloc_lock>:
 8007a34:	4801      	ldr	r0, [pc, #4]	; (8007a3c <__malloc_lock+0x8>)
 8007a36:	f7ff bf01 	b.w	800783c <__retarget_lock_acquire_recursive>
 8007a3a:	bf00      	nop
 8007a3c:	200004ac 	.word	0x200004ac

08007a40 <__malloc_unlock>:
 8007a40:	4801      	ldr	r0, [pc, #4]	; (8007a48 <__malloc_unlock+0x8>)
 8007a42:	f7ff befc 	b.w	800783e <__retarget_lock_release_recursive>
 8007a46:	bf00      	nop
 8007a48:	200004ac 	.word	0x200004ac

08007a4c <__ssputs_r>:
 8007a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	688e      	ldr	r6, [r1, #8]
 8007a52:	461f      	mov	r7, r3
 8007a54:	42be      	cmp	r6, r7
 8007a56:	680b      	ldr	r3, [r1, #0]
 8007a58:	4682      	mov	sl, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	4690      	mov	r8, r2
 8007a5e:	d82c      	bhi.n	8007aba <__ssputs_r+0x6e>
 8007a60:	898a      	ldrh	r2, [r1, #12]
 8007a62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a66:	d026      	beq.n	8007ab6 <__ssputs_r+0x6a>
 8007a68:	6965      	ldr	r5, [r4, #20]
 8007a6a:	6909      	ldr	r1, [r1, #16]
 8007a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a70:	eba3 0901 	sub.w	r9, r3, r1
 8007a74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a78:	1c7b      	adds	r3, r7, #1
 8007a7a:	444b      	add	r3, r9
 8007a7c:	106d      	asrs	r5, r5, #1
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	bf38      	it	cc
 8007a82:	461d      	movcc	r5, r3
 8007a84:	0553      	lsls	r3, r2, #21
 8007a86:	d527      	bpl.n	8007ad8 <__ssputs_r+0x8c>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	f7ff ff53 	bl	8007934 <_malloc_r>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	b360      	cbz	r0, 8007aec <__ssputs_r+0xa0>
 8007a92:	6921      	ldr	r1, [r4, #16]
 8007a94:	464a      	mov	r2, r9
 8007a96:	f7ff fed3 	bl	8007840 <memcpy>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	6126      	str	r6, [r4, #16]
 8007aa8:	6165      	str	r5, [r4, #20]
 8007aaa:	444e      	add	r6, r9
 8007aac:	eba5 0509 	sub.w	r5, r5, r9
 8007ab0:	6026      	str	r6, [r4, #0]
 8007ab2:	60a5      	str	r5, [r4, #8]
 8007ab4:	463e      	mov	r6, r7
 8007ab6:	42be      	cmp	r6, r7
 8007ab8:	d900      	bls.n	8007abc <__ssputs_r+0x70>
 8007aba:	463e      	mov	r6, r7
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	4632      	mov	r2, r6
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	f000 faab 	bl	800801c <memmove>
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	1b9b      	subs	r3, r3, r6
 8007aca:	60a3      	str	r3, [r4, #8]
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	4433      	add	r3, r6
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad8:	462a      	mov	r2, r5
 8007ada:	f000 fac9 	bl	8008070 <_realloc_r>
 8007ade:	4606      	mov	r6, r0
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d1e0      	bne.n	8007aa6 <__ssputs_r+0x5a>
 8007ae4:	6921      	ldr	r1, [r4, #16]
 8007ae6:	4650      	mov	r0, sl
 8007ae8:	f7ff feb8 	bl	800785c <_free_r>
 8007aec:	230c      	movs	r3, #12
 8007aee:	f8ca 3000 	str.w	r3, [sl]
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295
 8007afe:	e7e9      	b.n	8007ad4 <__ssputs_r+0x88>

08007b00 <_svfiprintf_r>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	4698      	mov	r8, r3
 8007b06:	898b      	ldrh	r3, [r1, #12]
 8007b08:	061b      	lsls	r3, r3, #24
 8007b0a:	b09d      	sub	sp, #116	; 0x74
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	460d      	mov	r5, r1
 8007b10:	4614      	mov	r4, r2
 8007b12:	d50e      	bpl.n	8007b32 <_svfiprintf_r+0x32>
 8007b14:	690b      	ldr	r3, [r1, #16]
 8007b16:	b963      	cbnz	r3, 8007b32 <_svfiprintf_r+0x32>
 8007b18:	2140      	movs	r1, #64	; 0x40
 8007b1a:	f7ff ff0b 	bl	8007934 <_malloc_r>
 8007b1e:	6028      	str	r0, [r5, #0]
 8007b20:	6128      	str	r0, [r5, #16]
 8007b22:	b920      	cbnz	r0, 8007b2e <_svfiprintf_r+0x2e>
 8007b24:	230c      	movs	r3, #12
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	e0d0      	b.n	8007cd0 <_svfiprintf_r+0x1d0>
 8007b2e:	2340      	movs	r3, #64	; 0x40
 8007b30:	616b      	str	r3, [r5, #20]
 8007b32:	2300      	movs	r3, #0
 8007b34:	9309      	str	r3, [sp, #36]	; 0x24
 8007b36:	2320      	movs	r3, #32
 8007b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b40:	2330      	movs	r3, #48	; 0x30
 8007b42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ce8 <_svfiprintf_r+0x1e8>
 8007b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b4a:	f04f 0901 	mov.w	r9, #1
 8007b4e:	4623      	mov	r3, r4
 8007b50:	469a      	mov	sl, r3
 8007b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b56:	b10a      	cbz	r2, 8007b5c <_svfiprintf_r+0x5c>
 8007b58:	2a25      	cmp	r2, #37	; 0x25
 8007b5a:	d1f9      	bne.n	8007b50 <_svfiprintf_r+0x50>
 8007b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b60:	d00b      	beq.n	8007b7a <_svfiprintf_r+0x7a>
 8007b62:	465b      	mov	r3, fp
 8007b64:	4622      	mov	r2, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7ff ff6f 	bl	8007a4c <__ssputs_r>
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f000 80a9 	beq.w	8007cc6 <_svfiprintf_r+0x1c6>
 8007b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b76:	445a      	add	r2, fp
 8007b78:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 80a1 	beq.w	8007cc6 <_svfiprintf_r+0x1c6>
 8007b84:	2300      	movs	r3, #0
 8007b86:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b8e:	f10a 0a01 	add.w	sl, sl, #1
 8007b92:	9304      	str	r3, [sp, #16]
 8007b94:	9307      	str	r3, [sp, #28]
 8007b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b9c:	4654      	mov	r4, sl
 8007b9e:	2205      	movs	r2, #5
 8007ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba4:	4850      	ldr	r0, [pc, #320]	; (8007ce8 <_svfiprintf_r+0x1e8>)
 8007ba6:	f7f8 fb3b 	bl	8000220 <memchr>
 8007baa:	9a04      	ldr	r2, [sp, #16]
 8007bac:	b9d8      	cbnz	r0, 8007be6 <_svfiprintf_r+0xe6>
 8007bae:	06d0      	lsls	r0, r2, #27
 8007bb0:	bf44      	itt	mi
 8007bb2:	2320      	movmi	r3, #32
 8007bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bb8:	0711      	lsls	r1, r2, #28
 8007bba:	bf44      	itt	mi
 8007bbc:	232b      	movmi	r3, #43	; 0x2b
 8007bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc8:	d015      	beq.n	8007bf6 <_svfiprintf_r+0xf6>
 8007bca:	9a07      	ldr	r2, [sp, #28]
 8007bcc:	4654      	mov	r4, sl
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f04f 0c0a 	mov.w	ip, #10
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bda:	3b30      	subs	r3, #48	; 0x30
 8007bdc:	2b09      	cmp	r3, #9
 8007bde:	d94d      	bls.n	8007c7c <_svfiprintf_r+0x17c>
 8007be0:	b1b0      	cbz	r0, 8007c10 <_svfiprintf_r+0x110>
 8007be2:	9207      	str	r2, [sp, #28]
 8007be4:	e014      	b.n	8007c10 <_svfiprintf_r+0x110>
 8007be6:	eba0 0308 	sub.w	r3, r0, r8
 8007bea:	fa09 f303 	lsl.w	r3, r9, r3
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	46a2      	mov	sl, r4
 8007bf4:	e7d2      	b.n	8007b9c <_svfiprintf_r+0x9c>
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	1d19      	adds	r1, r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	9103      	str	r1, [sp, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bfbb      	ittet	lt
 8007c02:	425b      	neglt	r3, r3
 8007c04:	f042 0202 	orrlt.w	r2, r2, #2
 8007c08:	9307      	strge	r3, [sp, #28]
 8007c0a:	9307      	strlt	r3, [sp, #28]
 8007c0c:	bfb8      	it	lt
 8007c0e:	9204      	strlt	r2, [sp, #16]
 8007c10:	7823      	ldrb	r3, [r4, #0]
 8007c12:	2b2e      	cmp	r3, #46	; 0x2e
 8007c14:	d10c      	bne.n	8007c30 <_svfiprintf_r+0x130>
 8007c16:	7863      	ldrb	r3, [r4, #1]
 8007c18:	2b2a      	cmp	r3, #42	; 0x2a
 8007c1a:	d134      	bne.n	8007c86 <_svfiprintf_r+0x186>
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	9203      	str	r2, [sp, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bfb8      	it	lt
 8007c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c2c:	3402      	adds	r4, #2
 8007c2e:	9305      	str	r3, [sp, #20]
 8007c30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007cf8 <_svfiprintf_r+0x1f8>
 8007c34:	7821      	ldrb	r1, [r4, #0]
 8007c36:	2203      	movs	r2, #3
 8007c38:	4650      	mov	r0, sl
 8007c3a:	f7f8 faf1 	bl	8000220 <memchr>
 8007c3e:	b138      	cbz	r0, 8007c50 <_svfiprintf_r+0x150>
 8007c40:	9b04      	ldr	r3, [sp, #16]
 8007c42:	eba0 000a 	sub.w	r0, r0, sl
 8007c46:	2240      	movs	r2, #64	; 0x40
 8007c48:	4082      	lsls	r2, r0
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	9304      	str	r3, [sp, #16]
 8007c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c54:	4825      	ldr	r0, [pc, #148]	; (8007cec <_svfiprintf_r+0x1ec>)
 8007c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c5a:	2206      	movs	r2, #6
 8007c5c:	f7f8 fae0 	bl	8000220 <memchr>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d038      	beq.n	8007cd6 <_svfiprintf_r+0x1d6>
 8007c64:	4b22      	ldr	r3, [pc, #136]	; (8007cf0 <_svfiprintf_r+0x1f0>)
 8007c66:	bb1b      	cbnz	r3, 8007cb0 <_svfiprintf_r+0x1b0>
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	3307      	adds	r3, #7
 8007c6c:	f023 0307 	bic.w	r3, r3, #7
 8007c70:	3308      	adds	r3, #8
 8007c72:	9303      	str	r3, [sp, #12]
 8007c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c76:	4433      	add	r3, r6
 8007c78:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7a:	e768      	b.n	8007b4e <_svfiprintf_r+0x4e>
 8007c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c80:	460c      	mov	r4, r1
 8007c82:	2001      	movs	r0, #1
 8007c84:	e7a6      	b.n	8007bd4 <_svfiprintf_r+0xd4>
 8007c86:	2300      	movs	r3, #0
 8007c88:	3401      	adds	r4, #1
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	f04f 0c0a 	mov.w	ip, #10
 8007c92:	4620      	mov	r0, r4
 8007c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c98:	3a30      	subs	r2, #48	; 0x30
 8007c9a:	2a09      	cmp	r2, #9
 8007c9c:	d903      	bls.n	8007ca6 <_svfiprintf_r+0x1a6>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0c6      	beq.n	8007c30 <_svfiprintf_r+0x130>
 8007ca2:	9105      	str	r1, [sp, #20]
 8007ca4:	e7c4      	b.n	8007c30 <_svfiprintf_r+0x130>
 8007ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007caa:	4604      	mov	r4, r0
 8007cac:	2301      	movs	r3, #1
 8007cae:	e7f0      	b.n	8007c92 <_svfiprintf_r+0x192>
 8007cb0:	ab03      	add	r3, sp, #12
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <_svfiprintf_r+0x1f4>)
 8007cb8:	a904      	add	r1, sp, #16
 8007cba:	4638      	mov	r0, r7
 8007cbc:	f3af 8000 	nop.w
 8007cc0:	1c42      	adds	r2, r0, #1
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	d1d6      	bne.n	8007c74 <_svfiprintf_r+0x174>
 8007cc6:	89ab      	ldrh	r3, [r5, #12]
 8007cc8:	065b      	lsls	r3, r3, #25
 8007cca:	f53f af2d 	bmi.w	8007b28 <_svfiprintf_r+0x28>
 8007cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cd0:	b01d      	add	sp, #116	; 0x74
 8007cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd6:	ab03      	add	r3, sp, #12
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	462a      	mov	r2, r5
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <_svfiprintf_r+0x1f4>)
 8007cde:	a904      	add	r1, sp, #16
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f000 f879 	bl	8007dd8 <_printf_i>
 8007ce6:	e7eb      	b.n	8007cc0 <_svfiprintf_r+0x1c0>
 8007ce8:	080081e8 	.word	0x080081e8
 8007cec:	080081f2 	.word	0x080081f2
 8007cf0:	00000000 	.word	0x00000000
 8007cf4:	08007a4d 	.word	0x08007a4d
 8007cf8:	080081ee 	.word	0x080081ee

08007cfc <_printf_common>:
 8007cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	4616      	mov	r6, r2
 8007d02:	4699      	mov	r9, r3
 8007d04:	688a      	ldr	r2, [r1, #8]
 8007d06:	690b      	ldr	r3, [r1, #16]
 8007d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	bfb8      	it	lt
 8007d10:	4613      	movlt	r3, r2
 8007d12:	6033      	str	r3, [r6, #0]
 8007d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d18:	4607      	mov	r7, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	b10a      	cbz	r2, 8007d22 <_printf_common+0x26>
 8007d1e:	3301      	adds	r3, #1
 8007d20:	6033      	str	r3, [r6, #0]
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	0699      	lsls	r1, r3, #26
 8007d26:	bf42      	ittt	mi
 8007d28:	6833      	ldrmi	r3, [r6, #0]
 8007d2a:	3302      	addmi	r3, #2
 8007d2c:	6033      	strmi	r3, [r6, #0]
 8007d2e:	6825      	ldr	r5, [r4, #0]
 8007d30:	f015 0506 	ands.w	r5, r5, #6
 8007d34:	d106      	bne.n	8007d44 <_printf_common+0x48>
 8007d36:	f104 0a19 	add.w	sl, r4, #25
 8007d3a:	68e3      	ldr	r3, [r4, #12]
 8007d3c:	6832      	ldr	r2, [r6, #0]
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	42ab      	cmp	r3, r5
 8007d42:	dc26      	bgt.n	8007d92 <_printf_common+0x96>
 8007d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d48:	1e13      	subs	r3, r2, #0
 8007d4a:	6822      	ldr	r2, [r4, #0]
 8007d4c:	bf18      	it	ne
 8007d4e:	2301      	movne	r3, #1
 8007d50:	0692      	lsls	r2, r2, #26
 8007d52:	d42b      	bmi.n	8007dac <_printf_common+0xb0>
 8007d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d58:	4649      	mov	r1, r9
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	47c0      	blx	r8
 8007d5e:	3001      	adds	r0, #1
 8007d60:	d01e      	beq.n	8007da0 <_printf_common+0xa4>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	6922      	ldr	r2, [r4, #16]
 8007d66:	f003 0306 	and.w	r3, r3, #6
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	bf02      	ittt	eq
 8007d6e:	68e5      	ldreq	r5, [r4, #12]
 8007d70:	6833      	ldreq	r3, [r6, #0]
 8007d72:	1aed      	subeq	r5, r5, r3
 8007d74:	68a3      	ldr	r3, [r4, #8]
 8007d76:	bf0c      	ite	eq
 8007d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d7c:	2500      	movne	r5, #0
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	bfc4      	itt	gt
 8007d82:	1a9b      	subgt	r3, r3, r2
 8007d84:	18ed      	addgt	r5, r5, r3
 8007d86:	2600      	movs	r6, #0
 8007d88:	341a      	adds	r4, #26
 8007d8a:	42b5      	cmp	r5, r6
 8007d8c:	d11a      	bne.n	8007dc4 <_printf_common+0xc8>
 8007d8e:	2000      	movs	r0, #0
 8007d90:	e008      	b.n	8007da4 <_printf_common+0xa8>
 8007d92:	2301      	movs	r3, #1
 8007d94:	4652      	mov	r2, sl
 8007d96:	4649      	mov	r1, r9
 8007d98:	4638      	mov	r0, r7
 8007d9a:	47c0      	blx	r8
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d103      	bne.n	8007da8 <_printf_common+0xac>
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da8:	3501      	adds	r5, #1
 8007daa:	e7c6      	b.n	8007d3a <_printf_common+0x3e>
 8007dac:	18e1      	adds	r1, r4, r3
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	2030      	movs	r0, #48	; 0x30
 8007db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007db6:	4422      	add	r2, r4
 8007db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dc0:	3302      	adds	r3, #2
 8007dc2:	e7c7      	b.n	8007d54 <_printf_common+0x58>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	4649      	mov	r1, r9
 8007dca:	4638      	mov	r0, r7
 8007dcc:	47c0      	blx	r8
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d0e6      	beq.n	8007da0 <_printf_common+0xa4>
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	e7d9      	b.n	8007d8a <_printf_common+0x8e>
	...

08007dd8 <_printf_i>:
 8007dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ddc:	7e0f      	ldrb	r7, [r1, #24]
 8007dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007de0:	2f78      	cmp	r7, #120	; 0x78
 8007de2:	4691      	mov	r9, r2
 8007de4:	4680      	mov	r8, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	469a      	mov	sl, r3
 8007dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dee:	d807      	bhi.n	8007e00 <_printf_i+0x28>
 8007df0:	2f62      	cmp	r7, #98	; 0x62
 8007df2:	d80a      	bhi.n	8007e0a <_printf_i+0x32>
 8007df4:	2f00      	cmp	r7, #0
 8007df6:	f000 80d4 	beq.w	8007fa2 <_printf_i+0x1ca>
 8007dfa:	2f58      	cmp	r7, #88	; 0x58
 8007dfc:	f000 80c0 	beq.w	8007f80 <_printf_i+0x1a8>
 8007e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e08:	e03a      	b.n	8007e80 <_printf_i+0xa8>
 8007e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e0e:	2b15      	cmp	r3, #21
 8007e10:	d8f6      	bhi.n	8007e00 <_printf_i+0x28>
 8007e12:	a101      	add	r1, pc, #4	; (adr r1, 8007e18 <_printf_i+0x40>)
 8007e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e18:	08007e71 	.word	0x08007e71
 8007e1c:	08007e85 	.word	0x08007e85
 8007e20:	08007e01 	.word	0x08007e01
 8007e24:	08007e01 	.word	0x08007e01
 8007e28:	08007e01 	.word	0x08007e01
 8007e2c:	08007e01 	.word	0x08007e01
 8007e30:	08007e85 	.word	0x08007e85
 8007e34:	08007e01 	.word	0x08007e01
 8007e38:	08007e01 	.word	0x08007e01
 8007e3c:	08007e01 	.word	0x08007e01
 8007e40:	08007e01 	.word	0x08007e01
 8007e44:	08007f89 	.word	0x08007f89
 8007e48:	08007eb1 	.word	0x08007eb1
 8007e4c:	08007f43 	.word	0x08007f43
 8007e50:	08007e01 	.word	0x08007e01
 8007e54:	08007e01 	.word	0x08007e01
 8007e58:	08007fab 	.word	0x08007fab
 8007e5c:	08007e01 	.word	0x08007e01
 8007e60:	08007eb1 	.word	0x08007eb1
 8007e64:	08007e01 	.word	0x08007e01
 8007e68:	08007e01 	.word	0x08007e01
 8007e6c:	08007f4b 	.word	0x08007f4b
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	1d1a      	adds	r2, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	602a      	str	r2, [r5, #0]
 8007e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e80:	2301      	movs	r3, #1
 8007e82:	e09f      	b.n	8007fc4 <_printf_i+0x1ec>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	682b      	ldr	r3, [r5, #0]
 8007e88:	0607      	lsls	r7, r0, #24
 8007e8a:	f103 0104 	add.w	r1, r3, #4
 8007e8e:	6029      	str	r1, [r5, #0]
 8007e90:	d501      	bpl.n	8007e96 <_printf_i+0xbe>
 8007e92:	681e      	ldr	r6, [r3, #0]
 8007e94:	e003      	b.n	8007e9e <_printf_i+0xc6>
 8007e96:	0646      	lsls	r6, r0, #25
 8007e98:	d5fb      	bpl.n	8007e92 <_printf_i+0xba>
 8007e9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	da03      	bge.n	8007eaa <_printf_i+0xd2>
 8007ea2:	232d      	movs	r3, #45	; 0x2d
 8007ea4:	4276      	negs	r6, r6
 8007ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eaa:	485a      	ldr	r0, [pc, #360]	; (8008014 <_printf_i+0x23c>)
 8007eac:	230a      	movs	r3, #10
 8007eae:	e012      	b.n	8007ed6 <_printf_i+0xfe>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	6820      	ldr	r0, [r4, #0]
 8007eb4:	1d19      	adds	r1, r3, #4
 8007eb6:	6029      	str	r1, [r5, #0]
 8007eb8:	0605      	lsls	r5, r0, #24
 8007eba:	d501      	bpl.n	8007ec0 <_printf_i+0xe8>
 8007ebc:	681e      	ldr	r6, [r3, #0]
 8007ebe:	e002      	b.n	8007ec6 <_printf_i+0xee>
 8007ec0:	0641      	lsls	r1, r0, #25
 8007ec2:	d5fb      	bpl.n	8007ebc <_printf_i+0xe4>
 8007ec4:	881e      	ldrh	r6, [r3, #0]
 8007ec6:	4853      	ldr	r0, [pc, #332]	; (8008014 <_printf_i+0x23c>)
 8007ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8007eca:	bf0c      	ite	eq
 8007ecc:	2308      	moveq	r3, #8
 8007ece:	230a      	movne	r3, #10
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ed6:	6865      	ldr	r5, [r4, #4]
 8007ed8:	60a5      	str	r5, [r4, #8]
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	bfa2      	ittt	ge
 8007ede:	6821      	ldrge	r1, [r4, #0]
 8007ee0:	f021 0104 	bicge.w	r1, r1, #4
 8007ee4:	6021      	strge	r1, [r4, #0]
 8007ee6:	b90e      	cbnz	r6, 8007eec <_printf_i+0x114>
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	d04b      	beq.n	8007f84 <_printf_i+0x1ac>
 8007eec:	4615      	mov	r5, r2
 8007eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ef6:	5dc7      	ldrb	r7, [r0, r7]
 8007ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007efc:	4637      	mov	r7, r6
 8007efe:	42bb      	cmp	r3, r7
 8007f00:	460e      	mov	r6, r1
 8007f02:	d9f4      	bls.n	8007eee <_printf_i+0x116>
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d10b      	bne.n	8007f20 <_printf_i+0x148>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	07de      	lsls	r6, r3, #31
 8007f0c:	d508      	bpl.n	8007f20 <_printf_i+0x148>
 8007f0e:	6923      	ldr	r3, [r4, #16]
 8007f10:	6861      	ldr	r1, [r4, #4]
 8007f12:	4299      	cmp	r1, r3
 8007f14:	bfde      	ittt	le
 8007f16:	2330      	movle	r3, #48	; 0x30
 8007f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f20:	1b52      	subs	r2, r2, r5
 8007f22:	6122      	str	r2, [r4, #16]
 8007f24:	f8cd a000 	str.w	sl, [sp]
 8007f28:	464b      	mov	r3, r9
 8007f2a:	aa03      	add	r2, sp, #12
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f7ff fee4 	bl	8007cfc <_printf_common>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d14a      	bne.n	8007fce <_printf_i+0x1f6>
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	b004      	add	sp, #16
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	f043 0320 	orr.w	r3, r3, #32
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	4833      	ldr	r0, [pc, #204]	; (8008018 <_printf_i+0x240>)
 8007f4c:	2778      	movs	r7, #120	; 0x78
 8007f4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	6829      	ldr	r1, [r5, #0]
 8007f56:	061f      	lsls	r7, r3, #24
 8007f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f5c:	d402      	bmi.n	8007f64 <_printf_i+0x18c>
 8007f5e:	065f      	lsls	r7, r3, #25
 8007f60:	bf48      	it	mi
 8007f62:	b2b6      	uxthmi	r6, r6
 8007f64:	07df      	lsls	r7, r3, #31
 8007f66:	bf48      	it	mi
 8007f68:	f043 0320 	orrmi.w	r3, r3, #32
 8007f6c:	6029      	str	r1, [r5, #0]
 8007f6e:	bf48      	it	mi
 8007f70:	6023      	strmi	r3, [r4, #0]
 8007f72:	b91e      	cbnz	r6, 8007f7c <_printf_i+0x1a4>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	f023 0320 	bic.w	r3, r3, #32
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	e7a7      	b.n	8007ed0 <_printf_i+0xf8>
 8007f80:	4824      	ldr	r0, [pc, #144]	; (8008014 <_printf_i+0x23c>)
 8007f82:	e7e4      	b.n	8007f4e <_printf_i+0x176>
 8007f84:	4615      	mov	r5, r2
 8007f86:	e7bd      	b.n	8007f04 <_printf_i+0x12c>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	6826      	ldr	r6, [r4, #0]
 8007f8c:	6961      	ldr	r1, [r4, #20]
 8007f8e:	1d18      	adds	r0, r3, #4
 8007f90:	6028      	str	r0, [r5, #0]
 8007f92:	0635      	lsls	r5, r6, #24
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	d501      	bpl.n	8007f9c <_printf_i+0x1c4>
 8007f98:	6019      	str	r1, [r3, #0]
 8007f9a:	e002      	b.n	8007fa2 <_printf_i+0x1ca>
 8007f9c:	0670      	lsls	r0, r6, #25
 8007f9e:	d5fb      	bpl.n	8007f98 <_printf_i+0x1c0>
 8007fa0:	8019      	strh	r1, [r3, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	4615      	mov	r5, r2
 8007fa8:	e7bc      	b.n	8007f24 <_printf_i+0x14c>
 8007faa:	682b      	ldr	r3, [r5, #0]
 8007fac:	1d1a      	adds	r2, r3, #4
 8007fae:	602a      	str	r2, [r5, #0]
 8007fb0:	681d      	ldr	r5, [r3, #0]
 8007fb2:	6862      	ldr	r2, [r4, #4]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7f8 f932 	bl	8000220 <memchr>
 8007fbc:	b108      	cbz	r0, 8007fc2 <_printf_i+0x1ea>
 8007fbe:	1b40      	subs	r0, r0, r5
 8007fc0:	6060      	str	r0, [r4, #4]
 8007fc2:	6863      	ldr	r3, [r4, #4]
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fcc:	e7aa      	b.n	8007f24 <_printf_i+0x14c>
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d0ad      	beq.n	8007f38 <_printf_i+0x160>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	079b      	lsls	r3, r3, #30
 8007fe0:	d413      	bmi.n	800800a <_printf_i+0x232>
 8007fe2:	68e0      	ldr	r0, [r4, #12]
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	bfb8      	it	lt
 8007fea:	4618      	movlt	r0, r3
 8007fec:	e7a6      	b.n	8007f3c <_printf_i+0x164>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	47d0      	blx	sl
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d09d      	beq.n	8007f38 <_printf_i+0x160>
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	68e3      	ldr	r3, [r4, #12]
 8008000:	9903      	ldr	r1, [sp, #12]
 8008002:	1a5b      	subs	r3, r3, r1
 8008004:	42ab      	cmp	r3, r5
 8008006:	dcf2      	bgt.n	8007fee <_printf_i+0x216>
 8008008:	e7eb      	b.n	8007fe2 <_printf_i+0x20a>
 800800a:	2500      	movs	r5, #0
 800800c:	f104 0619 	add.w	r6, r4, #25
 8008010:	e7f5      	b.n	8007ffe <_printf_i+0x226>
 8008012:	bf00      	nop
 8008014:	080081f9 	.word	0x080081f9
 8008018:	0800820a 	.word	0x0800820a

0800801c <memmove>:
 800801c:	4288      	cmp	r0, r1
 800801e:	b510      	push	{r4, lr}
 8008020:	eb01 0402 	add.w	r4, r1, r2
 8008024:	d902      	bls.n	800802c <memmove+0x10>
 8008026:	4284      	cmp	r4, r0
 8008028:	4623      	mov	r3, r4
 800802a:	d807      	bhi.n	800803c <memmove+0x20>
 800802c:	1e43      	subs	r3, r0, #1
 800802e:	42a1      	cmp	r1, r4
 8008030:	d008      	beq.n	8008044 <memmove+0x28>
 8008032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800803a:	e7f8      	b.n	800802e <memmove+0x12>
 800803c:	4402      	add	r2, r0
 800803e:	4601      	mov	r1, r0
 8008040:	428a      	cmp	r2, r1
 8008042:	d100      	bne.n	8008046 <memmove+0x2a>
 8008044:	bd10      	pop	{r4, pc}
 8008046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800804a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800804e:	e7f7      	b.n	8008040 <memmove+0x24>

08008050 <_sbrk_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d06      	ldr	r5, [pc, #24]	; (800806c <_sbrk_r+0x1c>)
 8008054:	2300      	movs	r3, #0
 8008056:	4604      	mov	r4, r0
 8008058:	4608      	mov	r0, r1
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	f7f9 fcf0 	bl	8001a40 <_sbrk>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_sbrk_r+0x1a>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	b103      	cbz	r3, 800806a <_sbrk_r+0x1a>
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	200004a8 	.word	0x200004a8

08008070 <_realloc_r>:
 8008070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	4680      	mov	r8, r0
 8008076:	4614      	mov	r4, r2
 8008078:	460e      	mov	r6, r1
 800807a:	b921      	cbnz	r1, 8008086 <_realloc_r+0x16>
 800807c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008080:	4611      	mov	r1, r2
 8008082:	f7ff bc57 	b.w	8007934 <_malloc_r>
 8008086:	b92a      	cbnz	r2, 8008094 <_realloc_r+0x24>
 8008088:	f7ff fbe8 	bl	800785c <_free_r>
 800808c:	4625      	mov	r5, r4
 800808e:	4628      	mov	r0, r5
 8008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008094:	f000 f81b 	bl	80080ce <_malloc_usable_size_r>
 8008098:	4284      	cmp	r4, r0
 800809a:	4607      	mov	r7, r0
 800809c:	d802      	bhi.n	80080a4 <_realloc_r+0x34>
 800809e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080a2:	d812      	bhi.n	80080ca <_realloc_r+0x5a>
 80080a4:	4621      	mov	r1, r4
 80080a6:	4640      	mov	r0, r8
 80080a8:	f7ff fc44 	bl	8007934 <_malloc_r>
 80080ac:	4605      	mov	r5, r0
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d0ed      	beq.n	800808e <_realloc_r+0x1e>
 80080b2:	42bc      	cmp	r4, r7
 80080b4:	4622      	mov	r2, r4
 80080b6:	4631      	mov	r1, r6
 80080b8:	bf28      	it	cs
 80080ba:	463a      	movcs	r2, r7
 80080bc:	f7ff fbc0 	bl	8007840 <memcpy>
 80080c0:	4631      	mov	r1, r6
 80080c2:	4640      	mov	r0, r8
 80080c4:	f7ff fbca 	bl	800785c <_free_r>
 80080c8:	e7e1      	b.n	800808e <_realloc_r+0x1e>
 80080ca:	4635      	mov	r5, r6
 80080cc:	e7df      	b.n	800808e <_realloc_r+0x1e>

080080ce <_malloc_usable_size_r>:
 80080ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d2:	1f18      	subs	r0, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	bfbc      	itt	lt
 80080d8:	580b      	ldrlt	r3, [r1, r0]
 80080da:	18c0      	addlt	r0, r0, r3
 80080dc:	4770      	bx	lr

080080de <fmaxf>:
 80080de:	b508      	push	{r3, lr}
 80080e0:	ed2d 8b02 	vpush	{d8}
 80080e4:	eeb0 8a40 	vmov.f32	s16, s0
 80080e8:	eef0 8a60 	vmov.f32	s17, s1
 80080ec:	f000 f82e 	bl	800814c <__fpclassifyf>
 80080f0:	b148      	cbz	r0, 8008106 <fmaxf+0x28>
 80080f2:	eeb0 0a68 	vmov.f32	s0, s17
 80080f6:	f000 f829 	bl	800814c <__fpclassifyf>
 80080fa:	b130      	cbz	r0, 800810a <fmaxf+0x2c>
 80080fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008104:	dc01      	bgt.n	800810a <fmaxf+0x2c>
 8008106:	eeb0 8a68 	vmov.f32	s16, s17
 800810a:	eeb0 0a48 	vmov.f32	s0, s16
 800810e:	ecbd 8b02 	vpop	{d8}
 8008112:	bd08      	pop	{r3, pc}

08008114 <fminf>:
 8008114:	b508      	push	{r3, lr}
 8008116:	ed2d 8b02 	vpush	{d8}
 800811a:	eeb0 8a40 	vmov.f32	s16, s0
 800811e:	eef0 8a60 	vmov.f32	s17, s1
 8008122:	f000 f813 	bl	800814c <__fpclassifyf>
 8008126:	b148      	cbz	r0, 800813c <fminf+0x28>
 8008128:	eeb0 0a68 	vmov.f32	s0, s17
 800812c:	f000 f80e 	bl	800814c <__fpclassifyf>
 8008130:	b130      	cbz	r0, 8008140 <fminf+0x2c>
 8008132:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800813a:	d401      	bmi.n	8008140 <fminf+0x2c>
 800813c:	eeb0 8a68 	vmov.f32	s16, s17
 8008140:	eeb0 0a48 	vmov.f32	s0, s16
 8008144:	ecbd 8b02 	vpop	{d8}
 8008148:	bd08      	pop	{r3, pc}
	...

0800814c <__fpclassifyf>:
 800814c:	ee10 3a10 	vmov	r3, s0
 8008150:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8008154:	d00d      	beq.n	8008172 <__fpclassifyf+0x26>
 8008156:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800815a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800815e:	d30a      	bcc.n	8008176 <__fpclassifyf+0x2a>
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <__fpclassifyf+0x34>)
 8008162:	1e42      	subs	r2, r0, #1
 8008164:	429a      	cmp	r2, r3
 8008166:	d908      	bls.n	800817a <__fpclassifyf+0x2e>
 8008168:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800816c:	4258      	negs	r0, r3
 800816e:	4158      	adcs	r0, r3
 8008170:	4770      	bx	lr
 8008172:	2002      	movs	r0, #2
 8008174:	4770      	bx	lr
 8008176:	2004      	movs	r0, #4
 8008178:	4770      	bx	lr
 800817a:	2003      	movs	r0, #3
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	007ffffe 	.word	0x007ffffe

08008184 <_init>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	bf00      	nop
 8008188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818a:	bc08      	pop	{r3}
 800818c:	469e      	mov	lr, r3
 800818e:	4770      	bx	lr

08008190 <_fini>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	bf00      	nop
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr
