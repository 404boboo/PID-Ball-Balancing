
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060ec  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080062b4  080062b4  000162b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d0  080063d0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d8  080063d8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080063e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000006c  0800644c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800644c  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cd8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027cb  00000000  00000000  00031db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00034588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b84  00000000  00000000  00035458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003aa4  00000000  00000000  00035fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013105  00000000  00000000  00039a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f07c8  00000000  00000000  0004cb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f48  00000000  00000000  0013d350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00141298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800629c 	.word	0x0800629c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000070 	.word	0x20000070
 8000204:	0800629c 	.word	0x0800629c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <IFX_EMA_Init>:
 *
 *  Created on: Jan 26, 2024
 *      Author: yazed almazroua
 */
#include "HP_filter.h"
void IFX_EMA_Init(IFX_EMA *filt , float beta){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	ed87 0a00 	vstr	s0, [r7]

	//set filter coef
	IFX_EMA_SetBeta(filt,beta);
 8000510:	ed97 0a00 	vldr	s0, [r7]
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 f80c 	bl	8000532 <IFX_EMA_SetBeta>

	//clear filter input
	filt->inp = 0.0f;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f04f 0200 	mov.w	r2, #0
 8000520:	605a      	str	r2, [r3, #4]

	//clear filter output

	filt->out = 0.0f;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f04f 0200 	mov.w	r2, #0
 8000528:	609a      	str	r2, [r3, #8]



}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <IFX_EMA_SetBeta>:
void IFX_EMA_SetBeta(IFX_EMA *filt,float beta){
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	ed87 0a00 	vstr	s0, [r7]

	//clamp beta 0 to 1.00
	if(beta > 1.0f){
 800053e:	edd7 7a00 	vldr	s15, [r7]
 8000542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800054a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800054e:	dd03      	ble.n	8000558 <IFX_EMA_SetBeta+0x26>
		beta = 1.0f;
 8000550:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	e009      	b.n	800056c <IFX_EMA_SetBeta+0x3a>
	}
	else if(beta <0.0f){
 8000558:	edd7 7a00 	vldr	s15, [r7]
 800055c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000564:	d502      	bpl.n	800056c <IFX_EMA_SetBeta+0x3a>
		beta = 0.0f;
 8000566:	f04f 0300 	mov.w	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
	}
	//set beta coef
	filt->beta = beta;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	601a      	str	r2, [r3, #0]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <IFX_EMA_Update>:
float IFX_EMA_Update(IFX_EMA *filt,float inp){
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	ed87 0a00 	vstr	s0, [r7]

	//compute current output sample
	filt->out = 0.5f *(2.0f - filt->beta) * (inp - filt->inp) + (1.0f - filt->beta) * filt->out;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000598:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800059c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80005a6:	edd7 6a00 	vldr	s13, [r7]
 80005aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80005ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80005bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80005c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edc3 7a02 	vstr	s15, [r3, #8]

	//store current filter input for next output

	filt->inp = inp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	605a      	str	r2, [r3, #4]

	return filt->out;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	ee07 3a90 	vmov	s15, r3
}
 80005e2:	eeb0 0a67 	vmov.f32	s0, s15
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <SERVO_Init>:
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 90.0f);
 80005f8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000614 <SERVO_Init+0x24>
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f80b 	bl	8000618 <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f8d9 	bl	80007bc <PWM_Init>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	42b40000 	.word	0x42b40000

08000618 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 120.0f, 160.0f);
 8000624:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000688 <SERVO_WritePosition+0x70>
 8000628:	ed97 0a00 	vldr	s0, [r7]
 800062c:	f005 fdff 	bl	800622e <fminf>
 8000630:	eef0 7a40 	vmov.f32	s15, s0
 8000634:	eddf 0a15 	vldr	s1, [pc, #84]	; 800068c <SERVO_WritePosition+0x74>
 8000638:	eeb0 0a67 	vmov.f32	s0, s15
 800063c:	f005 fddc 	bl	80061f8 <fmaxf>
 8000640:	eef0 7a40 	vmov.f32	s15, s0
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 120.0f, 160.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000650:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800068c <SERVO_WritePosition+0x74>
 8000654:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000658:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000690 <SERVO_WritePosition+0x78>
 800065c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000660:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000668:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800066c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000670:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	ed97 0a03 	vldr	s0, [r7, #12]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f8b6 	bl	80007ec <PWM_WriteDuty>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	43200000 	.word	0x43200000
 800068c:	42f00000 	.word	0x42f00000
 8000690:	42200000 	.word	0x42200000

08000694 <hc_sr04_init>:
/* Public variables ----------------------------------------------------------*/

/*Private functions------------------------------------------------*/

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fed0 	bl	8003460 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4610      	mov	r0, r2
 80006cc:	f002 fd6c 	bl	80031a8 <HAL_TIM_PWM_Start>
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <hc_sr04_convert_us_to_cm>:

uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <hc_sr04_convert_us_to_cm+0x20>)
 80006e4:	fba2 2303 	umull	r2, r3, r2, r3
 80006e8:	095b      	lsrs	r3, r3, #5
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	8d3dcb09 	.word	0x8d3dcb09

080006fc <position>:
int position(float dis1, float dis2, float pos)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	ed87 0a03 	vstr	s0, [r7, #12]
 8000706:	edc7 0a02 	vstr	s1, [r7, #8]
 800070a:	ed87 1a01 	vstr	s2, [r7, #4]
 pos = 0;
 800070e:	f04f 0300 	mov.w	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
if (dis1<29){
 8000714:	edd7 7a03 	vldr	s15, [r7, #12]
 8000718:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 800071c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000724:	d502      	bpl.n	800072c <position+0x30>
    pos = dis1;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	e037      	b.n	800079c <position+0xa0>
}
else if(dis1 >=29 )
 800072c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000730:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073c:	db08      	blt.n	8000750 <position+0x54>
{
    pos = 60- dis2;
 800073e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80007b4 <position+0xb8>
 8000742:	edd7 7a02 	vldr	s15, [r7, #8]
 8000746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800074a:	edc7 7a01 	vstr	s15, [r7, #4]
 800074e:	e025      	b.n	800079c <position+0xa0>
}
else if (dis1>= 29 && dis1 <= 31 && dis2 >= 29 && dis2 <= 31){
 8000750:	edd7 7a03 	vldr	s15, [r7, #12]
 8000754:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000760:	db1c      	blt.n	800079c <position+0xa0>
 8000762:	edd7 7a03 	vldr	s15, [r7, #12]
 8000766:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800076a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800076e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000772:	d813      	bhi.n	800079c <position+0xa0>
 8000774:	edd7 7a02 	vldr	s15, [r7, #8]
 8000778:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 800077c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000784:	db0a      	blt.n	800079c <position+0xa0>
 8000786:	edd7 7a02 	vldr	s15, [r7, #8]
 800078a:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800078e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000796:	d801      	bhi.n	800079c <position+0xa0>
    pos = 30;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <position+0xbc>)
 800079a:	607b      	str	r3, [r7, #4]
}
return pos;
 800079c:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a4:	ee17 3a90 	vmov	r3, s15
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	42700000 	.word	0x42700000
 80007b8:	41f00000 	.word	0x41f00000

080007bc <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80007ca:	eeb0 0a67 	vmov.f32	s0, s15
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f80c 	bl	80007ec <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	4619      	mov	r1, r3
 80007de:	4610      	mov	r0, r2
 80007e0:	f002 fce2 	bl	80031a8 <HAL_TIM_PWM_Start>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80007f8:	edd7 7a00 	vldr	s15, [r7]
 80007fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000804:	d503      	bpl.n	800080e <PWM_WriteDuty+0x22>
    duty = 0.0;
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	e00a      	b.n	8000824 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800080e:	edd7 7a00 	vldr	s15, [r7]
 8000812:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80008d0 <PWM_WriteDuty+0xe4>
 8000816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800081a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081e:	dd01      	ble.n	8000824 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <PWM_WriteDuty+0xe8>)
 8000822:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	3301      	adds	r3, #1
 8000834:	ee07 3a90 	vmov	s15, r3
 8000838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800083c:	edd7 7a00 	vldr	s15, [r7]
 8000840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000844:	eddf 6a22 	vldr	s13, [pc, #136]	; 80008d0 <PWM_WriteDuty+0xe4>
 8000848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800084c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000850:	ee17 3a90 	vmov	r3, s15
 8000854:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d105      	bne.n	800086a <PWM_WriteDuty+0x7e>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000868:	e02c      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d105      	bne.n	800087e <PWM_WriteDuty+0x92>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800087c:	e022      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b08      	cmp	r3, #8
 8000884:	d105      	bne.n	8000892 <PWM_WriteDuty+0xa6>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000890:	e018      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b0c      	cmp	r3, #12
 8000898:	d105      	bne.n	80008a6 <PWM_WriteDuty+0xba>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008a4:	e00e      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b10      	cmp	r3, #16
 80008ac:	d105      	bne.n	80008ba <PWM_WriteDuty+0xce>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80008b8:	e004      	b.n	80008c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	42c80000 	.word	0x42c80000
 80008d4:	42c80000 	.word	0x42c80000

080008d8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM9_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]


}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <HAL_UART_RxCpltCallback+0x48>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d117      	bne.n	800092c <HAL_UART_RxCpltCallback+0x40>
  {
	SERVO_WritePosition(&hservo1, 180 - strtol((char*)tx_buffer, 0, 10));
 80008fc:	220a      	movs	r2, #10
 80008fe:	2100      	movs	r1, #0
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <HAL_UART_RxCpltCallback+0x4c>)
 8000902:	f005 fc3d 	bl	8006180 <strtol>
 8000906:	4603      	mov	r3, r0
 8000908:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000914:	eeb0 0a67 	vmov.f32	s0, s15
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <HAL_UART_RxCpltCallback+0x50>)
 800091a:	f7ff fe7d 	bl	8000618 <SERVO_WritePosition>
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 800091e:	2303      	movs	r3, #3
 8000920:	b29b      	uxth	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	4904      	ldr	r1, [pc, #16]	; (8000938 <HAL_UART_RxCpltCallback+0x4c>)
 8000926:	4803      	ldr	r0, [pc, #12]	; (8000934 <HAL_UART_RxCpltCallback+0x48>)
 8000928:	f004 f99e 	bl	8004c68 <HAL_UART_Receive_IT>
  }
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001b8 	.word	0x200001b8
 8000938:	2000027c 	.word	0x2000027c
 800093c:	20000000 	.word	0x20000000

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 fea1 	bl	800168a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f844 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 fade 	bl	8000f0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000950:	f000 faac 	bl	8000eac <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000954:	f000 f8ac 	bl	8000ab0 <MX_TIM1_Init>
  MX_TIM9_Init();
 8000958:	f000 fa46 	bl	8000de8 <MX_TIM9_Init>
  MX_TIM2_Init();
 800095c:	f000 f94c 	bl	8000bf8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000960:	f000 f9a4 	bl	8000cac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //initializing the high pass filter
  IFX_EMA_Init(&hpFilter, BETA_VALUE);
 8000964:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80009a8 <main+0x68>
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <main+0x6c>)
 800096a:	f7ff fdcb 	bl	8000504 <IFX_EMA_Init>
  // Start Sensor 1 & 2
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 800096e:	2308      	movs	r3, #8
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <main+0x70>)
 8000972:	4910      	ldr	r1, [pc, #64]	; (80009b4 <main+0x74>)
 8000974:	4810      	ldr	r0, [pc, #64]	; (80009b8 <main+0x78>)
 8000976:	f7ff fe8d 	bl	8000694 <hc_sr04_init>
  hc_sr04_init(&distance_sensor2, &htim3, &htim2, TIM_CHANNEL_3);
 800097a:	2308      	movs	r3, #8
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <main+0x70>)
 800097e:	490f      	ldr	r1, [pc, #60]	; (80009bc <main+0x7c>)
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <main+0x80>)
 8000982:	f7ff fe87 	bl	8000694 <hc_sr04_init>

  SERVO_Init(&hservo1);
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <main+0x84>)
 8000988:	f7ff fe32 	bl	80005f0 <SERVO_Init>
  SERVO_WritePosition(&hservo1, 130.0f);
 800098c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80009c8 <main+0x88>
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <main+0x84>)
 8000992:	f7ff fe41 	bl	8000618 <SERVO_WritePosition>
 HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8000996:	2303      	movs	r3, #3
 8000998:	b29b      	uxth	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	490b      	ldr	r1, [pc, #44]	; (80009cc <main+0x8c>)
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <main+0x90>)
 80009a0:	f004 f962 	bl	8004c68 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0x64>
 80009a6:	bf00      	nop
 80009a8:	3f4ccccd 	.word	0x3f4ccccd
 80009ac:	20000270 	.word	0x20000270
 80009b0:	200000d4 	.word	0x200000d4
 80009b4:	20000088 	.word	0x20000088
 80009b8:	20000250 	.word	0x20000250
 80009bc:	20000120 	.word	0x20000120
 80009c0:	20000260 	.word	0x20000260
 80009c4:	20000000 	.word	0x20000000
 80009c8:	43020000 	.word	0x43020000
 80009cc:	2000027c 	.word	0x2000027c
 80009d0:	200001b8 	.word	0x200001b8

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fbd6 	bl	8006194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009f8:	f001 fa0e 	bl	8001e18 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <SystemClock_Config+0xd4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <SystemClock_Config+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a24      	ldr	r2, [pc, #144]	; (8000aac <SystemClock_Config+0xd8>)
 8000a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <SystemClock_Config+0xd8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a40:	2304      	movs	r3, #4
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a44:	23d8      	movs	r3, #216	; 0xd8
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a4c:	2309      	movs	r3, #9
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fa3f 	bl	8001ed8 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a60:	f000 fbea 	bl	8001238 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a64:	f001 f9e8 	bl	8001e38 <HAL_PWREx_EnableOverDrive>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a6e:	f000 fbe3 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2107      	movs	r1, #7
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fcc5 	bl	8002420 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a9c:	f000 fbcc 	bl	8001238 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	; 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	; 0x40
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aec:	4b40      	ldr	r3, [pc, #256]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000aee:	4a41      	ldr	r2, [pc, #260]	; (8000bf4 <MX_TIM1_Init+0x144>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 8000af2:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000af4:	226b      	movs	r2, #107	; 0x6b
 8000af6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b3d      	ldr	r3, [pc, #244]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000afe:	4b3c      	ldr	r3, [pc, #240]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b0c:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b37      	ldr	r3, [pc, #220]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b18:	4835      	ldr	r0, [pc, #212]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b1a:	f002 fa97 	bl	800304c <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b24:	f000 fb88 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b32:	4619      	mov	r1, r3
 8000b34:	482e      	ldr	r0, [pc, #184]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b36:	f003 f8b3 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b40:	f000 fb7a 	bl	8001238 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b44:	482a      	ldr	r0, [pc, #168]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b46:	f002 fc29 	bl	800339c <HAL_TIM_IC_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b50:	f000 fb72 	bl	8001238 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b54:	2304      	movs	r3, #4
 8000b56:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b58:	2350      	movs	r3, #80	; 0x50
 8000b5a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b70:	f003 f960 	bl	8003e34 <HAL_TIM_SlaveConfigSynchro>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000b7a:	f000 fb5d 	bl	8001238 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b82:	2301      	movs	r3, #1
 8000b84:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	4816      	ldr	r0, [pc, #88]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000b98:	f002 fed1 	bl	800393e <HAL_TIM_IC_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ba2:	f000 fb49 	bl	8001238 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000baa:	2302      	movs	r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000bb8:	f002 fec1 	bl	800393e <HAL_TIM_IC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bc2:	f000 fb39 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_TIM1_Init+0x140>)
 8000bd8:	f003 ff4c 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000be2:	f000 fb29 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3740      	adds	r7, #64	; 0x40
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000088 	.word	0x20000088
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c26:	226b      	movs	r2, #107	; 0x6b
 8000c28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c32:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <MX_TIM2_Init+0xb0>)
 8000c34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c42:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c44:	f002 fa59 	bl	80030fa <HAL_TIM_PWM_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c4e:	f000 faf3 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c62:	f003 ff07 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c6c:	f000 fae4 	bl	8001238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c70:	2360      	movs	r3, #96	; 0x60
 8000c72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000c74:	230a      	movs	r3, #10
 8000c76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	2208      	movs	r2, #8
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c88:	f002 fef6 	bl	8003a78 <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c92:	f000 fad1 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM2_Init+0xac>)
 8000c98:	f000 fbb0 	bl	80013fc <HAL_TIM_MspPostInit>

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000d4 	.word	0x200000d4
 8000ca8:	00030d3f 	.word	0x00030d3f

08000cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000cea:	4a3e      	ldr	r2, [pc, #248]	; (8000de4 <MX_TIM3_Init+0x138>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8000cee:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000cf0:	226b      	movs	r2, #107	; 0x6b
 8000cf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cfa:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d0e:	4834      	ldr	r0, [pc, #208]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d10:	f002 f99c 	bl	800304c <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000d1a:	f000 fa8d 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d28:	4619      	mov	r1, r3
 8000d2a:	482d      	ldr	r0, [pc, #180]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d2c:	f002 ffb8 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d36:	f000 fa7f 	bl	8001238 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d3c:	f002 fb2e 	bl	800339c <HAL_TIM_IC_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d46:	f000 fa77 	bl	8001238 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d4e:	2350      	movs	r3, #80	; 0x50
 8000d50:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	481e      	ldr	r0, [pc, #120]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d66:	f003 f865 	bl	8003e34 <HAL_TIM_SlaveConfigSynchro>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000d70:	f000 fa62 	bl	8001238 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4814      	ldr	r0, [pc, #80]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000d8e:	f002 fdd6 	bl	800393e <HAL_TIM_IC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000d98:	f000 fa4e 	bl	8001238 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000da0:	2302      	movs	r3, #2
 8000da2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2204      	movs	r2, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000dae:	f002 fdc6 	bl	800393e <HAL_TIM_IC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8000db8:	f000 fa3e 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_TIM3_Init+0x134>)
 8000dca:	f003 fe53 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8000dd4:	f000 fa30 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3740      	adds	r7, #64	; 0x40
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000120 	.word	0x20000120
 8000de4:	40000400 	.word	0x40000400

08000de8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <MX_TIM9_Init+0xc0>)
 8000e12:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e16:	226b      	movs	r2, #107	; 0x6b
 8000e18:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e22:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e26:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000e34:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e36:	f002 f909 	bl	800304c <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 f9fa 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e52:	f002 ff25 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000e5c:	f000 f9ec 	bl	8001238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000e60:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e62:	f002 f94a 	bl	80030fa <HAL_TIM_PWM_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000e6c:	f000 f9e4 	bl	8001238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e70:	2360      	movs	r3, #96	; 0x60
 8000e72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e88:	f002 fdf6 	bl	8003a78 <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000e92:	f000 f9d1 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <MX_TIM9_Init+0xbc>)
 8000e98:	f000 fab0 	bl	80013fc <HAL_TIM_MspPostInit>

}
 8000e9c:	bf00      	nop
 8000e9e:	3730      	adds	r7, #48	; 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000016c 	.word	0x2000016c
 8000ea8:	40014000 	.word	0x40014000

08000eac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_USART3_UART_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ef0:	f003 fe6c 	bl	8004bcc <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000efa:	f000 f99d 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001b8 	.word	0x200001b8
 8000f08:	40004800 	.word	0x40004800

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f22:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a8b      	ldr	r2, [pc, #556]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b89      	ldr	r3, [pc, #548]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b86      	ldr	r3, [pc, #536]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a85      	ldr	r2, [pc, #532]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b83      	ldr	r3, [pc, #524]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	4b80      	ldr	r3, [pc, #512]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a7f      	ldr	r2, [pc, #508]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a79      	ldr	r2, [pc, #484]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b77      	ldr	r3, [pc, #476]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b74      	ldr	r3, [pc, #464]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a73      	ldr	r2, [pc, #460]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b71      	ldr	r3, [pc, #452]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <MX_GPIO_Init+0x248>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a6d      	ldr	r2, [pc, #436]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb2:	4b68      	ldr	r3, [pc, #416]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a67      	ldr	r2, [pc, #412]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b65      	ldr	r3, [pc, #404]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4862      	ldr	r0, [pc, #392]	; (8001158 <MX_GPIO_Init+0x24c>)
 8000fd0:	f000 ff08 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fda:	4860      	ldr	r0, [pc, #384]	; (800115c <MX_GPIO_Init+0x250>)
 8000fdc:	f000 ff02 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	485e      	ldr	r0, [pc, #376]	; (8001160 <MX_GPIO_Init+0x254>)
 8000fe6:	f000 fefd 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4855      	ldr	r0, [pc, #340]	; (8001158 <MX_GPIO_Init+0x24c>)
 8001002:	f000 fd43 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	484e      	ldr	r0, [pc, #312]	; (8001158 <MX_GPIO_Init+0x24c>)
 800101e:	f000 fd35 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001022:	2332      	movs	r3, #50	; 0x32
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001032:	230b      	movs	r3, #11
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4846      	ldr	r0, [pc, #280]	; (8001158 <MX_GPIO_Init+0x24c>)
 800103e:	f000 fd25 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001042:	2386      	movs	r3, #134	; 0x86
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001052:	230b      	movs	r3, #11
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4841      	ldr	r0, [pc, #260]	; (8001164 <MX_GPIO_Init+0x258>)
 800105e:	f000 fd15 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001062:	2308      	movs	r3, #8
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	483b      	ldr	r0, [pc, #236]	; (8001164 <MX_GPIO_Init+0x258>)
 8001076:	f000 fd09 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800107a:	f244 0381 	movw	r3, #16513	; 0x4081
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4832      	ldr	r0, [pc, #200]	; (800115c <MX_GPIO_Init+0x250>)
 8001094:	f000 fcfa 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010aa:	230b      	movs	r3, #11
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4829      	ldr	r0, [pc, #164]	; (800115c <MX_GPIO_Init+0x250>)
 80010b6:	f000 fce9 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010ba:	2340      	movs	r3, #64	; 0x40
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4823      	ldr	r0, [pc, #140]	; (8001160 <MX_GPIO_Init+0x254>)
 80010d2:	f000 fcdb 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	481d      	ldr	r0, [pc, #116]	; (8001160 <MX_GPIO_Init+0x254>)
 80010ea:	f000 fccf 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001100:	230a      	movs	r3, #10
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4816      	ldr	r0, [pc, #88]	; (8001164 <MX_GPIO_Init+0x258>)
 800110c:	f000 fcbe 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <MX_GPIO_Init+0x258>)
 8001126:	f000 fcb1 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800112a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113c:	230b      	movs	r3, #11
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <MX_GPIO_Init+0x254>)
 8001148:	f000 fca0 	bl	8001a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114c:	bf00      	nop
 800114e:	3730      	adds	r7, #48	; 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40020800 	.word	0x40020800
 800115c:	40020400 	.word	0x40020400
 8001160:	40021800 	.word	0x40021800
 8001164:	40020000 	.word	0x40020000

08001168 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a28      	ldr	r2, [pc, #160]	; (8001218 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d111      	bne.n	800119e <HAL_TIM_IC_CaptureCallback+0x36>
	{
		uint32_t echo_us;
          // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800117a:	2104      	movs	r1, #4
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f002 fe9b 	bl	8003eb8 <HAL_TIM_ReadCapturedValue>
 8001182:	6178      	str	r0, [r7, #20]
		dx_cm = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8001184:	6978      	ldr	r0, [r7, #20]
 8001186:	f7ff faa7 	bl	80006d8 <hc_sr04_convert_us_to_cm>
 800118a:	4602      	mov	r2, r0
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_TIM_IC_CaptureCallback+0xb4>)
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	ee07 2a90 	vmov	s15, r2
 8001194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
	}

	if(TIM3 == htim->Instance)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a20      	ldr	r2, [pc, #128]	; (8001224 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d111      	bne.n	80011cc <HAL_TIM_IC_CaptureCallback+0x64>
	{
		uint32_t echo_us;
        // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80011a8:	2104      	movs	r1, #4
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f002 fe84 	bl	8003eb8 <HAL_TIM_ReadCapturedValue>
 80011b0:	6138      	str	r0, [r7, #16]
		dx_cm2 = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 80011b2:	6938      	ldr	r0, [r7, #16]
 80011b4:	f7ff fa90 	bl	80006d8 <hc_sr04_convert_us_to_cm>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	ee07 2a90 	vmov	s15, r2
 80011c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80011c8:	edc3 7a00 	vstr	s15, [r3]
	}

	average_distance = position(dx_cm,dx_cm2,pos);
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80011da:	edd3 6a00 	vldr	s13, [r3]
 80011de:	eeb0 1a66 	vmov.f32	s2, s13
 80011e2:	eef0 0a47 	vmov.f32	s1, s14
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	f7ff fa87 	bl	80006fc <position>
 80011ee:	ee07 0a90 	vmov	s15, r0
 80011f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011f8:	edc3 7a00 	vstr	s15, [r3]
	float filteredData = IFX_EMA_Update(&hpFilter, average_distance);
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001208:	f7ff f9b9 	bl	800057e <IFX_EMA_Update>
 800120c:	ed87 0a03 	vstr	s0, [r7, #12]
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40010000 	.word	0x40010000
 800121c:	20000250 	.word	0x20000250
 8001220:	20000240 	.word	0x20000240
 8001224:	40000400 	.word	0x40000400
 8001228:	20000244 	.word	0x20000244
 800122c:	2000024c 	.word	0x2000024c
 8001230:	20000248 	.word	0x20000248
 8001234:	20000270 	.word	0x20000270

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_MspInit+0x44>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_MspInit+0x44>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_MspInit+0x44>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_MspInit+0x44>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_MspInit+0x44>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x44>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a3f      	ldr	r2, [pc, #252]	; (80013a8 <HAL_TIM_Base_MspInit+0x11c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d131      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ae:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a3e      	ldr	r2, [pc, #248]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b36      	ldr	r3, [pc, #216]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	482d      	ldr	r0, [pc, #180]	; (80013b0 <HAL_TIM_Base_MspInit+0x124>)
 80012fc:	f000 fbc6 	bl	8001a8c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	201b      	movs	r0, #27
 8001306:	f000 faf8 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800130a:	201b      	movs	r0, #27
 800130c:	f000 fb11 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001310:	e046      	b.n	80013a0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_TIM_Base_MspInit+0x128>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d130      	bne.n	800137e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a22      	ldr	r2, [pc, #136]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800134c:	2340      	movs	r3, #64	; 0x40
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800135c:	2302      	movs	r3, #2
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <HAL_TIM_Base_MspInit+0x12c>)
 8001368:	f000 fb90 	bl	8001a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	201d      	movs	r0, #29
 8001372:	f000 fac2 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001376:	201d      	movs	r0, #29
 8001378:	f000 fadb 	bl	8001932 <HAL_NVIC_EnableIRQ>
}
 800137c:	e010      	b.n	80013a0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM9)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_TIM_Base_MspInit+0x130>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d10b      	bne.n	80013a0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 800138e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001392:	6453      	str	r3, [r2, #68]	; 0x44
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_TIM_Base_MspInit+0x120>)
 8001396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
}
 80013a0:	bf00      	nop
 80013a2:	3730      	adds	r7, #48	; 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010000 	.word	0x40010000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40000400 	.word	0x40000400
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40014000 	.word	0x40014000

080013c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d0:	d10b      	bne.n	80013ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_PWM_MspInit+0x38>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_TIM_PWM_MspInit+0x38>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_TIM_PWM_MspInit+0x38>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141c:	d11d      	bne.n	800145a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_TIM_MspPostInit+0xa8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <HAL_TIM_MspPostInit+0xa8>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <HAL_TIM_MspPostInit+0xa8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001448:	2301      	movs	r3, #1
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4815      	ldr	r0, [pc, #84]	; (80014a8 <HAL_TIM_MspPostInit+0xac>)
 8001454:	f000 fb1a 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001458:	e020      	b.n	800149c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM9)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <HAL_TIM_MspPostInit+0xb0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d11b      	bne.n	800149c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_TIM_MspPostInit+0xa8>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_TIM_MspPostInit+0xa8>)
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	6313      	str	r3, [r2, #48]	; 0x30
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_TIM_MspPostInit+0xa8>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800147c:	2320      	movs	r3, #32
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800148c:	2303      	movs	r3, #3
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <HAL_TIM_MspPostInit+0xb4>)
 8001498:	f000 faf8 	bl	8001a8c <HAL_GPIO_Init>
}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40014000 	.word	0x40014000
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0aa      	sub	sp, #168	; 0xa8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2284      	movs	r2, #132	; 0x84
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fe5d 	bl	8006194 <memset>
  if(huart->Instance==USART3)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a26      	ldr	r2, [pc, #152]	; (8001578 <HAL_UART_MspInit+0xc4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d144      	bne.n	800156e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 f9ba 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014fe:	f7ff fe9b 	bl	8001238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_UART_MspInit+0xc8>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_UART_MspInit+0xc8>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_UART_MspInit+0xc8>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_UART_MspInit+0xc8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <HAL_UART_MspInit+0xc8>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_UART_MspInit+0xc8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001532:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001540:	2301      	movs	r3, #1
 8001542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800154c:	2307      	movs	r3, #7
 800154e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001552:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001556:	4619      	mov	r1, r3
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <HAL_UART_MspInit+0xcc>)
 800155a:	f000 fa97 	bl	8001a8c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2027      	movs	r0, #39	; 0x27
 8001564:	f000 f9c9 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001568:	2027      	movs	r0, #39	; 0x27
 800156a:	f000 f9e2 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	37a8      	adds	r7, #168	; 0xa8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40004800 	.word	0x40004800
 800157c:	40023800 	.word	0x40023800
 8001580:	40020c00 	.word	0x40020c00

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 f898 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <TIM1_CC_IRQHandler+0x10>)
 80015de:	f002 f88f 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000088 	.word	0x20000088

080015ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <TIM3_IRQHandler+0x10>)
 80015f2:	f002 f885 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000120 	.word	0x20000120

08001600 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <USART3_IRQHandler+0x10>)
 8001606:	f003 fb73 	bl	8004cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200001b8 	.word	0x200001b8

08001614 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001670 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800163c:	480d      	ldr	r0, [pc, #52]	; (8001674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800163e:	490e      	ldr	r1, [pc, #56]	; (8001678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001654:	4c0b      	ldr	r4, [pc, #44]	; (8001684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001662:	f7ff ffd7 	bl	8001614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001666:	f004 fda3 	bl	80061b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166a:	f7ff f969 	bl	8000940 <main>
  bx  lr    
 800166e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001670:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800167c:	080063e0 	.word	0x080063e0
  ldr r2, =_sbss
 8001680:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001684:	200003bc 	.word	0x200003bc

08001688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC_IRQHandler>

0800168a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168e:	2003      	movs	r0, #3
 8001690:	f000 f928 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001694:	2000      	movs	r0, #0
 8001696:	f000 f805 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169a:	f7ff fdd3 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f943 	bl	800194e <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 f90b 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000010 	.word	0x20000010
 80016fc:	20000018 	.word	0x20000018
 8001700:	20000014 	.word	0x20000014

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000018 	.word	0x20000018
 8001728:	20000280 	.word	0x20000280

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000280 	.word	0x20000280

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <__NVIC_SetPriorityGrouping+0x40>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	4313      	orrs	r3, r2
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x40>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	05fa0000 	.word	0x05fa0000

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff3e 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff31 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff feda 	bl	800172c <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d008      	beq.n	8001998 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e052      	b.n	8001a3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0216 	bic.w	r2, r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d103      	bne.n	80019c8 <HAL_DMA_Abort+0x62>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0208 	bic.w	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e8:	e013      	b.n	8001a12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ea:	f7ff fe9f 	bl	800172c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	d90c      	bls.n	8001a12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2220      	movs	r2, #32
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2203      	movs	r2, #3
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e015      	b.n	8001a3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e4      	bne.n	80019ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	223f      	movs	r2, #63	; 0x3f
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d004      	beq.n	8001a64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e00c      	b.n	8001a7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2205      	movs	r2, #5
 8001a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e175      	b.n	8001d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8164 	bne.w	8001d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d005      	beq.n	8001ae2 <HAL_GPIO_Init+0x56>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d130      	bne.n	8001b44 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d017      	beq.n	8001b80 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80be 	beq.w	8001d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a65      	ldr	r2, [pc, #404]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c2e:	4a61      	ldr	r2, [pc, #388]	; (8001db4 <HAL_GPIO_Init+0x328>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d037      	beq.n	8001cca <HAL_GPIO_Init+0x23e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <HAL_GPIO_Init+0x330>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d031      	beq.n	8001cc6 <HAL_GPIO_Init+0x23a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d02b      	beq.n	8001cc2 <HAL_GPIO_Init+0x236>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a55      	ldr	r2, [pc, #340]	; (8001dc4 <HAL_GPIO_Init+0x338>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d025      	beq.n	8001cbe <HAL_GPIO_Init+0x232>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a54      	ldr	r2, [pc, #336]	; (8001dc8 <HAL_GPIO_Init+0x33c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01f      	beq.n	8001cba <HAL_GPIO_Init+0x22e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <HAL_GPIO_Init+0x340>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d019      	beq.n	8001cb6 <HAL_GPIO_Init+0x22a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_GPIO_Init+0x344>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a51      	ldr	r2, [pc, #324]	; (8001dd4 <HAL_GPIO_Init+0x348>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00d      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a50      	ldr	r2, [pc, #320]	; (8001dd8 <HAL_GPIO_Init+0x34c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001ca2:	2309      	movs	r3, #9
 8001ca4:	e012      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	e010      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001caa:	2308      	movs	r3, #8
 8001cac:	e00e      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e00c      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	e00a      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cdc:	4935      	ldr	r1, [pc, #212]	; (8001db4 <HAL_GPIO_Init+0x328>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0e:	4a34      	ldr	r2, [pc, #208]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	f67f ae86 	bls.w	8001aac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40013800 	.word	0x40013800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40021400 	.word	0x40021400
 8001dd0:	40021800 	.word	0x40021800
 8001dd4:	40021c00 	.word	0x40021c00
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40022400 	.word	0x40022400
 8001de0:	40013c00 	.word	0x40013c00

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e00:	e003      	b.n	8001e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	041a      	lsls	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	619a      	str	r2, [r3, #24]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e66:	f7ff fc61 	bl	800172c <HAL_GetTick>
 8001e6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e6c:	e009      	b.n	8001e82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e6e:	f7ff fc5d 	bl	800172c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e7c:	d901      	bls.n	8001e82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e022      	b.n	8001ec8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e9c:	f7ff fc46 	bl	800172c <HAL_GetTick>
 8001ea0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ea2:	e009      	b.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ea4:	f7ff fc42 	bl	800172c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb2:	d901      	bls.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e007      	b.n	8001ec8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e291      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efc:	4b96      	ldr	r3, [pc, #600]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f08:	4b93      	ldr	r3, [pc, #588]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d112      	bne.n	8001f3a <HAL_RCC_OscConfig+0x62>
 8001f14:	4b90      	ldr	r3, [pc, #576]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06c      	beq.n	8002008 <HAL_RCC_OscConfig+0x130>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d168      	bne.n	8002008 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e26b      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x7a>
 8001f44:	4b84      	ldr	r3, [pc, #528]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a83      	ldr	r2, [pc, #524]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x9c>
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7e      	ldr	r2, [pc, #504]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7b      	ldr	r2, [pc, #492]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a75      	ldr	r2, [pc, #468]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b73      	ldr	r3, [pc, #460]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a72      	ldr	r2, [pc, #456]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f98:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6e      	ldr	r2, [pc, #440]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b6c      	ldr	r3, [pc, #432]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6b      	ldr	r2, [pc, #428]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fbb8 	bl	800172c <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fbb4 	bl	800172c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e21f      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b61      	ldr	r3, [pc, #388]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe8>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fba4 	bl	800172c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fba0 	bl	800172c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e20b      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b57      	ldr	r3, [pc, #348]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x110>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d069      	beq.n	80020ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b50      	ldr	r3, [pc, #320]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x190>
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x17a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1df      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	493d      	ldr	r1, [pc, #244]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e040      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d023      	beq.n	80020b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a38      	ldr	r2, [pc, #224]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff fb56 	bl	800172c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002084:	f7ff fb52 	bl	800172c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1bd      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4929      	ldr	r1, [pc, #164]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
 80020b6:	e018      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff fb32 	bl	800172c <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff fb2e 	bl	800172c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e199      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d038      	beq.n	8002168 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d019      	beq.n	8002132 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7ff fb0f 	bl	800172c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7ff fb0b 	bl	800172c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e176      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x23a>
 8002130:	e01a      	b.n	8002168 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7ff faf5 	bl	800172c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002146:	f7ff faf1 	bl	800172c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d903      	bls.n	800215c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e15c      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
 8002158:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b91      	ldr	r3, [pc, #580]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800215e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a4 	beq.w	80022be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b88      	ldr	r3, [pc, #544]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a87      	ldr	r2, [pc, #540]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b85      	ldr	r3, [pc, #532]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219e:	4b82      	ldr	r3, [pc, #520]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7e      	ldr	r2, [pc, #504]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7ff fab9 	bl	800172c <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7ff fab5 	bl	800172c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	; 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e120      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x31a>
 80021e4:	4b6f      	ldr	r3, [pc, #444]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a6e      	ldr	r2, [pc, #440]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	e02d      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x33c>
 80021fa:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a69      	ldr	r2, [pc, #420]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	4a66      	ldr	r2, [pc, #408]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
 8002212:	e01c      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d10c      	bne.n	8002236 <HAL_RCC_OscConfig+0x35e>
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a60      	ldr	r2, [pc, #384]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	4b5e      	ldr	r3, [pc, #376]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	e00b      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 8002236:	4b5b      	ldr	r3, [pc, #364]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a5a      	ldr	r2, [pc, #360]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
 8002242:	4b58      	ldr	r3, [pc, #352]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	4a57      	ldr	r2, [pc, #348]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d015      	beq.n	8002282 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7ff fa69 	bl	800172c <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7ff fa65 	bl	800172c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0ce      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ee      	beq.n	800225e <HAL_RCC_OscConfig+0x386>
 8002280:	e014      	b.n	80022ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7ff fa53 	bl	800172c <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff fa4f 	bl	800172c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0b8      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ee      	bne.n	800228a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b2:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80a4 	beq.w	8002410 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d06b      	beq.n	80023ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d149      	bne.n	8002370 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7ff fa20 	bl	800172c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff fa1c 	bl	800172c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e087      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	019b      	lsls	r3, r3, #6
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	3b01      	subs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	4313      	orrs	r3, r2
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800233a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f9f0 	bl	800172c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff f9ec 	bl	800172c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e057      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x478>
 800236e:	e04f      	b.n	8002410 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff f9d6 	bl	800172c <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f9d2 	bl	800172c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e03d      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x4ac>
 80023a2:	e035      	b.n	8002410 <HAL_RCC_OscConfig+0x538>
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x544>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d028      	beq.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d121      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d11a      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d111      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	3b01      	subs	r3, #1
 80023f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d0      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 020f 	bic.w	r2, r3, #15
 800244e:	4965      	ldr	r1, [pc, #404]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800248a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d040      	beq.n	8002544 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e073      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4936      	ldr	r1, [pc, #216]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7ff f90a 	bl	800172c <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7ff f906 	bl	800172c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e053      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d210      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 020f 	bic.w	r2, r3, #15
 800255a:	4922      	ldr	r1, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1cc>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1d0>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1d4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff f866 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	080062b4 	.word	0x080062b4
 80025f0:	20000010 	.word	0x20000010
 80025f4:	20000014 	.word	0x20000014

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b094      	sub	sp, #80	; 0x50
 80025fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	647b      	str	r3, [r7, #68]	; 0x44
 8002604:	2300      	movs	r3, #0
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002608:	2300      	movs	r3, #0
 800260a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002610:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d00d      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x40>
 800261c:	2b08      	cmp	r3, #8
 800261e:	f200 80e1 	bhi.w	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x34>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x3a>
 800262a:	e0db      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002630:	e0db      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <HAL_RCC_GetSysClockFreq+0x208>)
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002636:	e0d8      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
 8002658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	f04f 0000 	mov.w	r0, #0
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	0159      	lsls	r1, r3, #5
 8002678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267c:	0150      	lsls	r0, r2, #5
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4621      	mov	r1, r4
 8002684:	1a51      	subs	r1, r2, r1
 8002686:	6139      	str	r1, [r7, #16]
 8002688:	4629      	mov	r1, r5
 800268a:	eb63 0301 	sbc.w	r3, r3, r1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269c:	4659      	mov	r1, fp
 800269e:	018b      	lsls	r3, r1, #6
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a6:	4651      	mov	r1, sl
 80026a8:	018a      	lsls	r2, r1, #6
 80026aa:	4651      	mov	r1, sl
 80026ac:	ebb2 0801 	subs.w	r8, r2, r1
 80026b0:	4659      	mov	r1, fp
 80026b2:	eb63 0901 	sbc.w	r9, r3, r1
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ca:	4690      	mov	r8, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	eb18 0303 	adds.w	r3, r8, r3
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	462b      	mov	r3, r5
 80026d8:	eb49 0303 	adc.w	r3, r9, r3
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ea:	4629      	mov	r1, r5
 80026ec:	024b      	lsls	r3, r1, #9
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026f4:	4621      	mov	r1, r4
 80026f6:	024a      	lsls	r2, r1, #9
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002708:	f7fd fd7e 	bl	8000208 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	e058      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	2200      	movs	r2, #0
 800271e:	4618      	mov	r0, r3
 8002720:	4611      	mov	r1, r2
 8002722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002742:	0150      	lsls	r0, r2, #5
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4641      	mov	r1, r8
 800274a:	ebb2 0a01 	subs.w	sl, r2, r1
 800274e:	4649      	mov	r1, r9
 8002750:	eb63 0b01 	sbc.w	fp, r3, r1
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002768:	ebb2 040a 	subs.w	r4, r2, sl
 800276c:	eb63 050b 	sbc.w	r5, r3, fp
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	464b      	mov	r3, r9
 800278c:	eb45 0303 	adc.w	r3, r5, r3
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b2:	2200      	movs	r2, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	61fa      	str	r2, [r7, #28]
 80027b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027bc:	f7fd fd24 	bl	8000208 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3750      	adds	r7, #80	; 0x50
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000010 	.word	0x20000010

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	080062c4 	.word	0x080062c4

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002848:	f7ff ffdc 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0b5b      	lsrs	r3, r3, #13
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	080062c4 	.word	0x080062c4

0800286c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d012      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002894:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	4964      	ldr	r1, [pc, #400]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d017      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c6:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	4959      	ldr	r1, [pc, #356]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028e4:	d101      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d017      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002908:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	494a      	ldr	r1, [pc, #296]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002920:	d101      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002922:	2301      	movs	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 808b 	beq.w	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a39      	ldr	r2, [pc, #228]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
 800295c:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe feda 	bl	800172c <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297c:	f7fe fed6 	bl	800172c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e357      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800298e:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800299a:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d035      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d02e      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029b8:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d114      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fe9e 	bl	800172c <HAL_GetTick>
 80029f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7fe fe9a 	bl	800172c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e319      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ee      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a22:	d111      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a32:	400b      	ands	r3, r1
 8002a34:	4901      	ldr	r1, [pc, #4]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000
 8002a44:	0ffffcff 	.word	0x0ffffcff
 8002a48:	4baa      	ldr	r3, [pc, #680]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4aa9      	ldr	r2, [pc, #676]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a52:	6093      	str	r3, [r2, #8]
 8002a54:	4ba7      	ldr	r3, [pc, #668]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	49a4      	ldr	r1, [pc, #656]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a72:	4ba0      	ldr	r3, [pc, #640]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a78:	4a9e      	ldr	r2, [pc, #632]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a82:	4b9c      	ldr	r3, [pc, #624]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	4999      	ldr	r1, [pc, #612]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa0:	4b94      	ldr	r3, [pc, #592]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aae:	4991      	ldr	r1, [pc, #580]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ac2:	4b8c      	ldr	r3, [pc, #560]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ad0:	4988      	ldr	r1, [pc, #544]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae4:	4b83      	ldr	r3, [pc, #524]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af2:	4980      	ldr	r1, [pc, #512]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b06:	4b7b      	ldr	r3, [pc, #492]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4977      	ldr	r1, [pc, #476]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b28:	4b72      	ldr	r3, [pc, #456]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	496f      	ldr	r1, [pc, #444]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b4a:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f023 020c 	bic.w	r2, r3, #12
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	4966      	ldr	r1, [pc, #408]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	495e      	ldr	r1, [pc, #376]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b8e:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9c:	4955      	ldr	r1, [pc, #340]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bd2:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4944      	ldr	r1, [pc, #272]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	493c      	ldr	r1, [pc, #240]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	4933      	ldr	r1, [pc, #204]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c38:	4b2e      	ldr	r3, [pc, #184]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c46:	492b      	ldr	r1, [pc, #172]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d011      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c68:	4922      	ldr	r1, [pc, #136]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c78:	d101      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c9a:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca8:	4912      	ldr	r1, [pc, #72]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cbc:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ccc:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d006      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80d9 	beq.w	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a01      	ldr	r2, [pc, #4]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfa:	f7fe fd17 	bl	800172c <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d02:	f7fe fd13 	bl	800172c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e194      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d14:	4b6c      	ldr	r3, [pc, #432]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d021      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11d      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d34:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d42:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d48:	0e1b      	lsrs	r3, r3, #24
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	019a      	lsls	r2, r3, #6
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	061b      	lsls	r3, r3, #24
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	071b      	lsls	r3, r3, #28
 8002d68:	4957      	ldr	r1, [pc, #348]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02e      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9a:	d129      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d9c:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db0:	0f1b      	lsrs	r3, r3, #28
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	019a      	lsls	r2, r3, #6
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	071b      	lsls	r3, r3, #28
 8002dd0:	493d      	ldr	r1, [pc, #244]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dd8:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dde:	f023 021f 	bic.w	r2, r3, #31
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	3b01      	subs	r3, #1
 8002de8:	4937      	ldr	r1, [pc, #220]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01d      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e02:	0e1b      	lsrs	r3, r3, #24
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e10:	0f1b      	lsrs	r3, r3, #28
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	019a      	lsls	r2, r3, #6
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	071b      	lsls	r3, r3, #28
 8002e30:	4925      	ldr	r1, [pc, #148]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d011      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	019a      	lsls	r2, r3, #6
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	071b      	lsls	r3, r3, #28
 8002e60:	4919      	ldr	r1, [pc, #100]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e74:	f7fe fc5a 	bl	800172c <HAL_GetTick>
 8002e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7c:	f7fe fc56 	bl	800172c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0d7      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	f040 80cd 	bne.w	800303c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eae:	f7fe fc3d 	bl	800172c <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eb6:	f7fe fc39 	bl	800172c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b64      	cmp	r3, #100	; 0x64
 8002ec2:	d903      	bls.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0ba      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ec8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ecc:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed8:	d0ed      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d02e      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d12a      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f02:	4b51      	ldr	r3, [pc, #324]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f10:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	0f1b      	lsrs	r3, r3, #28
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	019a      	lsls	r2, r3, #6
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	071b      	lsls	r3, r3, #28
 8002f36:	4944      	ldr	r1, [pc, #272]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f3e:	4b42      	ldr	r3, [pc, #264]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	493d      	ldr	r1, [pc, #244]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d022      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f6c:	d11d      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	0e1b      	lsrs	r3, r3, #24
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	0f1b      	lsrs	r3, r3, #28
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	019a      	lsls	r2, r3, #6
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	431a      	orrs	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	061b      	lsls	r3, r3, #24
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	071b      	lsls	r3, r3, #28
 8002fa2:	4929      	ldr	r1, [pc, #164]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d028      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbc:	0e1b      	lsrs	r3, r3, #24
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	019a      	lsls	r2, r3, #6
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	4917      	ldr	r1, [pc, #92]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	4911      	ldr	r1, [pc, #68]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800300e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003014:	f7fe fb8a 	bl	800172c <HAL_GetTick>
 8003018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800301c:	f7fe fb86 	bl	800172c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e007      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800303a:	d1ef      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e049      	b.n	80030f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe f90a 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 ff76 	bl	8003f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e049      	b.n	80031a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fe f94d 	bl	80013c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f000 ff1f 	bl	8003f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_TIM_PWM_Start+0x24>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e03c      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d109      	bne.n	80031e6 <HAL_TIM_PWM_Start+0x3e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	bf14      	ite	ne
 80031de:	2301      	movne	r3, #1
 80031e0:	2300      	moveq	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	e02f      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d109      	bne.n	8003200 <HAL_TIM_PWM_Start+0x58>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e022      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d109      	bne.n	800321a <HAL_TIM_PWM_Start+0x72>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e015      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b10      	cmp	r3, #16
 800321e:	d109      	bne.n	8003234 <HAL_TIM_PWM_Start+0x8c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e008      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e092      	b.n	8003374 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_TIM_PWM_Start+0xb6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800325c:	e023      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d104      	bne.n	800326e <HAL_TIM_PWM_Start+0xc6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800326c:	e01b      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Start+0xd6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800327c:	e013      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Start+0xe6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800328c:	e00b      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b10      	cmp	r3, #16
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Start+0xf6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800329c:	e003      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 fbba 	bl	8004a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a30      	ldr	r2, [pc, #192]	; (800337c <HAL_TIM_PWM_Start+0x1d4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_PWM_Start+0x120>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2f      	ldr	r2, [pc, #188]	; (8003380 <HAL_TIM_PWM_Start+0x1d8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_PWM_Start+0x124>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_TIM_PWM_Start+0x126>
 80032cc:	2300      	movs	r3, #0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a25      	ldr	r2, [pc, #148]	; (800337c <HAL_TIM_PWM_Start+0x1d4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d022      	beq.n	8003332 <HAL_TIM_PWM_Start+0x18a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d01d      	beq.n	8003332 <HAL_TIM_PWM_Start+0x18a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_TIM_PWM_Start+0x1dc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d018      	beq.n	8003332 <HAL_TIM_PWM_Start+0x18a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a20      	ldr	r2, [pc, #128]	; (8003388 <HAL_TIM_PWM_Start+0x1e0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_TIM_PWM_Start+0x18a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <HAL_TIM_PWM_Start+0x1e4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_TIM_PWM_Start+0x18a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a19      	ldr	r2, [pc, #100]	; (8003380 <HAL_TIM_PWM_Start+0x1d8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_TIM_PWM_Start+0x18a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <HAL_TIM_PWM_Start+0x1e8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIM_PWM_Start+0x18a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a19      	ldr	r2, [pc, #100]	; (8003394 <HAL_TIM_PWM_Start+0x1ec>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d115      	bne.n	800335e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <HAL_TIM_PWM_Start+0x1f0>)
 800333a:	4013      	ands	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b06      	cmp	r3, #6
 8003342:	d015      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1c8>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d011      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	e008      	b.n	8003370 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e000      	b.n	8003372 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40010000 	.word	0x40010000
 8003380:	40010400 	.word	0x40010400
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800
 800338c:	40000c00 	.word	0x40000c00
 8003390:	40014000 	.word	0x40014000
 8003394:	40001800 	.word	0x40001800
 8003398:	00010007 	.word	0x00010007

0800339c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e049      	b.n	8003442 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f841 	bl	800344a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f000 fdce 	bl	8003f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <HAL_TIM_IC_Start_IT+0x1e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347a:	b2db      	uxtb	r3, r3
 800347c:	e023      	b.n	80034c6 <HAL_TIM_IC_Start_IT+0x66>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d104      	bne.n	800348e <HAL_TIM_IC_Start_IT+0x2e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e01b      	b.n	80034c6 <HAL_TIM_IC_Start_IT+0x66>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d104      	bne.n	800349e <HAL_TIM_IC_Start_IT+0x3e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e013      	b.n	80034c6 <HAL_TIM_IC_Start_IT+0x66>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_IC_Start_IT+0x4e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	e00b      	b.n	80034c6 <HAL_TIM_IC_Start_IT+0x66>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d104      	bne.n	80034be <HAL_TIM_IC_Start_IT+0x5e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e003      	b.n	80034c6 <HAL_TIM_IC_Start_IT+0x66>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d104      	bne.n	80034d8 <HAL_TIM_IC_Start_IT+0x78>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e013      	b.n	8003500 <HAL_TIM_IC_Start_IT+0xa0>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d104      	bne.n	80034e8 <HAL_TIM_IC_Start_IT+0x88>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e00b      	b.n	8003500 <HAL_TIM_IC_Start_IT+0xa0>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d104      	bne.n	80034f8 <HAL_TIM_IC_Start_IT+0x98>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e003      	b.n	8003500 <HAL_TIM_IC_Start_IT+0xa0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d102      	bne.n	800350e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003508:	7b7b      	ldrb	r3, [r7, #13]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d001      	beq.n	8003512 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0e2      	b.n	80036d8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <HAL_TIM_IC_Start_IT+0xc2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003520:	e023      	b.n	800356a <HAL_TIM_IC_Start_IT+0x10a>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d104      	bne.n	8003532 <HAL_TIM_IC_Start_IT+0xd2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003530:	e01b      	b.n	800356a <HAL_TIM_IC_Start_IT+0x10a>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d104      	bne.n	8003542 <HAL_TIM_IC_Start_IT+0xe2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003540:	e013      	b.n	800356a <HAL_TIM_IC_Start_IT+0x10a>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	d104      	bne.n	8003552 <HAL_TIM_IC_Start_IT+0xf2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003550:	e00b      	b.n	800356a <HAL_TIM_IC_Start_IT+0x10a>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b10      	cmp	r3, #16
 8003556:	d104      	bne.n	8003562 <HAL_TIM_IC_Start_IT+0x102>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003560:	e003      	b.n	800356a <HAL_TIM_IC_Start_IT+0x10a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <HAL_TIM_IC_Start_IT+0x11a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003578:	e013      	b.n	80035a2 <HAL_TIM_IC_Start_IT+0x142>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d104      	bne.n	800358a <HAL_TIM_IC_Start_IT+0x12a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003588:	e00b      	b.n	80035a2 <HAL_TIM_IC_Start_IT+0x142>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d104      	bne.n	800359a <HAL_TIM_IC_Start_IT+0x13a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003598:	e003      	b.n	80035a2 <HAL_TIM_IC_Start_IT+0x142>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d841      	bhi.n	800362c <HAL_TIM_IC_Start_IT+0x1cc>
 80035a8:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <HAL_TIM_IC_Start_IT+0x150>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	0800362d 	.word	0x0800362d
 80035b8:	0800362d 	.word	0x0800362d
 80035bc:	0800362d 	.word	0x0800362d
 80035c0:	080035f7 	.word	0x080035f7
 80035c4:	0800362d 	.word	0x0800362d
 80035c8:	0800362d 	.word	0x0800362d
 80035cc:	0800362d 	.word	0x0800362d
 80035d0:	08003609 	.word	0x08003609
 80035d4:	0800362d 	.word	0x0800362d
 80035d8:	0800362d 	.word	0x0800362d
 80035dc:	0800362d 	.word	0x0800362d
 80035e0:	0800361b 	.word	0x0800361b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0202 	orr.w	r2, r2, #2
 80035f2:	60da      	str	r2, [r3, #12]
      break;
 80035f4:	e01d      	b.n	8003632 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0204 	orr.w	r2, r2, #4
 8003604:	60da      	str	r2, [r3, #12]
      break;
 8003606:	e014      	b.n	8003632 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0208 	orr.w	r2, r2, #8
 8003616:	60da      	str	r2, [r3, #12]
      break;
 8003618:	e00b      	b.n	8003632 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0210 	orr.w	r2, r2, #16
 8003628:	60da      	str	r2, [r3, #12]
      break;
 800362a:	e002      	b.n	8003632 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      break;
 8003630:	bf00      	nop
  }

  if (status == HAL_OK)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d14e      	bne.n	80036d6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	6839      	ldr	r1, [r7, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f9f1 	bl	8004a28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <HAL_TIM_IC_Start_IT+0x280>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d022      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0x236>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d01d      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0x236>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <HAL_TIM_IC_Start_IT+0x284>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d018      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0x236>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <HAL_TIM_IC_Start_IT+0x288>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0x236>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <HAL_TIM_IC_Start_IT+0x28c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0x236>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_TIM_IC_Start_IT+0x290>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0x236>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_TIM_IC_Start_IT+0x294>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0x236>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <HAL_TIM_IC_Start_IT+0x298>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d115      	bne.n	80036c2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	4b17      	ldr	r3, [pc, #92]	; (80036fc <HAL_TIM_IC_Start_IT+0x29c>)
 800369e:	4013      	ands	r3, r2
 80036a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b06      	cmp	r3, #6
 80036a6:	d015      	beq.n	80036d4 <HAL_TIM_IC_Start_IT+0x274>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ae:	d011      	beq.n	80036d4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c0:	e008      	b.n	80036d4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e000      	b.n	80036d6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40010000 	.word	0x40010000
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800
 80036ec:	40000c00 	.word	0x40000c00
 80036f0:	40010400 	.word	0x40010400
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40001800 	.word	0x40001800
 80036fc:	00010007 	.word	0x00010007

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fd10 	bl	8001168 <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fbf8 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fbff 	bl	8003f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b04      	cmp	r3, #4
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fce6 	bl	8001168 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fbce 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fbd5 	bl	8003f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d122      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d11b      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0208 	mvn.w	r2, #8
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fcbc 	bl	8001168 <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fba4 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fbab 	bl	8003f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b10      	cmp	r3, #16
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0210 	mvn.w	r2, #16
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2208      	movs	r2, #8
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd fc92 	bl	8001168 <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fb7a 	bl	8003f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fb81 	bl	8003f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0201 	mvn.w	r2, #1
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fd f82a 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 f97a 	bl	8004ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d10e      	bne.n	80038de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d107      	bne.n	80038de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f001 f96d 	bl	8004bb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d10e      	bne.n	800390a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d107      	bne.n	800390a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fb2f 	bl	8003f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b20      	cmp	r3, #32
 8003916:	d10e      	bne.n	8003936 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	d107      	bne.n	8003936 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f06f 0220 	mvn.w	r2, #32
 800392e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f001 f92d 	bl	8004b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003958:	2302      	movs	r3, #2
 800395a:	e088      	b.n	8003a6e <HAL_TIM_IC_ConfigChannel+0x130>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11b      	bne.n	80039a2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800397a:	f000 fe91 	bl	80046a0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 020c 	bic.w	r2, r2, #12
 800398c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6999      	ldr	r1, [r3, #24]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	619a      	str	r2, [r3, #24]
 80039a0:	e060      	b.n	8003a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11c      	bne.n	80039e2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80039b8:	f000 ff15 	bl	80047e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039ca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6999      	ldr	r1, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	619a      	str	r2, [r3, #24]
 80039e0:	e040      	b.n	8003a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d11b      	bne.n	8003a20 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80039f8:	f000 ff62 	bl	80048c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 020c 	bic.w	r2, r2, #12
 8003a0a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69d9      	ldr	r1, [r3, #28]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	61da      	str	r2, [r3, #28]
 8003a1e:	e021      	b.n	8003a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d11c      	bne.n	8003a60 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003a36:	f000 ff7f 	bl	8004938 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69d9      	ldr	r1, [r3, #28]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	021a      	lsls	r2, r3, #8
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	61da      	str	r2, [r3, #28]
 8003a5e:	e001      	b.n	8003a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e0ff      	b.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b14      	cmp	r3, #20
 8003aa2:	f200 80f0 	bhi.w	8003c86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003aa6:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aac:	08003b01 	.word	0x08003b01
 8003ab0:	08003c87 	.word	0x08003c87
 8003ab4:	08003c87 	.word	0x08003c87
 8003ab8:	08003c87 	.word	0x08003c87
 8003abc:	08003b41 	.word	0x08003b41
 8003ac0:	08003c87 	.word	0x08003c87
 8003ac4:	08003c87 	.word	0x08003c87
 8003ac8:	08003c87 	.word	0x08003c87
 8003acc:	08003b83 	.word	0x08003b83
 8003ad0:	08003c87 	.word	0x08003c87
 8003ad4:	08003c87 	.word	0x08003c87
 8003ad8:	08003c87 	.word	0x08003c87
 8003adc:	08003bc3 	.word	0x08003bc3
 8003ae0:	08003c87 	.word	0x08003c87
 8003ae4:	08003c87 	.word	0x08003c87
 8003ae8:	08003c87 	.word	0x08003c87
 8003aec:	08003c05 	.word	0x08003c05
 8003af0:	08003c87 	.word	0x08003c87
 8003af4:	08003c87 	.word	0x08003c87
 8003af8:	08003c87 	.word	0x08003c87
 8003afc:	08003c45 	.word	0x08003c45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fad8 	bl	80040bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0208 	orr.w	r2, r2, #8
 8003b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0204 	bic.w	r2, r2, #4
 8003b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	619a      	str	r2, [r3, #24]
      break;
 8003b3e:	e0a5      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fb2a 	bl	80041a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6999      	ldr	r1, [r3, #24]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
      break;
 8003b80:	e084      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fb81 	bl	8004290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0208 	orr.w	r2, r2, #8
 8003b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0204 	bic.w	r2, r2, #4
 8003bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	61da      	str	r2, [r3, #28]
      break;
 8003bc0:	e064      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fbd7 	bl	800437c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69d9      	ldr	r1, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	021a      	lsls	r2, r3, #8
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	61da      	str	r2, [r3, #28]
      break;
 8003c02:	e043      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fc0e 	bl	800442c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0208 	orr.w	r2, r2, #8
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0204 	bic.w	r2, r2, #4
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c42:	e023      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fc40 	bl	80044d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c84:	e002      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]
      break;
 8003c8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop

08003ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0x1c>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0b4      	b.n	8003e26 <HAL_TIM_ConfigClockSource+0x186>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <HAL_TIM_ConfigClockSource+0x190>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf4:	d03e      	beq.n	8003d74 <HAL_TIM_ConfigClockSource+0xd4>
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfa:	f200 8087 	bhi.w	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d02:	f000 8086 	beq.w	8003e12 <HAL_TIM_ConfigClockSource+0x172>
 8003d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0a:	d87f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b70      	cmp	r3, #112	; 0x70
 8003d0e:	d01a      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0xa6>
 8003d10:	2b70      	cmp	r3, #112	; 0x70
 8003d12:	d87b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b60      	cmp	r3, #96	; 0x60
 8003d16:	d050      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x11a>
 8003d18:	2b60      	cmp	r3, #96	; 0x60
 8003d1a:	d877      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b50      	cmp	r3, #80	; 0x50
 8003d1e:	d03c      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0xfa>
 8003d20:	2b50      	cmp	r3, #80	; 0x50
 8003d22:	d873      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d058      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x13a>
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d86f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b30      	cmp	r3, #48	; 0x30
 8003d2e:	d064      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	2b30      	cmp	r3, #48	; 0x30
 8003d32:	d86b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d060      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d867      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d05a      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d44:	e062      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d56:	f000 fe47 	bl	80049e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	609a      	str	r2, [r3, #8]
      break;
 8003d72:	e04f      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d84:	f000 fe30 	bl	80049e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d96:	609a      	str	r2, [r3, #8]
      break;
 8003d98:	e03c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 fcee 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2150      	movs	r1, #80	; 0x50
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fdfd 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 8003db8:	e02c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f000 fd4a 	bl	8004860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2160      	movs	r1, #96	; 0x60
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fded 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 8003dd8:	e01c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de6:	461a      	mov	r2, r3
 8003de8:	f000 fcce 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2140      	movs	r1, #64	; 0x40
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fddd 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 8003df8:	e00c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 fdd4 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 8003e0a:	e003      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e000      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	fffeff88 	.word	0xfffeff88

08003e34 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e031      	b.n	8003eb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fb8a 	bl	8004578 <TIM_SlaveTimer_SetConfig>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e018      	b.n	8003eb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e9c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d831      	bhi.n	8003f30 <HAL_TIM_ReadCapturedValue+0x78>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f31 	.word	0x08003f31
 8003edc:	08003f31 	.word	0x08003f31
 8003ee0:	08003f31 	.word	0x08003f31
 8003ee4:	08003f13 	.word	0x08003f13
 8003ee8:	08003f31 	.word	0x08003f31
 8003eec:	08003f31 	.word	0x08003f31
 8003ef0:	08003f31 	.word	0x08003f31
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	08003f31 	.word	0x08003f31
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f31 	.word	0x08003f31
 8003f04:	08003f27 	.word	0x08003f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	60fb      	str	r3, [r7, #12]

      break;
 8003f10:	e00f      	b.n	8003f32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	60fb      	str	r3, [r7, #12]

      break;
 8003f1a:	e00a      	b.n	8003f32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	60fb      	str	r3, [r7, #12]

      break;
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	60fb      	str	r3, [r7, #12]

      break;
 8003f2e:	e000      	b.n	8003f32 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003f30:	bf00      	nop
  }

  return tmpreg;
 8003f32:	68fb      	ldr	r3, [r7, #12]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a40      	ldr	r2, [pc, #256]	; (8004090 <TIM_Base_SetConfig+0x114>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d013      	beq.n	8003fbc <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9a:	d00f      	beq.n	8003fbc <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3d      	ldr	r2, [pc, #244]	; (8004094 <TIM_Base_SetConfig+0x118>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00b      	beq.n	8003fbc <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3c      	ldr	r2, [pc, #240]	; (8004098 <TIM_Base_SetConfig+0x11c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d007      	beq.n	8003fbc <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a3b      	ldr	r2, [pc, #236]	; (800409c <TIM_Base_SetConfig+0x120>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a3a      	ldr	r2, [pc, #232]	; (80040a0 <TIM_Base_SetConfig+0x124>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d108      	bne.n	8003fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2f      	ldr	r2, [pc, #188]	; (8004090 <TIM_Base_SetConfig+0x114>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02b      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d027      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2c      	ldr	r2, [pc, #176]	; (8004094 <TIM_Base_SetConfig+0x118>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d023      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2b      	ldr	r2, [pc, #172]	; (8004098 <TIM_Base_SetConfig+0x11c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01f      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a2a      	ldr	r2, [pc, #168]	; (800409c <TIM_Base_SetConfig+0x120>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01b      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a29      	ldr	r2, [pc, #164]	; (80040a0 <TIM_Base_SetConfig+0x124>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d017      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a28      	ldr	r2, [pc, #160]	; (80040a4 <TIM_Base_SetConfig+0x128>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <TIM_Base_SetConfig+0x12c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a26      	ldr	r2, [pc, #152]	; (80040ac <TIM_Base_SetConfig+0x130>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a25      	ldr	r2, [pc, #148]	; (80040b0 <TIM_Base_SetConfig+0x134>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a24      	ldr	r2, [pc, #144]	; (80040b4 <TIM_Base_SetConfig+0x138>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a23      	ldr	r2, [pc, #140]	; (80040b8 <TIM_Base_SetConfig+0x13c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d108      	bne.n	8004040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <TIM_Base_SetConfig+0x114>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_Base_SetConfig+0xf8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <TIM_Base_SetConfig+0x124>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d103      	bne.n	800407c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	615a      	str	r2, [r3, #20]
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800
 800409c:	40000c00 	.word	0x40000c00
 80040a0:	40010400 	.word	0x40010400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800
 80040b0:	40001800 	.word	0x40001800
 80040b4:	40001c00 	.word	0x40001c00
 80040b8:	40002000 	.word	0x40002000

080040bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0201 	bic.w	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <TIM_OC1_SetConfig+0xd8>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 0302 	bic.w	r3, r3, #2
 8004104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <TIM_OC1_SetConfig+0xdc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_OC1_SetConfig+0x64>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a20      	ldr	r2, [pc, #128]	; (800419c <TIM_OC1_SetConfig+0xe0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10c      	bne.n	800413a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0308 	bic.w	r3, r3, #8
 8004126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a16      	ldr	r2, [pc, #88]	; (8004198 <TIM_OC1_SetConfig+0xdc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_OC1_SetConfig+0x8e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <TIM_OC1_SetConfig+0xe0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d111      	bne.n	800416e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	fffeff8f 	.word	0xfffeff8f
 8004198:	40010000 	.word	0x40010000
 800419c:	40010400 	.word	0x40010400

080041a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0210 	bic.w	r2, r3, #16
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <TIM_OC2_SetConfig+0xe4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0320 	bic.w	r3, r3, #32
 80041ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a23      	ldr	r2, [pc, #140]	; (8004288 <TIM_OC2_SetConfig+0xe8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_OC2_SetConfig+0x68>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a22      	ldr	r2, [pc, #136]	; (800428c <TIM_OC2_SetConfig+0xec>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d10d      	bne.n	8004224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800420e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <TIM_OC2_SetConfig+0xe8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC2_SetConfig+0x94>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a17      	ldr	r2, [pc, #92]	; (800428c <TIM_OC2_SetConfig+0xec>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d113      	bne.n	800425c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800423a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	feff8fff 	.word	0xfeff8fff
 8004288:	40010000 	.word	0x40010000
 800428c:	40010400 	.word	0x40010400

08004290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <TIM_OC3_SetConfig+0xe0>)
 80042bc:	4013      	ands	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a22      	ldr	r2, [pc, #136]	; (8004374 <TIM_OC3_SetConfig+0xe4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_OC3_SetConfig+0x66>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a21      	ldr	r2, [pc, #132]	; (8004378 <TIM_OC3_SetConfig+0xe8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10d      	bne.n	8004312 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a17      	ldr	r2, [pc, #92]	; (8004374 <TIM_OC3_SetConfig+0xe4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d003      	beq.n	8004322 <TIM_OC3_SetConfig+0x92>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <TIM_OC3_SetConfig+0xe8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d113      	bne.n	800434a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	621a      	str	r2, [r3, #32]
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	fffeff8f 	.word	0xfffeff8f
 8004374:	40010000 	.word	0x40010000
 8004378:	40010400 	.word	0x40010400

0800437c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <TIM_OC4_SetConfig+0xa4>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a13      	ldr	r2, [pc, #76]	; (8004424 <TIM_OC4_SetConfig+0xa8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_OC4_SetConfig+0x68>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a12      	ldr	r2, [pc, #72]	; (8004428 <TIM_OC4_SetConfig+0xac>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d109      	bne.n	80043f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	019b      	lsls	r3, r3, #6
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	621a      	str	r2, [r3, #32]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	feff8fff 	.word	0xfeff8fff
 8004424:	40010000 	.word	0x40010000
 8004428:	40010400 	.word	0x40010400

0800442c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <TIM_OC5_SetConfig+0x98>)
 8004458:	4013      	ands	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800446c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	041b      	lsls	r3, r3, #16
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <TIM_OC5_SetConfig+0x9c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_OC5_SetConfig+0x5e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a11      	ldr	r2, [pc, #68]	; (80044cc <TIM_OC5_SetConfig+0xa0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d109      	bne.n	800449e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	fffeff8f 	.word	0xfffeff8f
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40010400 	.word	0x40010400

080044d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4b1c      	ldr	r3, [pc, #112]	; (800456c <TIM_OC6_SetConfig+0x9c>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	051b      	lsls	r3, r3, #20
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a13      	ldr	r2, [pc, #76]	; (8004570 <TIM_OC6_SetConfig+0xa0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d003      	beq.n	8004530 <TIM_OC6_SetConfig+0x60>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a12      	ldr	r2, [pc, #72]	; (8004574 <TIM_OC6_SetConfig+0xa4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d109      	bne.n	8004544 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004536:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	029b      	lsls	r3, r3, #10
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	feff8fff 	.word	0xfeff8fff
 8004570:	40010000 	.word	0x40010000
 8004574:	40010400 	.word	0x40010400

08004578 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4b3e      	ldr	r3, [pc, #248]	; (800469c <TIM_SlaveTimer_SetConfig+0x124>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b70      	cmp	r3, #112	; 0x70
 80045c0:	d01a      	beq.n	80045f8 <TIM_SlaveTimer_SetConfig+0x80>
 80045c2:	2b70      	cmp	r3, #112	; 0x70
 80045c4:	d860      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045c6:	2b60      	cmp	r3, #96	; 0x60
 80045c8:	d054      	beq.n	8004674 <TIM_SlaveTimer_SetConfig+0xfc>
 80045ca:	2b60      	cmp	r3, #96	; 0x60
 80045cc:	d85c      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045ce:	2b50      	cmp	r3, #80	; 0x50
 80045d0:	d046      	beq.n	8004660 <TIM_SlaveTimer_SetConfig+0xe8>
 80045d2:	2b50      	cmp	r3, #80	; 0x50
 80045d4:	d858      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d019      	beq.n	800460e <TIM_SlaveTimer_SetConfig+0x96>
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d854      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045de:	2b30      	cmp	r3, #48	; 0x30
 80045e0:	d055      	beq.n	800468e <TIM_SlaveTimer_SetConfig+0x116>
 80045e2:	2b30      	cmp	r3, #48	; 0x30
 80045e4:	d850      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d051      	beq.n	800468e <TIM_SlaveTimer_SetConfig+0x116>
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d84c      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04d      	beq.n	800468e <TIM_SlaveTimer_SetConfig+0x116>
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d04b      	beq.n	800468e <TIM_SlaveTimer_SetConfig+0x116>
 80045f6:	e047      	b.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004608:	f000 f9ee 	bl	80049e8 <TIM_ETR_SetConfig>
      break;
 800460c:	e040      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b05      	cmp	r3, #5
 8004614:	d101      	bne.n	800461a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e03b      	b.n	8004692 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004640:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	621a      	str	r2, [r3, #32]
      break;
 800465e:	e017      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800466c:	461a      	mov	r2, r3
 800466e:	f000 f88b 	bl	8004788 <TIM_TI1_ConfigInputStage>
      break;
 8004672:	e00d      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004680:	461a      	mov	r2, r3
 8004682:	f000 f8ed 	bl	8004860 <TIM_TI2_ConfigInputStage>
      break;
 8004686:	e003      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	75fb      	strb	r3, [r7, #23]
      break;
 800468c:	e000      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800468e:	bf00      	nop
  }

  return status;
 8004690:	7dfb      	ldrb	r3, [r7, #23]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	fffefff8 	.word	0xfffefff8

080046a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a28      	ldr	r2, [pc, #160]	; (800476c <TIM_TI1_SetConfig+0xcc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01b      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d017      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a25      	ldr	r2, [pc, #148]	; (8004770 <TIM_TI1_SetConfig+0xd0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a24      	ldr	r2, [pc, #144]	; (8004774 <TIM_TI1_SetConfig+0xd4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a23      	ldr	r2, [pc, #140]	; (8004778 <TIM_TI1_SetConfig+0xd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a22      	ldr	r2, [pc, #136]	; (800477c <TIM_TI1_SetConfig+0xdc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a21      	ldr	r2, [pc, #132]	; (8004780 <TIM_TI1_SetConfig+0xe0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a20      	ldr	r2, [pc, #128]	; (8004784 <TIM_TI1_SetConfig+0xe4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <TIM_TI1_SetConfig+0x6a>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <TIM_TI1_SetConfig+0x6c>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	e003      	b.n	800472a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004730:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	b2db      	uxtb	r3, r3
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f023 030a 	bic.w	r3, r3, #10
 8004744:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f003 030a 	and.w	r3, r3, #10
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40000c00 	.word	0x40000c00
 800477c:	40010400 	.word	0x40010400
 8004780:	40014000 	.word	0x40014000
 8004784:	40001800 	.word	0x40001800

08004788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f023 0201 	bic.w	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 030a 	bic.w	r3, r3, #10
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b087      	sub	sp, #28
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 0210 	bic.w	r2, r3, #16
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004812:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	031b      	lsls	r3, r3, #12
 800482a:	b29b      	uxth	r3, r3
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004838:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f023 0210 	bic.w	r2, r3, #16
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800488a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	031b      	lsls	r3, r3, #12
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800489c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	621a      	str	r2, [r3, #32]
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 0303 	bic.w	r3, r3, #3
 80048ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	b2db      	uxtb	r3, r3
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004910:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	621a      	str	r2, [r3, #32]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004964:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004976:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	031b      	lsls	r3, r3, #12
 800497c:	b29b      	uxth	r3, r3
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800498a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	031b      	lsls	r3, r3, #12
 8004990:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f043 0307 	orr.w	r3, r3, #7
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	021a      	lsls	r2, r3, #8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e06d      	b.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a30      	ldr	r2, [pc, #192]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2f      	ldr	r2, [pc, #188]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d108      	bne.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ac6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d022      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afe:	d01d      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d018      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d10c      	bne.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40010400 	.word	0x40010400
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40001800 	.word	0x40001800

08004b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e040      	b.n	8004c60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fc60 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	; 0x24
 8004bf8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fb62 	bl	80052d4 <UART_SetConfig>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e022      	b.n	8004c60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fdba 	bl	800579c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fe41 	bl	80058e0 <UART_CheckIdleState>
 8004c5e:	4603      	mov	r3, r0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d132      	bne.n	8004ce6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_UART_Receive_IT+0x24>
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e02b      	b.n	8004ce8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d018      	beq.n	8004cd6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	69f9      	ldr	r1, [r7, #28]
 8004cc8:	6a3a      	ldr	r2, [r7, #32]
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e6      	bne.n	8004ca4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fefd 	bl	8005adc <UART_Start_Receive_IT>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	e000      	b.n	8004ce8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004ce6:	2302      	movs	r3, #2
  }
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0ba      	sub	sp, #232	; 0xe8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d1e:	4013      	ands	r3, r2
 8004d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d115      	bne.n	8004d58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00f      	beq.n	8004d58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8297 	beq.w	800527c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
      }
      return;
 8004d56:	e291      	b.n	800527c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8117 	beq.w	8004f90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d72:	4b85      	ldr	r3, [pc, #532]	; (8004f88 <HAL_UART_IRQHandler+0x298>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 810a 	beq.w	8004f90 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d011      	beq.n	8004dac <HAL_UART_IRQHandler+0xbc>
 8004d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da2:	f043 0201 	orr.w	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d011      	beq.n	8004ddc <HAL_UART_IRQHandler+0xec>
 8004db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00b      	beq.n	8004ddc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd2:	f043 0204 	orr.w	r2, r3, #4
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <HAL_UART_IRQHandler+0x11c>
 8004de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e02:	f043 0202 	orr.w	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d017      	beq.n	8004e48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00b      	beq.n	8004e48 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2208      	movs	r2, #8
 8004e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3e:	f043 0208 	orr.w	r2, r3, #8
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d012      	beq.n	8004e7a <HAL_UART_IRQHandler+0x18a>
 8004e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00c      	beq.n	8004e7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 81fd 	beq.w	8005280 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d005      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04f      	beq.n	8004f72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fec8 	bl	8005c68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d141      	bne.n	8004f6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3308      	adds	r3, #8
 8004eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1d9      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d013      	beq.n	8004f62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <HAL_UART_IRQHandler+0x29c>)
 8004f40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fc fd7d 	bl	8001a46 <HAL_DMA_Abort_IT>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d017      	beq.n	8004f82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	e00f      	b.n	8004f82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f9a0 	bl	80052a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	e00b      	b.n	8004f82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f99c 	bl	80052a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	e007      	b.n	8004f82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f998 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004f80:	e17e      	b.n	8005280 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f82:	bf00      	nop
    return;
 8004f84:	e17c      	b.n	8005280 <HAL_UART_IRQHandler+0x590>
 8004f86:	bf00      	nop
 8004f88:	04000120 	.word	0x04000120
 8004f8c:	08005d31 	.word	0x08005d31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	f040 814c 	bne.w	8005232 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8145 	beq.w	8005232 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 813e 	beq.w	8005232 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2210      	movs	r2, #16
 8004fbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	f040 80b6 	bne.w	800513a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8150 	beq.w	8005284 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	f080 8148 	bcs.w	8005284 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ffa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005008:	f000 8086 	beq.w	8005118 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800503a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800504e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1da      	bne.n	800500c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3308      	adds	r3, #8
 800505c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800507a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800507e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800508c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e1      	bne.n	8005056 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3308      	adds	r3, #8
 8005098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3308      	adds	r3, #8
 80050b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e3      	bne.n	8005092 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e8:	f023 0310 	bic.w	r3, r3, #16
 80050ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80050fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e4      	bne.n	80050d8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005112:	4618      	mov	r0, r3
 8005114:	f7fc fc27 	bl	8001966 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800512a:	b29b      	uxth	r3, r3
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	b29b      	uxth	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f8c2 	bl	80052bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005138:	e0a4      	b.n	8005284 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005146:	b29b      	uxth	r3, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 8096 	beq.w	8005288 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800515c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8091 	beq.w	8005288 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005176:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800517a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005188:	647b      	str	r3, [r7, #68]	; 0x44
 800518a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800518e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e4      	bne.n	8005166 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3308      	adds	r3, #8
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	623b      	str	r3, [r7, #32]
   return(result);
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051c0:	633a      	str	r2, [r7, #48]	; 0x30
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e3      	bne.n	800519c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f023 0310 	bic.w	r3, r3, #16
 80051fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	69b9      	ldr	r1, [r7, #24]
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	617b      	str	r3, [r7, #20]
   return(result);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e4      	bne.n	80051e8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f846 	bl	80052bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005230:	e02a      	b.n	8005288 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00e      	beq.n	800525c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800523e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01c      	beq.n	800528c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
    }
    return;
 800525a:	e017      	b.n	800528c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800525c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d012      	beq.n	800528e <HAL_UART_IRQHandler+0x59e>
 8005268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00c      	beq.n	800528e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fd71 	bl	8005d5c <UART_EndTransmit_IT>
    return;
 800527a:	e008      	b.n	800528e <HAL_UART_IRQHandler+0x59e>
      return;
 800527c:	bf00      	nop
 800527e:	e006      	b.n	800528e <HAL_UART_IRQHandler+0x59e>
    return;
 8005280:	bf00      	nop
 8005282:	e004      	b.n	800528e <HAL_UART_IRQHandler+0x59e>
      return;
 8005284:	bf00      	nop
 8005286:	e002      	b.n	800528e <HAL_UART_IRQHandler+0x59e>
      return;
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <HAL_UART_IRQHandler+0x59e>
    return;
 800528c:	bf00      	nop
  }

}
 800528e:	37e8      	adds	r7, #232	; 0xe8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4ba6      	ldr	r3, [pc, #664]	; (8005598 <UART_SetConfig+0x2c4>)
 8005300:	4013      	ands	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	6979      	ldr	r1, [r7, #20]
 8005308:	430b      	orrs	r3, r1
 800530a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	430a      	orrs	r2, r1
 8005344:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a94      	ldr	r2, [pc, #592]	; (800559c <UART_SetConfig+0x2c8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d120      	bne.n	8005392 <UART_SetConfig+0xbe>
 8005350:	4b93      	ldr	r3, [pc, #588]	; (80055a0 <UART_SetConfig+0x2cc>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b03      	cmp	r3, #3
 800535c:	d816      	bhi.n	800538c <UART_SetConfig+0xb8>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x90>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005375 	.word	0x08005375
 8005368:	08005381 	.word	0x08005381
 800536c:	0800537b 	.word	0x0800537b
 8005370:	08005387 	.word	0x08005387
 8005374:	2301      	movs	r3, #1
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e150      	b.n	800561c <UART_SetConfig+0x348>
 800537a:	2302      	movs	r3, #2
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e14d      	b.n	800561c <UART_SetConfig+0x348>
 8005380:	2304      	movs	r3, #4
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e14a      	b.n	800561c <UART_SetConfig+0x348>
 8005386:	2308      	movs	r3, #8
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e147      	b.n	800561c <UART_SetConfig+0x348>
 800538c:	2310      	movs	r3, #16
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e144      	b.n	800561c <UART_SetConfig+0x348>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a83      	ldr	r2, [pc, #524]	; (80055a4 <UART_SetConfig+0x2d0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d132      	bne.n	8005402 <UART_SetConfig+0x12e>
 800539c:	4b80      	ldr	r3, [pc, #512]	; (80055a0 <UART_SetConfig+0x2cc>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d828      	bhi.n	80053fc <UART_SetConfig+0x128>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0xdc>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	080053fd 	.word	0x080053fd
 80053b8:	080053fd 	.word	0x080053fd
 80053bc:	080053fd 	.word	0x080053fd
 80053c0:	080053f1 	.word	0x080053f1
 80053c4:	080053fd 	.word	0x080053fd
 80053c8:	080053fd 	.word	0x080053fd
 80053cc:	080053fd 	.word	0x080053fd
 80053d0:	080053eb 	.word	0x080053eb
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	080053fd 	.word	0x080053fd
 80053e0:	080053f7 	.word	0x080053f7
 80053e4:	2300      	movs	r3, #0
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	e118      	b.n	800561c <UART_SetConfig+0x348>
 80053ea:	2302      	movs	r3, #2
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e115      	b.n	800561c <UART_SetConfig+0x348>
 80053f0:	2304      	movs	r3, #4
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e112      	b.n	800561c <UART_SetConfig+0x348>
 80053f6:	2308      	movs	r3, #8
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e10f      	b.n	800561c <UART_SetConfig+0x348>
 80053fc:	2310      	movs	r3, #16
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e10c      	b.n	800561c <UART_SetConfig+0x348>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a68      	ldr	r2, [pc, #416]	; (80055a8 <UART_SetConfig+0x2d4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d120      	bne.n	800544e <UART_SetConfig+0x17a>
 800540c:	4b64      	ldr	r3, [pc, #400]	; (80055a0 <UART_SetConfig+0x2cc>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005416:	2b30      	cmp	r3, #48	; 0x30
 8005418:	d013      	beq.n	8005442 <UART_SetConfig+0x16e>
 800541a:	2b30      	cmp	r3, #48	; 0x30
 800541c:	d814      	bhi.n	8005448 <UART_SetConfig+0x174>
 800541e:	2b20      	cmp	r3, #32
 8005420:	d009      	beq.n	8005436 <UART_SetConfig+0x162>
 8005422:	2b20      	cmp	r3, #32
 8005424:	d810      	bhi.n	8005448 <UART_SetConfig+0x174>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <UART_SetConfig+0x15c>
 800542a:	2b10      	cmp	r3, #16
 800542c:	d006      	beq.n	800543c <UART_SetConfig+0x168>
 800542e:	e00b      	b.n	8005448 <UART_SetConfig+0x174>
 8005430:	2300      	movs	r3, #0
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e0f2      	b.n	800561c <UART_SetConfig+0x348>
 8005436:	2302      	movs	r3, #2
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e0ef      	b.n	800561c <UART_SetConfig+0x348>
 800543c:	2304      	movs	r3, #4
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e0ec      	b.n	800561c <UART_SetConfig+0x348>
 8005442:	2308      	movs	r3, #8
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e0e9      	b.n	800561c <UART_SetConfig+0x348>
 8005448:	2310      	movs	r3, #16
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e0e6      	b.n	800561c <UART_SetConfig+0x348>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a56      	ldr	r2, [pc, #344]	; (80055ac <UART_SetConfig+0x2d8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d120      	bne.n	800549a <UART_SetConfig+0x1c6>
 8005458:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <UART_SetConfig+0x2cc>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005462:	2bc0      	cmp	r3, #192	; 0xc0
 8005464:	d013      	beq.n	800548e <UART_SetConfig+0x1ba>
 8005466:	2bc0      	cmp	r3, #192	; 0xc0
 8005468:	d814      	bhi.n	8005494 <UART_SetConfig+0x1c0>
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d009      	beq.n	8005482 <UART_SetConfig+0x1ae>
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d810      	bhi.n	8005494 <UART_SetConfig+0x1c0>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <UART_SetConfig+0x1a8>
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	d006      	beq.n	8005488 <UART_SetConfig+0x1b4>
 800547a:	e00b      	b.n	8005494 <UART_SetConfig+0x1c0>
 800547c:	2300      	movs	r3, #0
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e0cc      	b.n	800561c <UART_SetConfig+0x348>
 8005482:	2302      	movs	r3, #2
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e0c9      	b.n	800561c <UART_SetConfig+0x348>
 8005488:	2304      	movs	r3, #4
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e0c6      	b.n	800561c <UART_SetConfig+0x348>
 800548e:	2308      	movs	r3, #8
 8005490:	77fb      	strb	r3, [r7, #31]
 8005492:	e0c3      	b.n	800561c <UART_SetConfig+0x348>
 8005494:	2310      	movs	r3, #16
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e0c0      	b.n	800561c <UART_SetConfig+0x348>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a44      	ldr	r2, [pc, #272]	; (80055b0 <UART_SetConfig+0x2dc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d125      	bne.n	80054f0 <UART_SetConfig+0x21c>
 80054a4:	4b3e      	ldr	r3, [pc, #248]	; (80055a0 <UART_SetConfig+0x2cc>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b2:	d017      	beq.n	80054e4 <UART_SetConfig+0x210>
 80054b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b8:	d817      	bhi.n	80054ea <UART_SetConfig+0x216>
 80054ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054be:	d00b      	beq.n	80054d8 <UART_SetConfig+0x204>
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d811      	bhi.n	80054ea <UART_SetConfig+0x216>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <UART_SetConfig+0x1fe>
 80054ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ce:	d006      	beq.n	80054de <UART_SetConfig+0x20a>
 80054d0:	e00b      	b.n	80054ea <UART_SetConfig+0x216>
 80054d2:	2300      	movs	r3, #0
 80054d4:	77fb      	strb	r3, [r7, #31]
 80054d6:	e0a1      	b.n	800561c <UART_SetConfig+0x348>
 80054d8:	2302      	movs	r3, #2
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e09e      	b.n	800561c <UART_SetConfig+0x348>
 80054de:	2304      	movs	r3, #4
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e09b      	b.n	800561c <UART_SetConfig+0x348>
 80054e4:	2308      	movs	r3, #8
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e098      	b.n	800561c <UART_SetConfig+0x348>
 80054ea:	2310      	movs	r3, #16
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e095      	b.n	800561c <UART_SetConfig+0x348>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a2f      	ldr	r2, [pc, #188]	; (80055b4 <UART_SetConfig+0x2e0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d125      	bne.n	8005546 <UART_SetConfig+0x272>
 80054fa:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <UART_SetConfig+0x2cc>)
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005508:	d017      	beq.n	800553a <UART_SetConfig+0x266>
 800550a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800550e:	d817      	bhi.n	8005540 <UART_SetConfig+0x26c>
 8005510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005514:	d00b      	beq.n	800552e <UART_SetConfig+0x25a>
 8005516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551a:	d811      	bhi.n	8005540 <UART_SetConfig+0x26c>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <UART_SetConfig+0x254>
 8005520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005524:	d006      	beq.n	8005534 <UART_SetConfig+0x260>
 8005526:	e00b      	b.n	8005540 <UART_SetConfig+0x26c>
 8005528:	2301      	movs	r3, #1
 800552a:	77fb      	strb	r3, [r7, #31]
 800552c:	e076      	b.n	800561c <UART_SetConfig+0x348>
 800552e:	2302      	movs	r3, #2
 8005530:	77fb      	strb	r3, [r7, #31]
 8005532:	e073      	b.n	800561c <UART_SetConfig+0x348>
 8005534:	2304      	movs	r3, #4
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e070      	b.n	800561c <UART_SetConfig+0x348>
 800553a:	2308      	movs	r3, #8
 800553c:	77fb      	strb	r3, [r7, #31]
 800553e:	e06d      	b.n	800561c <UART_SetConfig+0x348>
 8005540:	2310      	movs	r3, #16
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e06a      	b.n	800561c <UART_SetConfig+0x348>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1b      	ldr	r2, [pc, #108]	; (80055b8 <UART_SetConfig+0x2e4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d138      	bne.n	80055c2 <UART_SetConfig+0x2ee>
 8005550:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <UART_SetConfig+0x2cc>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800555a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800555e:	d017      	beq.n	8005590 <UART_SetConfig+0x2bc>
 8005560:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005564:	d82a      	bhi.n	80055bc <UART_SetConfig+0x2e8>
 8005566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556a:	d00b      	beq.n	8005584 <UART_SetConfig+0x2b0>
 800556c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005570:	d824      	bhi.n	80055bc <UART_SetConfig+0x2e8>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <UART_SetConfig+0x2aa>
 8005576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557a:	d006      	beq.n	800558a <UART_SetConfig+0x2b6>
 800557c:	e01e      	b.n	80055bc <UART_SetConfig+0x2e8>
 800557e:	2300      	movs	r3, #0
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e04b      	b.n	800561c <UART_SetConfig+0x348>
 8005584:	2302      	movs	r3, #2
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e048      	b.n	800561c <UART_SetConfig+0x348>
 800558a:	2304      	movs	r3, #4
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e045      	b.n	800561c <UART_SetConfig+0x348>
 8005590:	2308      	movs	r3, #8
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e042      	b.n	800561c <UART_SetConfig+0x348>
 8005596:	bf00      	nop
 8005598:	efff69f3 	.word	0xefff69f3
 800559c:	40011000 	.word	0x40011000
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40004400 	.word	0x40004400
 80055a8:	40004800 	.word	0x40004800
 80055ac:	40004c00 	.word	0x40004c00
 80055b0:	40005000 	.word	0x40005000
 80055b4:	40011400 	.word	0x40011400
 80055b8:	40007800 	.word	0x40007800
 80055bc:	2310      	movs	r3, #16
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e02c      	b.n	800561c <UART_SetConfig+0x348>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a72      	ldr	r2, [pc, #456]	; (8005790 <UART_SetConfig+0x4bc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d125      	bne.n	8005618 <UART_SetConfig+0x344>
 80055cc:	4b71      	ldr	r3, [pc, #452]	; (8005794 <UART_SetConfig+0x4c0>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055da:	d017      	beq.n	800560c <UART_SetConfig+0x338>
 80055dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055e0:	d817      	bhi.n	8005612 <UART_SetConfig+0x33e>
 80055e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e6:	d00b      	beq.n	8005600 <UART_SetConfig+0x32c>
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	d811      	bhi.n	8005612 <UART_SetConfig+0x33e>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <UART_SetConfig+0x326>
 80055f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f6:	d006      	beq.n	8005606 <UART_SetConfig+0x332>
 80055f8:	e00b      	b.n	8005612 <UART_SetConfig+0x33e>
 80055fa:	2300      	movs	r3, #0
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e00d      	b.n	800561c <UART_SetConfig+0x348>
 8005600:	2302      	movs	r3, #2
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e00a      	b.n	800561c <UART_SetConfig+0x348>
 8005606:	2304      	movs	r3, #4
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e007      	b.n	800561c <UART_SetConfig+0x348>
 800560c:	2308      	movs	r3, #8
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e004      	b.n	800561c <UART_SetConfig+0x348>
 8005612:	2310      	movs	r3, #16
 8005614:	77fb      	strb	r3, [r7, #31]
 8005616:	e001      	b.n	800561c <UART_SetConfig+0x348>
 8005618:	2310      	movs	r3, #16
 800561a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005624:	d15b      	bne.n	80056de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005626:	7ffb      	ldrb	r3, [r7, #31]
 8005628:	2b08      	cmp	r3, #8
 800562a:	d828      	bhi.n	800567e <UART_SetConfig+0x3aa>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0x360>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	0800567f 	.word	0x0800567f
 8005644:	0800566f 	.word	0x0800566f
 8005648:	0800567f 	.word	0x0800567f
 800564c:	0800567f 	.word	0x0800567f
 8005650:	0800567f 	.word	0x0800567f
 8005654:	08005677 	.word	0x08005677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005658:	f7fd f8e0 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 800565c:	61b8      	str	r0, [r7, #24]
        break;
 800565e:	e013      	b.n	8005688 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7fd f8f0 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8005664:	61b8      	str	r0, [r7, #24]
        break;
 8005666:	e00f      	b.n	8005688 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005668:	4b4b      	ldr	r3, [pc, #300]	; (8005798 <UART_SetConfig+0x4c4>)
 800566a:	61bb      	str	r3, [r7, #24]
        break;
 800566c:	e00c      	b.n	8005688 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566e:	f7fc ffc3 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8005672:	61b8      	str	r0, [r7, #24]
        break;
 8005674:	e008      	b.n	8005688 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567a:	61bb      	str	r3, [r7, #24]
        break;
 800567c:	e004      	b.n	8005688 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	77bb      	strb	r3, [r7, #30]
        break;
 8005686:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d074      	beq.n	8005778 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	005a      	lsls	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b0f      	cmp	r3, #15
 80056a8:	d916      	bls.n	80056d8 <UART_SetConfig+0x404>
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b0:	d212      	bcs.n	80056d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f023 030f 	bic.w	r3, r3, #15
 80056ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	89fb      	ldrh	r3, [r7, #14]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	89fa      	ldrh	r2, [r7, #14]
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	e04f      	b.n	8005778 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	77bb      	strb	r3, [r7, #30]
 80056dc:	e04c      	b.n	8005778 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056de:	7ffb      	ldrb	r3, [r7, #31]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d828      	bhi.n	8005736 <UART_SetConfig+0x462>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0x418>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005711 	.word	0x08005711
 80056f0:	08005719 	.word	0x08005719
 80056f4:	08005721 	.word	0x08005721
 80056f8:	08005737 	.word	0x08005737
 80056fc:	08005727 	.word	0x08005727
 8005700:	08005737 	.word	0x08005737
 8005704:	08005737 	.word	0x08005737
 8005708:	08005737 	.word	0x08005737
 800570c:	0800572f 	.word	0x0800572f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005710:	f7fd f884 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8005714:	61b8      	str	r0, [r7, #24]
        break;
 8005716:	e013      	b.n	8005740 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005718:	f7fd f894 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 800571c:	61b8      	str	r0, [r7, #24]
        break;
 800571e:	e00f      	b.n	8005740 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005720:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <UART_SetConfig+0x4c4>)
 8005722:	61bb      	str	r3, [r7, #24]
        break;
 8005724:	e00c      	b.n	8005740 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005726:	f7fc ff67 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 800572a:	61b8      	str	r0, [r7, #24]
        break;
 800572c:	e008      	b.n	8005740 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005732:	61bb      	str	r3, [r7, #24]
        break;
 8005734:	e004      	b.n	8005740 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	77bb      	strb	r3, [r7, #30]
        break;
 800573e:	bf00      	nop
    }

    if (pclk != 0U)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	085a      	lsrs	r2, r3, #1
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	441a      	add	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b0f      	cmp	r3, #15
 800575e:	d909      	bls.n	8005774 <UART_SetConfig+0x4a0>
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005766:	d205      	bcs.n	8005774 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60da      	str	r2, [r3, #12]
 8005772:	e001      	b.n	8005778 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005784:	7fbb      	ldrb	r3, [r7, #30]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40007c00 	.word	0x40007c00
 8005794:	40023800 	.word	0x40023800
 8005798:	00f42400 	.word	0x00f42400

0800579c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589a:	d10a      	bne.n	80058b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f0:	f7fb ff1c 	bl	800172c <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d10e      	bne.n	8005922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f81b 	bl	800594e <UART_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e011      	b.n	8005946 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b09c      	sub	sp, #112	; 0x70
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	603b      	str	r3, [r7, #0]
 800595a:	4613      	mov	r3, r2
 800595c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595e:	e0a7      	b.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	f000 80a3 	beq.w	8005ab0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596a:	f7fb fedf 	bl	800172c <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <UART_WaitOnFlagUntilTimeout+0x32>
 800597a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597c:	2b00      	cmp	r3, #0
 800597e:	d13f      	bne.n	8005a00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800598e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005994:	667b      	str	r3, [r7, #100]	; 0x64
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800599e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e6      	bne.n	8005980 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80059d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e068      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d050      	beq.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1c:	d148      	bne.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a46:	637b      	str	r3, [r7, #52]	; 0x34
 8005a48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e6      	bne.n	8005a28 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3308      	adds	r3, #8
 8005a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	613b      	str	r3, [r7, #16]
   return(result);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a7a:	623a      	str	r2, [r7, #32]
 8005a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	69f9      	ldr	r1, [r7, #28]
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e5      	bne.n	8005a5a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e010      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	bf0c      	ite	eq
 8005ac0:	2301      	moveq	r3, #1
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	f43f af48 	beq.w	8005960 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3770      	adds	r7, #112	; 0x70
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b097      	sub	sp, #92	; 0x5c
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0e:	d10e      	bne.n	8005b2e <UART_Start_Receive_IT+0x52>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <UART_Start_Receive_IT+0x48>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b22:	e02d      	b.n	8005b80 <UART_Start_Receive_IT+0xa4>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	22ff      	movs	r2, #255	; 0xff
 8005b28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b2c:	e028      	b.n	8005b80 <UART_Start_Receive_IT+0xa4>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <UART_Start_Receive_IT+0x76>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <UART_Start_Receive_IT+0x6c>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	22ff      	movs	r2, #255	; 0xff
 8005b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b46:	e01b      	b.n	8005b80 <UART_Start_Receive_IT+0xa4>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	227f      	movs	r2, #127	; 0x7f
 8005b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b50:	e016      	b.n	8005b80 <UART_Start_Receive_IT+0xa4>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b5a:	d10d      	bne.n	8005b78 <UART_Start_Receive_IT+0x9c>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <UART_Start_Receive_IT+0x92>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	227f      	movs	r2, #127	; 0x7f
 8005b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b6c:	e008      	b.n	8005b80 <UART_Start_Receive_IT+0xa4>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	223f      	movs	r2, #63	; 0x3f
 8005b72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b76:	e003      	b.n	8005b80 <UART_Start_Receive_IT+0xa4>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2222      	movs	r2, #34	; 0x22
 8005b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3308      	adds	r3, #8
 8005bae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bb0:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bb2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e5      	bne.n	8005b90 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bcc:	d107      	bne.n	8005bde <UART_Start_Receive_IT+0x102>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a21      	ldr	r2, [pc, #132]	; (8005c60 <UART_Start_Receive_IT+0x184>)
 8005bda:	669a      	str	r2, [r3, #104]	; 0x68
 8005bdc:	e002      	b.n	8005be4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <UART_Start_Receive_IT+0x188>)
 8005be2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d019      	beq.n	8005c20 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e6      	bne.n	8005bec <UART_Start_Receive_IT+0x110>
 8005c1e:	e018      	b.n	8005c52 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f043 0320 	orr.w	r3, r3, #32
 8005c34:	653b      	str	r3, [r7, #80]	; 0x50
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3e:	623b      	str	r3, [r7, #32]
 8005c40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	69f9      	ldr	r1, [r7, #28]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e6      	bne.n	8005c20 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	375c      	adds	r7, #92	; 0x5c
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	08005f17 	.word	0x08005f17
 8005c64:	08005db1 	.word	0x08005db1

08005c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b095      	sub	sp, #84	; 0x54
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e6      	bne.n	8005c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e5      	bne.n	8005ca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d118      	bne.n	8005d10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0310 	bic.w	r3, r3, #16
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6979      	ldr	r1, [r7, #20]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e6      	bne.n	8005cde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d24:	bf00      	nop
 8005d26:	3754      	adds	r7, #84	; 0x54
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff faaa 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d78:	61fb      	str	r3, [r7, #28]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e6      	bne.n	8005d64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fa76 	bl	8005294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da8:	bf00      	nop
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b096      	sub	sp, #88	; 0x58
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dbe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc8:	2b22      	cmp	r3, #34	; 0x22
 8005dca:	f040 8098 	bne.w	8005efe <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005dd8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ddc:	b2d9      	uxtb	r1, r3
 8005dde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de8:	400a      	ands	r2, r1
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d17b      	bne.n	8005f0e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	647b      	str	r3, [r7, #68]	; 0x44
 8005e36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e6      	bne.n	8005e16 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	623b      	str	r3, [r7, #32]
   return(result);
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e68:	633a      	str	r2, [r7, #48]	; 0x30
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e5      	bne.n	8005e48 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d12e      	bne.n	8005ef6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0310 	bic.w	r3, r3, #16
 8005eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	69b9      	ldr	r1, [r7, #24]
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e6      	bne.n	8005e9e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d103      	bne.n	8005ee6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2210      	movs	r2, #16
 8005ee4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff f9e4 	bl	80052bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ef4:	e00b      	b.n	8005f0e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fa fcf8 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8005efc:	e007      	b.n	8005f0e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0208 	orr.w	r2, r2, #8
 8005f0c:	619a      	str	r2, [r3, #24]
}
 8005f0e:	bf00      	nop
 8005f10:	3758      	adds	r7, #88	; 0x58
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b096      	sub	sp, #88	; 0x58
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f2e:	2b22      	cmp	r3, #34	; 0x22
 8005f30:	f040 8098 	bne.w	8006064 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f44:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005f48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f52:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f58:	1c9a      	adds	r2, r3, #2
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d17b      	bne.n	8006074 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e6      	bne.n	8005f7c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e5      	bne.n	8005fae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d12e      	bne.n	800605c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	60bb      	str	r3, [r7, #8]
   return(result);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f023 0310 	bic.w	r3, r3, #16
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6979      	ldr	r1, [r7, #20]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	613b      	str	r3, [r7, #16]
   return(result);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e6      	bne.n	8006004 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b10      	cmp	r3, #16
 8006042:	d103      	bne.n	800604c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2210      	movs	r2, #16
 800604a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff f931 	bl	80052bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800605a:	e00b      	b.n	8006074 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fa fc45 	bl	80008ec <HAL_UART_RxCpltCallback>
}
 8006062:	e007      	b.n	8006074 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0208 	orr.w	r2, r2, #8
 8006072:	619a      	str	r2, [r3, #24]
}
 8006074:	bf00      	nop
 8006076:	3758      	adds	r7, #88	; 0x58
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_strtol_l.constprop.0>:
 800607c:	2b01      	cmp	r3, #1
 800607e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006082:	d001      	beq.n	8006088 <_strtol_l.constprop.0+0xc>
 8006084:	2b24      	cmp	r3, #36	; 0x24
 8006086:	d906      	bls.n	8006096 <_strtol_l.constprop.0+0x1a>
 8006088:	f000 f88c 	bl	80061a4 <__errno>
 800608c:	2316      	movs	r3, #22
 800608e:	6003      	str	r3, [r0, #0]
 8006090:	2000      	movs	r0, #0
 8006092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006096:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800617c <_strtol_l.constprop.0+0x100>
 800609a:	460d      	mov	r5, r1
 800609c:	462e      	mov	r6, r5
 800609e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060a2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80060a6:	f017 0708 	ands.w	r7, r7, #8
 80060aa:	d1f7      	bne.n	800609c <_strtol_l.constprop.0+0x20>
 80060ac:	2c2d      	cmp	r4, #45	; 0x2d
 80060ae:	d132      	bne.n	8006116 <_strtol_l.constprop.0+0x9a>
 80060b0:	782c      	ldrb	r4, [r5, #0]
 80060b2:	2701      	movs	r7, #1
 80060b4:	1cb5      	adds	r5, r6, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d05b      	beq.n	8006172 <_strtol_l.constprop.0+0xf6>
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d109      	bne.n	80060d2 <_strtol_l.constprop.0+0x56>
 80060be:	2c30      	cmp	r4, #48	; 0x30
 80060c0:	d107      	bne.n	80060d2 <_strtol_l.constprop.0+0x56>
 80060c2:	782c      	ldrb	r4, [r5, #0]
 80060c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80060c8:	2c58      	cmp	r4, #88	; 0x58
 80060ca:	d14d      	bne.n	8006168 <_strtol_l.constprop.0+0xec>
 80060cc:	786c      	ldrb	r4, [r5, #1]
 80060ce:	2310      	movs	r3, #16
 80060d0:	3502      	adds	r5, #2
 80060d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80060d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80060da:	f04f 0e00 	mov.w	lr, #0
 80060de:	fbb8 f9f3 	udiv	r9, r8, r3
 80060e2:	4676      	mov	r6, lr
 80060e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80060e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80060ec:	f1bc 0f09 	cmp.w	ip, #9
 80060f0:	d816      	bhi.n	8006120 <_strtol_l.constprop.0+0xa4>
 80060f2:	4664      	mov	r4, ip
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	dd24      	ble.n	8006142 <_strtol_l.constprop.0+0xc6>
 80060f8:	f1be 3fff 	cmp.w	lr, #4294967295
 80060fc:	d008      	beq.n	8006110 <_strtol_l.constprop.0+0x94>
 80060fe:	45b1      	cmp	r9, r6
 8006100:	d31c      	bcc.n	800613c <_strtol_l.constprop.0+0xc0>
 8006102:	d101      	bne.n	8006108 <_strtol_l.constprop.0+0x8c>
 8006104:	45a2      	cmp	sl, r4
 8006106:	db19      	blt.n	800613c <_strtol_l.constprop.0+0xc0>
 8006108:	fb06 4603 	mla	r6, r6, r3, r4
 800610c:	f04f 0e01 	mov.w	lr, #1
 8006110:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006114:	e7e8      	b.n	80060e8 <_strtol_l.constprop.0+0x6c>
 8006116:	2c2b      	cmp	r4, #43	; 0x2b
 8006118:	bf04      	itt	eq
 800611a:	782c      	ldrbeq	r4, [r5, #0]
 800611c:	1cb5      	addeq	r5, r6, #2
 800611e:	e7ca      	b.n	80060b6 <_strtol_l.constprop.0+0x3a>
 8006120:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006124:	f1bc 0f19 	cmp.w	ip, #25
 8006128:	d801      	bhi.n	800612e <_strtol_l.constprop.0+0xb2>
 800612a:	3c37      	subs	r4, #55	; 0x37
 800612c:	e7e2      	b.n	80060f4 <_strtol_l.constprop.0+0x78>
 800612e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006132:	f1bc 0f19 	cmp.w	ip, #25
 8006136:	d804      	bhi.n	8006142 <_strtol_l.constprop.0+0xc6>
 8006138:	3c57      	subs	r4, #87	; 0x57
 800613a:	e7db      	b.n	80060f4 <_strtol_l.constprop.0+0x78>
 800613c:	f04f 3eff 	mov.w	lr, #4294967295
 8006140:	e7e6      	b.n	8006110 <_strtol_l.constprop.0+0x94>
 8006142:	f1be 3fff 	cmp.w	lr, #4294967295
 8006146:	d105      	bne.n	8006154 <_strtol_l.constprop.0+0xd8>
 8006148:	2322      	movs	r3, #34	; 0x22
 800614a:	6003      	str	r3, [r0, #0]
 800614c:	4646      	mov	r6, r8
 800614e:	b942      	cbnz	r2, 8006162 <_strtol_l.constprop.0+0xe6>
 8006150:	4630      	mov	r0, r6
 8006152:	e79e      	b.n	8006092 <_strtol_l.constprop.0+0x16>
 8006154:	b107      	cbz	r7, 8006158 <_strtol_l.constprop.0+0xdc>
 8006156:	4276      	negs	r6, r6
 8006158:	2a00      	cmp	r2, #0
 800615a:	d0f9      	beq.n	8006150 <_strtol_l.constprop.0+0xd4>
 800615c:	f1be 0f00 	cmp.w	lr, #0
 8006160:	d000      	beq.n	8006164 <_strtol_l.constprop.0+0xe8>
 8006162:	1e69      	subs	r1, r5, #1
 8006164:	6011      	str	r1, [r2, #0]
 8006166:	e7f3      	b.n	8006150 <_strtol_l.constprop.0+0xd4>
 8006168:	2430      	movs	r4, #48	; 0x30
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1b1      	bne.n	80060d2 <_strtol_l.constprop.0+0x56>
 800616e:	2308      	movs	r3, #8
 8006170:	e7af      	b.n	80060d2 <_strtol_l.constprop.0+0x56>
 8006172:	2c30      	cmp	r4, #48	; 0x30
 8006174:	d0a5      	beq.n	80060c2 <_strtol_l.constprop.0+0x46>
 8006176:	230a      	movs	r3, #10
 8006178:	e7ab      	b.n	80060d2 <_strtol_l.constprop.0+0x56>
 800617a:	bf00      	nop
 800617c:	080062cd 	.word	0x080062cd

08006180 <strtol>:
 8006180:	4613      	mov	r3, r2
 8006182:	460a      	mov	r2, r1
 8006184:	4601      	mov	r1, r0
 8006186:	4802      	ldr	r0, [pc, #8]	; (8006190 <strtol+0x10>)
 8006188:	6800      	ldr	r0, [r0, #0]
 800618a:	f7ff bf77 	b.w	800607c <_strtol_l.constprop.0>
 800618e:	bf00      	nop
 8006190:	20000068 	.word	0x20000068

08006194 <memset>:
 8006194:	4402      	add	r2, r0
 8006196:	4603      	mov	r3, r0
 8006198:	4293      	cmp	r3, r2
 800619a:	d100      	bne.n	800619e <memset+0xa>
 800619c:	4770      	bx	lr
 800619e:	f803 1b01 	strb.w	r1, [r3], #1
 80061a2:	e7f9      	b.n	8006198 <memset+0x4>

080061a4 <__errno>:
 80061a4:	4b01      	ldr	r3, [pc, #4]	; (80061ac <__errno+0x8>)
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20000068 	.word	0x20000068

080061b0 <__libc_init_array>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	4d0d      	ldr	r5, [pc, #52]	; (80061e8 <__libc_init_array+0x38>)
 80061b4:	4c0d      	ldr	r4, [pc, #52]	; (80061ec <__libc_init_array+0x3c>)
 80061b6:	1b64      	subs	r4, r4, r5
 80061b8:	10a4      	asrs	r4, r4, #2
 80061ba:	2600      	movs	r6, #0
 80061bc:	42a6      	cmp	r6, r4
 80061be:	d109      	bne.n	80061d4 <__libc_init_array+0x24>
 80061c0:	4d0b      	ldr	r5, [pc, #44]	; (80061f0 <__libc_init_array+0x40>)
 80061c2:	4c0c      	ldr	r4, [pc, #48]	; (80061f4 <__libc_init_array+0x44>)
 80061c4:	f000 f86a 	bl	800629c <_init>
 80061c8:	1b64      	subs	r4, r4, r5
 80061ca:	10a4      	asrs	r4, r4, #2
 80061cc:	2600      	movs	r6, #0
 80061ce:	42a6      	cmp	r6, r4
 80061d0:	d105      	bne.n	80061de <__libc_init_array+0x2e>
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d8:	4798      	blx	r3
 80061da:	3601      	adds	r6, #1
 80061dc:	e7ee      	b.n	80061bc <__libc_init_array+0xc>
 80061de:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e2:	4798      	blx	r3
 80061e4:	3601      	adds	r6, #1
 80061e6:	e7f2      	b.n	80061ce <__libc_init_array+0x1e>
 80061e8:	080063d8 	.word	0x080063d8
 80061ec:	080063d8 	.word	0x080063d8
 80061f0:	080063d8 	.word	0x080063d8
 80061f4:	080063dc 	.word	0x080063dc

080061f8 <fmaxf>:
 80061f8:	b508      	push	{r3, lr}
 80061fa:	ed2d 8b02 	vpush	{d8}
 80061fe:	eeb0 8a40 	vmov.f32	s16, s0
 8006202:	eef0 8a60 	vmov.f32	s17, s1
 8006206:	f000 f82d 	bl	8006264 <__fpclassifyf>
 800620a:	b148      	cbz	r0, 8006220 <fmaxf+0x28>
 800620c:	eeb0 0a68 	vmov.f32	s0, s17
 8006210:	f000 f828 	bl	8006264 <__fpclassifyf>
 8006214:	b130      	cbz	r0, 8006224 <fmaxf+0x2c>
 8006216:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621e:	dc01      	bgt.n	8006224 <fmaxf+0x2c>
 8006220:	eeb0 8a68 	vmov.f32	s16, s17
 8006224:	eeb0 0a48 	vmov.f32	s0, s16
 8006228:	ecbd 8b02 	vpop	{d8}
 800622c:	bd08      	pop	{r3, pc}

0800622e <fminf>:
 800622e:	b508      	push	{r3, lr}
 8006230:	ed2d 8b02 	vpush	{d8}
 8006234:	eeb0 8a40 	vmov.f32	s16, s0
 8006238:	eef0 8a60 	vmov.f32	s17, s1
 800623c:	f000 f812 	bl	8006264 <__fpclassifyf>
 8006240:	b148      	cbz	r0, 8006256 <fminf+0x28>
 8006242:	eeb0 0a68 	vmov.f32	s0, s17
 8006246:	f000 f80d 	bl	8006264 <__fpclassifyf>
 800624a:	b130      	cbz	r0, 800625a <fminf+0x2c>
 800624c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006254:	d401      	bmi.n	800625a <fminf+0x2c>
 8006256:	eeb0 8a68 	vmov.f32	s16, s17
 800625a:	eeb0 0a48 	vmov.f32	s0, s16
 800625e:	ecbd 8b02 	vpop	{d8}
 8006262:	bd08      	pop	{r3, pc}

08006264 <__fpclassifyf>:
 8006264:	ee10 3a10 	vmov	r3, s0
 8006268:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800626c:	d00d      	beq.n	800628a <__fpclassifyf+0x26>
 800626e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8006272:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006276:	d30a      	bcc.n	800628e <__fpclassifyf+0x2a>
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <__fpclassifyf+0x34>)
 800627a:	1e42      	subs	r2, r0, #1
 800627c:	429a      	cmp	r2, r3
 800627e:	d908      	bls.n	8006292 <__fpclassifyf+0x2e>
 8006280:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8006284:	4258      	negs	r0, r3
 8006286:	4158      	adcs	r0, r3
 8006288:	4770      	bx	lr
 800628a:	2002      	movs	r0, #2
 800628c:	4770      	bx	lr
 800628e:	2004      	movs	r0, #4
 8006290:	4770      	bx	lr
 8006292:	2003      	movs	r0, #3
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	007ffffe 	.word	0x007ffffe

0800629c <_init>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

080062a8 <_fini>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr
