
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005edc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c8  080061c8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080061d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000006c  0800623c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800623c  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b1a  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026eb  00000000  00000000  00031bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  000342e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b65  00000000  00000000  00035188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fd1  00000000  00000000  00035ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c8c  00000000  00000000  00038cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f075a  00000000  00000000  0004b94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ec4  00000000  00000000  0013c0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0013ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800608c 	.word	0x0800608c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000070 	.word	0x20000070
 8000204:	0800608c 	.word	0x0800608c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <SERVO_Init>:
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 90.0f);
 800050c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000528 <SERVO_Init+0x24>
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f000 f80b 	bl	800052c <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f879 	bl	8000610 <PWM_Init>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	42b40000 	.word	0x42b40000

0800052c <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 120.0f, 160.0f);
 8000538:	eddf 0a18 	vldr	s1, [pc, #96]	; 800059c <SERVO_WritePosition+0x70>
 800053c:	ed97 0a00 	vldr	s0, [r7]
 8000540:	f005 fd6d 	bl	800601e <fminf>
 8000544:	eef0 7a40 	vmov.f32	s15, s0
 8000548:	eddf 0a15 	vldr	s1, [pc, #84]	; 80005a0 <SERVO_WritePosition+0x74>
 800054c:	eeb0 0a67 	vmov.f32	s0, s15
 8000550:	f005 fd4a 	bl	8005fe8 <fmaxf>
 8000554:	eef0 7a40 	vmov.f32	s15, s0
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 120.0f, 160.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	edd3 7a03 	vldr	s15, [r3, #12]
 8000564:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80005a0 <SERVO_WritePosition+0x74>
 8000568:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800056c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80005a4 <SERVO_WritePosition+0x78>
 8000570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000574:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800057c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000580:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000584:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	ed97 0a03 	vldr	s0, [r7, #12]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f856 	bl	8000640 <PWM_WriteDuty>
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	43200000 	.word	0x43200000
 80005a0:	42f00000 	.word	0x42f00000
 80005a4:	42200000 	.word	0x42200000

080005a8 <hc_sr04_init>:
/* Public variables ----------------------------------------------------------*/

/*Private functions------------------------------------------------*/

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fe3e 	bl	8003250 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	4619      	mov	r1, r3
 80005de:	4610      	mov	r0, r2
 80005e0:	f002 fcda 	bl	8002f98 <HAL_TIM_PWM_Start>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <hc_sr04_convert_us_to_cm>:

uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <hc_sr04_convert_us_to_cm+0x20>)
 80005f8:	fba2 2303 	umull	r2, r3, r2, r3
 80005fc:	095b      	lsrs	r3, r3, #5
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	8d3dcb09 	.word	0x8d3dcb09

08000610 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	edd3 7a02 	vldr	s15, [r3, #8]
 800061e:	eeb0 0a67 	vmov.f32	s0, s15
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f80c 	bl	8000640 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4619      	mov	r1, r3
 8000632:	4610      	mov	r0, r2
 8000634:	f002 fcb0 	bl	8002f98 <HAL_TIM_PWM_Start>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 800064c:	edd7 7a00 	vldr	s15, [r7]
 8000650:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000658:	d503      	bpl.n	8000662 <PWM_WriteDuty+0x22>
    duty = 0.0;
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	e00a      	b.n	8000678 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8000662:	edd7 7a00 	vldr	s15, [r7]
 8000666:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000724 <PWM_WriteDuty+0xe4>
 800066a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800066e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000672:	dd01      	ble.n	8000678 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <PWM_WriteDuty+0xe8>)
 8000676:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000686:	3301      	adds	r3, #1
 8000688:	ee07 3a90 	vmov	s15, r3
 800068c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000690:	edd7 7a00 	vldr	s15, [r7]
 8000694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000698:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000724 <PWM_WriteDuty+0xe4>
 800069c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006a4:	ee17 3a90 	vmov	r3, s15
 80006a8:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d105      	bne.n	80006be <PWM_WriteDuty+0x7e>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006bc:	e02c      	b.n	8000718 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d105      	bne.n	80006d2 <PWM_WriteDuty+0x92>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80006d0:	e022      	b.n	8000718 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	2b08      	cmp	r3, #8
 80006d8:	d105      	bne.n	80006e6 <PWM_WriteDuty+0xa6>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80006e4:	e018      	b.n	8000718 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	2b0c      	cmp	r3, #12
 80006ec:	d105      	bne.n	80006fa <PWM_WriteDuty+0xba>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006f8:	e00e      	b.n	8000718 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	2b10      	cmp	r3, #16
 8000700:	d105      	bne.n	800070e <PWM_WriteDuty+0xce>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800070c:	e004      	b.n	8000718 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	42c80000 	.word	0x42c80000
 8000728:	42c80000 	.word	0x42c80000

0800072c <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM9_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]


}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <HAL_UART_RxCpltCallback+0x48>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d117      	bne.n	8000780 <HAL_UART_RxCpltCallback+0x40>
  {
	SERVO_WritePosition(&hservo1, 180 - strtol((char*)tx_buffer, 0, 10));
 8000750:	220a      	movs	r2, #10
 8000752:	2100      	movs	r1, #0
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <HAL_UART_RxCpltCallback+0x4c>)
 8000756:	f005 fc0b 	bl	8005f70 <strtol>
 800075a:	4603      	mov	r3, r0
 800075c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000768:	eeb0 0a67 	vmov.f32	s0, s15
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <HAL_UART_RxCpltCallback+0x50>)
 800076e:	f7ff fedd 	bl	800052c <SERVO_WritePosition>
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8000772:	2303      	movs	r3, #3
 8000774:	b29b      	uxth	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	4904      	ldr	r1, [pc, #16]	; (800078c <HAL_UART_RxCpltCallback+0x4c>)
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <HAL_UART_RxCpltCallback+0x48>)
 800077c:	f004 f96c 	bl	8004a58 <HAL_UART_Receive_IT>
  }
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200001b8 	.word	0x200001b8
 800078c:	20000268 	.word	0x20000268
 8000790:	20000000 	.word	0x20000000

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 fe6f 	bl	800147a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f83a 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f000 fad4 	bl	8000d4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007a4:	f000 faa2 	bl	8000cec <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80007a8:	f000 f8a2 	bl	80008f0 <MX_TIM1_Init>
  MX_TIM9_Init();
 80007ac:	f000 fa3c 	bl	8000c28 <MX_TIM9_Init>
  MX_TIM2_Init();
 80007b0:	f000 f942 	bl	8000a38 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007b4:	f000 f99a 	bl	8000aec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start Sensor 1 & 2
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 80007b8:	2308      	movs	r3, #8
 80007ba:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <main+0x5c>)
 80007bc:	490d      	ldr	r1, [pc, #52]	; (80007f4 <main+0x60>)
 80007be:	480e      	ldr	r0, [pc, #56]	; (80007f8 <main+0x64>)
 80007c0:	f7ff fef2 	bl	80005a8 <hc_sr04_init>
  hc_sr04_init(&distance_sensor2, &htim3, &htim2, TIM_CHANNEL_3);
 80007c4:	2308      	movs	r3, #8
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <main+0x5c>)
 80007c8:	490c      	ldr	r1, [pc, #48]	; (80007fc <main+0x68>)
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <main+0x6c>)
 80007cc:	f7ff feec 	bl	80005a8 <hc_sr04_init>

  SERVO_Init(&hservo1);
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <main+0x70>)
 80007d2:	f7ff fe97 	bl	8000504 <SERVO_Init>
  SERVO_WritePosition(&hservo1, 130.0f);
 80007d6:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000808 <main+0x74>
 80007da:	480a      	ldr	r0, [pc, #40]	; (8000804 <main+0x70>)
 80007dc:	f7ff fea6 	bl	800052c <SERVO_WritePosition>
 HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 80007e0:	2303      	movs	r3, #3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	4909      	ldr	r1, [pc, #36]	; (800080c <main+0x78>)
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <main+0x7c>)
 80007ea:	f004 f935 	bl	8004a58 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <main+0x5a>
 80007f0:	200000d4 	.word	0x200000d4
 80007f4:	20000088 	.word	0x20000088
 80007f8:	20000248 	.word	0x20000248
 80007fc:	20000120 	.word	0x20000120
 8000800:	20000258 	.word	0x20000258
 8000804:	20000000 	.word	0x20000000
 8000808:	43020000 	.word	0x43020000
 800080c:	20000268 	.word	0x20000268
 8000810:	200001b8 	.word	0x200001b8

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 fbae 	bl	8005f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000838:	f001 f9e6 	bl	8001c08 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <SystemClock_Config+0xd4>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a29      	ldr	r2, [pc, #164]	; (80008e8 <SystemClock_Config+0xd4>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <SystemClock_Config+0xd4>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <SystemClock_Config+0xd8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a24      	ldr	r2, [pc, #144]	; (80008ec <SystemClock_Config+0xd8>)
 800085a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SystemClock_Config+0xd8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000870:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000884:	23d8      	movs	r3, #216	; 0xd8
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800088c:	2309      	movs	r3, #9
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fa17 	bl	8001cc8 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008a0:	f000 fbc2 	bl	8001028 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a4:	f001 f9c0 	bl	8001c28 <HAL_PWREx_EnableOverDrive>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ae:	f000 fbbb 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80008c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2107      	movs	r1, #7
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fc9d 	bl	8002210 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008dc:	f000 fba4 	bl	8001028 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	; 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b090      	sub	sp, #64	; 0x40
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800092c:	4b40      	ldr	r3, [pc, #256]	; (8000a30 <MX_TIM1_Init+0x140>)
 800092e:	4a41      	ldr	r2, [pc, #260]	; (8000a34 <MX_TIM1_Init+0x144>)
 8000930:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 8000932:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <MX_TIM1_Init+0x140>)
 8000934:	226b      	movs	r2, #107	; 0x6b
 8000936:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b3d      	ldr	r3, [pc, #244]	; (8000a30 <MX_TIM1_Init+0x140>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800093e:	4b3c      	ldr	r3, [pc, #240]	; (8000a30 <MX_TIM1_Init+0x140>)
 8000940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000944:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <MX_TIM1_Init+0x140>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800094c:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <MX_TIM1_Init+0x140>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b37      	ldr	r3, [pc, #220]	; (8000a30 <MX_TIM1_Init+0x140>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000958:	4835      	ldr	r0, [pc, #212]	; (8000a30 <MX_TIM1_Init+0x140>)
 800095a:	f002 fa6f 	bl	8002e3c <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000964:	f000 fb60 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000972:	4619      	mov	r1, r3
 8000974:	482e      	ldr	r0, [pc, #184]	; (8000a30 <MX_TIM1_Init+0x140>)
 8000976:	f003 f88b 	bl	8003a90 <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000980:	f000 fb52 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000984:	482a      	ldr	r0, [pc, #168]	; (8000a30 <MX_TIM1_Init+0x140>)
 8000986:	f002 fc01 	bl	800318c <HAL_TIM_IC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000990:	f000 fb4a 	bl	8001028 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000994:	2304      	movs	r3, #4
 8000996:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000998:	2350      	movs	r3, #80	; 0x50
 800099a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4820      	ldr	r0, [pc, #128]	; (8000a30 <MX_TIM1_Init+0x140>)
 80009b0:	f003 f938 	bl	8003c24 <HAL_TIM_SlaveConfigSynchro>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80009ba:	f000 fb35 	bl	8001028 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009c2:	2301      	movs	r3, #1
 80009c4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	4816      	ldr	r0, [pc, #88]	; (8000a30 <MX_TIM1_Init+0x140>)
 80009d8:	f002 fea9 	bl	800372e <HAL_TIM_IC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80009e2:	f000 fb21 	bl	8001028 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009ea:	2302      	movs	r3, #2
 80009ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2204      	movs	r2, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	480e      	ldr	r0, [pc, #56]	; (8000a30 <MX_TIM1_Init+0x140>)
 80009f8:	f002 fe99 	bl	800372e <HAL_TIM_IC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a02:	f000 fb11 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <MX_TIM1_Init+0x140>)
 8000a18:	f003 ff24 	bl	8004864 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000a22:	f000 fb01 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3740      	adds	r7, #64	; 0x40
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000088 	.word	0x20000088
 8000a34:	40010000 	.word	0x40010000

08000a38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000a66:	226b      	movs	r2, #107	; 0x6b
 8000a68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000a72:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <MX_TIM2_Init+0xb0>)
 8000a74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a82:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000a84:	f002 fa31 	bl	8002eea <HAL_TIM_PWM_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a8e:	f000 facb 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000aa2:	f003 fedf 	bl	8004864 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000aac:	f000 fabc 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab0:	2360      	movs	r3, #96	; 0x60
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000ac8:	f002 fece 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000ad2:	f000 faa9 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_TIM2_Init+0xac>)
 8000ad8:	f000 fb88 	bl	80011ec <HAL_TIM_MspPostInit>

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000d4 	.word	0x200000d4
 8000ae8:	00030d3f 	.word	0x00030d3f

08000aec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b090      	sub	sp, #64	; 0x40
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b28:	4b3d      	ldr	r3, [pc, #244]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	; (8000c24 <MX_TIM3_Init+0x138>)
 8000b2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000b30:	226b      	movs	r2, #107	; 0x6b
 8000b32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b34:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b3a:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b42:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b4e:	4834      	ldr	r0, [pc, #208]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000b50:	f002 f974 	bl	8002e3c <HAL_TIM_Base_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000b5a:	f000 fa65 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482d      	ldr	r0, [pc, #180]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000b6c:	f002 ff90 	bl	8003a90 <HAL_TIM_ConfigClockSource>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000b76:	f000 fa57 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b7a:	4829      	ldr	r0, [pc, #164]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000b7c:	f002 fb06 	bl	800318c <HAL_TIM_IC_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000b86:	f000 fa4f 	bl	8001028 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b8e:	2350      	movs	r3, #80	; 0x50
 8000b90:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481e      	ldr	r0, [pc, #120]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000ba6:	f003 f83d 	bl	8003c24 <HAL_TIM_SlaveConfigSynchro>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000bb0:	f000 fa3a 	bl	8001028 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000bce:	f002 fdae 	bl	800372e <HAL_TIM_IC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000bd8:	f000 fa26 	bl	8001028 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000be0:	2302      	movs	r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2204      	movs	r2, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000bee:	f002 fd9e 	bl	800372e <HAL_TIM_IC_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8000bf8:	f000 fa16 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_TIM3_Init+0x134>)
 8000c0a:	f003 fe2b 	bl	8004864 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8000c14:	f000 fa08 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3740      	adds	r7, #64	; 0x40
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000120 	.word	0x20000120
 8000c24:	40000400 	.word	0x40000400

08000c28 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000c50:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <MX_TIM9_Init+0xc0>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000c56:	226b      	movs	r2, #107	; 0x6b
 8000c58:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000c62:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c66:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000c74:	481b      	ldr	r0, [pc, #108]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000c76:	f002 f8e1 	bl	8002e3c <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000c80:	f000 f9d2 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000c92:	f002 fefd 	bl	8003a90 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000c9c:	f000 f9c4 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000ca0:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000ca2:	f002 f922 	bl	8002eea <HAL_TIM_PWM_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000cac:	f000 f9bc 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb0:	2360      	movs	r3, #96	; 0x60
 8000cb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000cc8:	f002 fdce 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000cd2:	f000 f9a9 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <MX_TIM9_Init+0xbc>)
 8000cd8:	f000 fa88 	bl	80011ec <HAL_TIM_MspPostInit>

}
 8000cdc:	bf00      	nop
 8000cde:	3730      	adds	r7, #48	; 0x30
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000016c 	.word	0x2000016c
 8000ce8:	40014000 	.word	0x40014000

08000cec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <MX_USART3_UART_Init+0x5c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d30:	f003 fe44 	bl	80049bc <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 f975 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001b8 	.word	0x200001b8
 8000d48:	40004800 	.word	0x40004800

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d62:	4b8c      	ldr	r3, [pc, #560]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a8b      	ldr	r2, [pc, #556]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b89      	ldr	r3, [pc, #548]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b86      	ldr	r3, [pc, #536]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a85      	ldr	r2, [pc, #532]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b83      	ldr	r3, [pc, #524]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	4b80      	ldr	r3, [pc, #512]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a7f      	ldr	r2, [pc, #508]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b7d      	ldr	r3, [pc, #500]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b7a      	ldr	r3, [pc, #488]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a79      	ldr	r2, [pc, #484]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b77      	ldr	r3, [pc, #476]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b74      	ldr	r3, [pc, #464]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a73      	ldr	r2, [pc, #460]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b71      	ldr	r3, [pc, #452]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dda:	4b6e      	ldr	r3, [pc, #440]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a6d      	ldr	r2, [pc, #436]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b6b      	ldr	r3, [pc, #428]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df2:	4b68      	ldr	r3, [pc, #416]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a67      	ldr	r2, [pc, #412]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b65      	ldr	r3, [pc, #404]	; (8000f94 <MX_GPIO_Init+0x248>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4862      	ldr	r0, [pc, #392]	; (8000f98 <MX_GPIO_Init+0x24c>)
 8000e10:	f000 fee0 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e1a:	4860      	ldr	r0, [pc, #384]	; (8000f9c <MX_GPIO_Init+0x250>)
 8000e1c:	f000 feda 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	485e      	ldr	r0, [pc, #376]	; (8000fa0 <MX_GPIO_Init+0x254>)
 8000e26:	f000 fed5 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4855      	ldr	r0, [pc, #340]	; (8000f98 <MX_GPIO_Init+0x24c>)
 8000e42:	f000 fd1b 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	484e      	ldr	r0, [pc, #312]	; (8000f98 <MX_GPIO_Init+0x24c>)
 8000e5e:	f000 fd0d 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e62:	2332      	movs	r3, #50	; 0x32
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e72:	230b      	movs	r3, #11
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4846      	ldr	r0, [pc, #280]	; (8000f98 <MX_GPIO_Init+0x24c>)
 8000e7e:	f000 fcfd 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e82:	2386      	movs	r3, #134	; 0x86
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e92:	230b      	movs	r3, #11
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4841      	ldr	r0, [pc, #260]	; (8000fa4 <MX_GPIO_Init+0x258>)
 8000e9e:	f000 fced 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	483b      	ldr	r0, [pc, #236]	; (8000fa4 <MX_GPIO_Init+0x258>)
 8000eb6:	f000 fce1 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000eba:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4832      	ldr	r0, [pc, #200]	; (8000f9c <MX_GPIO_Init+0x250>)
 8000ed4:	f000 fcd2 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eea:	230b      	movs	r3, #11
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4829      	ldr	r0, [pc, #164]	; (8000f9c <MX_GPIO_Init+0x250>)
 8000ef6:	f000 fcc1 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000efa:	2340      	movs	r3, #64	; 0x40
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <MX_GPIO_Init+0x254>)
 8000f12:	f000 fcb3 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481d      	ldr	r0, [pc, #116]	; (8000fa0 <MX_GPIO_Init+0x254>)
 8000f2a:	f000 fca7 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f2e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f40:	230a      	movs	r3, #10
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <MX_GPIO_Init+0x258>)
 8000f4c:	f000 fc96 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <MX_GPIO_Init+0x258>)
 8000f66:	f000 fc89 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_GPIO_Init+0x254>)
 8000f88:	f000 fc78 	bl	800187c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8c:	bf00      	nop
 8000f8e:	3730      	adds	r7, #48	; 0x30
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a17      	ldr	r2, [pc, #92]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d111      	bne.n	8000fde <HAL_TIM_IC_CaptureCallback+0x36>
	{
		uint32_t echo_us;
          // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000fba:	2104      	movs	r1, #4
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f002 fe73 	bl	8003ca8 <HAL_TIM_ReadCapturedValue>
 8000fc2:	60f8      	str	r0, [r7, #12]
		dx_cm = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f7ff fb11 	bl	80005ec <hc_sr04_convert_us_to_cm>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	ee07 2a90 	vmov	s15, r2
 8000fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_TIM_IC_CaptureCallback+0x74>)
 8000fda:	edc3 7a00 	vstr	s15, [r3]
	}

	if(TIM3 == htim->Instance)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d111      	bne.n	800100c <HAL_TIM_IC_CaptureCallback+0x64>
	{
		uint32_t echo_us;
        // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000fe8:	2104      	movs	r1, #4
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f002 fe5c 	bl	8003ca8 <HAL_TIM_ReadCapturedValue>
 8000ff0:	60b8      	str	r0, [r7, #8]
		dx_cm2 = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8000ff2:	68b8      	ldr	r0, [r7, #8]
 8000ff4:	f7ff fafa 	bl	80005ec <hc_sr04_convert_us_to_cm>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	ee07 2a90 	vmov	s15, r2
 8001002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001008:	edc3 7a00 	vstr	s15, [r3]
	}


}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40010000 	.word	0x40010000
 8001018:	20000248 	.word	0x20000248
 800101c:	20000240 	.word	0x20000240
 8001020:	40000400 	.word	0x40000400
 8001024:	20000244 	.word	0x20000244

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_MspInit+0x44>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_MspInit+0x44>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_MspInit+0x44>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_MspInit+0x44>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x44>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x44>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a3f      	ldr	r2, [pc, #252]	; (8001198 <HAL_TIM_Base_MspInit+0x11c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d131      	bne.n	8001102 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a3e      	ldr	r2, [pc, #248]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a38      	ldr	r2, [pc, #224]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	482d      	ldr	r0, [pc, #180]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010ec:	f000 fbc6 	bl	800187c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	201b      	movs	r0, #27
 80010f6:	f000 faf8 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010fa:	201b      	movs	r0, #27
 80010fc:	f000 fb11 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001100:	e046      	b.n	8001190 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <HAL_TIM_Base_MspInit+0x128>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d130      	bne.n	800116e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a22      	ldr	r2, [pc, #136]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800114c:	2302      	movs	r3, #2
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4814      	ldr	r0, [pc, #80]	; (80011a8 <HAL_TIM_Base_MspInit+0x12c>)
 8001158:	f000 fb90 	bl	800187c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	201d      	movs	r0, #29
 8001162:	f000 fac2 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001166:	201d      	movs	r0, #29
 8001168:	f000 fadb 	bl	8001722 <HAL_NVIC_EnableIRQ>
}
 800116c:	e010      	b.n	8001190 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM9)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_TIM_Base_MspInit+0x130>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d10b      	bne.n	8001190 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001182:	6453      	str	r3, [r2, #68]	; 0x44
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
}
 8001190:	bf00      	nop
 8001192:	3730      	adds	r7, #48	; 0x30
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010000 	.word	0x40010000
 800119c:	40023800 	.word	0x40023800
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40000400 	.word	0x40000400
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40014000 	.word	0x40014000

080011b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c0:	d10b      	bne.n	80011da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_TIM_PWM_MspInit+0x38>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_TIM_PWM_MspInit+0x38>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_TIM_PWM_MspInit+0x38>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120c:	d11d      	bne.n	800124a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <HAL_TIM_MspPostInit+0xa8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a20      	ldr	r2, [pc, #128]	; (8001294 <HAL_TIM_MspPostInit+0xa8>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_TIM_MspPostInit+0xa8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001238:	2301      	movs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4815      	ldr	r0, [pc, #84]	; (8001298 <HAL_TIM_MspPostInit+0xac>)
 8001244:	f000 fb1a 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001248:	e020      	b.n	800128c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM9)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_TIM_MspPostInit+0xb0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d11b      	bne.n	800128c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_TIM_MspPostInit+0xa8>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_TIM_MspPostInit+0xa8>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_TIM_MspPostInit+0xa8>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800126c:	2320      	movs	r3, #32
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800127c:	2303      	movs	r3, #3
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <HAL_TIM_MspPostInit+0xb4>)
 8001288:	f000 faf8 	bl	800187c <HAL_GPIO_Init>
}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400
 800129c:	40014000 	.word	0x40014000
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0aa      	sub	sp, #168	; 0xa8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	2284      	movs	r2, #132	; 0x84
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 fe5d 	bl	8005f84 <memset>
  if(huart->Instance==USART3)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a26      	ldr	r2, [pc, #152]	; (8001368 <HAL_UART_MspInit+0xc4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d144      	bne.n	800135e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012da:	2300      	movs	r3, #0
 80012dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 f9ba 	bl	800265c <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012ee:	f7ff fe9b 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <HAL_UART_MspInit+0xc8>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_UART_MspInit+0xc8>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_UART_MspInit+0xc8>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_UART_MspInit+0xc8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_UART_MspInit+0xc8>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_UART_MspInit+0xc8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800133c:	2307      	movs	r3, #7
 800133e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001342:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001346:	4619      	mov	r1, r3
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <HAL_UART_MspInit+0xcc>)
 800134a:	f000 fa97 	bl	800187c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2027      	movs	r0, #39	; 0x27
 8001354:	f000 f9c9 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001358:	2027      	movs	r0, #39	; 0x27
 800135a:	f000 f9e2 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	37a8      	adds	r7, #168	; 0xa8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40004800 	.word	0x40004800
 800136c:	40023800 	.word	0x40023800
 8001370:	40020c00 	.word	0x40020c00

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f898 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TIM1_CC_IRQHandler+0x10>)
 80013ce:	f002 f88f 	bl	80034f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000088 	.word	0x20000088

080013dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <TIM3_IRQHandler+0x10>)
 80013e2:	f002 f885 	bl	80034f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000120 	.word	0x20000120

080013f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <USART3_IRQHandler+0x10>)
 80013f6:	f003 fb73 	bl	8004ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001b8 	.word	0x200001b8

08001404 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001452:	f7ff ffd7 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f004 fda3 	bl	8005fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff f99b 	bl	8000794 <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800146c:	080061d0 	.word	0x080061d0
  ldr r2, =_sbss
 8001470:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001474:	200003a8 	.word	0x200003a8

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>

0800147a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 f928 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f805 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148a:	f7ff fdd3 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f943 	bl	800173e <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f90b 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000010 	.word	0x20000010
 80014ec:	20000018 	.word	0x20000018
 80014f0:	20000014 	.word	0x20000014

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000018 	.word	0x20000018
 8001518:	2000026c 	.word	0x2000026c

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000026c 	.word	0x2000026c

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	4313      	orrs	r3, r2
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	05fa0000 	.word	0x05fa0000

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff feda 	bl	800151c <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d008      	beq.n	8001788 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e052      	b.n	800182e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0216 	bic.w	r2, r2, #22
 8001796:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <HAL_DMA_Abort+0x62>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0208 	bic.w	r2, r2, #8
 80017c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d8:	e013      	b.n	8001802 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017da:	f7ff fe9f 	bl	800151c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d90c      	bls.n	8001802 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2220      	movs	r2, #32
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2203      	movs	r2, #3
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e015      	b.n	800182e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1e4      	bne.n	80017da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	223f      	movs	r2, #63	; 0x3f
 8001816:	409a      	lsls	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d004      	beq.n	8001854 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e00c      	b.n	800186e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2205      	movs	r2, #5
 8001858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e175      	b.n	8001b88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8164 	bne.w	8001b82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x56>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80be 	beq.w	8001b82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a1e:	4a61      	ldr	r2, [pc, #388]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <HAL_GPIO_Init+0x32c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d037      	beq.n	8001aba <HAL_GPIO_Init+0x23e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	; (8001bac <HAL_GPIO_Init+0x330>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d031      	beq.n	8001ab6 <HAL_GPIO_Init+0x23a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d02b      	beq.n	8001ab2 <HAL_GPIO_Init+0x236>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <HAL_GPIO_Init+0x338>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d025      	beq.n	8001aae <HAL_GPIO_Init+0x232>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a54      	ldr	r2, [pc, #336]	; (8001bb8 <HAL_GPIO_Init+0x33c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01f      	beq.n	8001aaa <HAL_GPIO_Init+0x22e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a53      	ldr	r2, [pc, #332]	; (8001bbc <HAL_GPIO_Init+0x340>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x22a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_GPIO_Init+0x344>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <HAL_GPIO_Init+0x348>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a50      	ldr	r2, [pc, #320]	; (8001bc8 <HAL_GPIO_Init+0x34c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x21a>
 8001a92:	2309      	movs	r3, #9
 8001a94:	e012      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a96:	230a      	movs	r3, #10
 8001a98:	e010      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	e00e      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e00c      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00a      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aba:	2300      	movs	r3, #0
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001acc:	4935      	ldr	r1, [pc, #212]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afe:	4a34      	ldr	r2, [pc, #208]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b52:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	f67f ae86 	bls.w	800189c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40021c00 	.word	0x40021c00
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40022400 	.word	0x40022400
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40007000 	.word	0x40007000

08001c28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a22      	ldr	r2, [pc, #136]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c56:	f7ff fc61 	bl	800151c <HAL_GetTick>
 8001c5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c5c:	e009      	b.n	8001c72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c5e:	f7ff fc5d 	bl	800151c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c6c:	d901      	bls.n	8001c72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e022      	b.n	8001cb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c8c:	f7ff fc46 	bl	800151c <HAL_GetTick>
 8001c90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c92:	e009      	b.n	8001ca8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c94:	f7ff fc42 	bl	800151c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ca2:	d901      	bls.n	8001ca8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e007      	b.n	8001cb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cb4:	d1ee      	bne.n	8001c94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e291      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8087 	beq.w	8001dfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cec:	4b96      	ldr	r3, [pc, #600]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d00c      	beq.n	8001d12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf8:	4b93      	ldr	r3, [pc, #588]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d112      	bne.n	8001d2a <HAL_RCC_OscConfig+0x62>
 8001d04:	4b90      	ldr	r3, [pc, #576]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d10:	d10b      	bne.n	8001d2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d12:	4b8d      	ldr	r3, [pc, #564]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d06c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x130>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d168      	bne.n	8001df8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e26b      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x7a>
 8001d34:	4b84      	ldr	r3, [pc, #528]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a83      	ldr	r2, [pc, #524]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0xd8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x9c>
 8001d4a:	4b7f      	ldr	r3, [pc, #508]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7e      	ldr	r2, [pc, #504]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b7c      	ldr	r3, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a7b      	ldr	r2, [pc, #492]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xd8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0xc0>
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a75      	ldr	r2, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b73      	ldr	r3, [pc, #460]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a72      	ldr	r2, [pc, #456]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xd8>
 8001d88:	4b6f      	ldr	r3, [pc, #444]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a6e      	ldr	r2, [pc, #440]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a6b      	ldr	r2, [pc, #428]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fbb8 	bl	800151c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fbb4 	bl	800151c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e21f      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xe8>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fba4 	bl	800151c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fba0 	bl	800151c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e20b      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b57      	ldr	r3, [pc, #348]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x110>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d069      	beq.n	8001eda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e06:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e12:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d11c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x190>
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x17a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1df      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	493d      	ldr	r1, [pc, #244]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	e040      	b.n	8001eda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d023      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a38      	ldr	r2, [pc, #224]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fb56 	bl	800151c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff fb52 	bl	800151c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1bd      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4929      	ldr	r1, [pc, #164]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
 8001ea6:	e018      	b.n	8001eda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fb32 	bl	800151c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fb2e 	bl	800151c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e199      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d038      	beq.n	8001f58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d019      	beq.n	8001f22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef2:	4a15      	ldr	r2, [pc, #84]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb0f 	bl	800151c <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f02:	f7ff fb0b 	bl	800151c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e176      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x23a>
 8001f20:	e01a      	b.n	8001f58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_RCC_OscConfig+0x280>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7ff faf5 	bl	800151c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff faf1 	bl	800151c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d903      	bls.n	8001f4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e15c      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
 8001f48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	4b91      	ldr	r3, [pc, #580]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ee      	bne.n	8001f36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a4 	beq.w	80020ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f66:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10d      	bne.n	8001f8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a87      	ldr	r2, [pc, #540]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b85      	ldr	r3, [pc, #532]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4b82      	ldr	r3, [pc, #520]	; (8002198 <HAL_RCC_OscConfig+0x4d0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x4d0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a7e      	ldr	r2, [pc, #504]	; (8002198 <HAL_RCC_OscConfig+0x4d0>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fab9 	bl	800151c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff fab5 	bl	800151c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b64      	cmp	r3, #100	; 0x64
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e120      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b75      	ldr	r3, [pc, #468]	; (8002198 <HAL_RCC_OscConfig+0x4d0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x31a>
 8001fd4:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	4a6e      	ldr	r2, [pc, #440]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe0:	e02d      	b.n	800203e <HAL_RCC_OscConfig+0x376>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x33c>
 8001fea:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a69      	ldr	r2, [pc, #420]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	4b67      	ldr	r3, [pc, #412]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a66      	ldr	r2, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
 8002002:	e01c      	b.n	800203e <HAL_RCC_OscConfig+0x376>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d10c      	bne.n	8002026 <HAL_RCC_OscConfig+0x35e>
 800200c:	4b61      	ldr	r3, [pc, #388]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a60      	ldr	r2, [pc, #384]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	4b5e      	ldr	r3, [pc, #376]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a5d      	ldr	r2, [pc, #372]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x376>
 8002026:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	4a5a      	ldr	r2, [pc, #360]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6713      	str	r3, [r2, #112]	; 0x70
 8002032:	4b58      	ldr	r3, [pc, #352]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a57      	ldr	r2, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d015      	beq.n	8002072 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff fa69 	bl	800151c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff fa65 	bl	800151c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	; 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0ce      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ee      	beq.n	800204e <HAL_RCC_OscConfig+0x386>
 8002070:	e014      	b.n	800209c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff fa53 	bl	800151c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff fa4f 	bl	800151c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0b8      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	4b40      	ldr	r3, [pc, #256]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ee      	bne.n	800207a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4b3c      	ldr	r3, [pc, #240]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 80020a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80a4 	beq.w	8002200 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b8:	4b36      	ldr	r3, [pc, #216]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d06b      	beq.n	800219c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d149      	bne.n	8002160 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a30      	ldr	r2, [pc, #192]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 80020d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff fa20 	bl	800151c <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff fa1c 	bl	800151c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e087      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	3b01      	subs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	4313      	orrs	r3, r2
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800212a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a18      	ldr	r2, [pc, #96]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff f9f0 	bl	800151c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff f9ec 	bl	800151c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e057      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x478>
 800215e:	e04f      	b.n	8002200 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff f9d6 	bl	800151c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f9d2 	bl	800151c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e03d      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x4ac>
 8002192:	e035      	b.n	8002200 <HAL_RCC_OscConfig+0x538>
 8002194:	40023800 	.word	0x40023800
 8002198:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x544>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d028      	beq.n	80021fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d121      	bne.n	80021fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11a      	bne.n	80021fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d111      	bne.n	80021fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	3b01      	subs	r3, #1
 80021e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0d0      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d910      	bls.n	8002258 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b67      	ldr	r3, [pc, #412]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 020f 	bic.w	r2, r3, #15
 800223e:	4965      	ldr	r1, [pc, #404]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0b8      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002270:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800227a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800228e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002292:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	494d      	ldr	r1, [pc, #308]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d040      	beq.n	8002334 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d115      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e073      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06b      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4936      	ldr	r1, [pc, #216]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002304:	f7ff f90a 	bl	800151c <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	e00a      	b.n	8002322 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f7ff f906 	bl	800151c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e053      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 020c 	and.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d1eb      	bne.n	800230c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d210      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 020f 	bic.w	r2, r3, #15
 800234a:	4922      	ldr	r1, [pc, #136]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e032      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4916      	ldr	r1, [pc, #88]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	490e      	ldr	r1, [pc, #56]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023a2:	f000 f821 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	490a      	ldr	r1, [pc, #40]	; (80023dc <HAL_RCC_ClockConfig+0x1cc>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1d0>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1d4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f866 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00
 80023d8:	40023800 	.word	0x40023800
 80023dc:	080060a4 	.word	0x080060a4
 80023e0:	20000010 	.word	0x20000010
 80023e4:	20000014 	.word	0x20000014

080023e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ec:	b094      	sub	sp, #80	; 0x50
 80023ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	647b      	str	r3, [r7, #68]	; 0x44
 80023f4:	2300      	movs	r3, #0
 80023f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023f8:	2300      	movs	r3, #0
 80023fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002400:	4b79      	ldr	r3, [pc, #484]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d00d      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x40>
 800240c:	2b08      	cmp	r3, #8
 800240e:	f200 80e1 	bhi.w	80025d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x34>
 8002416:	2b04      	cmp	r3, #4
 8002418:	d003      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x3a>
 800241a:	e0db      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b73      	ldr	r3, [pc, #460]	; (80025ec <HAL_RCC_GetSysClockFreq+0x204>)
 800241e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002420:	e0db      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002422:	4b73      	ldr	r3, [pc, #460]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002424:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002426:	e0d8      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002428:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002430:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002432:	4b6d      	ldr	r3, [pc, #436]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243e:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	2200      	movs	r2, #0
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
 8002448:	63fa      	str	r2, [r7, #60]	; 0x3c
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
 8002452:	2300      	movs	r3, #0
 8002454:	637b      	str	r3, [r7, #52]	; 0x34
 8002456:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800245a:	4622      	mov	r2, r4
 800245c:	462b      	mov	r3, r5
 800245e:	f04f 0000 	mov.w	r0, #0
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	0159      	lsls	r1, r3, #5
 8002468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800246c:	0150      	lsls	r0, r2, #5
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4621      	mov	r1, r4
 8002474:	1a51      	subs	r1, r2, r1
 8002476:	6139      	str	r1, [r7, #16]
 8002478:	4629      	mov	r1, r5
 800247a:	eb63 0301 	sbc.w	r3, r3, r1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800248c:	4659      	mov	r1, fp
 800248e:	018b      	lsls	r3, r1, #6
 8002490:	4651      	mov	r1, sl
 8002492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002496:	4651      	mov	r1, sl
 8002498:	018a      	lsls	r2, r1, #6
 800249a:	4651      	mov	r1, sl
 800249c:	ebb2 0801 	subs.w	r8, r2, r1
 80024a0:	4659      	mov	r1, fp
 80024a2:	eb63 0901 	sbc.w	r9, r3, r1
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ba:	4690      	mov	r8, r2
 80024bc:	4699      	mov	r9, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	eb18 0303 	adds.w	r3, r8, r3
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	462b      	mov	r3, r5
 80024c8:	eb49 0303 	adc.w	r3, r9, r3
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024da:	4629      	mov	r1, r5
 80024dc:	024b      	lsls	r3, r1, #9
 80024de:	4621      	mov	r1, r4
 80024e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024e4:	4621      	mov	r1, r4
 80024e6:	024a      	lsls	r2, r1, #9
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ee:	2200      	movs	r2, #0
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024f8:	f7fd fe86 	bl	8000208 <__aeabi_uldivmod>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4613      	mov	r3, r2
 8002502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002504:	e058      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	2200      	movs	r2, #0
 800250e:	4618      	mov	r0, r3
 8002510:	4611      	mov	r1, r2
 8002512:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
 800251c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002520:	4642      	mov	r2, r8
 8002522:	464b      	mov	r3, r9
 8002524:	f04f 0000 	mov.w	r0, #0
 8002528:	f04f 0100 	mov.w	r1, #0
 800252c:	0159      	lsls	r1, r3, #5
 800252e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002532:	0150      	lsls	r0, r2, #5
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4641      	mov	r1, r8
 800253a:	ebb2 0a01 	subs.w	sl, r2, r1
 800253e:	4649      	mov	r1, r9
 8002540:	eb63 0b01 	sbc.w	fp, r3, r1
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002550:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002554:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002558:	ebb2 040a 	subs.w	r4, r2, sl
 800255c:	eb63 050b 	sbc.w	r5, r3, fp
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	00eb      	lsls	r3, r5, #3
 800256a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800256e:	00e2      	lsls	r2, r4, #3
 8002570:	4614      	mov	r4, r2
 8002572:	461d      	mov	r5, r3
 8002574:	4643      	mov	r3, r8
 8002576:	18e3      	adds	r3, r4, r3
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	464b      	mov	r3, r9
 800257c:	eb45 0303 	adc.w	r3, r5, r3
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800258e:	4629      	mov	r1, r5
 8002590:	028b      	lsls	r3, r1, #10
 8002592:	4621      	mov	r1, r4
 8002594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002598:	4621      	mov	r1, r4
 800259a:	028a      	lsls	r2, r1, #10
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a2:	2200      	movs	r2, #0
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	61fa      	str	r2, [r7, #28]
 80025a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ac:	f7fd fe2c 	bl	8000208 <__aeabi_uldivmod>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4613      	mov	r3, r2
 80025b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	3301      	adds	r3, #1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80025c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetSysClockFreq+0x204>)
 80025d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3750      	adds	r7, #80	; 0x50
 80025e0:	46bd      	mov	sp, r7
 80025e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	00f42400 	.word	0x00f42400
 80025f0:	007a1200 	.word	0x007a1200

080025f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_RCC_GetHCLKFreq+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000010 	.word	0x20000010

0800260c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002610:	f7ff fff0 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0a9b      	lsrs	r3, r3, #10
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4903      	ldr	r1, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40023800 	.word	0x40023800
 8002630:	080060b4 	.word	0x080060b4

08002634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002638:	f7ff ffdc 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	0b5b      	lsrs	r3, r3, #13
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	4903      	ldr	r1, [pc, #12]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40023800 	.word	0x40023800
 8002658:	080060b4 	.word	0x080060b4

0800265c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002684:	4b69      	ldr	r3, [pc, #420]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a68      	ldr	r2, [pc, #416]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800268e:	6093      	str	r3, [r2, #8]
 8002690:	4b66      	ldr	r3, [pc, #408]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	4964      	ldr	r1, [pc, #400]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d017      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	4959      	ldr	r1, [pc, #356]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026d4:	d101      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d017      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026f2:	4b4e      	ldr	r3, [pc, #312]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	494a      	ldr	r1, [pc, #296]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002710:	d101      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800271e:	2301      	movs	r3, #1
 8002720:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 808b 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	4b3a      	ldr	r3, [pc, #232]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	4a39      	ldr	r2, [pc, #228]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274a:	6413      	str	r3, [r2, #64]	; 0x40
 800274c:	4b37      	ldr	r3, [pc, #220]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002758:	4b35      	ldr	r3, [pc, #212]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a34      	ldr	r2, [pc, #208]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002764:	f7fe feda 	bl	800151c <HAL_GetTick>
 8002768:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7fe fed6 	bl	800151c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e357      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800277e:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002792:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d035      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d02e      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027ca:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d114      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fe9e 	bl	800151c <HAL_GetTick>
 80027e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fe9a 	bl	800151c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e319      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ee      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002812:	d111      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002822:	400b      	ands	r3, r1
 8002824:	4901      	ldr	r1, [pc, #4]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
 800282a:	e00b      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800282c:	40023800 	.word	0x40023800
 8002830:	40007000 	.word	0x40007000
 8002834:	0ffffcff 	.word	0x0ffffcff
 8002838:	4baa      	ldr	r3, [pc, #680]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4aa9      	ldr	r2, [pc, #676]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002842:	6093      	str	r3, [r2, #8]
 8002844:	4ba7      	ldr	r3, [pc, #668]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	49a4      	ldr	r1, [pc, #656]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002852:	4313      	orrs	r3, r2
 8002854:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002862:	4ba0      	ldr	r3, [pc, #640]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002868:	4a9e      	ldr	r2, [pc, #632]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002872:	4b9c      	ldr	r3, [pc, #624]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002874:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	4999      	ldr	r1, [pc, #612]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002890:	4b94      	ldr	r3, [pc, #592]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800289e:	4991      	ldr	r1, [pc, #580]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028b2:	4b8c      	ldr	r3, [pc, #560]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c0:	4988      	ldr	r1, [pc, #544]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d4:	4b83      	ldr	r3, [pc, #524]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e2:	4980      	ldr	r1, [pc, #512]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028f6:	4b7b      	ldr	r3, [pc, #492]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4977      	ldr	r1, [pc, #476]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002918:	4b72      	ldr	r3, [pc, #456]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	496f      	ldr	r1, [pc, #444]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800293a:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f023 020c 	bic.w	r2, r3, #12
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002948:	4966      	ldr	r1, [pc, #408]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295c:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	495e      	ldr	r1, [pc, #376]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800297e:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298c:	4955      	ldr	r1, [pc, #340]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	494d      	ldr	r1, [pc, #308]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029c2:	4b48      	ldr	r3, [pc, #288]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	4944      	ldr	r1, [pc, #272]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029e4:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	493c      	ldr	r1, [pc, #240]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a14:	4933      	ldr	r1, [pc, #204]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a28:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a36:	492b      	ldr	r1, [pc, #172]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d011      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a58:	4922      	ldr	r1, [pc, #136]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a68:	d101      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	4912      	ldr	r1, [pc, #72]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002abc:	4909      	ldr	r1, [pc, #36]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d006      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80d9 	beq.w	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a01      	ldr	r2, [pc, #4]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ae2:	e001      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aea:	f7fe fd17 	bl	800151c <HAL_GetTick>
 8002aee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002af2:	f7fe fd13 	bl	800151c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e194      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b04:	4b6c      	ldr	r3, [pc, #432]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d021      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11d      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b24:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b32:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b38:	0e1b      	lsrs	r3, r3, #24
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	019a      	lsls	r2, r3, #6
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	061b      	lsls	r3, r3, #24
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	071b      	lsls	r3, r3, #28
 8002b58:	4957      	ldr	r1, [pc, #348]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d004      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02e      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8a:	d129      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b8c:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba0:	0f1b      	lsrs	r3, r3, #28
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	019a      	lsls	r2, r3, #6
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	071b      	lsls	r3, r3, #28
 8002bc0:	493d      	ldr	r1, [pc, #244]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bce:	f023 021f 	bic.w	r2, r3, #31
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	4937      	ldr	r1, [pc, #220]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01d      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf2:	0e1b      	lsrs	r3, r3, #24
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c00:	0f1b      	lsrs	r3, r3, #28
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	019a      	lsls	r2, r3, #6
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	431a      	orrs	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	071b      	lsls	r3, r3, #28
 8002c20:	4925      	ldr	r1, [pc, #148]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d011      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	019a      	lsls	r2, r3, #6
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	061b      	lsls	r3, r3, #24
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	071b      	lsls	r3, r3, #28
 8002c50:	4919      	ldr	r1, [pc, #100]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c58:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c64:	f7fe fc5a 	bl	800151c <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c6c:	f7fe fc56 	bl	800151c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0d7      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f040 80cd 	bne.w	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9e:	f7fe fc3d 	bl	800151c <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ca6:	f7fe fc39 	bl	800151c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d903      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0ba      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002cb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cbc:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc8:	d0ed      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02e      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d12a      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cf2:	4b51      	ldr	r3, [pc, #324]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d00:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	0f1b      	lsrs	r3, r3, #28
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	019a      	lsls	r2, r3, #6
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	071b      	lsls	r3, r3, #28
 8002d26:	4944      	ldr	r1, [pc, #272]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d2e:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	493d      	ldr	r1, [pc, #244]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d022      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5c:	d11d      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	0e1b      	lsrs	r3, r3, #24
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	0f1b      	lsrs	r3, r3, #28
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	019a      	lsls	r2, r3, #6
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	071b      	lsls	r3, r3, #28
 8002d92:	4929      	ldr	r1, [pc, #164]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d028      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	0e1b      	lsrs	r3, r3, #24
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	019a      	lsls	r2, r3, #6
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	071b      	lsls	r3, r3, #28
 8002dda:	4917      	ldr	r1, [pc, #92]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	4911      	ldr	r1, [pc, #68]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e04:	f7fe fb8a 	bl	800151c <HAL_GetTick>
 8002e08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e0c:	f7fe fb86 	bl	800151c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e007      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e2a:	d1ef      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e049      	b.n	8002ee2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe f90a 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f000 ff76 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e049      	b.n	8002f90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fe f94d 	bl	80011b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f000 ff1f 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_TIM_PWM_Start+0x24>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e03c      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d109      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0x3e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e02f      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d109      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x58>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e022      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d109      	bne.n	800300a <HAL_TIM_PWM_Start+0x72>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	e015      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b10      	cmp	r3, #16
 800300e:	d109      	bne.n	8003024 <HAL_TIM_PWM_Start+0x8c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e008      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e092      	b.n	8003164 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <HAL_TIM_PWM_Start+0xb6>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304c:	e023      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d104      	bne.n	800305e <HAL_TIM_PWM_Start+0xc6>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800305c:	e01b      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Start+0xd6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306c:	e013      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b0c      	cmp	r3, #12
 8003072:	d104      	bne.n	800307e <HAL_TIM_PWM_Start+0xe6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800307c:	e00b      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b10      	cmp	r3, #16
 8003082:	d104      	bne.n	800308e <HAL_TIM_PWM_Start+0xf6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308c:	e003      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 fbba 	bl	8004818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a30      	ldr	r2, [pc, #192]	; (800316c <HAL_TIM_PWM_Start+0x1d4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_TIM_PWM_Start+0x120>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2f      	ldr	r2, [pc, #188]	; (8003170 <HAL_TIM_PWM_Start+0x1d8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_TIM_PWM_Start+0x124>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_TIM_PWM_Start+0x126>
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a25      	ldr	r2, [pc, #148]	; (800316c <HAL_TIM_PWM_Start+0x1d4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d022      	beq.n	8003122 <HAL_TIM_PWM_Start+0x18a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e4:	d01d      	beq.n	8003122 <HAL_TIM_PWM_Start+0x18a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a22      	ldr	r2, [pc, #136]	; (8003174 <HAL_TIM_PWM_Start+0x1dc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d018      	beq.n	8003122 <HAL_TIM_PWM_Start+0x18a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a20      	ldr	r2, [pc, #128]	; (8003178 <HAL_TIM_PWM_Start+0x1e0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_TIM_PWM_Start+0x18a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_TIM_PWM_Start+0x1e4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00e      	beq.n	8003122 <HAL_TIM_PWM_Start+0x18a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_TIM_PWM_Start+0x1d8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d009      	beq.n	8003122 <HAL_TIM_PWM_Start+0x18a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <HAL_TIM_PWM_Start+0x1e8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d004      	beq.n	8003122 <HAL_TIM_PWM_Start+0x18a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a19      	ldr	r2, [pc, #100]	; (8003184 <HAL_TIM_PWM_Start+0x1ec>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d115      	bne.n	800314e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4b17      	ldr	r3, [pc, #92]	; (8003188 <HAL_TIM_PWM_Start+0x1f0>)
 800312a:	4013      	ands	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b06      	cmp	r3, #6
 8003132:	d015      	beq.n	8003160 <HAL_TIM_PWM_Start+0x1c8>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313a:	d011      	beq.n	8003160 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314c:	e008      	b.n	8003160 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0201 	orr.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e000      	b.n	8003162 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40010000 	.word	0x40010000
 8003170:	40010400 	.word	0x40010400
 8003174:	40000400 	.word	0x40000400
 8003178:	40000800 	.word	0x40000800
 800317c:	40000c00 	.word	0x40000c00
 8003180:	40014000 	.word	0x40014000
 8003184:	40001800 	.word	0x40001800
 8003188:	00010007 	.word	0x00010007

0800318c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e049      	b.n	8003232 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f841 	bl	800323a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 fdce 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <HAL_TIM_IC_Start_IT+0x1e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326a:	b2db      	uxtb	r3, r3
 800326c:	e023      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x66>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b04      	cmp	r3, #4
 8003272:	d104      	bne.n	800327e <HAL_TIM_IC_Start_IT+0x2e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800327a:	b2db      	uxtb	r3, r3
 800327c:	e01b      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x66>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b08      	cmp	r3, #8
 8003282:	d104      	bne.n	800328e <HAL_TIM_IC_Start_IT+0x3e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328a:	b2db      	uxtb	r3, r3
 800328c:	e013      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x66>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d104      	bne.n	800329e <HAL_TIM_IC_Start_IT+0x4e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329a:	b2db      	uxtb	r3, r3
 800329c:	e00b      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x66>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b10      	cmp	r3, #16
 80032a2:	d104      	bne.n	80032ae <HAL_TIM_IC_Start_IT+0x5e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	e003      	b.n	80032b6 <HAL_TIM_IC_Start_IT+0x66>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <HAL_TIM_IC_Start_IT+0x78>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e013      	b.n	80032f0 <HAL_TIM_IC_Start_IT+0xa0>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d104      	bne.n	80032d8 <HAL_TIM_IC_Start_IT+0x88>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e00b      	b.n	80032f0 <HAL_TIM_IC_Start_IT+0xa0>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d104      	bne.n	80032e8 <HAL_TIM_IC_Start_IT+0x98>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e003      	b.n	80032f0 <HAL_TIM_IC_Start_IT+0xa0>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032f2:	7bbb      	ldrb	r3, [r7, #14]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d102      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032f8:	7b7b      	ldrb	r3, [r7, #13]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d001      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0e2      	b.n	80034c8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <HAL_TIM_IC_Start_IT+0xc2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003310:	e023      	b.n	800335a <HAL_TIM_IC_Start_IT+0x10a>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d104      	bne.n	8003322 <HAL_TIM_IC_Start_IT+0xd2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003320:	e01b      	b.n	800335a <HAL_TIM_IC_Start_IT+0x10a>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d104      	bne.n	8003332 <HAL_TIM_IC_Start_IT+0xe2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003330:	e013      	b.n	800335a <HAL_TIM_IC_Start_IT+0x10a>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d104      	bne.n	8003342 <HAL_TIM_IC_Start_IT+0xf2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003340:	e00b      	b.n	800335a <HAL_TIM_IC_Start_IT+0x10a>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b10      	cmp	r3, #16
 8003346:	d104      	bne.n	8003352 <HAL_TIM_IC_Start_IT+0x102>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003350:	e003      	b.n	800335a <HAL_TIM_IC_Start_IT+0x10a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_TIM_IC_Start_IT+0x11a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003368:	e013      	b.n	8003392 <HAL_TIM_IC_Start_IT+0x142>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d104      	bne.n	800337a <HAL_TIM_IC_Start_IT+0x12a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003378:	e00b      	b.n	8003392 <HAL_TIM_IC_Start_IT+0x142>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d104      	bne.n	800338a <HAL_TIM_IC_Start_IT+0x13a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003388:	e003      	b.n	8003392 <HAL_TIM_IC_Start_IT+0x142>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d841      	bhi.n	800341c <HAL_TIM_IC_Start_IT+0x1cc>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <HAL_TIM_IC_Start_IT+0x150>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	0800341d 	.word	0x0800341d
 80033a8:	0800341d 	.word	0x0800341d
 80033ac:	0800341d 	.word	0x0800341d
 80033b0:	080033e7 	.word	0x080033e7
 80033b4:	0800341d 	.word	0x0800341d
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	0800341d 	.word	0x0800341d
 80033c0:	080033f9 	.word	0x080033f9
 80033c4:	0800341d 	.word	0x0800341d
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800340b 	.word	0x0800340b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0202 	orr.w	r2, r2, #2
 80033e2:	60da      	str	r2, [r3, #12]
      break;
 80033e4:	e01d      	b.n	8003422 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0204 	orr.w	r2, r2, #4
 80033f4:	60da      	str	r2, [r3, #12]
      break;
 80033f6:	e014      	b.n	8003422 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0208 	orr.w	r2, r2, #8
 8003406:	60da      	str	r2, [r3, #12]
      break;
 8003408:	e00b      	b.n	8003422 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0210 	orr.w	r2, r2, #16
 8003418:	60da      	str	r2, [r3, #12]
      break;
 800341a:	e002      	b.n	8003422 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	bf00      	nop
  }

  if (status == HAL_OK)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d14e      	bne.n	80034c6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2201      	movs	r2, #1
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f001 f9f1 	bl	8004818 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a25      	ldr	r2, [pc, #148]	; (80034d0 <HAL_TIM_IC_Start_IT+0x280>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_TIM_IC_Start_IT+0x236>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003448:	d01d      	beq.n	8003486 <HAL_TIM_IC_Start_IT+0x236>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_TIM_IC_Start_IT+0x284>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d018      	beq.n	8003486 <HAL_TIM_IC_Start_IT+0x236>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_TIM_IC_Start_IT+0x288>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_TIM_IC_Start_IT+0x236>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_TIM_IC_Start_IT+0x28c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_TIM_IC_Start_IT+0x236>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_TIM_IC_Start_IT+0x290>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_TIM_IC_Start_IT+0x236>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_TIM_IC_Start_IT+0x294>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_TIM_IC_Start_IT+0x236>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_TIM_IC_Start_IT+0x298>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d115      	bne.n	80034b2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	4b17      	ldr	r3, [pc, #92]	; (80034ec <HAL_TIM_IC_Start_IT+0x29c>)
 800348e:	4013      	ands	r3, r2
 8003490:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b06      	cmp	r3, #6
 8003496:	d015      	beq.n	80034c4 <HAL_TIM_IC_Start_IT+0x274>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349e:	d011      	beq.n	80034c4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b0:	e008      	b.n	80034c4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e000      	b.n	80034c6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40000c00 	.word	0x40000c00
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40001800 	.word	0x40001800
 80034ec:	00010007 	.word	0x00010007

080034f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b02      	cmp	r3, #2
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0202 	mvn.w	r2, #2
 800351c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fd38 	bl	8000fa8 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fbf8 	bl	8003d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fbff 	bl	8003d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b04      	cmp	r3, #4
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0204 	mvn.w	r2, #4
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fd fd0e 	bl	8000fa8 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fbce 	bl	8003d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fbd5 	bl	8003d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0208 	mvn.w	r2, #8
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2204      	movs	r2, #4
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd fce4 	bl	8000fa8 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fba4 	bl	8003d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fbab 	bl	8003d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d122      	bne.n	8003648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b10      	cmp	r3, #16
 800360e:	d11b      	bne.n	8003648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0210 	mvn.w	r2, #16
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2208      	movs	r2, #8
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fcba 	bl	8000fa8 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fb7a 	bl	8003d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fb81 	bl	8003d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0201 	mvn.w	r2, #1
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd f85c 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b80      	cmp	r3, #128	; 0x80
 8003680:	d10e      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b80      	cmp	r3, #128	; 0x80
 800368e:	d107      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f001 f97a 	bl	8004994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ae:	d10e      	bne.n	80036ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b80      	cmp	r3, #128	; 0x80
 80036bc:	d107      	bne.n	80036ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f001 f96d 	bl	80049a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d10e      	bne.n	80036fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d107      	bne.n	80036fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb2f 	bl	8003d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b20      	cmp	r3, #32
 8003706:	d10e      	bne.n	8003726 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b20      	cmp	r3, #32
 8003714:	d107      	bne.n	8003726 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f06f 0220 	mvn.w	r2, #32
 800371e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f001 f92d 	bl	8004980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003748:	2302      	movs	r3, #2
 800374a:	e088      	b.n	800385e <HAL_TIM_IC_ConfigChannel+0x130>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11b      	bne.n	8003792 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800376a:	f000 fe91 	bl	8004490 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 020c 	bic.w	r2, r2, #12
 800377c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6999      	ldr	r1, [r3, #24]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	619a      	str	r2, [r3, #24]
 8003790:	e060      	b.n	8003854 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d11c      	bne.n	80037d2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80037a8:	f000 ff15 	bl	80045d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037ba:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6999      	ldr	r1, [r3, #24]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	021a      	lsls	r2, r3, #8
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	619a      	str	r2, [r3, #24]
 80037d0:	e040      	b.n	8003854 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037e8:	f000 ff62 	bl	80046b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 020c 	bic.w	r2, r2, #12
 80037fa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69d9      	ldr	r1, [r3, #28]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	61da      	str	r2, [r3, #28]
 800380e:	e021      	b.n	8003854 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d11c      	bne.n	8003850 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003826:	f000 ff7f 	bl	8004728 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003838:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69d9      	ldr	r1, [r3, #28]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	021a      	lsls	r2, r3, #8
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	61da      	str	r2, [r3, #28]
 800384e:	e001      	b.n	8003854 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003882:	2302      	movs	r3, #2
 8003884:	e0ff      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b14      	cmp	r3, #20
 8003892:	f200 80f0 	bhi.w	8003a76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003896:	a201      	add	r2, pc, #4	; (adr r2, 800389c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038f1 	.word	0x080038f1
 80038a0:	08003a77 	.word	0x08003a77
 80038a4:	08003a77 	.word	0x08003a77
 80038a8:	08003a77 	.word	0x08003a77
 80038ac:	08003931 	.word	0x08003931
 80038b0:	08003a77 	.word	0x08003a77
 80038b4:	08003a77 	.word	0x08003a77
 80038b8:	08003a77 	.word	0x08003a77
 80038bc:	08003973 	.word	0x08003973
 80038c0:	08003a77 	.word	0x08003a77
 80038c4:	08003a77 	.word	0x08003a77
 80038c8:	08003a77 	.word	0x08003a77
 80038cc:	080039b3 	.word	0x080039b3
 80038d0:	08003a77 	.word	0x08003a77
 80038d4:	08003a77 	.word	0x08003a77
 80038d8:	08003a77 	.word	0x08003a77
 80038dc:	080039f5 	.word	0x080039f5
 80038e0:	08003a77 	.word	0x08003a77
 80038e4:	08003a77 	.word	0x08003a77
 80038e8:	08003a77 	.word	0x08003a77
 80038ec:	08003a35 	.word	0x08003a35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fad8 	bl	8003eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0208 	orr.w	r2, r2, #8
 800390a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0204 	bic.w	r2, r2, #4
 800391a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6999      	ldr	r1, [r3, #24]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	619a      	str	r2, [r3, #24]
      break;
 800392e:	e0a5      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fb2a 	bl	8003f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800394a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6999      	ldr	r1, [r3, #24]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	619a      	str	r2, [r3, #24]
      break;
 8003970:	e084      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fb81 	bl	8004080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0208 	orr.w	r2, r2, #8
 800398c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0204 	bic.w	r2, r2, #4
 800399c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69d9      	ldr	r1, [r3, #28]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	61da      	str	r2, [r3, #28]
      break;
 80039b0:	e064      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fbd7 	bl	800416c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69d9      	ldr	r1, [r3, #28]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	021a      	lsls	r2, r3, #8
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	61da      	str	r2, [r3, #28]
      break;
 80039f2:	e043      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fc0e 	bl	800421c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0208 	orr.w	r2, r2, #8
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a32:	e023      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fc40 	bl	80042c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a74:	e002      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop

08003a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_TIM_ConfigClockSource+0x1c>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e0b4      	b.n	8003c16 <HAL_TIM_ConfigClockSource+0x186>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	4b56      	ldr	r3, [pc, #344]	; (8003c20 <HAL_TIM_ConfigClockSource+0x190>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae4:	d03e      	beq.n	8003b64 <HAL_TIM_ConfigClockSource+0xd4>
 8003ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aea:	f200 8087 	bhi.w	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	f000 8086 	beq.w	8003c02 <HAL_TIM_ConfigClockSource+0x172>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d87f      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b70      	cmp	r3, #112	; 0x70
 8003afe:	d01a      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0xa6>
 8003b00:	2b70      	cmp	r3, #112	; 0x70
 8003b02:	d87b      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b60      	cmp	r3, #96	; 0x60
 8003b06:	d050      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0x11a>
 8003b08:	2b60      	cmp	r3, #96	; 0x60
 8003b0a:	d877      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b50      	cmp	r3, #80	; 0x50
 8003b0e:	d03c      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xfa>
 8003b10:	2b50      	cmp	r3, #80	; 0x50
 8003b12:	d873      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d058      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x13a>
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d86f      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b30      	cmp	r3, #48	; 0x30
 8003b1e:	d064      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x15a>
 8003b20:	2b30      	cmp	r3, #48	; 0x30
 8003b22:	d86b      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d060      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d867      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d05c      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d05a      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x15a>
 8003b34:	e062      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b46:	f000 fe47 	bl	80047d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	609a      	str	r2, [r3, #8]
      break;
 8003b62:	e04f      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b74:	f000 fe30 	bl	80047d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b86:	609a      	str	r2, [r3, #8]
      break;
 8003b88:	e03c      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b96:	461a      	mov	r2, r3
 8003b98:	f000 fcee 	bl	8004578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2150      	movs	r1, #80	; 0x50
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fdfd 	bl	80047a2 <TIM_ITRx_SetConfig>
      break;
 8003ba8:	e02c      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f000 fd4a 	bl	8004650 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2160      	movs	r1, #96	; 0x60
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fded 	bl	80047a2 <TIM_ITRx_SetConfig>
      break;
 8003bc8:	e01c      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f000 fcce 	bl	8004578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2140      	movs	r1, #64	; 0x40
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fddd 	bl	80047a2 <TIM_ITRx_SetConfig>
      break;
 8003be8:	e00c      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f000 fdd4 	bl	80047a2 <TIM_ITRx_SetConfig>
      break;
 8003bfa:	e003      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003c00:	e000      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	fffeff88 	.word	0xfffeff88

08003c24 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e031      	b.n	8003ca0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003c4c:	6839      	ldr	r1, [r7, #0]
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fb8a 	bl	8004368 <TIM_SlaveTimer_SetConfig>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e018      	b.n	8003ca0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c8c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	d831      	bhi.n	8003d20 <HAL_TIM_ReadCapturedValue+0x78>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cf9 	.word	0x08003cf9
 8003cc8:	08003d21 	.word	0x08003d21
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d21 	.word	0x08003d21
 8003cd4:	08003d03 	.word	0x08003d03
 8003cd8:	08003d21 	.word	0x08003d21
 8003cdc:	08003d21 	.word	0x08003d21
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d21 	.word	0x08003d21
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d21 	.word	0x08003d21
 8003cf4:	08003d17 	.word	0x08003d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	60fb      	str	r3, [r7, #12]

      break;
 8003d00:	e00f      	b.n	8003d22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	60fb      	str	r3, [r7, #12]

      break;
 8003d0a:	e00a      	b.n	8003d22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	60fb      	str	r3, [r7, #12]

      break;
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	60fb      	str	r3, [r7, #12]

      break;
 8003d1e:	e000      	b.n	8003d22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d20:	bf00      	nop
  }

  return tmpreg;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a40      	ldr	r2, [pc, #256]	; (8003e80 <TIM_Base_SetConfig+0x114>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d00f      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3d      	ldr	r2, [pc, #244]	; (8003e84 <TIM_Base_SetConfig+0x118>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00b      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <TIM_Base_SetConfig+0x11c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3b      	ldr	r2, [pc, #236]	; (8003e8c <TIM_Base_SetConfig+0x120>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3a      	ldr	r2, [pc, #232]	; (8003e90 <TIM_Base_SetConfig+0x124>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d108      	bne.n	8003dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <TIM_Base_SetConfig+0x114>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02b      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d027      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	; (8003e84 <TIM_Base_SetConfig+0x118>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d023      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <TIM_Base_SetConfig+0x11c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01f      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <TIM_Base_SetConfig+0x120>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01b      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <TIM_Base_SetConfig+0x124>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d017      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a28      	ldr	r2, [pc, #160]	; (8003e94 <TIM_Base_SetConfig+0x128>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <TIM_Base_SetConfig+0x12c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00f      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <TIM_Base_SetConfig+0x130>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <TIM_Base_SetConfig+0x134>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <TIM_Base_SetConfig+0x138>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a23      	ldr	r2, [pc, #140]	; (8003ea8 <TIM_Base_SetConfig+0x13c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d108      	bne.n	8003e30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_Base_SetConfig+0xf8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <TIM_Base_SetConfig+0x124>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d103      	bne.n	8003e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	615a      	str	r2, [r3, #20]
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40010000 	.word	0x40010000
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40000800 	.word	0x40000800
 8003e8c:	40000c00 	.word	0x40000c00
 8003e90:	40010400 	.word	0x40010400
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800
 8003ea0:	40001800 	.word	0x40001800
 8003ea4:	40001c00 	.word	0x40001c00
 8003ea8:	40002000 	.word	0x40002000

08003eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <TIM_OC1_SetConfig+0xd8>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f023 0302 	bic.w	r3, r3, #2
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <TIM_OC1_SetConfig+0xdc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_OC1_SetConfig+0x64>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <TIM_OC1_SetConfig+0xe0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d10c      	bne.n	8003f2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0308 	bic.w	r3, r3, #8
 8003f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 0304 	bic.w	r3, r3, #4
 8003f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a16      	ldr	r2, [pc, #88]	; (8003f88 <TIM_OC1_SetConfig+0xdc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_OC1_SetConfig+0x8e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <TIM_OC1_SetConfig+0xe0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	621a      	str	r2, [r3, #32]
}
 8003f78:	bf00      	nop
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	fffeff8f 	.word	0xfffeff8f
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40010400 	.word	0x40010400

08003f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f023 0210 	bic.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <TIM_OC2_SetConfig+0xe4>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 0320 	bic.w	r3, r3, #32
 8003fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a23      	ldr	r2, [pc, #140]	; (8004078 <TIM_OC2_SetConfig+0xe8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_OC2_SetConfig+0x68>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a22      	ldr	r2, [pc, #136]	; (800407c <TIM_OC2_SetConfig+0xec>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10d      	bne.n	8004014 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <TIM_OC2_SetConfig+0xe8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC2_SetConfig+0x94>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a17      	ldr	r2, [pc, #92]	; (800407c <TIM_OC2_SetConfig+0xec>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d113      	bne.n	800404c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800402a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	621a      	str	r2, [r3, #32]
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	feff8fff 	.word	0xfeff8fff
 8004078:	40010000 	.word	0x40010000
 800407c:	40010400 	.word	0x40010400

08004080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <TIM_OC3_SetConfig+0xe0>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a22      	ldr	r2, [pc, #136]	; (8004164 <TIM_OC3_SetConfig+0xe4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC3_SetConfig+0x66>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a21      	ldr	r2, [pc, #132]	; (8004168 <TIM_OC3_SetConfig+0xe8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d10d      	bne.n	8004102 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a17      	ldr	r2, [pc, #92]	; (8004164 <TIM_OC3_SetConfig+0xe4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d003      	beq.n	8004112 <TIM_OC3_SetConfig+0x92>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a16      	ldr	r2, [pc, #88]	; (8004168 <TIM_OC3_SetConfig+0xe8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d113      	bne.n	800413a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	621a      	str	r2, [r3, #32]
}
 8004154:	bf00      	nop
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	fffeff8f 	.word	0xfffeff8f
 8004164:	40010000 	.word	0x40010000
 8004168:	40010400 	.word	0x40010400

0800416c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <TIM_OC4_SetConfig+0xa4>)
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	021b      	lsls	r3, r3, #8
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	031b      	lsls	r3, r3, #12
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <TIM_OC4_SetConfig+0xa8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_OC4_SetConfig+0x68>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a12      	ldr	r2, [pc, #72]	; (8004218 <TIM_OC4_SetConfig+0xac>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d109      	bne.n	80041e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	019b      	lsls	r3, r3, #6
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	feff8fff 	.word	0xfeff8fff
 8004214:	40010000 	.word	0x40010000
 8004218:	40010400 	.word	0x40010400

0800421c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <TIM_OC5_SetConfig+0x98>)
 8004248:	4013      	ands	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800425c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <TIM_OC5_SetConfig+0x9c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC5_SetConfig+0x5e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a11      	ldr	r2, [pc, #68]	; (80042bc <TIM_OC5_SetConfig+0xa0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d109      	bne.n	800428e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004280:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	fffeff8f 	.word	0xfffeff8f
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40010400 	.word	0x40010400

080042c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4b1c      	ldr	r3, [pc, #112]	; (800435c <TIM_OC6_SetConfig+0x9c>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	051b      	lsls	r3, r3, #20
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a13      	ldr	r2, [pc, #76]	; (8004360 <TIM_OC6_SetConfig+0xa0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_OC6_SetConfig+0x60>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a12      	ldr	r2, [pc, #72]	; (8004364 <TIM_OC6_SetConfig+0xa4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d109      	bne.n	8004334 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004326:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	029b      	lsls	r3, r3, #10
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	621a      	str	r2, [r3, #32]
}
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	feff8fff 	.word	0xfeff8fff
 8004360:	40010000 	.word	0x40010000
 8004364:	40010400 	.word	0x40010400

08004368 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4b3e      	ldr	r3, [pc, #248]	; (800448c <TIM_SlaveTimer_SetConfig+0x124>)
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b70      	cmp	r3, #112	; 0x70
 80043b0:	d01a      	beq.n	80043e8 <TIM_SlaveTimer_SetConfig+0x80>
 80043b2:	2b70      	cmp	r3, #112	; 0x70
 80043b4:	d860      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043b6:	2b60      	cmp	r3, #96	; 0x60
 80043b8:	d054      	beq.n	8004464 <TIM_SlaveTimer_SetConfig+0xfc>
 80043ba:	2b60      	cmp	r3, #96	; 0x60
 80043bc:	d85c      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043be:	2b50      	cmp	r3, #80	; 0x50
 80043c0:	d046      	beq.n	8004450 <TIM_SlaveTimer_SetConfig+0xe8>
 80043c2:	2b50      	cmp	r3, #80	; 0x50
 80043c4:	d858      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d019      	beq.n	80043fe <TIM_SlaveTimer_SetConfig+0x96>
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d854      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043ce:	2b30      	cmp	r3, #48	; 0x30
 80043d0:	d055      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x116>
 80043d2:	2b30      	cmp	r3, #48	; 0x30
 80043d4:	d850      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d051      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x116>
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d84c      	bhi.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04d      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x116>
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d04b      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x116>
 80043e6:	e047      	b.n	8004478 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80043f8:	f000 f9ee 	bl	80047d8 <TIM_ETR_SetConfig>
      break;
 80043fc:	e040      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b05      	cmp	r3, #5
 8004404:	d101      	bne.n	800440a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e03b      	b.n	8004482 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004430:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	4313      	orrs	r3, r2
 800443c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
      break;
 800444e:	e017      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445c:	461a      	mov	r2, r3
 800445e:	f000 f88b 	bl	8004578 <TIM_TI1_ConfigInputStage>
      break;
 8004462:	e00d      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004470:	461a      	mov	r2, r3
 8004472:	f000 f8ed 	bl	8004650 <TIM_TI2_ConfigInputStage>
      break;
 8004476:	e003      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
      break;
 800447c:	e000      	b.n	8004480 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800447e:	bf00      	nop
  }

  return status;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	fffefff8 	.word	0xfffefff8

08004490 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0201 	bic.w	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a28      	ldr	r2, [pc, #160]	; (800455c <TIM_TI1_SetConfig+0xcc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01b      	beq.n	80044f6 <TIM_TI1_SetConfig+0x66>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d017      	beq.n	80044f6 <TIM_TI1_SetConfig+0x66>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a25      	ldr	r2, [pc, #148]	; (8004560 <TIM_TI1_SetConfig+0xd0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <TIM_TI1_SetConfig+0x66>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a24      	ldr	r2, [pc, #144]	; (8004564 <TIM_TI1_SetConfig+0xd4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <TIM_TI1_SetConfig+0x66>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a23      	ldr	r2, [pc, #140]	; (8004568 <TIM_TI1_SetConfig+0xd8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00b      	beq.n	80044f6 <TIM_TI1_SetConfig+0x66>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a22      	ldr	r2, [pc, #136]	; (800456c <TIM_TI1_SetConfig+0xdc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_TI1_SetConfig+0x66>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a21      	ldr	r2, [pc, #132]	; (8004570 <TIM_TI1_SetConfig+0xe0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_TI1_SetConfig+0x66>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a20      	ldr	r2, [pc, #128]	; (8004574 <TIM_TI1_SetConfig+0xe4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <TIM_TI1_SetConfig+0x6a>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <TIM_TI1_SetConfig+0x6c>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e003      	b.n	800451a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	b2db      	uxtb	r3, r3
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f023 030a 	bic.w	r3, r3, #10
 8004534:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f003 030a 	and.w	r3, r3, #10
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40010000 	.word	0x40010000
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40010400 	.word	0x40010400
 8004570:	40014000 	.word	0x40014000
 8004574:	40001800 	.word	0x40001800

08004578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 030a 	bic.w	r3, r3, #10
 80045b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b087      	sub	sp, #28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 0210 	bic.w	r2, r3, #16
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004602:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	031b      	lsls	r3, r3, #12
 800461a:	b29b      	uxth	r3, r3
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004628:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	621a      	str	r2, [r3, #32]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f023 0210 	bic.w	r2, r3, #16
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800467a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	031b      	lsls	r3, r3, #12
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800468c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	621a      	str	r2, [r3, #32]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f023 0303 	bic.w	r3, r3, #3
 80046dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004700:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004754:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004766:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	031b      	lsls	r3, r3, #12
 800476c:	b29b      	uxth	r3, r3
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800477a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	031b      	lsls	r3, r3, #12
 8004780:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	f043 0307 	orr.w	r3, r3, #7
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	609a      	str	r2, [r3, #8]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	021a      	lsls	r2, r3, #8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4313      	orrs	r3, r2
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	609a      	str	r2, [r3, #8]
}
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2201      	movs	r2, #1
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1a      	ldr	r2, [r3, #32]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	43db      	mvns	r3, r3
 800483a:	401a      	ands	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004878:	2302      	movs	r3, #2
 800487a:	e06d      	b.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2f      	ldr	r2, [pc, #188]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d108      	bne.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a20      	ldr	r2, [pc, #128]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d01d      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1d      	ldr	r2, [pc, #116]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a15      	ldr	r2, [pc, #84]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a16      	ldr	r2, [pc, #88]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a15      	ldr	r2, [pc, #84]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10c      	bne.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	4313      	orrs	r3, r2
 800493c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	40010000 	.word	0x40010000
 8004968:	40010400 	.word	0x40010400
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	40014000 	.word	0x40014000
 800497c:	40001800 	.word	0x40001800

08004980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e040      	b.n	8004a50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fc fc60 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2224      	movs	r2, #36	; 0x24
 80049e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fb62 	bl	80050c4 <UART_SetConfig>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e022      	b.n	8004a50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fdba 	bl	800558c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fe41 	bl	80056d0 <UART_CheckIdleState>
 8004a4e:	4603      	mov	r3, r0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d132      	bne.n	8004ad6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_UART_Receive_IT+0x24>
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e02b      	b.n	8004ad8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d018      	beq.n	8004ac6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	623b      	str	r3, [r7, #32]
 8004ab4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab6:	69f9      	ldr	r1, [r7, #28]
 8004ab8:	6a3a      	ldr	r2, [r7, #32]
 8004aba:	e841 2300 	strex	r3, r2, [r1]
 8004abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1e6      	bne.n	8004a94 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fefd 	bl	80058cc <UART_Start_Receive_IT>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	e000      	b.n	8004ad8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
  }
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b0ba      	sub	sp, #232	; 0xe8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b0e:	4013      	ands	r3, r2
 8004b10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d115      	bne.n	8004b48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00f      	beq.n	8004b48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d009      	beq.n	8004b48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8297 	beq.w	800506c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
      }
      return;
 8004b46:	e291      	b.n	800506c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8117 	beq.w	8004d80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b62:	4b85      	ldr	r3, [pc, #532]	; (8004d78 <HAL_UART_IRQHandler+0x298>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 810a 	beq.w	8004d80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d011      	beq.n	8004b9c <HAL_UART_IRQHandler+0xbc>
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00b      	beq.n	8004b9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b92:	f043 0201 	orr.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d011      	beq.n	8004bcc <HAL_UART_IRQHandler+0xec>
 8004ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc2:	f043 0204 	orr.w	r2, r3, #4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d011      	beq.n	8004bfc <HAL_UART_IRQHandler+0x11c>
 8004bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2204      	movs	r2, #4
 8004bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf2:	f043 0202 	orr.w	r2, r3, #2
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d017      	beq.n	8004c38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d105      	bne.n	8004c20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2208      	movs	r2, #8
 8004c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	f043 0208 	orr.w	r2, r3, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d012      	beq.n	8004c6a <HAL_UART_IRQHandler+0x18a>
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00c      	beq.n	8004c6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 81fd 	beq.w	8005070 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00d      	beq.n	8004c9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d005      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04f      	beq.n	8004d62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fec8 	bl	8005a58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d141      	bne.n	8004d5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1d9      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d013      	beq.n	8004d52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2e:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <HAL_UART_IRQHandler+0x29c>)
 8004d30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fd7d 	bl	8001836 <HAL_DMA_Abort_IT>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d017      	beq.n	8004d72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	e00f      	b.n	8004d72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9a0 	bl	8005098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d58:	e00b      	b.n	8004d72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f99c 	bl	8005098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	e007      	b.n	8004d72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f998 	bl	8005098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004d70:	e17e      	b.n	8005070 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d72:	bf00      	nop
    return;
 8004d74:	e17c      	b.n	8005070 <HAL_UART_IRQHandler+0x590>
 8004d76:	bf00      	nop
 8004d78:	04000120 	.word	0x04000120
 8004d7c:	08005b21 	.word	0x08005b21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	f040 814c 	bne.w	8005022 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8145 	beq.w	8005022 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 813e 	beq.w	8005022 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2210      	movs	r2, #16
 8004dac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	f040 80b6 	bne.w	8004f2a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8150 	beq.w	8005074 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f080 8148 	bcs.w	8005074 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df8:	f000 8086 	beq.w	8004f08 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1da      	bne.n	8004dfc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3308      	adds	r3, #8
 8004e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e1      	bne.n	8004e46 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ea6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ea8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004eac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e3      	bne.n	8004e82 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed8:	f023 0310 	bic.w	r3, r3, #16
 8004edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eea:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e4      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fc fc27 	bl	8001756 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f8c2 	bl	80050ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f28:	e0a4      	b.n	8005074 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 8096 	beq.w	8005078 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004f4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8091 	beq.w	8005078 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f78:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e4      	bne.n	8004f56 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fb0:	633a      	str	r2, [r7, #48]	; 0x30
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e3      	bne.n	8004f8c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f023 0310 	bic.w	r3, r3, #16
 8004fec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	69b9      	ldr	r1, [r7, #24]
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	617b      	str	r3, [r7, #20]
   return(result);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e4      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2202      	movs	r2, #2
 8005012:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f846 	bl	80050ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005020:	e02a      	b.n	8005078 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00e      	beq.n	800504c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800502e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01c      	beq.n	800507c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
    }
    return;
 800504a:	e017      	b.n	800507c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800504c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d012      	beq.n	800507e <HAL_UART_IRQHandler+0x59e>
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00c      	beq.n	800507e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fd71 	bl	8005b4c <UART_EndTransmit_IT>
    return;
 800506a:	e008      	b.n	800507e <HAL_UART_IRQHandler+0x59e>
      return;
 800506c:	bf00      	nop
 800506e:	e006      	b.n	800507e <HAL_UART_IRQHandler+0x59e>
    return;
 8005070:	bf00      	nop
 8005072:	e004      	b.n	800507e <HAL_UART_IRQHandler+0x59e>
      return;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <HAL_UART_IRQHandler+0x59e>
      return;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <HAL_UART_IRQHandler+0x59e>
    return;
 800507c:	bf00      	nop
  }

}
 800507e:	37e8      	adds	r7, #232	; 0xe8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4ba6      	ldr	r3, [pc, #664]	; (8005388 <UART_SetConfig+0x2c4>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a94      	ldr	r2, [pc, #592]	; (800538c <UART_SetConfig+0x2c8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d120      	bne.n	8005182 <UART_SetConfig+0xbe>
 8005140:	4b93      	ldr	r3, [pc, #588]	; (8005390 <UART_SetConfig+0x2cc>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b03      	cmp	r3, #3
 800514c:	d816      	bhi.n	800517c <UART_SetConfig+0xb8>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0x90>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005165 	.word	0x08005165
 8005158:	08005171 	.word	0x08005171
 800515c:	0800516b 	.word	0x0800516b
 8005160:	08005177 	.word	0x08005177
 8005164:	2301      	movs	r3, #1
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e150      	b.n	800540c <UART_SetConfig+0x348>
 800516a:	2302      	movs	r3, #2
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e14d      	b.n	800540c <UART_SetConfig+0x348>
 8005170:	2304      	movs	r3, #4
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e14a      	b.n	800540c <UART_SetConfig+0x348>
 8005176:	2308      	movs	r3, #8
 8005178:	77fb      	strb	r3, [r7, #31]
 800517a:	e147      	b.n	800540c <UART_SetConfig+0x348>
 800517c:	2310      	movs	r3, #16
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e144      	b.n	800540c <UART_SetConfig+0x348>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a83      	ldr	r2, [pc, #524]	; (8005394 <UART_SetConfig+0x2d0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d132      	bne.n	80051f2 <UART_SetConfig+0x12e>
 800518c:	4b80      	ldr	r3, [pc, #512]	; (8005390 <UART_SetConfig+0x2cc>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d828      	bhi.n	80051ec <UART_SetConfig+0x128>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <UART_SetConfig+0xdc>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051d5 	.word	0x080051d5
 80051a4:	080051ed 	.word	0x080051ed
 80051a8:	080051ed 	.word	0x080051ed
 80051ac:	080051ed 	.word	0x080051ed
 80051b0:	080051e1 	.word	0x080051e1
 80051b4:	080051ed 	.word	0x080051ed
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	080051ed 	.word	0x080051ed
 80051c0:	080051db 	.word	0x080051db
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080051ed 	.word	0x080051ed
 80051d0:	080051e7 	.word	0x080051e7
 80051d4:	2300      	movs	r3, #0
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e118      	b.n	800540c <UART_SetConfig+0x348>
 80051da:	2302      	movs	r3, #2
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e115      	b.n	800540c <UART_SetConfig+0x348>
 80051e0:	2304      	movs	r3, #4
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e112      	b.n	800540c <UART_SetConfig+0x348>
 80051e6:	2308      	movs	r3, #8
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e10f      	b.n	800540c <UART_SetConfig+0x348>
 80051ec:	2310      	movs	r3, #16
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e10c      	b.n	800540c <UART_SetConfig+0x348>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a68      	ldr	r2, [pc, #416]	; (8005398 <UART_SetConfig+0x2d4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d120      	bne.n	800523e <UART_SetConfig+0x17a>
 80051fc:	4b64      	ldr	r3, [pc, #400]	; (8005390 <UART_SetConfig+0x2cc>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005206:	2b30      	cmp	r3, #48	; 0x30
 8005208:	d013      	beq.n	8005232 <UART_SetConfig+0x16e>
 800520a:	2b30      	cmp	r3, #48	; 0x30
 800520c:	d814      	bhi.n	8005238 <UART_SetConfig+0x174>
 800520e:	2b20      	cmp	r3, #32
 8005210:	d009      	beq.n	8005226 <UART_SetConfig+0x162>
 8005212:	2b20      	cmp	r3, #32
 8005214:	d810      	bhi.n	8005238 <UART_SetConfig+0x174>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <UART_SetConfig+0x15c>
 800521a:	2b10      	cmp	r3, #16
 800521c:	d006      	beq.n	800522c <UART_SetConfig+0x168>
 800521e:	e00b      	b.n	8005238 <UART_SetConfig+0x174>
 8005220:	2300      	movs	r3, #0
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	e0f2      	b.n	800540c <UART_SetConfig+0x348>
 8005226:	2302      	movs	r3, #2
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e0ef      	b.n	800540c <UART_SetConfig+0x348>
 800522c:	2304      	movs	r3, #4
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e0ec      	b.n	800540c <UART_SetConfig+0x348>
 8005232:	2308      	movs	r3, #8
 8005234:	77fb      	strb	r3, [r7, #31]
 8005236:	e0e9      	b.n	800540c <UART_SetConfig+0x348>
 8005238:	2310      	movs	r3, #16
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e0e6      	b.n	800540c <UART_SetConfig+0x348>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a56      	ldr	r2, [pc, #344]	; (800539c <UART_SetConfig+0x2d8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d120      	bne.n	800528a <UART_SetConfig+0x1c6>
 8005248:	4b51      	ldr	r3, [pc, #324]	; (8005390 <UART_SetConfig+0x2cc>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005252:	2bc0      	cmp	r3, #192	; 0xc0
 8005254:	d013      	beq.n	800527e <UART_SetConfig+0x1ba>
 8005256:	2bc0      	cmp	r3, #192	; 0xc0
 8005258:	d814      	bhi.n	8005284 <UART_SetConfig+0x1c0>
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d009      	beq.n	8005272 <UART_SetConfig+0x1ae>
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	d810      	bhi.n	8005284 <UART_SetConfig+0x1c0>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <UART_SetConfig+0x1a8>
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d006      	beq.n	8005278 <UART_SetConfig+0x1b4>
 800526a:	e00b      	b.n	8005284 <UART_SetConfig+0x1c0>
 800526c:	2300      	movs	r3, #0
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e0cc      	b.n	800540c <UART_SetConfig+0x348>
 8005272:	2302      	movs	r3, #2
 8005274:	77fb      	strb	r3, [r7, #31]
 8005276:	e0c9      	b.n	800540c <UART_SetConfig+0x348>
 8005278:	2304      	movs	r3, #4
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e0c6      	b.n	800540c <UART_SetConfig+0x348>
 800527e:	2308      	movs	r3, #8
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e0c3      	b.n	800540c <UART_SetConfig+0x348>
 8005284:	2310      	movs	r3, #16
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e0c0      	b.n	800540c <UART_SetConfig+0x348>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a44      	ldr	r2, [pc, #272]	; (80053a0 <UART_SetConfig+0x2dc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d125      	bne.n	80052e0 <UART_SetConfig+0x21c>
 8005294:	4b3e      	ldr	r3, [pc, #248]	; (8005390 <UART_SetConfig+0x2cc>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a2:	d017      	beq.n	80052d4 <UART_SetConfig+0x210>
 80052a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a8:	d817      	bhi.n	80052da <UART_SetConfig+0x216>
 80052aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ae:	d00b      	beq.n	80052c8 <UART_SetConfig+0x204>
 80052b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b4:	d811      	bhi.n	80052da <UART_SetConfig+0x216>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <UART_SetConfig+0x1fe>
 80052ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052be:	d006      	beq.n	80052ce <UART_SetConfig+0x20a>
 80052c0:	e00b      	b.n	80052da <UART_SetConfig+0x216>
 80052c2:	2300      	movs	r3, #0
 80052c4:	77fb      	strb	r3, [r7, #31]
 80052c6:	e0a1      	b.n	800540c <UART_SetConfig+0x348>
 80052c8:	2302      	movs	r3, #2
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e09e      	b.n	800540c <UART_SetConfig+0x348>
 80052ce:	2304      	movs	r3, #4
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e09b      	b.n	800540c <UART_SetConfig+0x348>
 80052d4:	2308      	movs	r3, #8
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e098      	b.n	800540c <UART_SetConfig+0x348>
 80052da:	2310      	movs	r3, #16
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e095      	b.n	800540c <UART_SetConfig+0x348>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <UART_SetConfig+0x2e0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d125      	bne.n	8005336 <UART_SetConfig+0x272>
 80052ea:	4b29      	ldr	r3, [pc, #164]	; (8005390 <UART_SetConfig+0x2cc>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f8:	d017      	beq.n	800532a <UART_SetConfig+0x266>
 80052fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052fe:	d817      	bhi.n	8005330 <UART_SetConfig+0x26c>
 8005300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005304:	d00b      	beq.n	800531e <UART_SetConfig+0x25a>
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530a:	d811      	bhi.n	8005330 <UART_SetConfig+0x26c>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <UART_SetConfig+0x254>
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005314:	d006      	beq.n	8005324 <UART_SetConfig+0x260>
 8005316:	e00b      	b.n	8005330 <UART_SetConfig+0x26c>
 8005318:	2301      	movs	r3, #1
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e076      	b.n	800540c <UART_SetConfig+0x348>
 800531e:	2302      	movs	r3, #2
 8005320:	77fb      	strb	r3, [r7, #31]
 8005322:	e073      	b.n	800540c <UART_SetConfig+0x348>
 8005324:	2304      	movs	r3, #4
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e070      	b.n	800540c <UART_SetConfig+0x348>
 800532a:	2308      	movs	r3, #8
 800532c:	77fb      	strb	r3, [r7, #31]
 800532e:	e06d      	b.n	800540c <UART_SetConfig+0x348>
 8005330:	2310      	movs	r3, #16
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e06a      	b.n	800540c <UART_SetConfig+0x348>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <UART_SetConfig+0x2e4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d138      	bne.n	80053b2 <UART_SetConfig+0x2ee>
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <UART_SetConfig+0x2cc>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800534a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800534e:	d017      	beq.n	8005380 <UART_SetConfig+0x2bc>
 8005350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005354:	d82a      	bhi.n	80053ac <UART_SetConfig+0x2e8>
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535a:	d00b      	beq.n	8005374 <UART_SetConfig+0x2b0>
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d824      	bhi.n	80053ac <UART_SetConfig+0x2e8>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <UART_SetConfig+0x2aa>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d006      	beq.n	800537a <UART_SetConfig+0x2b6>
 800536c:	e01e      	b.n	80053ac <UART_SetConfig+0x2e8>
 800536e:	2300      	movs	r3, #0
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e04b      	b.n	800540c <UART_SetConfig+0x348>
 8005374:	2302      	movs	r3, #2
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e048      	b.n	800540c <UART_SetConfig+0x348>
 800537a:	2304      	movs	r3, #4
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e045      	b.n	800540c <UART_SetConfig+0x348>
 8005380:	2308      	movs	r3, #8
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e042      	b.n	800540c <UART_SetConfig+0x348>
 8005386:	bf00      	nop
 8005388:	efff69f3 	.word	0xefff69f3
 800538c:	40011000 	.word	0x40011000
 8005390:	40023800 	.word	0x40023800
 8005394:	40004400 	.word	0x40004400
 8005398:	40004800 	.word	0x40004800
 800539c:	40004c00 	.word	0x40004c00
 80053a0:	40005000 	.word	0x40005000
 80053a4:	40011400 	.word	0x40011400
 80053a8:	40007800 	.word	0x40007800
 80053ac:	2310      	movs	r3, #16
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e02c      	b.n	800540c <UART_SetConfig+0x348>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a72      	ldr	r2, [pc, #456]	; (8005580 <UART_SetConfig+0x4bc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d125      	bne.n	8005408 <UART_SetConfig+0x344>
 80053bc:	4b71      	ldr	r3, [pc, #452]	; (8005584 <UART_SetConfig+0x4c0>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053ca:	d017      	beq.n	80053fc <UART_SetConfig+0x338>
 80053cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053d0:	d817      	bhi.n	8005402 <UART_SetConfig+0x33e>
 80053d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d6:	d00b      	beq.n	80053f0 <UART_SetConfig+0x32c>
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d811      	bhi.n	8005402 <UART_SetConfig+0x33e>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <UART_SetConfig+0x326>
 80053e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053e6:	d006      	beq.n	80053f6 <UART_SetConfig+0x332>
 80053e8:	e00b      	b.n	8005402 <UART_SetConfig+0x33e>
 80053ea:	2300      	movs	r3, #0
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e00d      	b.n	800540c <UART_SetConfig+0x348>
 80053f0:	2302      	movs	r3, #2
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e00a      	b.n	800540c <UART_SetConfig+0x348>
 80053f6:	2304      	movs	r3, #4
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e007      	b.n	800540c <UART_SetConfig+0x348>
 80053fc:	2308      	movs	r3, #8
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e004      	b.n	800540c <UART_SetConfig+0x348>
 8005402:	2310      	movs	r3, #16
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e001      	b.n	800540c <UART_SetConfig+0x348>
 8005408:	2310      	movs	r3, #16
 800540a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005414:	d15b      	bne.n	80054ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005416:	7ffb      	ldrb	r3, [r7, #31]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d828      	bhi.n	800546e <UART_SetConfig+0x3aa>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0x360>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	0800546f 	.word	0x0800546f
 8005434:	0800545f 	.word	0x0800545f
 8005438:	0800546f 	.word	0x0800546f
 800543c:	0800546f 	.word	0x0800546f
 8005440:	0800546f 	.word	0x0800546f
 8005444:	08005467 	.word	0x08005467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7fd f8e0 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 800544c:	61b8      	str	r0, [r7, #24]
        break;
 800544e:	e013      	b.n	8005478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005450:	f7fd f8f0 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8005454:	61b8      	str	r0, [r7, #24]
        break;
 8005456:	e00f      	b.n	8005478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005458:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <UART_SetConfig+0x4c4>)
 800545a:	61bb      	str	r3, [r7, #24]
        break;
 800545c:	e00c      	b.n	8005478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545e:	f7fc ffc3 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8005462:	61b8      	str	r0, [r7, #24]
        break;
 8005464:	e008      	b.n	8005478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546a:	61bb      	str	r3, [r7, #24]
        break;
 800546c:	e004      	b.n	8005478 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	77bb      	strb	r3, [r7, #30]
        break;
 8005476:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d074      	beq.n	8005568 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	005a      	lsls	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d916      	bls.n	80054c8 <UART_SetConfig+0x404>
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d212      	bcs.n	80054c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f023 030f 	bic.w	r3, r3, #15
 80054aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	89fa      	ldrh	r2, [r7, #14]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	e04f      	b.n	8005568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	77bb      	strb	r3, [r7, #30]
 80054cc:	e04c      	b.n	8005568 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d828      	bhi.n	8005526 <UART_SetConfig+0x462>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x418>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005501 	.word	0x08005501
 80054e0:	08005509 	.word	0x08005509
 80054e4:	08005511 	.word	0x08005511
 80054e8:	08005527 	.word	0x08005527
 80054ec:	08005517 	.word	0x08005517
 80054f0:	08005527 	.word	0x08005527
 80054f4:	08005527 	.word	0x08005527
 80054f8:	08005527 	.word	0x08005527
 80054fc:	0800551f 	.word	0x0800551f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005500:	f7fd f884 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8005504:	61b8      	str	r0, [r7, #24]
        break;
 8005506:	e013      	b.n	8005530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005508:	f7fd f894 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 800550c:	61b8      	str	r0, [r7, #24]
        break;
 800550e:	e00f      	b.n	8005530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005510:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <UART_SetConfig+0x4c4>)
 8005512:	61bb      	str	r3, [r7, #24]
        break;
 8005514:	e00c      	b.n	8005530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005516:	f7fc ff67 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 800551a:	61b8      	str	r0, [r7, #24]
        break;
 800551c:	e008      	b.n	8005530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005522:	61bb      	str	r3, [r7, #24]
        break;
 8005524:	e004      	b.n	8005530 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	77bb      	strb	r3, [r7, #30]
        break;
 800552e:	bf00      	nop
    }

    if (pclk != 0U)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d018      	beq.n	8005568 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	085a      	lsrs	r2, r3, #1
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	441a      	add	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	2b0f      	cmp	r3, #15
 800554e:	d909      	bls.n	8005564 <UART_SetConfig+0x4a0>
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005556:	d205      	bcs.n	8005564 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	e001      	b.n	8005568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005574:	7fbb      	ldrb	r3, [r7, #30]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40007c00 	.word	0x40007c00
 8005584:	40023800 	.word	0x40023800
 8005588:	00f42400 	.word	0x00f42400

0800558c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01a      	beq.n	80056a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800568a:	d10a      	bne.n	80056a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
  }
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056e0:	f7fb ff1c 	bl	800151c <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d10e      	bne.n	8005712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f81b 	bl	800573e <UART_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e011      	b.n	8005736 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b09c      	sub	sp, #112	; 0x70
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574e:	e0a7      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	f000 80a3 	beq.w	80058a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fb fedf 	bl	800151c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <UART_WaitOnFlagUntilTimeout+0x32>
 800576a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800576c:	2b00      	cmp	r3, #0
 800576e:	d13f      	bne.n	80057f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800577e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005780:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005784:	667b      	str	r3, [r7, #100]	; 0x64
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005790:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005794:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800579c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e6      	bne.n	8005770 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	663b      	str	r3, [r7, #96]	; 0x60
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80057c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e5      	bne.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e068      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d050      	beq.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580c:	d148      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005816:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800582c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
 8005838:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800583c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e6      	bne.n	8005818 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	613b      	str	r3, [r7, #16]
   return(result);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	66bb      	str	r3, [r7, #104]	; 0x68
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800586a:	623a      	str	r2, [r7, #32]
 800586c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	69f9      	ldr	r1, [r7, #28]
 8005870:	6a3a      	ldr	r2, [r7, #32]
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	61bb      	str	r3, [r7, #24]
   return(result);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e5      	bne.n	800584a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e010      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4013      	ands	r3, r2
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f43f af48 	beq.w	8005750 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3770      	adds	r7, #112	; 0x70
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b097      	sub	sp, #92	; 0x5c
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4613      	mov	r3, r2
 80058d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	88fa      	ldrh	r2, [r7, #6]
 80058e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	88fa      	ldrh	r2, [r7, #6]
 80058ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fe:	d10e      	bne.n	800591e <UART_Start_Receive_IT+0x52>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d105      	bne.n	8005914 <UART_Start_Receive_IT+0x48>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800590e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005912:	e02d      	b.n	8005970 <UART_Start_Receive_IT+0xa4>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	22ff      	movs	r2, #255	; 0xff
 8005918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800591c:	e028      	b.n	8005970 <UART_Start_Receive_IT+0xa4>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10d      	bne.n	8005942 <UART_Start_Receive_IT+0x76>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <UART_Start_Receive_IT+0x6c>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	22ff      	movs	r2, #255	; 0xff
 8005932:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005936:	e01b      	b.n	8005970 <UART_Start_Receive_IT+0xa4>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	227f      	movs	r2, #127	; 0x7f
 800593c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005940:	e016      	b.n	8005970 <UART_Start_Receive_IT+0xa4>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594a:	d10d      	bne.n	8005968 <UART_Start_Receive_IT+0x9c>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <UART_Start_Receive_IT+0x92>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	227f      	movs	r2, #127	; 0x7f
 8005958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800595c:	e008      	b.n	8005970 <UART_Start_Receive_IT+0xa4>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	223f      	movs	r2, #63	; 0x3f
 8005962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005966:	e003      	b.n	8005970 <UART_Start_Receive_IT+0xa4>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2222      	movs	r2, #34	; 0x22
 800597c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	657b      	str	r3, [r7, #84]	; 0x54
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80059a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e5      	bne.n	8005980 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059bc:	d107      	bne.n	80059ce <UART_Start_Receive_IT+0x102>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <UART_Start_Receive_IT+0x184>)
 80059ca:	669a      	str	r2, [r3, #104]	; 0x68
 80059cc:	e002      	b.n	80059d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <UART_Start_Receive_IT+0x188>)
 80059d2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d019      	beq.n	8005a10 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80059f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
 80059fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e6      	bne.n	80059dc <UART_Start_Receive_IT+0x110>
 8005a0e:	e018      	b.n	8005a42 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f043 0320 	orr.w	r3, r3, #32
 8005a24:	653b      	str	r3, [r7, #80]	; 0x50
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a2e:	623b      	str	r3, [r7, #32]
 8005a30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	69f9      	ldr	r1, [r7, #28]
 8005a34:	6a3a      	ldr	r2, [r7, #32]
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e6      	bne.n	8005a10 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	375c      	adds	r7, #92	; 0x5c
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	08005d07 	.word	0x08005d07
 8005a54:	08005ba1 	.word	0x08005ba1

08005a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b095      	sub	sp, #84	; 0x54
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e6      	bne.n	8005a60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d118      	bne.n	8005b00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	613b      	str	r3, [r7, #16]
   return(result);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e6      	bne.n	8005ace <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b14:	bf00      	nop
 8005b16:	3754      	adds	r7, #84	; 0x54
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff faaa 	bl	8005098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6979      	ldr	r1, [r7, #20]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fa76 	bl	8005084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b98:	bf00      	nop
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b096      	sub	sp, #88	; 0x58
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bb8:	2b22      	cmp	r3, #34	; 0x22
 8005bba:	f040 8098 	bne.w	8005cee <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bc8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005bcc:	b2d9      	uxtb	r1, r3
 8005bce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd8:	400a      	ands	r2, r1
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d17b      	bne.n	8005cfe <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c24:	647b      	str	r3, [r7, #68]	; 0x44
 8005c26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e6      	bne.n	8005c06 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	623b      	str	r3, [r7, #32]
   return(result);
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c58:	633a      	str	r2, [r7, #48]	; 0x30
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e5      	bne.n	8005c38 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d12e      	bne.n	8005ce6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0310 	bic.w	r3, r3, #16
 8005ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cac:	61fb      	str	r3, [r7, #28]
 8005cae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	69b9      	ldr	r1, [r7, #24]
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e6      	bne.n	8005c8e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d103      	bne.n	8005cd6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2210      	movs	r2, #16
 8005cd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff f9e4 	bl	80050ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ce4:	e00b      	b.n	8005cfe <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fa fd2a 	bl	8000740 <HAL_UART_RxCpltCallback>
}
 8005cec:	e007      	b.n	8005cfe <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0208 	orr.w	r2, r2, #8
 8005cfc:	619a      	str	r2, [r3, #24]
}
 8005cfe:	bf00      	nop
 8005d00:	3758      	adds	r7, #88	; 0x58
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b096      	sub	sp, #88	; 0x58
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d1e:	2b22      	cmp	r3, #34	; 0x22
 8005d20:	f040 8098 	bne.w	8005e54 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d34:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005d38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d42:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	1c9a      	adds	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d17b      	bne.n	8005e64 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e6      	bne.n	8005d6c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d12e      	bne.n	8005e4c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f023 0310 	bic.w	r3, r3, #16
 8005e08:	647b      	str	r3, [r7, #68]	; 0x44
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6979      	ldr	r1, [r7, #20]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e6      	bne.n	8005df4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	d103      	bne.n	8005e3c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2210      	movs	r2, #16
 8005e3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff f931 	bl	80050ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e4a:	e00b      	b.n	8005e64 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fa fc77 	bl	8000740 <HAL_UART_RxCpltCallback>
}
 8005e52:	e007      	b.n	8005e64 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0208 	orr.w	r2, r2, #8
 8005e62:	619a      	str	r2, [r3, #24]
}
 8005e64:	bf00      	nop
 8005e66:	3758      	adds	r7, #88	; 0x58
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <_strtol_l.constprop.0>:
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e72:	d001      	beq.n	8005e78 <_strtol_l.constprop.0+0xc>
 8005e74:	2b24      	cmp	r3, #36	; 0x24
 8005e76:	d906      	bls.n	8005e86 <_strtol_l.constprop.0+0x1a>
 8005e78:	f000 f88c 	bl	8005f94 <__errno>
 8005e7c:	2316      	movs	r3, #22
 8005e7e:	6003      	str	r3, [r0, #0]
 8005e80:	2000      	movs	r0, #0
 8005e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005f6c <_strtol_l.constprop.0+0x100>
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	462e      	mov	r6, r5
 8005e8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005e96:	f017 0708 	ands.w	r7, r7, #8
 8005e9a:	d1f7      	bne.n	8005e8c <_strtol_l.constprop.0+0x20>
 8005e9c:	2c2d      	cmp	r4, #45	; 0x2d
 8005e9e:	d132      	bne.n	8005f06 <_strtol_l.constprop.0+0x9a>
 8005ea0:	782c      	ldrb	r4, [r5, #0]
 8005ea2:	2701      	movs	r7, #1
 8005ea4:	1cb5      	adds	r5, r6, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d05b      	beq.n	8005f62 <_strtol_l.constprop.0+0xf6>
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d109      	bne.n	8005ec2 <_strtol_l.constprop.0+0x56>
 8005eae:	2c30      	cmp	r4, #48	; 0x30
 8005eb0:	d107      	bne.n	8005ec2 <_strtol_l.constprop.0+0x56>
 8005eb2:	782c      	ldrb	r4, [r5, #0]
 8005eb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005eb8:	2c58      	cmp	r4, #88	; 0x58
 8005eba:	d14d      	bne.n	8005f58 <_strtol_l.constprop.0+0xec>
 8005ebc:	786c      	ldrb	r4, [r5, #1]
 8005ebe:	2310      	movs	r3, #16
 8005ec0:	3502      	adds	r5, #2
 8005ec2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005ec6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eca:	f04f 0e00 	mov.w	lr, #0
 8005ece:	fbb8 f9f3 	udiv	r9, r8, r3
 8005ed2:	4676      	mov	r6, lr
 8005ed4:	fb03 8a19 	mls	sl, r3, r9, r8
 8005ed8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005edc:	f1bc 0f09 	cmp.w	ip, #9
 8005ee0:	d816      	bhi.n	8005f10 <_strtol_l.constprop.0+0xa4>
 8005ee2:	4664      	mov	r4, ip
 8005ee4:	42a3      	cmp	r3, r4
 8005ee6:	dd24      	ble.n	8005f32 <_strtol_l.constprop.0+0xc6>
 8005ee8:	f1be 3fff 	cmp.w	lr, #4294967295
 8005eec:	d008      	beq.n	8005f00 <_strtol_l.constprop.0+0x94>
 8005eee:	45b1      	cmp	r9, r6
 8005ef0:	d31c      	bcc.n	8005f2c <_strtol_l.constprop.0+0xc0>
 8005ef2:	d101      	bne.n	8005ef8 <_strtol_l.constprop.0+0x8c>
 8005ef4:	45a2      	cmp	sl, r4
 8005ef6:	db19      	blt.n	8005f2c <_strtol_l.constprop.0+0xc0>
 8005ef8:	fb06 4603 	mla	r6, r6, r3, r4
 8005efc:	f04f 0e01 	mov.w	lr, #1
 8005f00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f04:	e7e8      	b.n	8005ed8 <_strtol_l.constprop.0+0x6c>
 8005f06:	2c2b      	cmp	r4, #43	; 0x2b
 8005f08:	bf04      	itt	eq
 8005f0a:	782c      	ldrbeq	r4, [r5, #0]
 8005f0c:	1cb5      	addeq	r5, r6, #2
 8005f0e:	e7ca      	b.n	8005ea6 <_strtol_l.constprop.0+0x3a>
 8005f10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005f14:	f1bc 0f19 	cmp.w	ip, #25
 8005f18:	d801      	bhi.n	8005f1e <_strtol_l.constprop.0+0xb2>
 8005f1a:	3c37      	subs	r4, #55	; 0x37
 8005f1c:	e7e2      	b.n	8005ee4 <_strtol_l.constprop.0+0x78>
 8005f1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005f22:	f1bc 0f19 	cmp.w	ip, #25
 8005f26:	d804      	bhi.n	8005f32 <_strtol_l.constprop.0+0xc6>
 8005f28:	3c57      	subs	r4, #87	; 0x57
 8005f2a:	e7db      	b.n	8005ee4 <_strtol_l.constprop.0+0x78>
 8005f2c:	f04f 3eff 	mov.w	lr, #4294967295
 8005f30:	e7e6      	b.n	8005f00 <_strtol_l.constprop.0+0x94>
 8005f32:	f1be 3fff 	cmp.w	lr, #4294967295
 8005f36:	d105      	bne.n	8005f44 <_strtol_l.constprop.0+0xd8>
 8005f38:	2322      	movs	r3, #34	; 0x22
 8005f3a:	6003      	str	r3, [r0, #0]
 8005f3c:	4646      	mov	r6, r8
 8005f3e:	b942      	cbnz	r2, 8005f52 <_strtol_l.constprop.0+0xe6>
 8005f40:	4630      	mov	r0, r6
 8005f42:	e79e      	b.n	8005e82 <_strtol_l.constprop.0+0x16>
 8005f44:	b107      	cbz	r7, 8005f48 <_strtol_l.constprop.0+0xdc>
 8005f46:	4276      	negs	r6, r6
 8005f48:	2a00      	cmp	r2, #0
 8005f4a:	d0f9      	beq.n	8005f40 <_strtol_l.constprop.0+0xd4>
 8005f4c:	f1be 0f00 	cmp.w	lr, #0
 8005f50:	d000      	beq.n	8005f54 <_strtol_l.constprop.0+0xe8>
 8005f52:	1e69      	subs	r1, r5, #1
 8005f54:	6011      	str	r1, [r2, #0]
 8005f56:	e7f3      	b.n	8005f40 <_strtol_l.constprop.0+0xd4>
 8005f58:	2430      	movs	r4, #48	; 0x30
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1b1      	bne.n	8005ec2 <_strtol_l.constprop.0+0x56>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	e7af      	b.n	8005ec2 <_strtol_l.constprop.0+0x56>
 8005f62:	2c30      	cmp	r4, #48	; 0x30
 8005f64:	d0a5      	beq.n	8005eb2 <_strtol_l.constprop.0+0x46>
 8005f66:	230a      	movs	r3, #10
 8005f68:	e7ab      	b.n	8005ec2 <_strtol_l.constprop.0+0x56>
 8005f6a:	bf00      	nop
 8005f6c:	080060bd 	.word	0x080060bd

08005f70 <strtol>:
 8005f70:	4613      	mov	r3, r2
 8005f72:	460a      	mov	r2, r1
 8005f74:	4601      	mov	r1, r0
 8005f76:	4802      	ldr	r0, [pc, #8]	; (8005f80 <strtol+0x10>)
 8005f78:	6800      	ldr	r0, [r0, #0]
 8005f7a:	f7ff bf77 	b.w	8005e6c <_strtol_l.constprop.0>
 8005f7e:	bf00      	nop
 8005f80:	20000068 	.word	0x20000068

08005f84 <memset>:
 8005f84:	4402      	add	r2, r0
 8005f86:	4603      	mov	r3, r0
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d100      	bne.n	8005f8e <memset+0xa>
 8005f8c:	4770      	bx	lr
 8005f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f92:	e7f9      	b.n	8005f88 <memset+0x4>

08005f94 <__errno>:
 8005f94:	4b01      	ldr	r3, [pc, #4]	; (8005f9c <__errno+0x8>)
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000068 	.word	0x20000068

08005fa0 <__libc_init_array>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	4d0d      	ldr	r5, [pc, #52]	; (8005fd8 <__libc_init_array+0x38>)
 8005fa4:	4c0d      	ldr	r4, [pc, #52]	; (8005fdc <__libc_init_array+0x3c>)
 8005fa6:	1b64      	subs	r4, r4, r5
 8005fa8:	10a4      	asrs	r4, r4, #2
 8005faa:	2600      	movs	r6, #0
 8005fac:	42a6      	cmp	r6, r4
 8005fae:	d109      	bne.n	8005fc4 <__libc_init_array+0x24>
 8005fb0:	4d0b      	ldr	r5, [pc, #44]	; (8005fe0 <__libc_init_array+0x40>)
 8005fb2:	4c0c      	ldr	r4, [pc, #48]	; (8005fe4 <__libc_init_array+0x44>)
 8005fb4:	f000 f86a 	bl	800608c <_init>
 8005fb8:	1b64      	subs	r4, r4, r5
 8005fba:	10a4      	asrs	r4, r4, #2
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	42a6      	cmp	r6, r4
 8005fc0:	d105      	bne.n	8005fce <__libc_init_array+0x2e>
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
 8005fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc8:	4798      	blx	r3
 8005fca:	3601      	adds	r6, #1
 8005fcc:	e7ee      	b.n	8005fac <__libc_init_array+0xc>
 8005fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd2:	4798      	blx	r3
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	e7f2      	b.n	8005fbe <__libc_init_array+0x1e>
 8005fd8:	080061c8 	.word	0x080061c8
 8005fdc:	080061c8 	.word	0x080061c8
 8005fe0:	080061c8 	.word	0x080061c8
 8005fe4:	080061cc 	.word	0x080061cc

08005fe8 <fmaxf>:
 8005fe8:	b508      	push	{r3, lr}
 8005fea:	ed2d 8b02 	vpush	{d8}
 8005fee:	eeb0 8a40 	vmov.f32	s16, s0
 8005ff2:	eef0 8a60 	vmov.f32	s17, s1
 8005ff6:	f000 f82d 	bl	8006054 <__fpclassifyf>
 8005ffa:	b148      	cbz	r0, 8006010 <fmaxf+0x28>
 8005ffc:	eeb0 0a68 	vmov.f32	s0, s17
 8006000:	f000 f828 	bl	8006054 <__fpclassifyf>
 8006004:	b130      	cbz	r0, 8006014 <fmaxf+0x2c>
 8006006:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800600a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600e:	dc01      	bgt.n	8006014 <fmaxf+0x2c>
 8006010:	eeb0 8a68 	vmov.f32	s16, s17
 8006014:	eeb0 0a48 	vmov.f32	s0, s16
 8006018:	ecbd 8b02 	vpop	{d8}
 800601c:	bd08      	pop	{r3, pc}

0800601e <fminf>:
 800601e:	b508      	push	{r3, lr}
 8006020:	ed2d 8b02 	vpush	{d8}
 8006024:	eeb0 8a40 	vmov.f32	s16, s0
 8006028:	eef0 8a60 	vmov.f32	s17, s1
 800602c:	f000 f812 	bl	8006054 <__fpclassifyf>
 8006030:	b148      	cbz	r0, 8006046 <fminf+0x28>
 8006032:	eeb0 0a68 	vmov.f32	s0, s17
 8006036:	f000 f80d 	bl	8006054 <__fpclassifyf>
 800603a:	b130      	cbz	r0, 800604a <fminf+0x2c>
 800603c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006044:	d401      	bmi.n	800604a <fminf+0x2c>
 8006046:	eeb0 8a68 	vmov.f32	s16, s17
 800604a:	eeb0 0a48 	vmov.f32	s0, s16
 800604e:	ecbd 8b02 	vpop	{d8}
 8006052:	bd08      	pop	{r3, pc}

08006054 <__fpclassifyf>:
 8006054:	ee10 3a10 	vmov	r3, s0
 8006058:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800605c:	d00d      	beq.n	800607a <__fpclassifyf+0x26>
 800605e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8006062:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006066:	d30a      	bcc.n	800607e <__fpclassifyf+0x2a>
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <__fpclassifyf+0x34>)
 800606a:	1e42      	subs	r2, r0, #1
 800606c:	429a      	cmp	r2, r3
 800606e:	d908      	bls.n	8006082 <__fpclassifyf+0x2e>
 8006070:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8006074:	4258      	negs	r0, r3
 8006076:	4158      	adcs	r0, r3
 8006078:	4770      	bx	lr
 800607a:	2002      	movs	r0, #2
 800607c:	4770      	bx	lr
 800607e:	2004      	movs	r0, #4
 8006080:	4770      	bx	lr
 8006082:	2003      	movs	r0, #3
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	007ffffe 	.word	0x007ffffe

0800608c <_init>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr

08006098 <_fini>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	bf00      	nop
 800609c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609e:	bc08      	pop	{r3}
 80060a0:	469e      	mov	lr, r3
 80060a2:	4770      	bx	lr
