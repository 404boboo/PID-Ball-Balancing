
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007838  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b80  08007b80  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007b80  08007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b88  08007b88  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b8c  08007b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000080  08007c10  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08007c10  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e13  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003582  00000000  00000000  00037f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  0003b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e77  00000000  00000000  0003c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c22  00000000  00000000  0003d5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a4f7  00000000  00000000  000421d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f29a2  00000000  00000000  0005c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052a4  00000000  00000000  0014f074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00154318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079f0 	.word	0x080079f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080079f0 	.word	0x080079f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <SERVO_Init>:
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 90.0f);
 80005c4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80005e0 <SERVO_Init+0x24>
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f80b 	bl	80005e4 <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fa11 	bl	80009f8 <PWM_Init>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	42b40000 	.word	0x42b40000

080005e4 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 120.0f, 160.0f);
 80005f0:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000654 <SERVO_WritePosition+0x70>
 80005f4:	ed97 0a00 	vldr	s0, [r7]
 80005f8:	f007 f9c2 	bl	8007980 <fminf>
 80005fc:	eef0 7a40 	vmov.f32	s15, s0
 8000600:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000658 <SERVO_WritePosition+0x74>
 8000604:	eeb0 0a67 	vmov.f32	s0, s15
 8000608:	f007 f99f 	bl	800794a <fmaxf>
 800060c:	eef0 7a40 	vmov.f32	s15, s0
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 120.0f, 160.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	edd3 7a03 	vldr	s15, [r3, #12]
 800061c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000658 <SERVO_WritePosition+0x74>
 8000620:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000624:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800065c <SERVO_WritePosition+0x78>
 8000628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800062c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000634:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000638:	ee77 7a87 	vadd.f32	s15, s15, s14
 800063c:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	ed97 0a03 	vldr	s0, [r7, #12]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f9ee 	bl	8000a28 <PWM_WriteDuty>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	43200000 	.word	0x43200000
 8000658:	42f00000 	.word	0x42f00000
 800065c:	42200000 	.word	0x42200000

08000660 <hc_sr04_init>:
/* Public variables ----------------------------------------------------------*/

/*Private functions------------------------------------------------*/

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2104      	movs	r1, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fe22 	bl	80042d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	4619      	mov	r1, r3
 8000696:	4610      	mov	r0, r2
 8000698:	f003 fcbe 	bl	8004018 <HAL_TIM_PWM_Start>
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <hc_sr04_convert_us_to_cm>:

uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <hc_sr04_convert_us_to_cm+0x20>)
 80006b0:	fba2 2303 	umull	r2, r3, r2, r3
 80006b4:	095b      	lsrs	r3, r3, #5
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	8d3dcb09 	.word	0x8d3dcb09

080006c8 <CalulatePosition>:
float CalulatePosition(float dis1, float dis2)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80006d2:	edc7 0a00 	vstr	s1, [r7]
 float position = 0;
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
if (dis1<29)
 80006dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80006e0:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 80006e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ec:	d502      	bpl.n	80006f4 <CalulatePosition+0x2c>
	position = dis1;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e037      	b.n	8000764 <CalulatePosition+0x9c>

else if(dis1 >=29 )
 80006f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80006f8:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 80006fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000704:	db08      	blt.n	8000718 <CalulatePosition+0x50>
	position = 60- dis2;
 8000706:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000778 <CalulatePosition+0xb0>
 800070a:	edd7 7a00 	vldr	s15, [r7]
 800070e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000712:	edc7 7a03 	vstr	s15, [r7, #12]
 8000716:	e025      	b.n	8000764 <CalulatePosition+0x9c>

else if (dis1>= 29 && dis1 <= 31 && dis2 >= 29 && dis2 <= 31)
 8000718:	edd7 7a01 	vldr	s15, [r7, #4]
 800071c:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000728:	db1c      	blt.n	8000764 <CalulatePosition+0x9c>
 800072a:	edd7 7a01 	vldr	s15, [r7, #4]
 800072e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8000732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d813      	bhi.n	8000764 <CalulatePosition+0x9c>
 800073c:	edd7 7a00 	vldr	s15, [r7]
 8000740:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074c:	db0a      	blt.n	8000764 <CalulatePosition+0x9c>
 800074e:	edd7 7a00 	vldr	s15, [r7]
 8000752:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8000756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800075a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075e:	d801      	bhi.n	8000764 <CalulatePosition+0x9c>
	position = 30;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <CalulatePosition+0xb4>)
 8000762:	60fb      	str	r3, [r7, #12]

 return position;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	ee07 3a90 	vmov	s15, r3
}
 800076a:	eeb0 0a67 	vmov.f32	s0, s15
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	42700000 	.word	0x42700000
 800077c:	41f00000 	.word	0x41f00000

08000780 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(htim);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f003 fb51 	bl	8003e3c <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 800079a:	bf00      	nop
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d3f9      	bcc.n	800079c <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f003 fbb7 	bl	8003f1c <HAL_TIM_Base_Stop>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af02      	add	r7, sp, #8
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
 80007c4:	4613      	mov	r3, r2
 80007c6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80007c8:	78bb      	ldrb	r3, [r7, #2]
 80007ca:	f023 030f 	bic.w	r3, r3, #15
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f043 030c 	orr.w	r3, r3, #12
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <__lcd_i2c_write+0xac>)
 80007de:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <__lcd_i2c_write+0xac>)
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <__lcd_i2c_write+0xac>)
 80007e6:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80007e8:	78bb      	ldrb	r3, [r7, #2]
 80007ea:	f023 030f 	bic.w	r3, r3, #15
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	f043 0308 	orr.w	r3, r3, #8
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <__lcd_i2c_write+0xac>)
 80007fe:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000800:	78bb      	ldrb	r3, [r7, #2]
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	b2da      	uxtb	r2, r3
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	4313      	orrs	r3, r2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f043 030c 	orr.w	r3, r3, #12
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <__lcd_i2c_write+0xac>)
 8000814:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <__lcd_i2c_write+0xac>)
 8000818:	78da      	ldrb	r2, [r3, #3]
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <__lcd_i2c_write+0xac>)
 800081c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800081e:	78bb      	ldrb	r3, [r7, #2]
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	b2da      	uxtb	r2, r3
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	4313      	orrs	r3, r2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f043 0308 	orr.w	r3, r3, #8
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__lcd_i2c_write+0xac>)
 8000832:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	889b      	ldrh	r3, [r3, #4]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	b299      	uxth	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2306      	movs	r3, #6
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <__lcd_i2c_write+0xac>)
 800084a:	f001 fe07 	bl	800245c <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	2132      	movs	r1, #50	; 0x32
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff93 	bl	8000780 <__lcd_delay_us>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000009c 	.word	0x2000009c

08000868 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	461a      	mov	r2, r3
 8000878:	2100      	movs	r1, #0
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff9c 	bl	80007b8 <__lcd_i2c_write>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	461a      	mov	r2, r3
 8000898:	2101      	movs	r1, #1
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff8c 	bl	80007b8 <__lcd_i2c_write>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  __lcd_delay(hlcd->Timer, 15.2);  // >15 ms
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	f643 315f 	movw	r1, #15199	; 0x3b5f
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff61 	bl	8000780 <__lcd_delay_us>

  // 4-bit mode
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 80008be:	2103      	movs	r1, #3
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ffd1 	bl	8000868 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 4.1 ms
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	f241 0103 	movw	r1, #4099	; 0x1003
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff56 	bl	8000780 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 80008d4:	2103      	movs	r1, #3
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffc6 	bl	8000868 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 0.1 ms
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	f241 0103 	movw	r1, #4099	; 0x1003
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff4b 	bl	8000780 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 80008ea:	2103      	movs	r1, #3
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ffbb 	bl	8000868 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, 0x02);  // 0001
 80008f2:	2102      	movs	r1, #2
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ffb7 	bl	8000868 <__lcd_i2c_write_command>

  hlcd->IsInitialized = 1;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2201      	movs	r2, #1
 80008fe:	741a      	strb	r2, [r3, #16]

  __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8000900:	2128      	movs	r1, #40	; 0x28
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ffb0 	bl	8000868 <__lcd_i2c_write_command>

  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                      // Clear screen
 8000908:	2101      	movs	r1, #1
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffac 	bl	8000868 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 1.6);                                         // > 1.52 ms
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff31 	bl	8000780 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D | LCD_OPT_B); // LCD on, Cursor off, On blink
 800091e:	210d      	movs	r1, #13
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ffa1 	bl	8000868 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);       // Cursor increment on
 8000926:	2106      	movs	r1, #6
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff9d 	bl	8000868 <__lcd_i2c_write_command>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <LCD_I2C_printDecInt>:
 * @param[in] hlcd   : LCD handler with I2C interface
 * @param[in] number : Decimal number
 * @return None
 */
void LCD_I2C_printDecInt(LCD_I2C_HandleTypeDef* hlcd, int number)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  char buffer[LCD_NUMBER_BUF_SIZE];
  if( number >= 10)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	2b09      	cmp	r3, #9
 8000946:	dd07      	ble.n	8000958 <LCD_I2C_printDecInt+0x20>
      sprintf(buffer, "%d", number);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	490b      	ldr	r1, [pc, #44]	; (800097c <LCD_I2C_printDecInt+0x44>)
 8000950:	4618      	mov	r0, r3
 8000952:	f006 fb57 	bl	8007004 <siprintf>
 8000956:	e006      	b.n	8000966 <LCD_I2C_printDecInt+0x2e>
  else
	  sprintf(buffer, "0%d", number);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <LCD_I2C_printDecInt+0x48>)
 8000960:	4618      	mov	r0, r3
 8000962:	f006 fb4f 	bl	8007004 <siprintf>

  LCD_I2C_printStr(hlcd, buffer);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f809 	bl	8000984 <LCD_I2C_printStr>
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08007a08 	.word	0x08007a08
 8000980:	08007a0c 	.word	0x08007a0c

08000984 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 800098e:	2300      	movs	r3, #0
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	e00a      	b.n	80009aa <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	4413      	add	r3, r2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ff72 	bl	8000888 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	3301      	adds	r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
 80009aa:	7bfc      	ldrb	r4, [r7, #15]
 80009ac:	6838      	ldr	r0, [r7, #0]
 80009ae:	f7ff fc2f 	bl	8000210 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	429c      	cmp	r4, r3
 80009b6:	d3ed      	bcc.n	8000994 <LCD_I2C_printStr+0x10>
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd90      	pop	{r4, r7, pc}
	...

080009c4 <LCD_I2C_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
 80009d0:	4613      	mov	r3, r2
 80009d2:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <LCD_I2C_SetCursor+0x30>)
 80009d8:	5cd2      	ldrb	r2, [r2, r3]
 80009da:	78bb      	ldrb	r3, [r7, #2]
 80009dc:	4413      	add	r3, r2
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	3b80      	subs	r3, #128	; 0x80
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff3e 	bl	8000868 <__lcd_i2c_write_command>
  #endif
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08007a30 	.word	0x08007a30

080009f8 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	edd3 7a02 	vldr	s15, [r3, #8]
 8000a06:	eeb0 0a67 	vmov.f32	s0, s15
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f80c 	bl	8000a28 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	f003 fafc 	bl	8004018 <HAL_TIM_PWM_Start>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8000a34:	edd7 7a00 	vldr	s15, [r7]
 8000a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a40:	d503      	bpl.n	8000a4a <PWM_WriteDuty+0x22>
    duty = 0.0;
 8000a42:	f04f 0300 	mov.w	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	e00a      	b.n	8000a60 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8000a4a:	edd7 7a00 	vldr	s15, [r7]
 8000a4e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000b0c <PWM_WriteDuty+0xe4>
 8000a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5a:	dd01      	ble.n	8000a60 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <PWM_WriteDuty+0xe8>)
 8000a5e:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6e:	3301      	adds	r3, #1
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a78:	edd7 7a00 	vldr	s15, [r7]
 8000a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a80:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000b0c <PWM_WriteDuty+0xe4>
 8000a84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a8c:	ee17 3a90 	vmov	r3, s15
 8000a90:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d105      	bne.n	8000aa6 <PWM_WriteDuty+0x7e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000aa4:	e02c      	b.n	8000b00 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d105      	bne.n	8000aba <PWM_WriteDuty+0x92>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ab8:	e022      	b.n	8000b00 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d105      	bne.n	8000ace <PWM_WriteDuty+0xa6>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000acc:	e018      	b.n	8000b00 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2b0c      	cmp	r3, #12
 8000ad4:	d105      	bne.n	8000ae2 <PWM_WriteDuty+0xba>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ae0:	e00e      	b.n	8000b00 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b10      	cmp	r3, #16
 8000ae8:	d105      	bne.n	8000af6 <PWM_WriteDuty+0xce>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000af4:	e004      	b.n	8000b00 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	42c80000 	.word	0x42c80000
 8000b10:	42c80000 	.word	0x42c80000

08000b14 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2a:	4b8c      	ldr	r3, [pc, #560]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a8b      	ldr	r2, [pc, #556]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b30:	f043 0310 	orr.w	r3, r3, #16
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b89      	ldr	r3, [pc, #548]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	4b86      	ldr	r3, [pc, #536]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a85      	ldr	r2, [pc, #532]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b83      	ldr	r3, [pc, #524]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	4b80      	ldr	r3, [pc, #512]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a7f      	ldr	r2, [pc, #508]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b7d      	ldr	r3, [pc, #500]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b7a      	ldr	r3, [pc, #488]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a79      	ldr	r2, [pc, #484]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b77      	ldr	r3, [pc, #476]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b74      	ldr	r3, [pc, #464]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a73      	ldr	r2, [pc, #460]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b71      	ldr	r3, [pc, #452]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b6e      	ldr	r3, [pc, #440]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a6d      	ldr	r2, [pc, #436]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b6b      	ldr	r3, [pc, #428]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bba:	4b68      	ldr	r3, [pc, #416]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a67      	ldr	r2, [pc, #412]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b65      	ldr	r3, [pc, #404]	; (8000d5c <MX_GPIO_Init+0x248>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4862      	ldr	r0, [pc, #392]	; (8000d60 <MX_GPIO_Init+0x24c>)
 8000bd8:	f001 fb96 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f244 0181 	movw	r1, #16513	; 0x4081
 8000be2:	4860      	ldr	r0, [pc, #384]	; (8000d64 <MX_GPIO_Init+0x250>)
 8000be4:	f001 fb90 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	485e      	ldr	r0, [pc, #376]	; (8000d68 <MX_GPIO_Init+0x254>)
 8000bee:	f001 fb8b 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4855      	ldr	r0, [pc, #340]	; (8000d60 <MX_GPIO_Init+0x24c>)
 8000c0a:	f001 f9d1 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	484e      	ldr	r0, [pc, #312]	; (8000d60 <MX_GPIO_Init+0x24c>)
 8000c26:	f001 f9c3 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c2a:	2332      	movs	r3, #50	; 0x32
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4846      	ldr	r0, [pc, #280]	; (8000d60 <MX_GPIO_Init+0x24c>)
 8000c46:	f001 f9b3 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c4a:	2386      	movs	r3, #134	; 0x86
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5a:	230b      	movs	r3, #11
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4841      	ldr	r0, [pc, #260]	; (8000d6c <MX_GPIO_Init+0x258>)
 8000c66:	f001 f9a3 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	483b      	ldr	r0, [pc, #236]	; (8000d6c <MX_GPIO_Init+0x258>)
 8000c7e:	f001 f997 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c82:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4832      	ldr	r0, [pc, #200]	; (8000d64 <MX_GPIO_Init+0x250>)
 8000c9c:	f001 f988 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4829      	ldr	r0, [pc, #164]	; (8000d64 <MX_GPIO_Init+0x250>)
 8000cbe:	f001 f977 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cc2:	2340      	movs	r3, #64	; 0x40
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4823      	ldr	r0, [pc, #140]	; (8000d68 <MX_GPIO_Init+0x254>)
 8000cda:	f001 f969 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481d      	ldr	r0, [pc, #116]	; (8000d68 <MX_GPIO_Init+0x254>)
 8000cf2:	f001 f95d 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cf6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	4816      	ldr	r0, [pc, #88]	; (8000d6c <MX_GPIO_Init+0x258>)
 8000d14:	f001 f94c 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480f      	ldr	r0, [pc, #60]	; (8000d6c <MX_GPIO_Init+0x258>)
 8000d2e:	f001 f93f 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d44:	230b      	movs	r3, #11
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_GPIO_Init+0x254>)
 8000d50:	f001 f92e 	bl	8001fb0 <HAL_GPIO_Init>

}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	; 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020800 	.word	0x40020800
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <MX_I2C1_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <MX_I2C1_Init+0x7c>)
 8000d7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000dac:	f001 fac6 	bl	800233c <HAL_I2C_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000db6:	f000 f9ff 	bl	80011b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000dbe:	f001 fe33 	bl	8002a28 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dc8:	f000 f9f6 	bl	80011b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_I2C1_Init+0x74>)
 8000dd0:	f001 fe75 	bl	8002abe <HAL_I2CEx_ConfigDigitalFilter>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dda:	f000 f9ed 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000a4 	.word	0x200000a4
 8000de8:	40005400 	.word	0x40005400
 8000dec:	20404768 	.word	0x20404768

08000df0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0aa      	sub	sp, #168	; 0xa8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2284      	movs	r2, #132	; 0x84
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f006 f917 	bl	8007044 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <HAL_I2C_MspInit+0xb4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d13c      	bne.n	8000e9a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fbbc 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e3a:	f000 f9bd 	bl	80011b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_I2C_MspInit+0xb8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <HAL_I2C_MspInit+0xb8>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_I2C_MspInit+0xb8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e70:	2304      	movs	r3, #4
 8000e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <HAL_I2C_MspInit+0xbc>)
 8000e7e:	f001 f897 	bl	8001fb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_I2C_MspInit+0xb8>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_I2C_MspInit+0xb8>)
 8000e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_I2C_MspInit+0xb8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	37a8      	adds	r7, #168	; 0xa8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020400 	.word	0x40020400

08000eb0 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]


}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_UART_RxCpltCallback+0x48>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d117      	bne.n	8000f04 <HAL_UART_RxCpltCallback+0x40>
  {
	SERVO_WritePosition(&hservo1, 180 - strtol((char*)tx_buffer, 0, 10));
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <HAL_UART_RxCpltCallback+0x4c>)
 8000eda:	f006 f889 	bl	8006ff0 <strtol>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <HAL_UART_RxCpltCallback+0x50>)
 8000ef2:	f7ff fb77 	bl	80005e4 <SERVO_WritePosition>
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	4904      	ldr	r1, [pc, #16]	; (8000f10 <HAL_UART_RxCpltCallback+0x4c>)
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <HAL_UART_RxCpltCallback+0x48>)
 8000f00:	f004 fdea 	bl	8005ad8 <HAL_UART_Receive_IT>


   // HAL_UART_Receive_IT(&huart3, &character, 1);

  }
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200002ac 	.word	0x200002ac
 8000f10:	20000128 	.word	0x20000128
 8000f14:	20000014 	.word	0x20000014

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 fe23 	bl	8001b66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f888 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f7ff fdf6 	bl	8000b14 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f28:	f000 fd5c 	bl	80019e4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f2c:	f000 f9fe 	bl	800132c <MX_TIM1_Init>
  MX_TIM9_Init();
 8000f30:	f000 fbce 	bl	80016d0 <MX_TIM9_Init>
  MX_TIM2_Init();
 8000f34:	f000 fa9e 	bl	8001474 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f38:	f000 faf6 	bl	8001528 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f3c:	f7ff ff18 	bl	8000d70 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000f40:	f000 fb90 	bl	8001664 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Start Sensor 1 & 2
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 8000f44:	2308      	movs	r3, #8
 8000f46:	4a2c      	ldr	r2, [pc, #176]	; (8000ff8 <main+0xe0>)
 8000f48:	492c      	ldr	r1, [pc, #176]	; (8000ffc <main+0xe4>)
 8000f4a:	482d      	ldr	r0, [pc, #180]	; (8001000 <main+0xe8>)
 8000f4c:	f7ff fb88 	bl	8000660 <hc_sr04_init>
  hc_sr04_init(&distance_sensor2, &htim3, &htim2, TIM_CHANNEL_3);
 8000f50:	2308      	movs	r3, #8
 8000f52:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <main+0xe0>)
 8000f54:	492b      	ldr	r1, [pc, #172]	; (8001004 <main+0xec>)
 8000f56:	482c      	ldr	r0, [pc, #176]	; (8001008 <main+0xf0>)
 8000f58:	f7ff fb82 	bl	8000660 <hc_sr04_init>

  SERVO_Init(&hservo1);
 8000f5c:	482b      	ldr	r0, [pc, #172]	; (800100c <main+0xf4>)
 8000f5e:	f7ff fb2d 	bl	80005bc <SERVO_Init>
  SERVO_WritePosition(&hservo1, 130.0f);
 8000f62:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001010 <main+0xf8>
 8000f66:	4829      	ldr	r0, [pc, #164]	; (800100c <main+0xf4>)
 8000f68:	f7ff fb3c 	bl	80005e4 <SERVO_WritePosition>
 HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	4928      	ldr	r1, [pc, #160]	; (8001014 <main+0xfc>)
 8000f74:	4828      	ldr	r0, [pc, #160]	; (8001018 <main+0x100>)
 8000f76:	f004 fdaf 	bl	8005ad8 <HAL_UART_Receive_IT>


 //LCD constant display - Position, Set Position
  LCD_I2C_Init(&hlcd3);
 8000f7a:	4828      	ldr	r0, [pc, #160]	; (800101c <main+0x104>)
 8000f7c:	f7ff fc94 	bl	80008a8 <LCD_I2C_Init>
  LCD_I2C_SetCursor(&hlcd3, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	4825      	ldr	r0, [pc, #148]	; (800101c <main+0x104>)
 8000f86:	f7ff fd1d 	bl	80009c4 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "Position: ");
 8000f8a:	4925      	ldr	r1, [pc, #148]	; (8001020 <main+0x108>)
 8000f8c:	4823      	ldr	r0, [pc, #140]	; (800101c <main+0x104>)
 8000f8e:	f7ff fcf9 	bl	8000984 <LCD_I2C_printStr>


  LCD_I2C_SetCursor(&hlcd3, 0, 13);
 8000f92:	220d      	movs	r2, #13
 8000f94:	2100      	movs	r1, #0
 8000f96:	4821      	ldr	r0, [pc, #132]	; (800101c <main+0x104>)
 8000f98:	f7ff fd14 	bl	80009c4 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "cm");
 8000f9c:	4921      	ldr	r1, [pc, #132]	; (8001024 <main+0x10c>)
 8000f9e:	481f      	ldr	r0, [pc, #124]	; (800101c <main+0x104>)
 8000fa0:	f7ff fcf0 	bl	8000984 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	481c      	ldr	r0, [pc, #112]	; (800101c <main+0x104>)
 8000faa:	f7ff fd0b 	bl	80009c4 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "Set Point: ");
 8000fae:	491e      	ldr	r1, [pc, #120]	; (8001028 <main+0x110>)
 8000fb0:	481a      	ldr	r0, [pc, #104]	; (800101c <main+0x104>)
 8000fb2:	f7ff fce7 	bl	8000984 <LCD_I2C_printStr>

  LCD_I2C_SetCursor(&hlcd3, 1, 14);
 8000fb6:	220e      	movs	r2, #14
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <main+0x104>)
 8000fbc:	f7ff fd02 	bl	80009c4 <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "cm");
 8000fc0:	4918      	ldr	r1, [pc, #96]	; (8001024 <main+0x10c>)
 8000fc2:	4816      	ldr	r0, [pc, #88]	; (800101c <main+0x104>)
 8000fc4:	f7ff fcde 	bl	8000984 <LCD_I2C_printStr>

  //LCD_I2C_SetCursor(&hlcd3, 1, 11);
  //LCD_I2C_printDecInt(&hlcd3, setP);

  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4918      	ldr	r1, [pc, #96]	; (800102c <main+0x114>)
 8000fcc:	4812      	ldr	r0, [pc, #72]	; (8001018 <main+0x100>)
 8000fce:	f004 fd83 	bl	8005ad8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD_I2C_SetCursor(&hlcd3, 0, 10);
 8000fd2:	220a      	movs	r2, #10
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <main+0x104>)
 8000fd8:	f7ff fcf4 	bl	80009c4 <LCD_I2C_SetCursor>
	  LCD_I2C_printDecInt(&hlcd3, (int)position);
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <main+0x118>)
 8000fde:	edd3 7a00 	vldr	s15, [r3]
 8000fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe6:	ee17 1a90 	vmov	r1, s15
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <main+0x104>)
 8000fec:	f7ff fca4 	bl	8000938 <LCD_I2C_printDecInt>

	 // LCD_I2C_printStr(&hlcd3, text);
	  HAL_Delay(100);
 8000ff0:	2064      	movs	r0, #100	; 0x64
 8000ff2:	f000 fe15 	bl	8001c20 <HAL_Delay>
	  LCD_I2C_SetCursor(&hlcd3, 0, 10);
 8000ff6:	e7ec      	b.n	8000fd2 <main+0xba>
 8000ff8:	2000017c 	.word	0x2000017c
 8000ffc:	20000130 	.word	0x20000130
 8001000:	20000108 	.word	0x20000108
 8001004:	200001c8 	.word	0x200001c8
 8001008:	20000118 	.word	0x20000118
 800100c:	20000014 	.word	0x20000014
 8001010:	43020000 	.word	0x43020000
 8001014:	20000128 	.word	0x20000128
 8001018:	200002ac 	.word	0x200002ac
 800101c:	20000000 	.word	0x20000000
 8001020:	08007a14 	.word	0x08007a14
 8001024:	08007a20 	.word	0x08007a20
 8001028:	08007a24 	.word	0x08007a24
 800102c:	20000104 	.word	0x20000104
 8001030:	20000100 	.word	0x20000100

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f005 fffe 	bl	8007044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001058:	f001 fd7e 	bl	8002b58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <SystemClock_Config+0xd4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a29      	ldr	r2, [pc, #164]	; (8001108 <SystemClock_Config+0xd4>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <SystemClock_Config+0xd4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <SystemClock_Config+0xd8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a24      	ldr	r2, [pc, #144]	; (800110c <SystemClock_Config+0xd8>)
 800107a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <SystemClock_Config+0xd8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108c:	2301      	movs	r3, #1
 800108e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001090:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010a4:	23d8      	movs	r3, #216	; 0xd8
 80010a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010ac:	2309      	movs	r3, #9
 80010ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fdaf 	bl	8002c18 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80010c0:	f000 f87a 	bl	80011b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010c4:	f001 fd58 	bl	8002b78 <HAL_PWREx_EnableOverDrive>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ce:	f000 f873 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	230f      	movs	r3, #15
 80010d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2302      	movs	r3, #2
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80010e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2107      	movs	r1, #7
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 f835 	bl	8003160 <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80010fc:	f000 f85c 	bl	80011b8 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3750      	adds	r7, #80	; 0x50
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x90>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d111      	bne.n	8001146 <HAL_TIM_IC_CaptureCallback+0x36>
	{
		uint32_t echo_us;
          // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001122:	2104      	movs	r1, #4
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f003 fdff 	bl	8004d28 <HAL_TIM_ReadCapturedValue>
 800112a:	60f8      	str	r0, [r7, #12]
		dx_cm = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f7ff fab9 	bl	80006a4 <hc_sr04_convert_us_to_cm>
 8001132:	4602      	mov	r2, r0
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	ee07 2a90 	vmov	s15, r2
 800113c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001142:	edc3 7a00 	vstr	s15, [r3]
	}

	if(TIM3 == htim->Instance)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a18      	ldr	r2, [pc, #96]	; (80011ac <HAL_TIM_IC_CaptureCallback+0x9c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d111      	bne.n	8001174 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		uint32_t echo_us;
        // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001150:	2104      	movs	r1, #4
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f003 fde8 	bl	8004d28 <HAL_TIM_ReadCapturedValue>
 8001158:	60b8      	str	r0, [r7, #8]
		dx_cm2 = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	f7ff faa2 	bl	80006a4 <hc_sr04_convert_us_to_cm>
 8001160:	4602      	mov	r2, r0
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	ee07 2a90 	vmov	s15, r2
 800116a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
	}

	    // Calculate average distance or perform any other processing
	    position = CalulatePosition(dx_cm, dx_cm2);
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800117c:	ed93 7a00 	vldr	s14, [r3]
 8001180:	eef0 0a47 	vmov.f32	s1, s14
 8001184:	eeb0 0a67 	vmov.f32	s0, s15
 8001188:	f7ff fa9e 	bl	80006c8 <CalulatePosition>
 800118c:	eef0 7a40 	vmov.f32	s15, s0
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001192:	edc3 7a00 	vstr	s15, [r3]
	//position = position(dx_cm,dx_cm2,pos);

}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010000 	.word	0x40010000
 80011a4:	20000108 	.word	0x20000108
 80011a8:	200000f8 	.word	0x200000f8
 80011ac:	40000400 	.word	0x40000400
 80011b0:	200000fc 	.word	0x200000fc
 80011b4:	20000100 	.word	0x20000100

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>
	...

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_MspInit+0x44>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_MspInit+0x44>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_MspInit+0x44>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x44>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x44>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x44>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 fcc2 	bl	8001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <TIM1_CC_IRQHandler+0x10>)
 8001266:	f003 f983 	bl	8004570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000130 	.word	0x20000130

08001274 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM3_IRQHandler+0x10>)
 800127a:	f003 f979 	bl	8004570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200001c8 	.word	0x200001c8

08001288 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <USART3_IRQHandler+0x10>)
 800128e:	f004 fc67 	bl	8005b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200002ac 	.word	0x200002ac

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f005 fec2 	bl	8007054 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20050000 	.word	0x20050000
 80012fc:	00000400 	.word	0x00000400
 8001300:	2000012c 	.word	0x2000012c
 8001304:	20000480 	.word	0x20000480

08001308 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b090      	sub	sp, #64	; 0x40
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <MX_TIM1_Init+0x140>)
 800136a:	4a41      	ldr	r2, [pc, #260]	; (8001470 <MX_TIM1_Init+0x144>)
 800136c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <MX_TIM1_Init+0x140>)
 8001370:	226b      	movs	r2, #107	; 0x6b
 8001372:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <MX_TIM1_Init+0x140>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <MX_TIM1_Init+0x140>)
 800137c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001380:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <MX_TIM1_Init+0x140>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <MX_TIM1_Init+0x140>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <MX_TIM1_Init+0x140>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001394:	4835      	ldr	r0, [pc, #212]	; (800146c <MX_TIM1_Init+0x140>)
 8001396:	f002 fcf9 	bl	8003d8c <HAL_TIM_Base_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013a0:	f7ff ff0a 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ae:	4619      	mov	r1, r3
 80013b0:	482e      	ldr	r0, [pc, #184]	; (800146c <MX_TIM1_Init+0x140>)
 80013b2:	f003 fbad 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013bc:	f7ff fefc 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013c0:	482a      	ldr	r0, [pc, #168]	; (800146c <MX_TIM1_Init+0x140>)
 80013c2:	f002 ff23 	bl	800420c <HAL_TIM_IC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013cc:	f7ff fef4 	bl	80011b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013d0:	2304      	movs	r3, #4
 80013d2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013d4:	2350      	movs	r3, #80	; 0x50
 80013d6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	4820      	ldr	r0, [pc, #128]	; (800146c <MX_TIM1_Init+0x140>)
 80013ec:	f003 fc5a 	bl	8004ca4 <HAL_TIM_SlaveConfigSynchro>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80013f6:	f7ff fedf 	bl	80011b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013fe:	2301      	movs	r3, #1
 8001400:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	4816      	ldr	r0, [pc, #88]	; (800146c <MX_TIM1_Init+0x140>)
 8001414:	f003 f9cb 	bl	80047ae <HAL_TIM_IC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800141e:	f7ff fecb 	bl	80011b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001422:	2302      	movs	r3, #2
 8001424:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001426:	2302      	movs	r3, #2
 8001428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2204      	movs	r2, #4
 8001430:	4619      	mov	r1, r3
 8001432:	480e      	ldr	r0, [pc, #56]	; (800146c <MX_TIM1_Init+0x140>)
 8001434:	f003 f9bb 	bl	80047ae <HAL_TIM_IC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800143e:	f7ff febb 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_TIM1_Init+0x140>)
 8001454:	f004 fa46 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800145e:	f7ff feab 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3740      	adds	r7, #64	; 0x40
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000130 	.word	0x20000130
 8001470:	40010000 	.word	0x40010000

08001474 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001486:	463b      	mov	r3, r7
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_TIM2_Init+0xac>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_TIM2_Init+0xac>)
 80014a2:	226b      	movs	r2, #107	; 0x6b
 80014a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_TIM2_Init+0xac>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_TIM2_Init+0xac>)
 80014ae:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <MX_TIM2_Init+0xb0>)
 80014b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_TIM2_Init+0xac>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_TIM2_Init+0xac>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014be:	4818      	ldr	r0, [pc, #96]	; (8001520 <MX_TIM2_Init+0xac>)
 80014c0:	f002 fd53 	bl	8003f6a <HAL_TIM_PWM_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014ca:	f7ff fe75 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <MX_TIM2_Init+0xac>)
 80014de:	f004 fa01 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014e8:	f7ff fe66 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ec:	2360      	movs	r3, #96	; 0x60
 80014ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80014f0:	230a      	movs	r3, #10
 80014f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	2208      	movs	r2, #8
 8001500:	4619      	mov	r1, r3
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <MX_TIM2_Init+0xac>)
 8001504:	f003 f9f0 	bl	80048e8 <HAL_TIM_PWM_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800150e:	f7ff fe53 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001512:	4803      	ldr	r0, [pc, #12]	; (8001520 <MX_TIM2_Init+0xac>)
 8001514:	f000 fa0a 	bl	800192c <HAL_TIM_MspPostInit>

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000017c 	.word	0x2000017c
 8001524:	00030d3f 	.word	0x00030d3f

08001528 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b090      	sub	sp, #64	; 0x40
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	463b      	mov	r3, r7
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <MX_TIM3_Init+0x134>)
 8001566:	4a3e      	ldr	r2, [pc, #248]	; (8001660 <MX_TIM3_Init+0x138>)
 8001568:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 800156a:	4b3c      	ldr	r3, [pc, #240]	; (800165c <MX_TIM3_Init+0x134>)
 800156c:	226b      	movs	r2, #107	; 0x6b
 800156e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b3a      	ldr	r3, [pc, #232]	; (800165c <MX_TIM3_Init+0x134>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <MX_TIM3_Init+0x134>)
 8001578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <MX_TIM3_Init+0x134>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b35      	ldr	r3, [pc, #212]	; (800165c <MX_TIM3_Init+0x134>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800158a:	4834      	ldr	r0, [pc, #208]	; (800165c <MX_TIM3_Init+0x134>)
 800158c:	f002 fbfe 	bl	8003d8c <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001596:	f7ff fe0f 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a4:	4619      	mov	r1, r3
 80015a6:	482d      	ldr	r0, [pc, #180]	; (800165c <MX_TIM3_Init+0x134>)
 80015a8:	f003 fab2 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80015b2:	f7ff fe01 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80015b6:	4829      	ldr	r0, [pc, #164]	; (800165c <MX_TIM3_Init+0x134>)
 80015b8:	f002 fe28 	bl	800420c <HAL_TIM_IC_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80015c2:	f7ff fdf9 	bl	80011b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80015c6:	2304      	movs	r3, #4
 80015c8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80015ca:	2350      	movs	r3, #80	; 0x50
 80015cc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	481e      	ldr	r0, [pc, #120]	; (800165c <MX_TIM3_Init+0x134>)
 80015e2:	f003 fb5f 	bl	8004ca4 <HAL_TIM_SlaveConfigSynchro>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80015ec:	f7ff fde4 	bl	80011b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015f4:	2301      	movs	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	4814      	ldr	r0, [pc, #80]	; (800165c <MX_TIM3_Init+0x134>)
 800160a:	f003 f8d0 	bl	80047ae <HAL_TIM_IC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001614:	f7ff fdd0 	bl	80011b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001618:	2302      	movs	r3, #2
 800161a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800161c:	2302      	movs	r3, #2
 800161e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2204      	movs	r2, #4
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <MX_TIM3_Init+0x134>)
 800162a:	f003 f8c0 	bl	80047ae <HAL_TIM_IC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001634:	f7ff fdc0 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_TIM3_Init+0x134>)
 8001646:	f004 f94d 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8001650:	f7ff fdb2 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3740      	adds	r7, #64	; 0x40
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200001c8 	.word	0x200001c8
 8001660:	40000400 	.word	0x40000400

08001664 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_TIM7_Init+0x64>)
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <MX_TIM7_Init+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <MX_TIM7_Init+0x64>)
 800167c:	226b      	movs	r2, #107	; 0x6b
 800167e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_TIM7_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_TIM7_Init+0x64>)
 8001688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_TIM7_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_TIM7_Init+0x64>)
 8001696:	f002 fb79 	bl	8003d8c <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80016a0:	f7ff fd8a 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_TIM7_Init+0x64>)
 80016b2:	f004 f917 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80016bc:	f7ff fd7c 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000214 	.word	0x20000214
 80016cc:	40001400 	.word	0x40001400

080016d0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <MX_TIM9_Init+0xbc>)
 80016f8:	4a25      	ldr	r2, [pc, #148]	; (8001790 <MX_TIM9_Init+0xc0>)
 80016fa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <MX_TIM9_Init+0xbc>)
 80016fe:	226b      	movs	r2, #107	; 0x6b
 8001700:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <MX_TIM9_Init+0xbc>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <MX_TIM9_Init+0xbc>)
 800170a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800170e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <MX_TIM9_Init+0xbc>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_TIM9_Init+0xbc>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800171c:	481b      	ldr	r0, [pc, #108]	; (800178c <MX_TIM9_Init+0xbc>)
 800171e:	f002 fb35 	bl	8003d8c <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001728:	f7ff fd46 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	4619      	mov	r1, r3
 8001738:	4814      	ldr	r0, [pc, #80]	; (800178c <MX_TIM9_Init+0xbc>)
 800173a:	f003 f9e9 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001744:	f7ff fd38 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001748:	4810      	ldr	r0, [pc, #64]	; (800178c <MX_TIM9_Init+0xbc>)
 800174a:	f002 fc0e 	bl	8003f6a <HAL_TIM_PWM_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001754:	f7ff fd30 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001758:	2360      	movs	r3, #96	; 0x60
 800175a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	4619      	mov	r1, r3
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <MX_TIM9_Init+0xbc>)
 8001770:	f003 f8ba 	bl	80048e8 <HAL_TIM_PWM_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800177a:	f7ff fd1d 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800177e:	4803      	ldr	r0, [pc, #12]	; (800178c <MX_TIM9_Init+0xbc>)
 8001780:	f000 f8d4 	bl	800192c <HAL_TIM_MspPostInit>

}
 8001784:	bf00      	nop
 8001786:	3730      	adds	r7, #48	; 0x30
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000260 	.word	0x20000260
 8001790:	40014000 	.word	0x40014000

08001794 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	; 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a48      	ldr	r2, [pc, #288]	; (80018d4 <HAL_TIM_Base_MspInit+0x140>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d131      	bne.n	800181a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b6:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a47      	ldr	r2, [pc, #284]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b45      	ldr	r3, [pc, #276]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ce:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a41      	ldr	r2, [pc, #260]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	4836      	ldr	r0, [pc, #216]	; (80018dc <HAL_TIM_Base_MspInit+0x148>)
 8001804:	f000 fbd4 	bl	8001fb0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	201b      	movs	r0, #27
 800180e:	f000 fb06 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001812:	201b      	movs	r0, #27
 8001814:	f000 fb1f 	bl	8001e56 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001818:	e058      	b.n	80018cc <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM3)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a30      	ldr	r2, [pc, #192]	; (80018e0 <HAL_TIM_Base_MspInit+0x14c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d130      	bne.n	8001886 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	4a2b      	ldr	r2, [pc, #172]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	6413      	str	r3, [r2, #64]	; 0x40
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001854:	2340      	movs	r3, #64	; 0x40
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001864:	2302      	movs	r3, #2
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	4619      	mov	r1, r3
 800186e:	481d      	ldr	r0, [pc, #116]	; (80018e4 <HAL_TIM_Base_MspInit+0x150>)
 8001870:	f000 fb9e 	bl	8001fb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	201d      	movs	r0, #29
 800187a:	f000 fad0 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800187e:	201d      	movs	r0, #29
 8001880:	f000 fae9 	bl	8001e56 <HAL_NVIC_EnableIRQ>
}
 8001884:	e022      	b.n	80018cc <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM7)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_TIM_Base_MspInit+0x154>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d10c      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 8001896:	f043 0320 	orr.w	r3, r3, #32
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
}
 80018a8:	e010      	b.n	80018cc <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM9)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <HAL_TIM_Base_MspInit+0x158>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d10b      	bne.n	80018cc <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 80018ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018be:	6453      	str	r3, [r2, #68]	; 0x44
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_TIM_Base_MspInit+0x144>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3738      	adds	r7, #56	; 0x38
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40010000 	.word	0x40010000
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40000400 	.word	0x40000400
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40001400 	.word	0x40001400
 80018ec:	40014000 	.word	0x40014000

080018f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001900:	d10b      	bne.n	800191a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_TIM_PWM_MspInit+0x38>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_TIM_PWM_MspInit+0x38>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_TIM_PWM_MspInit+0x38>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194c:	d11d      	bne.n	800198a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_TIM_MspPostInit+0xa8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <HAL_TIM_MspPostInit+0xa8>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_TIM_MspPostInit+0xa8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001978:	2301      	movs	r3, #1
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4815      	ldr	r0, [pc, #84]	; (80019d8 <HAL_TIM_MspPostInit+0xac>)
 8001984:	f000 fb14 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001988:	e020      	b.n	80019cc <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a13      	ldr	r2, [pc, #76]	; (80019dc <HAL_TIM_MspPostInit+0xb0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d11b      	bne.n	80019cc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_TIM_MspPostInit+0xa8>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <HAL_TIM_MspPostInit+0xa8>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6313      	str	r3, [r2, #48]	; 0x30
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_TIM_MspPostInit+0xa8>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80019ac:	2320      	movs	r3, #32
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80019bc:	2303      	movs	r3, #3
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 80019c8:	f000 faf2 	bl	8001fb0 <HAL_GPIO_Init>
}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40014000 	.word	0x40014000
 80019e0:	40021000 	.word	0x40021000

080019e4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 80019ea:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <MX_USART3_UART_Init+0x5c>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 80019f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_USART3_UART_Init+0x58>)
 8001a28:	f004 f808 	bl	8005a3c <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a32:	f7ff fbc1 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002ac 	.word	0x200002ac
 8001a40:	40004800 	.word	0x40004800

08001a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0aa      	sub	sp, #168	; 0xa8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	2284      	movs	r2, #132	; 0x84
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 faed 	bl	8007044 <memset>
  if(uartHandle->Instance==USART3)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <HAL_UART_MspInit+0xc4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d144      	bne.n	8001afe <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fd92 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a8e:	f7ff fb93 	bl	80011b8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <HAL_UART_MspInit+0xc8>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <HAL_UART_MspInit+0xc8>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_UART_MspInit+0xc8>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_UART_MspInit+0xc8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_UART_MspInit+0xc8>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_UART_MspInit+0xc8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001adc:	2307      	movs	r3, #7
 8001ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4809      	ldr	r0, [pc, #36]	; (8001b10 <HAL_UART_MspInit+0xcc>)
 8001aea:	f000 fa61 	bl	8001fb0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2027      	movs	r0, #39	; 0x27
 8001af4:	f000 f993 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001af8:	2027      	movs	r0, #39	; 0x27
 8001afa:	f000 f9ac 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001afe:	bf00      	nop
 8001b00:	37a8      	adds	r7, #168	; 0xa8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40004800 	.word	0x40004800
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020c00 	.word	0x40020c00

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1a:	490e      	ldr	r1, [pc, #56]	; (8001b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b30:	4c0b      	ldr	r4, [pc, #44]	; (8001b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b3e:	f7ff fbe3 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f005 fa8d 	bl	8007060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff f9e7 	bl	8000f18 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b58:	08007b90 	.word	0x08007b90
  ldr r2, =_sbss
 8001b5c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b60:	20000480 	.word	0x20000480

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>

08001b66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f000 f94c 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f000 f805 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b76:	f7ff fb25 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_InitTick+0x54>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x58>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f967 	bl	8001e72 <HAL_SYSTICK_Config>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00e      	b.n	8001bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d80a      	bhi.n	8001bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f000 f92f 	bl	8001e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc0:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <HAL_InitTick+0x5c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000024 	.word	0x20000024
 8001bd8:	2000002c 	.word	0x2000002c
 8001bdc:	20000028 	.word	0x20000028

08001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_IncTick+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_IncTick+0x24>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2000002c 	.word	0x2000002c
 8001c04:	20000334 	.word	0x20000334

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000334 	.word	0x20000334

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff ffee 	bl	8001c08 <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d005      	beq.n	8001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_Delay+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c46:	bf00      	nop
 8001c48:	f7ff ffde 	bl	8001c08 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f7      	bhi.n	8001c48 <HAL_Delay+0x28>
  {
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000002c 	.word	0x2000002c

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	05fa0000 	.word	0x05fa0000

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	; (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff29 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff3e 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff8e 	bl	8001d5c <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5d 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff31 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffa2 	bl	8001dc4 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff feb6 	bl	8001c08 <HAL_GetTick>
 8001e9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d008      	beq.n	8001ebc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e052      	b.n	8001f62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0216 	bic.w	r2, r2, #22
 8001eca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <HAL_DMA_Abort+0x62>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0208 	bic.w	r2, r2, #8
 8001efa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0c:	e013      	b.n	8001f36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f0e:	f7ff fe7b 	bl	8001c08 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d90c      	bls.n	8001f36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2203      	movs	r2, #3
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e015      	b.n	8001f62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e4      	bne.n	8001f0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	223f      	movs	r2, #63	; 0x3f
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d004      	beq.n	8001f88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e00c      	b.n	8001fa2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	e175      	b.n	80022bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f040 8164 	bne.w	80022b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d005      	beq.n	8002006 <HAL_GPIO_Init+0x56>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d130      	bne.n	8002068 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 0201 	and.w	r2, r3, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b03      	cmp	r3, #3
 8002072:	d017      	beq.n	80020a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d123      	bne.n	80020f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	220f      	movs	r2, #15
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	69b9      	ldr	r1, [r7, #24]
 80020f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0203 	and.w	r2, r3, #3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80be 	beq.w	80022b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <HAL_GPIO_Init+0x324>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a65      	ldr	r2, [pc, #404]	; (80022d4 <HAL_GPIO_Init+0x324>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_GPIO_Init+0x324>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002152:	4a61      	ldr	r2, [pc, #388]	; (80022d8 <HAL_GPIO_Init+0x328>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_GPIO_Init+0x32c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d037      	beq.n	80021ee <HAL_GPIO_Init+0x23e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_GPIO_Init+0x330>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d031      	beq.n	80021ea <HAL_GPIO_Init+0x23a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a56      	ldr	r2, [pc, #344]	; (80022e4 <HAL_GPIO_Init+0x334>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <HAL_GPIO_Init+0x236>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a55      	ldr	r2, [pc, #340]	; (80022e8 <HAL_GPIO_Init+0x338>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d025      	beq.n	80021e2 <HAL_GPIO_Init+0x232>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a54      	ldr	r2, [pc, #336]	; (80022ec <HAL_GPIO_Init+0x33c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <HAL_GPIO_Init+0x22e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a53      	ldr	r2, [pc, #332]	; (80022f0 <HAL_GPIO_Init+0x340>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0x22a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_GPIO_Init+0x344>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0x226>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_GPIO_Init+0x348>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00d      	beq.n	80021d2 <HAL_GPIO_Init+0x222>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a50      	ldr	r2, [pc, #320]	; (80022fc <HAL_GPIO_Init+0x34c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x21e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <HAL_GPIO_Init+0x350>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x21a>
 80021c6:	2309      	movs	r3, #9
 80021c8:	e012      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021ca:	230a      	movs	r3, #10
 80021cc:	e010      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021ce:	2308      	movs	r3, #8
 80021d0:	e00e      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021d2:	2307      	movs	r3, #7
 80021d4:	e00c      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021d6:	2306      	movs	r3, #6
 80021d8:	e00a      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021da:	2305      	movs	r3, #5
 80021dc:	e008      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021de:	2304      	movs	r3, #4
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021ee:	2300      	movs	r3, #0
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002200:	4935      	ldr	r1, [pc, #212]	; (80022d8 <HAL_GPIO_Init+0x328>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_GPIO_Init+0x354>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002232:	4a34      	ldr	r2, [pc, #208]	; (8002304 <HAL_GPIO_Init+0x354>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <HAL_GPIO_Init+0x354>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800225c:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_GPIO_Init+0x354>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002262:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_GPIO_Init+0x354>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002286:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_GPIO_Init+0x354>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_GPIO_Init+0x354>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_GPIO_Init+0x354>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	f67f ae86 	bls.w	8001fd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40021400 	.word	0x40021400
 80022f4:	40021800 	.word	0x40021800
 80022f8:	40021c00 	.word	0x40021c00
 80022fc:	40022000 	.word	0x40022000
 8002300:	40022400 	.word	0x40022400
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07f      	b.n	800244e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe fd44 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2224      	movs	r2, #36	; 0x24
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800238c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800239c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e006      	b.n	80023c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d104      	bne.n	80023d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_I2C_Init+0x11c>)
 80023e2:	430b      	orrs	r3, r1
 80023e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69d9      	ldr	r1, [r3, #28]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	02008000 	.word	0x02008000

0800245c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	461a      	mov	r2, r3
 8002468:	460b      	mov	r3, r1
 800246a:	817b      	strh	r3, [r7, #10]
 800246c:	4613      	mov	r3, r2
 800246e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b20      	cmp	r3, #32
 800247a:	f040 80da 	bne.w	8002632 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_I2C_Master_Transmit+0x30>
 8002488:	2302      	movs	r3, #2
 800248a:	e0d3      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002494:	f7ff fbb8 	bl	8001c08 <HAL_GetTick>
 8002498:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2319      	movs	r3, #25
 80024a0:	2201      	movs	r2, #1
 80024a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f8f0 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0be      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2221      	movs	r2, #33	; 0x21
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2210      	movs	r2, #16
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	893a      	ldrh	r2, [r7, #8]
 80024d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2bff      	cmp	r3, #255	; 0xff
 80024e6:	d90e      	bls.n	8002506 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	22ff      	movs	r2, #255	; 0xff
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_I2C_Master_Transmit+0x1e0>)
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fa60 	bl	80029c4 <I2C_TransferConfig>
 8002504:	e06c      	b.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	b2da      	uxtb	r2, r3
 8002516:	8979      	ldrh	r1, [r7, #10]
 8002518:	4b48      	ldr	r3, [pc, #288]	; (800263c <HAL_I2C_Master_Transmit+0x1e0>)
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fa4f 	bl	80029c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002526:	e05b      	b.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	6a39      	ldr	r1, [r7, #32]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f8ed 	bl	800270c <I2C_WaitOnTXISFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e07b      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d034      	beq.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d130      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	2200      	movs	r2, #0
 8002586:	2180      	movs	r1, #128	; 0x80
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f87f 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e04d      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	d90e      	bls.n	80025c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	22ff      	movs	r2, #255	; 0xff
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	8979      	ldrh	r1, [r7, #10]
 80025b0:	2300      	movs	r3, #0
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fa03 	bl	80029c4 <I2C_TransferConfig>
 80025be:	e00f      	b.n	80025e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	8979      	ldrh	r1, [r7, #10]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f9f2 	bl	80029c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d19e      	bne.n	8002528 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f8cc 	bl	800278c <I2C_WaitOnSTOPFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e01a      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2220      	movs	r2, #32
 8002604:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_I2C_Master_Transmit+0x1e4>)
 8002612:	400b      	ands	r3, r1
 8002614:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	80002000 	.word	0x80002000
 8002640:	fe00e800 	.word	0xfe00e800

08002644 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d103      	bne.n	8002662 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d007      	beq.n	8002680 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	619a      	str	r2, [r3, #24]
  }
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269c:	e022      	b.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d01e      	beq.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7ff faaf 	bl	8001c08 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d113      	bne.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e00f      	b.n	8002704 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d0cd      	beq.n	800269e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002718:	e02c      	b.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f870 	bl	8002804 <I2C_IsErrorOccurred>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e02a      	b.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d01e      	beq.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002736:	f7ff fa67 	bl	8001c08 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	429a      	cmp	r2, r3
 8002744:	d302      	bcc.n	800274c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d113      	bne.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e007      	b.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d1cb      	bne.n	800271a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002798:	e028      	b.n	80027ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f830 	bl	8002804 <I2C_IsErrorOccurred>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e026      	b.n	80027fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7ff fa2b 	bl	8001c08 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d302      	bcc.n	80027c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d113      	bne.n	80027ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e007      	b.n	80027fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d1cf      	bne.n	800279a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d068      	beq.n	8002902 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2210      	movs	r2, #16
 8002836:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002838:	e049      	b.n	80028ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d045      	beq.n	80028ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002842:	f7ff f9e1 	bl	8001c08 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <I2C_IsErrorOccurred+0x54>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d13a      	bne.n	80028ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002862:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800286a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287a:	d121      	bne.n	80028c0 <I2C_IsErrorOccurred+0xbc>
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002882:	d01d      	beq.n	80028c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	2b20      	cmp	r3, #32
 8002888:	d01a      	beq.n	80028c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002898:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800289a:	f7ff f9b5 	bl	8001c08 <HAL_GetTick>
 800289e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a0:	e00e      	b.n	80028c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028a2:	f7ff f9b1 	bl	8001c08 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b19      	cmp	r3, #25
 80028ae:	d907      	bls.n	80028c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	f043 0320 	orr.w	r3, r3, #32
 80028b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80028be:	e006      	b.n	80028ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d1e9      	bne.n	80028a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d003      	beq.n	80028e4 <I2C_IsErrorOccurred+0xe0>
 80028dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0aa      	beq.n	800283a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d103      	bne.n	80028f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2220      	movs	r2, #32
 80028f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002924:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002946:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002968:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01c      	beq.n	80029b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff fe63 	bl	8002644 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <I2C_IsErrorOccurred+0x1bc>)
 800298a:	400b      	ands	r3, r1
 800298c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	431a      	orrs	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	fe00e800 	.word	0xfe00e800

080029c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	4613      	mov	r3, r2
 80029d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029dc:	7a7b      	ldrb	r3, [r7, #9]
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	0d5b      	lsrs	r3, r3, #21
 80029fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <I2C_TransferConfig+0x60>)
 8002a04:	430b      	orrs	r3, r1
 8002a06:	43db      	mvns	r3, r3
 8002a08:	ea02 0103 	and.w	r1, r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	03ff63ff 	.word	0x03ff63ff

08002a28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d138      	bne.n	8002ab0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e032      	b.n	8002ab2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2224      	movs	r2, #36	; 0x24
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d139      	bne.n	8002b48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e033      	b.n	8002b4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2224      	movs	r2, #36	; 0x24
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000

08002b78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b9a:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba6:	f7ff f82f 	bl	8001c08 <HAL_GetTick>
 8002baa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bac:	e009      	b.n	8002bc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bae:	f7ff f82b 	bl	8001c08 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bbc:	d901      	bls.n	8002bc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e022      	b.n	8002c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bce:	d1ee      	bne.n	8002bae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bdc:	f7ff f814 	bl	8001c08 <HAL_GetTick>
 8002be0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002be2:	e009      	b.n	8002bf8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002be4:	f7ff f810 	bl	8001c08 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bf2:	d901      	bls.n	8002bf8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e007      	b.n	8002c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c04:	d1ee      	bne.n	8002be4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c20:	2300      	movs	r3, #0
 8002c22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e291      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8087 	beq.w	8002d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3c:	4b96      	ldr	r3, [pc, #600]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d00c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c48:	4b93      	ldr	r3, [pc, #588]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d112      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62>
 8002c54:	4b90      	ldr	r3, [pc, #576]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c60:	d10b      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	4b8d      	ldr	r3, [pc, #564]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d06c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x130>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d168      	bne.n	8002d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e26b      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x7a>
 8002c84:	4b84      	ldr	r3, [pc, #528]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a83      	ldr	r2, [pc, #524]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e02e      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd8>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x9c>
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7e      	ldr	r2, [pc, #504]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b7c      	ldr	r3, [pc, #496]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7b      	ldr	r2, [pc, #492]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xc0>
 8002cbe:	4b76      	ldr	r3, [pc, #472]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a75      	ldr	r2, [pc, #468]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a72      	ldr	r2, [pc, #456]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd8>
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a6e      	ldr	r2, [pc, #440]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b6c      	ldr	r3, [pc, #432]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a6b      	ldr	r2, [pc, #428]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe ff86 	bl	8001c08 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe ff82 	bl	8001c08 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e21f      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xe8>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe ff72 	bl	8001c08 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe ff6e 	bl	8001c08 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e20b      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x110>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d069      	beq.n	8002e2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d56:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d62:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d11c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x190>
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d116      	bne.n	8002da8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_RCC_OscConfig+0x17a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e1df      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	493d      	ldr	r1, [pc, #244]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	e040      	b.n	8002e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db0:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a38      	ldr	r2, [pc, #224]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe ff24 	bl	8001c08 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe ff20 	bl	8001c08 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1bd      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4929      	ldr	r1, [pc, #164]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
 8002df6:	e018      	b.n	8002e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe ff00 	bl	8001c08 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0c:	f7fe fefc 	bl	8001c08 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e199      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d038      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d019      	beq.n	8002e72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fedd 	bl	8001c08 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe fed9 	bl	8001c08 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e176      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x23a>
 8002e70:	e01a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e76:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <HAL_RCC_OscConfig+0x280>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fec3 	bl	8001c08 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fe febf 	bl	8001c08 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d903      	bls.n	8002e9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e15c      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
 8002e98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	4b91      	ldr	r3, [pc, #580]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ee      	bne.n	8002e86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a4 	beq.w	8002ffe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b8b      	ldr	r3, [pc, #556]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b88      	ldr	r3, [pc, #544]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a87      	ldr	r2, [pc, #540]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ece:	4b85      	ldr	r3, [pc, #532]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ede:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002eea:	4b7f      	ldr	r3, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7e      	ldr	r2, [pc, #504]	; (80030e8 <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fe87 	bl	8001c08 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7fe fe83 	bl	8001c08 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e120      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f10:	4b75      	ldr	r3, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x4d0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x31a>
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f30:	e02d      	b.n	8002f8e <HAL_RCC_OscConfig+0x376>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x33c>
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a69      	ldr	r2, [pc, #420]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
 8002f46:	4b67      	ldr	r3, [pc, #412]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a66      	ldr	r2, [pc, #408]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
 8002f52:	e01c      	b.n	8002f8e <HAL_RCC_OscConfig+0x376>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x35e>
 8002f5c:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a60      	ldr	r2, [pc, #384]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	e00b      	b.n	8002f8e <HAL_RCC_OscConfig+0x376>
 8002f76:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a5a      	ldr	r2, [pc, #360]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70
 8002f82:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f96:	f7fe fe37 	bl	8001c08 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe fe33 	bl	8001c08 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0ce      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	4b4b      	ldr	r3, [pc, #300]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ee      	beq.n	8002f9e <HAL_RCC_OscConfig+0x386>
 8002fc0:	e014      	b.n	8002fec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fe21 	bl	8001c08 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe fe1d 	bl	8001c08 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0b8      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ee      	bne.n	8002fca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b3c      	ldr	r3, [pc, #240]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a4 	beq.w	8003150 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d06b      	beq.n	80030ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d149      	bne.n	80030b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a30      	ldr	r2, [pc, #192]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe fdee 	bl	8001c08 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fdea 	bl	8001c08 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e087      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	019b      	lsls	r3, r3, #6
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	3b01      	subs	r3, #1
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	4313      	orrs	r3, r2
 8003074:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800307a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fdbe 	bl	8001c08 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe fdba 	bl	8001c08 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e057      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x478>
 80030ae:	e04f      	b.n	8003150 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 80030b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fda4 	bl	8001c08 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fda0 	bl	8001c08 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e03d      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4ac>
 80030e2:	e035      	b.n	8003150 <HAL_RCC_OscConfig+0x538>
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x544>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d028      	beq.n	800314c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d121      	bne.n	800314c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d11a      	bne.n	800314c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003122:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003124:	4293      	cmp	r3, r2
 8003126:	d111      	bne.n	800314c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	3b01      	subs	r3, #1
 8003136:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800

08003160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0d0      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 020f 	bic.w	r2, r3, #15
 800318e:	4965      	ldr	r1, [pc, #404]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b63      	ldr	r3, [pc, #396]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0b8      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d020      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c0:	4b59      	ldr	r3, [pc, #356]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a58      	ldr	r2, [pc, #352]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d8:	4b53      	ldr	r3, [pc, #332]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a52      	ldr	r2, [pc, #328]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b50      	ldr	r3, [pc, #320]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	494d      	ldr	r1, [pc, #308]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d040      	beq.n	8003284 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d115      	bne.n	8003242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e07f      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	4b41      	ldr	r3, [pc, #260]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e073      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e06b      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003242:	4b39      	ldr	r3, [pc, #228]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4936      	ldr	r1, [pc, #216]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003254:	f7fe fcd8 	bl	8001c08 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fe fcd4 	bl	8001c08 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e053      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 020c 	and.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	429a      	cmp	r2, r3
 8003282:	d1eb      	bne.n	800325c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d210      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 020f 	bic.w	r2, r3, #15
 800329a:	4922      	ldr	r1, [pc, #136]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e032      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c0:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4916      	ldr	r1, [pc, #88]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	490e      	ldr	r1, [pc, #56]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032f2:	f000 f821 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	490a      	ldr	r1, [pc, #40]	; (800332c <HAL_RCC_ClockConfig+0x1cc>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <HAL_RCC_ClockConfig+0x1d0>)
 800330c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x1d4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fc34 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023c00 	.word	0x40023c00
 8003328:	40023800 	.word	0x40023800
 800332c:	08007a34 	.word	0x08007a34
 8003330:	20000024 	.word	0x20000024
 8003334:	20000028 	.word	0x20000028

08003338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800333c:	b094      	sub	sp, #80	; 0x50
 800333e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	647b      	str	r3, [r7, #68]	; 0x44
 8003344:	2300      	movs	r3, #0
 8003346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003348:	2300      	movs	r3, #0
 800334a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003350:	4b79      	ldr	r3, [pc, #484]	; (8003538 <HAL_RCC_GetSysClockFreq+0x200>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d00d      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x40>
 800335c:	2b08      	cmp	r3, #8
 800335e:	f200 80e1 	bhi.w	8003524 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x34>
 8003366:	2b04      	cmp	r3, #4
 8003368:	d003      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0x3a>
 800336a:	e0db      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800336c:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCC_GetSysClockFreq+0x204>)
 800336e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003370:	e0db      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003372:	4b73      	ldr	r3, [pc, #460]	; (8003540 <HAL_RCC_GetSysClockFreq+0x208>)
 8003374:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003376:	e0d8      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_RCC_GetSysClockFreq+0x200>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003380:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003382:	4b6d      	ldr	r3, [pc, #436]	; (8003538 <HAL_RCC_GetSysClockFreq+0x200>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d063      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_GetSysClockFreq+0x200>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	2200      	movs	r2, #0
 8003396:	63bb      	str	r3, [r7, #56]	; 0x38
 8003398:	63fa      	str	r2, [r7, #60]	; 0x3c
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a0:	633b      	str	r3, [r7, #48]	; 0x30
 80033a2:	2300      	movs	r3, #0
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
 80033a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033aa:	4622      	mov	r2, r4
 80033ac:	462b      	mov	r3, r5
 80033ae:	f04f 0000 	mov.w	r0, #0
 80033b2:	f04f 0100 	mov.w	r1, #0
 80033b6:	0159      	lsls	r1, r3, #5
 80033b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033bc:	0150      	lsls	r0, r2, #5
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4621      	mov	r1, r4
 80033c4:	1a51      	subs	r1, r2, r1
 80033c6:	6139      	str	r1, [r7, #16]
 80033c8:	4629      	mov	r1, r5
 80033ca:	eb63 0301 	sbc.w	r3, r3, r1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033dc:	4659      	mov	r1, fp
 80033de:	018b      	lsls	r3, r1, #6
 80033e0:	4651      	mov	r1, sl
 80033e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033e6:	4651      	mov	r1, sl
 80033e8:	018a      	lsls	r2, r1, #6
 80033ea:	4651      	mov	r1, sl
 80033ec:	ebb2 0801 	subs.w	r8, r2, r1
 80033f0:	4659      	mov	r1, fp
 80033f2:	eb63 0901 	sbc.w	r9, r3, r1
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800340a:	4690      	mov	r8, r2
 800340c:	4699      	mov	r9, r3
 800340e:	4623      	mov	r3, r4
 8003410:	eb18 0303 	adds.w	r3, r8, r3
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	462b      	mov	r3, r5
 8003418:	eb49 0303 	adc.w	r3, r9, r3
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800342a:	4629      	mov	r1, r5
 800342c:	024b      	lsls	r3, r1, #9
 800342e:	4621      	mov	r1, r4
 8003430:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003434:	4621      	mov	r1, r4
 8003436:	024a      	lsls	r2, r1, #9
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343e:	2200      	movs	r2, #0
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
 8003442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003448:	f7fc ff3a 	bl	80002c0 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003454:	e058      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003456:	4b38      	ldr	r3, [pc, #224]	; (8003538 <HAL_RCC_GetSysClockFreq+0x200>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	2200      	movs	r2, #0
 800345e:	4618      	mov	r0, r3
 8003460:	4611      	mov	r1, r2
 8003462:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003466:	623b      	str	r3, [r7, #32]
 8003468:	2300      	movs	r3, #0
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
 800346c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003470:	4642      	mov	r2, r8
 8003472:	464b      	mov	r3, r9
 8003474:	f04f 0000 	mov.w	r0, #0
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	0159      	lsls	r1, r3, #5
 800347e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003482:	0150      	lsls	r0, r2, #5
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4641      	mov	r1, r8
 800348a:	ebb2 0a01 	subs.w	sl, r2, r1
 800348e:	4649      	mov	r1, r9
 8003490:	eb63 0b01 	sbc.w	fp, r3, r1
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034a8:	ebb2 040a 	subs.w	r4, r2, sl
 80034ac:	eb63 050b 	sbc.w	r5, r3, fp
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	00eb      	lsls	r3, r5, #3
 80034ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034be:	00e2      	lsls	r2, r4, #3
 80034c0:	4614      	mov	r4, r2
 80034c2:	461d      	mov	r5, r3
 80034c4:	4643      	mov	r3, r8
 80034c6:	18e3      	adds	r3, r4, r3
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	464b      	mov	r3, r9
 80034cc:	eb45 0303 	adc.w	r3, r5, r3
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034de:	4629      	mov	r1, r5
 80034e0:	028b      	lsls	r3, r1, #10
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e8:	4621      	mov	r1, r4
 80034ea:	028a      	lsls	r2, r1, #10
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f2:	2200      	movs	r2, #0
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	61fa      	str	r2, [r7, #28]
 80034f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034fc:	f7fc fee0 	bl	80002c0 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_GetSysClockFreq+0x200>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	3301      	adds	r3, #1
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003518:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800351a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003522:	e002      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetSysClockFreq+0x204>)
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800352c:	4618      	mov	r0, r3
 800352e:	3750      	adds	r7, #80	; 0x50
 8003530:	46bd      	mov	sp, r7
 8003532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	00f42400 	.word	0x00f42400
 8003540:	007a1200 	.word	0x007a1200

08003544 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_RCC_GetHCLKFreq+0x14>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000024 	.word	0x20000024

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003560:	f7ff fff0 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	0a9b      	lsrs	r3, r3, #10
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800
 8003580:	08007a44 	.word	0x08007a44

08003584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003588:	f7ff ffdc 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0b5b      	lsrs	r3, r3, #13
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	08007a44 	.word	0x08007a44

080035ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d012      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035d4:	4b69      	ldr	r3, [pc, #420]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a68      	ldr	r2, [pc, #416]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	4b66      	ldr	r3, [pc, #408]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	4964      	ldr	r1, [pc, #400]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d017      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003606:	4b5d      	ldr	r3, [pc, #372]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800360c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	4959      	ldr	r1, [pc, #356]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003624:	d101      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003632:	2301      	movs	r3, #1
 8003634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d017      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003642:	4b4e      	ldr	r3, [pc, #312]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003648:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	494a      	ldr	r1, [pc, #296]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003660:	d101      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003662:	2301      	movs	r3, #1
 8003664:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800366e:	2301      	movs	r3, #1
 8003670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 808b 	beq.w	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	4b3a      	ldr	r3, [pc, #232]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a39      	ldr	r2, [pc, #228]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
 800369c:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036a8:	4b35      	ldr	r3, [pc, #212]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a34      	ldr	r2, [pc, #208]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b4:	f7fe faa8 	bl	8001c08 <HAL_GetTick>
 80036b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fe faa4 	bl	8001c08 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e357      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036ce:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036da:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d035      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d02e      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003700:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003702:	4b1e      	ldr	r3, [pc, #120]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800370e:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003718:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800371a:	4a18      	ldr	r2, [pc, #96]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003720:	4b16      	ldr	r3, [pc, #88]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d114      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe fa6c 	bl	8001c08 <HAL_GetTick>
 8003730:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	e00a      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fe fa68 	bl	8001c08 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e319      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374a:	4b0c      	ldr	r3, [pc, #48]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0ee      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003762:	d111      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003772:	400b      	ands	r3, r1
 8003774:	4901      	ldr	r1, [pc, #4]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
 800377a:	e00b      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800377c:	40023800 	.word	0x40023800
 8003780:	40007000 	.word	0x40007000
 8003784:	0ffffcff 	.word	0x0ffffcff
 8003788:	4baa      	ldr	r3, [pc, #680]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4aa9      	ldr	r2, [pc, #676]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003792:	6093      	str	r3, [r2, #8]
 8003794:	4ba7      	ldr	r3, [pc, #668]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003796:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	49a4      	ldr	r1, [pc, #656]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d010      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037b2:	4ba0      	ldr	r3, [pc, #640]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b8:	4a9e      	ldr	r2, [pc, #632]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037c2:	4b9c      	ldr	r3, [pc, #624]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	4999      	ldr	r1, [pc, #612]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037e0:	4b94      	ldr	r3, [pc, #592]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ee:	4991      	ldr	r1, [pc, #580]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003802:	4b8c      	ldr	r3, [pc, #560]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003810:	4988      	ldr	r1, [pc, #544]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003824:	4b83      	ldr	r3, [pc, #524]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003832:	4980      	ldr	r1, [pc, #512]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003846:	4b7b      	ldr	r3, [pc, #492]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4977      	ldr	r1, [pc, #476]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003868:	4b72      	ldr	r3, [pc, #456]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	496f      	ldr	r1, [pc, #444]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800388a:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f023 020c 	bic.w	r2, r3, #12
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003898:	4966      	ldr	r1, [pc, #408]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ac:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	495e      	ldr	r1, [pc, #376]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ce:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	4955      	ldr	r1, [pc, #340]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f0:	4b50      	ldr	r3, [pc, #320]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	494d      	ldr	r1, [pc, #308]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003912:	4b48      	ldr	r3, [pc, #288]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	4944      	ldr	r1, [pc, #272]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003934:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	493c      	ldr	r1, [pc, #240]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003956:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003964:	4933      	ldr	r1, [pc, #204]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003978:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003986:	492b      	ldr	r1, [pc, #172]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d011      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a8:	4922      	ldr	r1, [pc, #136]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b8:	d101      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039da:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e8:	4912      	ldr	r1, [pc, #72]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a0c:	4909      	ldr	r1, [pc, #36]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d006      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80d9 	beq.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a28:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a01      	ldr	r2, [pc, #4]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a32:	e001      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a34:	40023800 	.word	0x40023800
 8003a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3a:	f7fe f8e5 	bl	8001c08 <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a42:	f7fe f8e1 	bl	8001c08 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e194      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a54:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d021      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11d      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a74:	4b64      	ldr	r3, [pc, #400]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a82:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	0e1b      	lsrs	r3, r3, #24
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	019a      	lsls	r2, r3, #6
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	071b      	lsls	r3, r3, #28
 8003aa8:	4957      	ldr	r1, [pc, #348]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d004      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d02e      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ada:	d129      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aea:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	0f1b      	lsrs	r3, r3, #28
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	019a      	lsls	r2, r3, #6
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	071b      	lsls	r3, r3, #28
 8003b10:	493d      	ldr	r1, [pc, #244]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	f023 021f 	bic.w	r2, r3, #31
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	3b01      	subs	r3, #1
 8003b28:	4937      	ldr	r1, [pc, #220]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01d      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b3c:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b42:	0e1b      	lsrs	r3, r3, #24
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b50:	0f1b      	lsrs	r3, r3, #28
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	019a      	lsls	r2, r3, #6
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	431a      	orrs	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	071b      	lsls	r3, r3, #28
 8003b70:	4925      	ldr	r1, [pc, #148]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d011      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	019a      	lsls	r2, r3, #6
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	061b      	lsls	r3, r3, #24
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	071b      	lsls	r3, r3, #28
 8003ba0:	4919      	ldr	r1, [pc, #100]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fe f828 	bl	8001c08 <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bbc:	f7fe f824 	bl	8001c08 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0d7      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 80cd 	bne.w	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bee:	f7fe f80b 	bl	8001c08 <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bf6:	f7fe f807 	bl	8001c08 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b64      	cmp	r3, #100	; 0x64
 8003c02:	d903      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0ba      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c0c:	4b5e      	ldr	r3, [pc, #376]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c18:	d0ed      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d02e      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d12a      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c42:	4b51      	ldr	r3, [pc, #324]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c50:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	0f1b      	lsrs	r3, r3, #28
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	019a      	lsls	r2, r3, #6
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	061b      	lsls	r3, r3, #24
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	071b      	lsls	r3, r3, #28
 8003c76:	4944      	ldr	r1, [pc, #272]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c7e:	4b42      	ldr	r3, [pc, #264]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	493d      	ldr	r1, [pc, #244]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d022      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cac:	d11d      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	0e1b      	lsrs	r3, r3, #24
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cbc:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	0f1b      	lsrs	r3, r3, #28
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	019a      	lsls	r2, r3, #6
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	061b      	lsls	r3, r3, #24
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	071b      	lsls	r3, r3, #28
 8003ce2:	4929      	ldr	r1, [pc, #164]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d028      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cf6:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	0e1b      	lsrs	r3, r3, #24
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d04:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	019a      	lsls	r2, r3, #6
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	071b      	lsls	r3, r3, #28
 8003d2a:	4917      	ldr	r1, [pc, #92]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	4911      	ldr	r1, [pc, #68]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d54:	f7fd ff58 	bl	8001c08 <HAL_GetTick>
 8003d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d5c:	f7fd ff54 	bl	8001c08 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e007      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7a:	d1ef      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800

08003d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e049      	b.n	8003e32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd fcee 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f001 f80e 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d001      	beq.n	8003e54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e04c      	b.n	8003eee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <HAL_TIM_Base_Start+0xc0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d022      	beq.n	8003eac <HAL_TIM_Base_Start+0x70>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d01d      	beq.n	8003eac <HAL_TIM_Base_Start+0x70>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <HAL_TIM_Base_Start+0xc4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d018      	beq.n	8003eac <HAL_TIM_Base_Start+0x70>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a21      	ldr	r2, [pc, #132]	; (8003f04 <HAL_TIM_Base_Start+0xc8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <HAL_TIM_Base_Start+0x70>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <HAL_TIM_Base_Start+0xcc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00e      	beq.n	8003eac <HAL_TIM_Base_Start+0x70>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <HAL_TIM_Base_Start+0xd0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d009      	beq.n	8003eac <HAL_TIM_Base_Start+0x70>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <HAL_TIM_Base_Start+0xd4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_TIM_Base_Start+0x70>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <HAL_TIM_Base_Start+0xd8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d115      	bne.n	8003ed8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_TIM_Base_Start+0xdc>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d015      	beq.n	8003eea <HAL_TIM_Base_Start+0xae>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d011      	beq.n	8003eea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	e008      	b.n	8003eea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40010400 	.word	0x40010400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40001800 	.word	0x40001800
 8003f18:	00010007 	.word	0x00010007

08003f1c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6a1a      	ldr	r2, [r3, #32]
 8003f2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <HAL_TIM_Base_Stop+0x38>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	f240 4344 	movw	r3, #1092	; 0x444
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <HAL_TIM_Base_Stop+0x38>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e049      	b.n	8004010 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fd fcad 	bl	80018f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f000 ff1f 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_TIM_PWM_Start+0x24>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e03c      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d109      	bne.n	8004056 <HAL_TIM_PWM_Start+0x3e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e02f      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d109      	bne.n	8004070 <HAL_TIM_PWM_Start+0x58>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e022      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b0c      	cmp	r3, #12
 8004074:	d109      	bne.n	800408a <HAL_TIM_PWM_Start+0x72>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	bf14      	ite	ne
 8004082:	2301      	movne	r3, #1
 8004084:	2300      	moveq	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	e015      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b10      	cmp	r3, #16
 800408e:	d109      	bne.n	80040a4 <HAL_TIM_PWM_Start+0x8c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e008      	b.n	80040b6 <HAL_TIM_PWM_Start+0x9e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	bf14      	ite	ne
 80040b0:	2301      	movne	r3, #1
 80040b2:	2300      	moveq	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e092      	b.n	80041e4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_PWM_Start+0xb6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040cc:	e023      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d104      	bne.n	80040de <HAL_TIM_PWM_Start+0xc6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	e01b      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0xd6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ec:	e013      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start+0xe6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040fc:	e00b      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b10      	cmp	r3, #16
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0xf6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800410c:	e003      	b.n	8004116 <HAL_TIM_PWM_Start+0xfe>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f001 fbba 	bl	8005898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a30      	ldr	r2, [pc, #192]	; (80041ec <HAL_TIM_PWM_Start+0x1d4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_TIM_PWM_Start+0x120>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <HAL_TIM_PWM_Start+0x1d8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_TIM_PWM_Start+0x124>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_TIM_PWM_Start+0x126>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a25      	ldr	r2, [pc, #148]	; (80041ec <HAL_TIM_PWM_Start+0x1d4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x18a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d01d      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x18a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a22      	ldr	r2, [pc, #136]	; (80041f4 <HAL_TIM_PWM_Start+0x1dc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x18a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a20      	ldr	r2, [pc, #128]	; (80041f8 <HAL_TIM_PWM_Start+0x1e0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x18a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <HAL_TIM_PWM_Start+0x1e4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x18a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <HAL_TIM_PWM_Start+0x1d8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x18a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_TIM_PWM_Start+0x1e8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x18a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a19      	ldr	r2, [pc, #100]	; (8004204 <HAL_TIM_PWM_Start+0x1ec>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d115      	bne.n	80041ce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	4b17      	ldr	r3, [pc, #92]	; (8004208 <HAL_TIM_PWM_Start+0x1f0>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d015      	beq.n	80041e0 <HAL_TIM_PWM_Start+0x1c8>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ba:	d011      	beq.n	80041e0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041cc:	e008      	b.n	80041e0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e000      	b.n	80041e2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40010400 	.word	0x40010400
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40014000 	.word	0x40014000
 8004204:	40001800 	.word	0x40001800
 8004208:	00010007 	.word	0x00010007

0800420c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e049      	b.n	80042b2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f841 	bl	80042ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f000 fdce 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_IC_Start_IT+0x1e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	e023      	b.n	8004336 <HAL_TIM_IC_Start_IT+0x66>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_IC_Start_IT+0x2e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	e01b      	b.n	8004336 <HAL_TIM_IC_Start_IT+0x66>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d104      	bne.n	800430e <HAL_TIM_IC_Start_IT+0x3e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e013      	b.n	8004336 <HAL_TIM_IC_Start_IT+0x66>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b0c      	cmp	r3, #12
 8004312:	d104      	bne.n	800431e <HAL_TIM_IC_Start_IT+0x4e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800431a:	b2db      	uxtb	r3, r3
 800431c:	e00b      	b.n	8004336 <HAL_TIM_IC_Start_IT+0x66>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b10      	cmp	r3, #16
 8004322:	d104      	bne.n	800432e <HAL_TIM_IC_Start_IT+0x5e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800432a:	b2db      	uxtb	r3, r3
 800432c:	e003      	b.n	8004336 <HAL_TIM_IC_Start_IT+0x66>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004334:	b2db      	uxtb	r3, r3
 8004336:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d104      	bne.n	8004348 <HAL_TIM_IC_Start_IT+0x78>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e013      	b.n	8004370 <HAL_TIM_IC_Start_IT+0xa0>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d104      	bne.n	8004358 <HAL_TIM_IC_Start_IT+0x88>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e00b      	b.n	8004370 <HAL_TIM_IC_Start_IT+0xa0>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b08      	cmp	r3, #8
 800435c:	d104      	bne.n	8004368 <HAL_TIM_IC_Start_IT+0x98>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e003      	b.n	8004370 <HAL_TIM_IC_Start_IT+0xa0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800436e:	b2db      	uxtb	r3, r3
 8004370:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004372:	7bbb      	ldrb	r3, [r7, #14]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004378:	7b7b      	ldrb	r3, [r7, #13]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e0e2      	b.n	8004548 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d104      	bne.n	8004392 <HAL_TIM_IC_Start_IT+0xc2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004390:	e023      	b.n	80043da <HAL_TIM_IC_Start_IT+0x10a>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_IC_Start_IT+0xd2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a0:	e01b      	b.n	80043da <HAL_TIM_IC_Start_IT+0x10a>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_IC_Start_IT+0xe2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b0:	e013      	b.n	80043da <HAL_TIM_IC_Start_IT+0x10a>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_IC_Start_IT+0xf2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043c0:	e00b      	b.n	80043da <HAL_TIM_IC_Start_IT+0x10a>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_IC_Start_IT+0x102>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d0:	e003      	b.n	80043da <HAL_TIM_IC_Start_IT+0x10a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <HAL_TIM_IC_Start_IT+0x11a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e8:	e013      	b.n	8004412 <HAL_TIM_IC_Start_IT+0x142>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d104      	bne.n	80043fa <HAL_TIM_IC_Start_IT+0x12a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f8:	e00b      	b.n	8004412 <HAL_TIM_IC_Start_IT+0x142>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d104      	bne.n	800440a <HAL_TIM_IC_Start_IT+0x13a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004408:	e003      	b.n	8004412 <HAL_TIM_IC_Start_IT+0x142>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	d841      	bhi.n	800449c <HAL_TIM_IC_Start_IT+0x1cc>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <HAL_TIM_IC_Start_IT+0x150>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004455 	.word	0x08004455
 8004424:	0800449d 	.word	0x0800449d
 8004428:	0800449d 	.word	0x0800449d
 800442c:	0800449d 	.word	0x0800449d
 8004430:	08004467 	.word	0x08004467
 8004434:	0800449d 	.word	0x0800449d
 8004438:	0800449d 	.word	0x0800449d
 800443c:	0800449d 	.word	0x0800449d
 8004440:	08004479 	.word	0x08004479
 8004444:	0800449d 	.word	0x0800449d
 8004448:	0800449d 	.word	0x0800449d
 800444c:	0800449d 	.word	0x0800449d
 8004450:	0800448b 	.word	0x0800448b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0202 	orr.w	r2, r2, #2
 8004462:	60da      	str	r2, [r3, #12]
      break;
 8004464:	e01d      	b.n	80044a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0204 	orr.w	r2, r2, #4
 8004474:	60da      	str	r2, [r3, #12]
      break;
 8004476:	e014      	b.n	80044a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0208 	orr.w	r2, r2, #8
 8004486:	60da      	str	r2, [r3, #12]
      break;
 8004488:	e00b      	b.n	80044a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0210 	orr.w	r2, r2, #16
 8004498:	60da      	str	r2, [r3, #12]
      break;
 800449a:	e002      	b.n	80044a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      break;
 80044a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d14e      	bne.n	8004546 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	6839      	ldr	r1, [r7, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 f9f1 	bl	8005898 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a25      	ldr	r2, [pc, #148]	; (8004550 <HAL_TIM_IC_Start_IT+0x280>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d022      	beq.n	8004506 <HAL_TIM_IC_Start_IT+0x236>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d01d      	beq.n	8004506 <HAL_TIM_IC_Start_IT+0x236>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a21      	ldr	r2, [pc, #132]	; (8004554 <HAL_TIM_IC_Start_IT+0x284>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d018      	beq.n	8004506 <HAL_TIM_IC_Start_IT+0x236>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_TIM_IC_Start_IT+0x288>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_TIM_IC_Start_IT+0x236>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_TIM_IC_Start_IT+0x28c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_TIM_IC_Start_IT+0x236>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <HAL_TIM_IC_Start_IT+0x290>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_TIM_IC_Start_IT+0x236>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_TIM_IC_Start_IT+0x294>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIM_IC_Start_IT+0x236>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a19      	ldr	r2, [pc, #100]	; (8004568 <HAL_TIM_IC_Start_IT+0x298>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d115      	bne.n	8004532 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	4b17      	ldr	r3, [pc, #92]	; (800456c <HAL_TIM_IC_Start_IT+0x29c>)
 800450e:	4013      	ands	r3, r2
 8004510:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b06      	cmp	r3, #6
 8004516:	d015      	beq.n	8004544 <HAL_TIM_IC_Start_IT+0x274>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451e:	d011      	beq.n	8004544 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004530:	e008      	b.n	8004544 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e000      	b.n	8004546 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004544:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40010000 	.word	0x40010000
 8004554:	40000400 	.word	0x40000400
 8004558:	40000800 	.word	0x40000800
 800455c:	40000c00 	.word	0x40000c00
 8004560:	40010400 	.word	0x40010400
 8004564:	40014000 	.word	0x40014000
 8004568:	40001800 	.word	0x40001800
 800456c:	00010007 	.word	0x00010007

08004570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d122      	bne.n	80045cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b02      	cmp	r3, #2
 8004592:	d11b      	bne.n	80045cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0202 	mvn.w	r2, #2
 800459c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fc fdac 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fbf8 	bl	8004db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fbff 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d122      	bne.n	8004620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d11b      	bne.n	8004620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0204 	mvn.w	r2, #4
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fd82 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fbce 	bl	8004db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fbd5 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b08      	cmp	r3, #8
 800462c:	d122      	bne.n	8004674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b08      	cmp	r3, #8
 800463a:	d11b      	bne.n	8004674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0208 	mvn.w	r2, #8
 8004644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2204      	movs	r2, #4
 800464a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc fd58 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 8004660:	e005      	b.n	800466e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fba4 	bl	8004db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fbab 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b10      	cmp	r3, #16
 8004680:	d122      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b10      	cmp	r3, #16
 800468e:	d11b      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0210 	mvn.w	r2, #16
 8004698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2208      	movs	r2, #8
 800469e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fc fd2e 	bl	8001110 <HAL_TIM_IC_CaptureCallback>
 80046b4:	e005      	b.n	80046c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fb7a 	bl	8004db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fb81 	bl	8004dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d10e      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d107      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0201 	mvn.w	r2, #1
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fc fbde 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b80      	cmp	r3, #128	; 0x80
 8004700:	d10e      	bne.n	8004720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	2b80      	cmp	r3, #128	; 0x80
 800470e:	d107      	bne.n	8004720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f001 f97a 	bl	8005a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472e:	d10e      	bne.n	800474e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d107      	bne.n	800474e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f001 f96d 	bl	8005a28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d10e      	bne.n	800477a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b40      	cmp	r3, #64	; 0x40
 8004768:	d107      	bne.n	800477a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fb2f 	bl	8004dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b20      	cmp	r3, #32
 8004786:	d10e      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b20      	cmp	r3, #32
 8004794:	d107      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f06f 0220 	mvn.w	r2, #32
 800479e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f001 f92d 	bl	8005a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b086      	sub	sp, #24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e088      	b.n	80048de <HAL_TIM_IC_ConfigChannel+0x130>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d11b      	bne.n	8004812 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80047ea:	f000 fe91 	bl	8005510 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699a      	ldr	r2, [r3, #24]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 020c 	bic.w	r2, r2, #12
 80047fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6999      	ldr	r1, [r3, #24]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	619a      	str	r2, [r3, #24]
 8004810:	e060      	b.n	80048d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d11c      	bne.n	8004852 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004828:	f000 ff15 	bl	8005656 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800483a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6999      	ldr	r1, [r3, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	619a      	str	r2, [r3, #24]
 8004850:	e040      	b.n	80048d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d11b      	bne.n	8004890 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004868:	f000 ff62 	bl	8005730 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69da      	ldr	r2, [r3, #28]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 020c 	bic.w	r2, r2, #12
 800487a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69d9      	ldr	r1, [r3, #28]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	61da      	str	r2, [r3, #28]
 800488e:	e021      	b.n	80048d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b0c      	cmp	r3, #12
 8004894:	d11c      	bne.n	80048d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80048a6:	f000 ff7f 	bl	80057a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69d9      	ldr	r1, [r3, #28]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	021a      	lsls	r2, r3, #8
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	61da      	str	r2, [r3, #28]
 80048ce:	e001      	b.n	80048d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004902:	2302      	movs	r3, #2
 8004904:	e0ff      	b.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b14      	cmp	r3, #20
 8004912:	f200 80f0 	bhi.w	8004af6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004916:	a201      	add	r2, pc, #4	; (adr r2, 800491c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491c:	08004971 	.word	0x08004971
 8004920:	08004af7 	.word	0x08004af7
 8004924:	08004af7 	.word	0x08004af7
 8004928:	08004af7 	.word	0x08004af7
 800492c:	080049b1 	.word	0x080049b1
 8004930:	08004af7 	.word	0x08004af7
 8004934:	08004af7 	.word	0x08004af7
 8004938:	08004af7 	.word	0x08004af7
 800493c:	080049f3 	.word	0x080049f3
 8004940:	08004af7 	.word	0x08004af7
 8004944:	08004af7 	.word	0x08004af7
 8004948:	08004af7 	.word	0x08004af7
 800494c:	08004a33 	.word	0x08004a33
 8004950:	08004af7 	.word	0x08004af7
 8004954:	08004af7 	.word	0x08004af7
 8004958:	08004af7 	.word	0x08004af7
 800495c:	08004a75 	.word	0x08004a75
 8004960:	08004af7 	.word	0x08004af7
 8004964:	08004af7 	.word	0x08004af7
 8004968:	08004af7 	.word	0x08004af7
 800496c:	08004ab5 	.word	0x08004ab5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fad8 	bl	8004f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0208 	orr.w	r2, r2, #8
 800498a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0204 	bic.w	r2, r2, #4
 800499a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6999      	ldr	r1, [r3, #24]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	619a      	str	r2, [r3, #24]
      break;
 80049ae:	e0a5      	b.n	8004afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fb2a 	bl	8005010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6999      	ldr	r1, [r3, #24]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	021a      	lsls	r2, r3, #8
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	619a      	str	r2, [r3, #24]
      break;
 80049f0:	e084      	b.n	8004afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fb81 	bl	8005100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0208 	orr.w	r2, r2, #8
 8004a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0204 	bic.w	r2, r2, #4
 8004a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69d9      	ldr	r1, [r3, #28]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	61da      	str	r2, [r3, #28]
      break;
 8004a30:	e064      	b.n	8004afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fbd7 	bl	80051ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69d9      	ldr	r1, [r3, #28]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	021a      	lsls	r2, r3, #8
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	61da      	str	r2, [r3, #28]
      break;
 8004a72:	e043      	b.n	8004afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fc0e 	bl	800529c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0208 	orr.w	r2, r2, #8
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0204 	bic.w	r2, r2, #4
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ab2:	e023      	b.n	8004afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fc40 	bl	8005340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	021a      	lsls	r2, r3, #8
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004af4:	e002      	b.n	8004afc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
      break;
 8004afa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop

08004b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_ConfigClockSource+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0b4      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x186>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	4b56      	ldr	r3, [pc, #344]	; (8004ca0 <HAL_TIM_ConfigClockSource+0x190>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b64:	d03e      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6a:	f200 8087 	bhi.w	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_TIM_ConfigClockSource+0x172>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d87f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b70      	cmp	r3, #112	; 0x70
 8004b7e:	d01a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004b80:	2b70      	cmp	r3, #112	; 0x70
 8004b82:	d87b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b60      	cmp	r3, #96	; 0x60
 8004b86:	d050      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x11a>
 8004b88:	2b60      	cmp	r3, #96	; 0x60
 8004b8a:	d877      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b50      	cmp	r3, #80	; 0x50
 8004b8e:	d03c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xfa>
 8004b90:	2b50      	cmp	r3, #80	; 0x50
 8004b92:	d873      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d058      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x13a>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d86f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d064      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d86b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d060      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d867      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d05a      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	e062      	b.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc6:	f000 fe47 	bl	8005858 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
      break;
 8004be2:	e04f      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf4:	f000 fe30 	bl	8005858 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c06:	609a      	str	r2, [r3, #8]
      break;
 8004c08:	e03c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 fcee 	bl	80055f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2150      	movs	r1, #80	; 0x50
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fdfd 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8004c28:	e02c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 fd4a 	bl	80056d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2160      	movs	r1, #96	; 0x60
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fded 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8004c48:	e01c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 fcce 	bl	80055f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2140      	movs	r1, #64	; 0x40
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fddd 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8004c68:	e00c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 fdd4 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8004c7a:	e003      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	fffeff88 	.word	0xfffeff88

08004ca4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_TIM_SlaveConfigSynchro+0x18>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e031      	b.n	8004d20 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fb8a 	bl	80053e8 <TIM_SlaveTimer_SetConfig>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e018      	b.n	8004d20 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d0c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	d831      	bhi.n	8004da0 <HAL_TIM_ReadCapturedValue+0x78>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004da1 	.word	0x08004da1
 8004d4c:	08004da1 	.word	0x08004da1
 8004d50:	08004da1 	.word	0x08004da1
 8004d54:	08004d83 	.word	0x08004d83
 8004d58:	08004da1 	.word	0x08004da1
 8004d5c:	08004da1 	.word	0x08004da1
 8004d60:	08004da1 	.word	0x08004da1
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004da1 	.word	0x08004da1
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004da1 	.word	0x08004da1
 8004d74:	08004d97 	.word	0x08004d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	60fb      	str	r3, [r7, #12]

      break;
 8004d80:	e00f      	b.n	8004da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	60fb      	str	r3, [r7, #12]

      break;
 8004d8a:	e00a      	b.n	8004da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	60fb      	str	r3, [r7, #12]

      break;
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	60fb      	str	r3, [r7, #12]

      break;
 8004d9e:	e000      	b.n	8004da2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004da0:	bf00      	nop
  }

  return tmpreg;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a40      	ldr	r2, [pc, #256]	; (8004f00 <TIM_Base_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d013      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0a:	d00f      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3d      	ldr	r2, [pc, #244]	; (8004f04 <TIM_Base_SetConfig+0x118>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a3c      	ldr	r2, [pc, #240]	; (8004f08 <TIM_Base_SetConfig+0x11c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d007      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3b      	ldr	r2, [pc, #236]	; (8004f0c <TIM_Base_SetConfig+0x120>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <TIM_Base_SetConfig+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d108      	bne.n	8004e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2f      	ldr	r2, [pc, #188]	; (8004f00 <TIM_Base_SetConfig+0x114>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4c:	d027      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <TIM_Base_SetConfig+0x118>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d023      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	; (8004f08 <TIM_Base_SetConfig+0x11c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01f      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <TIM_Base_SetConfig+0x120>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a29      	ldr	r2, [pc, #164]	; (8004f10 <TIM_Base_SetConfig+0x124>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d017      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a28      	ldr	r2, [pc, #160]	; (8004f14 <TIM_Base_SetConfig+0x128>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <TIM_Base_SetConfig+0x12c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00f      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <TIM_Base_SetConfig+0x130>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <TIM_Base_SetConfig+0x134>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <TIM_Base_SetConfig+0x138>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <TIM_Base_SetConfig+0x13c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <TIM_Base_SetConfig+0x114>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0xf8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a0c      	ldr	r2, [pc, #48]	; (8004f10 <TIM_Base_SetConfig+0x124>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40014400 	.word	0x40014400
 8004f1c:	40014800 	.word	0x40014800
 8004f20:	40001800 	.word	0x40001800
 8004f24:	40001c00 	.word	0x40001c00
 8004f28:	40002000 	.word	0x40002000

08004f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <TIM_OC1_SetConfig+0xd8>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0302 	bic.w	r3, r3, #2
 8004f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a21      	ldr	r2, [pc, #132]	; (8005008 <TIM_OC1_SetConfig+0xdc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_OC1_SetConfig+0x64>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a20      	ldr	r2, [pc, #128]	; (800500c <TIM_OC1_SetConfig+0xe0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10c      	bne.n	8004faa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0308 	bic.w	r3, r3, #8
 8004f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a16      	ldr	r2, [pc, #88]	; (8005008 <TIM_OC1_SetConfig+0xdc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_OC1_SetConfig+0x8e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a15      	ldr	r2, [pc, #84]	; (800500c <TIM_OC1_SetConfig+0xe0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d111      	bne.n	8004fde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	621a      	str	r2, [r3, #32]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	fffeff8f 	.word	0xfffeff8f
 8005008:	40010000 	.word	0x40010000
 800500c:	40010400 	.word	0x40010400

08005010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0210 	bic.w	r2, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <TIM_OC2_SetConfig+0xe4>)
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0320 	bic.w	r3, r3, #32
 800505a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a23      	ldr	r2, [pc, #140]	; (80050f8 <TIM_OC2_SetConfig+0xe8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_OC2_SetConfig+0x68>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a22      	ldr	r2, [pc, #136]	; (80050fc <TIM_OC2_SetConfig+0xec>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d10d      	bne.n	8005094 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005092:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <TIM_OC2_SetConfig+0xe8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_OC2_SetConfig+0x94>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <TIM_OC2_SetConfig+0xec>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d113      	bne.n	80050cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	feff8fff 	.word	0xfeff8fff
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400

08005100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4b2d      	ldr	r3, [pc, #180]	; (80051e0 <TIM_OC3_SetConfig+0xe0>)
 800512c:	4013      	ands	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0303 	bic.w	r3, r3, #3
 8005136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <TIM_OC3_SetConfig+0xe4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_OC3_SetConfig+0x66>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a21      	ldr	r2, [pc, #132]	; (80051e8 <TIM_OC3_SetConfig+0xe8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10d      	bne.n	8005182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800516c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <TIM_OC3_SetConfig+0xe4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d003      	beq.n	8005192 <TIM_OC3_SetConfig+0x92>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <TIM_OC3_SetConfig+0xe8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d113      	bne.n	80051ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	fffeff8f 	.word	0xfffeff8f
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40010400 	.word	0x40010400

080051ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <TIM_OC4_SetConfig+0xa4>)
 8005218:	4013      	ands	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	031b      	lsls	r3, r3, #12
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a13      	ldr	r2, [pc, #76]	; (8005294 <TIM_OC4_SetConfig+0xa8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC4_SetConfig+0x68>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a12      	ldr	r2, [pc, #72]	; (8005298 <TIM_OC4_SetConfig+0xac>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d109      	bne.n	8005268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	019b      	lsls	r3, r3, #6
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	feff8fff 	.word	0xfeff8fff
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400

0800529c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <TIM_OC5_SetConfig+0x98>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a12      	ldr	r2, [pc, #72]	; (8005338 <TIM_OC5_SetConfig+0x9c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_OC5_SetConfig+0x5e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a11      	ldr	r2, [pc, #68]	; (800533c <TIM_OC5_SetConfig+0xa0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d109      	bne.n	800530e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005300:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	621a      	str	r2, [r3, #32]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	fffeff8f 	.word	0xfffeff8f
 8005338:	40010000 	.word	0x40010000
 800533c:	40010400 	.word	0x40010400

08005340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4b1c      	ldr	r3, [pc, #112]	; (80053dc <TIM_OC6_SetConfig+0x9c>)
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	051b      	lsls	r3, r3, #20
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a13      	ldr	r2, [pc, #76]	; (80053e0 <TIM_OC6_SetConfig+0xa0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC6_SetConfig+0x60>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a12      	ldr	r2, [pc, #72]	; (80053e4 <TIM_OC6_SetConfig+0xa4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d109      	bne.n	80053b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	029b      	lsls	r3, r3, #10
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	feff8fff 	.word	0xfeff8fff
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40010400 	.word	0x40010400

080053e8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005404:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4b3e      	ldr	r3, [pc, #248]	; (800550c <TIM_SlaveTimer_SetConfig+0x124>)
 8005414:	4013      	ands	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b70      	cmp	r3, #112	; 0x70
 8005430:	d01a      	beq.n	8005468 <TIM_SlaveTimer_SetConfig+0x80>
 8005432:	2b70      	cmp	r3, #112	; 0x70
 8005434:	d860      	bhi.n	80054f8 <TIM_SlaveTimer_SetConfig+0x110>
 8005436:	2b60      	cmp	r3, #96	; 0x60
 8005438:	d054      	beq.n	80054e4 <TIM_SlaveTimer_SetConfig+0xfc>
 800543a:	2b60      	cmp	r3, #96	; 0x60
 800543c:	d85c      	bhi.n	80054f8 <TIM_SlaveTimer_SetConfig+0x110>
 800543e:	2b50      	cmp	r3, #80	; 0x50
 8005440:	d046      	beq.n	80054d0 <TIM_SlaveTimer_SetConfig+0xe8>
 8005442:	2b50      	cmp	r3, #80	; 0x50
 8005444:	d858      	bhi.n	80054f8 <TIM_SlaveTimer_SetConfig+0x110>
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d019      	beq.n	800547e <TIM_SlaveTimer_SetConfig+0x96>
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d854      	bhi.n	80054f8 <TIM_SlaveTimer_SetConfig+0x110>
 800544e:	2b30      	cmp	r3, #48	; 0x30
 8005450:	d055      	beq.n	80054fe <TIM_SlaveTimer_SetConfig+0x116>
 8005452:	2b30      	cmp	r3, #48	; 0x30
 8005454:	d850      	bhi.n	80054f8 <TIM_SlaveTimer_SetConfig+0x110>
 8005456:	2b20      	cmp	r3, #32
 8005458:	d051      	beq.n	80054fe <TIM_SlaveTimer_SetConfig+0x116>
 800545a:	2b20      	cmp	r3, #32
 800545c:	d84c      	bhi.n	80054f8 <TIM_SlaveTimer_SetConfig+0x110>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04d      	beq.n	80054fe <TIM_SlaveTimer_SetConfig+0x116>
 8005462:	2b10      	cmp	r3, #16
 8005464:	d04b      	beq.n	80054fe <TIM_SlaveTimer_SetConfig+0x116>
 8005466:	e047      	b.n	80054f8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005478:	f000 f9ee 	bl	8005858 <TIM_ETR_SetConfig>
      break;
 800547c:	e040      	b.n	8005500 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b05      	cmp	r3, #5
 8005484:	d101      	bne.n	800548a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e03b      	b.n	8005502 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	621a      	str	r2, [r3, #32]
      break;
 80054ce:	e017      	b.n	8005500 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054dc:	461a      	mov	r2, r3
 80054de:	f000 f88b 	bl	80055f8 <TIM_TI1_ConfigInputStage>
      break;
 80054e2:	e00d      	b.n	8005500 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f0:	461a      	mov	r2, r3
 80054f2:	f000 f8ed 	bl	80056d0 <TIM_TI2_ConfigInputStage>
      break;
 80054f6:	e003      	b.n	8005500 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
      break;
 80054fc:	e000      	b.n	8005500 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80054fe:	bf00      	nop
  }

  return status;
 8005500:	7dfb      	ldrb	r3, [r7, #23]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	fffefff8 	.word	0xfffefff8

08005510 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4a28      	ldr	r2, [pc, #160]	; (80055dc <TIM_TI1_SetConfig+0xcc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01b      	beq.n	8005576 <TIM_TI1_SetConfig+0x66>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005544:	d017      	beq.n	8005576 <TIM_TI1_SetConfig+0x66>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <TIM_TI1_SetConfig+0xd0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <TIM_TI1_SetConfig+0x66>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a24      	ldr	r2, [pc, #144]	; (80055e4 <TIM_TI1_SetConfig+0xd4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00f      	beq.n	8005576 <TIM_TI1_SetConfig+0x66>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a23      	ldr	r2, [pc, #140]	; (80055e8 <TIM_TI1_SetConfig+0xd8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00b      	beq.n	8005576 <TIM_TI1_SetConfig+0x66>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4a22      	ldr	r2, [pc, #136]	; (80055ec <TIM_TI1_SetConfig+0xdc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d007      	beq.n	8005576 <TIM_TI1_SetConfig+0x66>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <TIM_TI1_SetConfig+0xe0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <TIM_TI1_SetConfig+0x66>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a20      	ldr	r2, [pc, #128]	; (80055f4 <TIM_TI1_SetConfig+0xe4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d101      	bne.n	800557a <TIM_TI1_SetConfig+0x6a>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <TIM_TI1_SetConfig+0x6c>
 800557a:	2300      	movs	r3, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e003      	b.n	800559a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f023 030a 	bic.w	r3, r3, #10
 80055b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 030a 	and.w	r3, r3, #10
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40010400 	.word	0x40010400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40001800 	.word	0x40001800

080055f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f023 0201 	bic.w	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f023 030a 	bic.w	r3, r3, #10
 8005634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005656:	b480      	push	{r7}
 8005658:	b087      	sub	sp, #28
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f023 0210 	bic.w	r2, r3, #16
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005682:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	031b      	lsls	r3, r3, #12
 800569a:	b29b      	uxth	r3, r3
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f023 0210 	bic.w	r2, r3, #16
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	031b      	lsls	r3, r3, #12
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800570c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	621a      	str	r2, [r3, #32]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 0303 	bic.w	r3, r3, #3
 800575c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800576c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	b2db      	uxtb	r3, r3
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005780:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	031b      	lsls	r3, r3, #12
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80057fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	031b      	lsls	r3, r3, #12
 8005800:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	f043 0307 	orr.w	r3, r3, #7
 8005844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	431a      	orrs	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	609a      	str	r2, [r3, #8]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	2201      	movs	r2, #1
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1a      	ldr	r2, [r3, #32]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	401a      	ands	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1a      	ldr	r2, [r3, #32]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	431a      	orrs	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e06d      	b.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a2f      	ldr	r2, [pc, #188]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d108      	bne.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005936:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005948:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a20      	ldr	r2, [pc, #128]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d022      	beq.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d01d      	beq.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d018      	beq.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d013      	beq.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1a      	ldr	r2, [pc, #104]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00e      	beq.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d009      	beq.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a15      	ldr	r2, [pc, #84]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d10c      	bne.n	80059c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40010400 	.word	0x40010400
 80059ec:	40000400 	.word	0x40000400
 80059f0:	40000800 	.word	0x40000800
 80059f4:	40000c00 	.word	0x40000c00
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40001800 	.word	0x40001800

08005a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e040      	b.n	8005ad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fb fff0 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2224      	movs	r2, #36	; 0x24
 8005a68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fb62 	bl	8006144 <UART_SetConfig>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e022      	b.n	8005ad0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fdba 	bl	800660c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fe41 	bl	8006750 <UART_CheckIdleState>
 8005ace:	4603      	mov	r3, r0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d132      	bne.n	8005b56 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_UART_Receive_IT+0x24>
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e02b      	b.n	8005b58 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d018      	beq.n	8005b46 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	613b      	str	r3, [r7, #16]
   return(result);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	623b      	str	r3, [r7, #32]
 8005b34:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	69f9      	ldr	r1, [r7, #28]
 8005b38:	6a3a      	ldr	r2, [r7, #32]
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fefd 	bl	800694c <UART_Start_Receive_IT>
 8005b52:	4603      	mov	r3, r0
 8005b54:	e000      	b.n	8005b58 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3728      	adds	r7, #40	; 0x28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b0ba      	sub	sp, #232	; 0xe8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b8e:	4013      	ands	r3, r2
 8005b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d115      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00f      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 8297 	beq.w	80060ec <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
      }
      return;
 8005bc6:	e291      	b.n	80060ec <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8117 	beq.w	8005e00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005bde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005be2:	4b85      	ldr	r3, [pc, #532]	; (8005df8 <HAL_UART_IRQHandler+0x298>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 810a 	beq.w	8005e00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d011      	beq.n	8005c1c <HAL_UART_IRQHandler+0xbc>
 8005bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c12:	f043 0201 	orr.w	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d011      	beq.n	8005c4c <HAL_UART_IRQHandler+0xec>
 8005c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c42:	f043 0204 	orr.w	r2, r3, #4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d011      	beq.n	8005c7c <HAL_UART_IRQHandler+0x11c>
 8005c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2204      	movs	r2, #4
 8005c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c72:	f043 0202 	orr.w	r2, r3, #2
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d017      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d105      	bne.n	8005ca0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cae:	f043 0208 	orr.w	r2, r3, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d012      	beq.n	8005cea <HAL_UART_IRQHandler+0x18a>
 8005cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00c      	beq.n	8005cea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce0:	f043 0220 	orr.w	r2, r3, #32
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 81fd 	beq.w	80060f0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00d      	beq.n	8005d1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d005      	beq.n	8005d42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d04f      	beq.n	8005de2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fec8 	bl	8006ad8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d141      	bne.n	8005dda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1d9      	bne.n	8005d56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d013      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dae:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <HAL_UART_IRQHandler+0x29c>)
 8005db0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fc f8d7 	bl	8001f6a <HAL_DMA_Abort_IT>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d017      	beq.n	8005df2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd0:	e00f      	b.n	8005df2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f9a0 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd8:	e00b      	b.n	8005df2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f99c 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de0:	e007      	b.n	8005df2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f998 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005df0:	e17e      	b.n	80060f0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df2:	bf00      	nop
    return;
 8005df4:	e17c      	b.n	80060f0 <HAL_UART_IRQHandler+0x590>
 8005df6:	bf00      	nop
 8005df8:	04000120 	.word	0x04000120
 8005dfc:	08006ba1 	.word	0x08006ba1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	f040 814c 	bne.w	80060a2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 8145 	beq.w	80060a2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 813e 	beq.w	80060a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	f040 80b6 	bne.w	8005faa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8150 	beq.w	80060f4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	f080 8148 	bcs.w	80060f4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e78:	f000 8086 	beq.w	8005f88 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005eaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1da      	bne.n	8005e7c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e1      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3308      	adds	r3, #8
 8005f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3308      	adds	r3, #8
 8005f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e3      	bne.n	8005f02 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f58:	f023 0310 	bic.w	r3, r3, #16
 8005f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e4      	bne.n	8005f48 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fb ff81 	bl	8001e8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f8c2 	bl	800612c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fa8:	e0a4      	b.n	80060f4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 8096 	beq.w	80060f8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8091 	beq.w	80060f8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8005ffa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e4      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3308      	adds	r3, #8
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	623b      	str	r3, [r7, #32]
   return(result);
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006030:	633a      	str	r2, [r7, #48]	; 0x30
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e3      	bne.n	800600c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	60fb      	str	r3, [r7, #12]
   return(result);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	69b9      	ldr	r1, [r7, #24]
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	617b      	str	r3, [r7, #20]
   return(result);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e4      	bne.n	8006058 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f846 	bl	800612c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060a0:	e02a      	b.n	80060f8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d008      	beq.n	80060cc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01c      	beq.n	80060fc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
    }
    return;
 80060ca:	e017      	b.n	80060fc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d012      	beq.n	80060fe <HAL_UART_IRQHandler+0x59e>
 80060d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fd71 	bl	8006bcc <UART_EndTransmit_IT>
    return;
 80060ea:	e008      	b.n	80060fe <HAL_UART_IRQHandler+0x59e>
      return;
 80060ec:	bf00      	nop
 80060ee:	e006      	b.n	80060fe <HAL_UART_IRQHandler+0x59e>
    return;
 80060f0:	bf00      	nop
 80060f2:	e004      	b.n	80060fe <HAL_UART_IRQHandler+0x59e>
      return;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <HAL_UART_IRQHandler+0x59e>
      return;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <HAL_UART_IRQHandler+0x59e>
    return;
 80060fc:	bf00      	nop
  }

}
 80060fe:	37e8      	adds	r7, #232	; 0xe8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4ba6      	ldr	r3, [pc, #664]	; (8006408 <UART_SetConfig+0x2c4>)
 8006170:	4013      	ands	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6812      	ldr	r2, [r2, #0]
 8006176:	6979      	ldr	r1, [r7, #20]
 8006178:	430b      	orrs	r3, r1
 800617a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a94      	ldr	r2, [pc, #592]	; (800640c <UART_SetConfig+0x2c8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d120      	bne.n	8006202 <UART_SetConfig+0xbe>
 80061c0:	4b93      	ldr	r3, [pc, #588]	; (8006410 <UART_SetConfig+0x2cc>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d816      	bhi.n	80061fc <UART_SetConfig+0xb8>
 80061ce:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <UART_SetConfig+0x90>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061f1 	.word	0x080061f1
 80061dc:	080061eb 	.word	0x080061eb
 80061e0:	080061f7 	.word	0x080061f7
 80061e4:	2301      	movs	r3, #1
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e150      	b.n	800648c <UART_SetConfig+0x348>
 80061ea:	2302      	movs	r3, #2
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e14d      	b.n	800648c <UART_SetConfig+0x348>
 80061f0:	2304      	movs	r3, #4
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e14a      	b.n	800648c <UART_SetConfig+0x348>
 80061f6:	2308      	movs	r3, #8
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e147      	b.n	800648c <UART_SetConfig+0x348>
 80061fc:	2310      	movs	r3, #16
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e144      	b.n	800648c <UART_SetConfig+0x348>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a83      	ldr	r2, [pc, #524]	; (8006414 <UART_SetConfig+0x2d0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d132      	bne.n	8006272 <UART_SetConfig+0x12e>
 800620c:	4b80      	ldr	r3, [pc, #512]	; (8006410 <UART_SetConfig+0x2cc>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	2b0c      	cmp	r3, #12
 8006218:	d828      	bhi.n	800626c <UART_SetConfig+0x128>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <UART_SetConfig+0xdc>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006255 	.word	0x08006255
 8006224:	0800626d 	.word	0x0800626d
 8006228:	0800626d 	.word	0x0800626d
 800622c:	0800626d 	.word	0x0800626d
 8006230:	08006261 	.word	0x08006261
 8006234:	0800626d 	.word	0x0800626d
 8006238:	0800626d 	.word	0x0800626d
 800623c:	0800626d 	.word	0x0800626d
 8006240:	0800625b 	.word	0x0800625b
 8006244:	0800626d 	.word	0x0800626d
 8006248:	0800626d 	.word	0x0800626d
 800624c:	0800626d 	.word	0x0800626d
 8006250:	08006267 	.word	0x08006267
 8006254:	2300      	movs	r3, #0
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e118      	b.n	800648c <UART_SetConfig+0x348>
 800625a:	2302      	movs	r3, #2
 800625c:	77fb      	strb	r3, [r7, #31]
 800625e:	e115      	b.n	800648c <UART_SetConfig+0x348>
 8006260:	2304      	movs	r3, #4
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e112      	b.n	800648c <UART_SetConfig+0x348>
 8006266:	2308      	movs	r3, #8
 8006268:	77fb      	strb	r3, [r7, #31]
 800626a:	e10f      	b.n	800648c <UART_SetConfig+0x348>
 800626c:	2310      	movs	r3, #16
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e10c      	b.n	800648c <UART_SetConfig+0x348>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a68      	ldr	r2, [pc, #416]	; (8006418 <UART_SetConfig+0x2d4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d120      	bne.n	80062be <UART_SetConfig+0x17a>
 800627c:	4b64      	ldr	r3, [pc, #400]	; (8006410 <UART_SetConfig+0x2cc>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006286:	2b30      	cmp	r3, #48	; 0x30
 8006288:	d013      	beq.n	80062b2 <UART_SetConfig+0x16e>
 800628a:	2b30      	cmp	r3, #48	; 0x30
 800628c:	d814      	bhi.n	80062b8 <UART_SetConfig+0x174>
 800628e:	2b20      	cmp	r3, #32
 8006290:	d009      	beq.n	80062a6 <UART_SetConfig+0x162>
 8006292:	2b20      	cmp	r3, #32
 8006294:	d810      	bhi.n	80062b8 <UART_SetConfig+0x174>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <UART_SetConfig+0x15c>
 800629a:	2b10      	cmp	r3, #16
 800629c:	d006      	beq.n	80062ac <UART_SetConfig+0x168>
 800629e:	e00b      	b.n	80062b8 <UART_SetConfig+0x174>
 80062a0:	2300      	movs	r3, #0
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e0f2      	b.n	800648c <UART_SetConfig+0x348>
 80062a6:	2302      	movs	r3, #2
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e0ef      	b.n	800648c <UART_SetConfig+0x348>
 80062ac:	2304      	movs	r3, #4
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e0ec      	b.n	800648c <UART_SetConfig+0x348>
 80062b2:	2308      	movs	r3, #8
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e0e9      	b.n	800648c <UART_SetConfig+0x348>
 80062b8:	2310      	movs	r3, #16
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e0e6      	b.n	800648c <UART_SetConfig+0x348>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a56      	ldr	r2, [pc, #344]	; (800641c <UART_SetConfig+0x2d8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d120      	bne.n	800630a <UART_SetConfig+0x1c6>
 80062c8:	4b51      	ldr	r3, [pc, #324]	; (8006410 <UART_SetConfig+0x2cc>)
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062d2:	2bc0      	cmp	r3, #192	; 0xc0
 80062d4:	d013      	beq.n	80062fe <UART_SetConfig+0x1ba>
 80062d6:	2bc0      	cmp	r3, #192	; 0xc0
 80062d8:	d814      	bhi.n	8006304 <UART_SetConfig+0x1c0>
 80062da:	2b80      	cmp	r3, #128	; 0x80
 80062dc:	d009      	beq.n	80062f2 <UART_SetConfig+0x1ae>
 80062de:	2b80      	cmp	r3, #128	; 0x80
 80062e0:	d810      	bhi.n	8006304 <UART_SetConfig+0x1c0>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <UART_SetConfig+0x1a8>
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d006      	beq.n	80062f8 <UART_SetConfig+0x1b4>
 80062ea:	e00b      	b.n	8006304 <UART_SetConfig+0x1c0>
 80062ec:	2300      	movs	r3, #0
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e0cc      	b.n	800648c <UART_SetConfig+0x348>
 80062f2:	2302      	movs	r3, #2
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e0c9      	b.n	800648c <UART_SetConfig+0x348>
 80062f8:	2304      	movs	r3, #4
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e0c6      	b.n	800648c <UART_SetConfig+0x348>
 80062fe:	2308      	movs	r3, #8
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e0c3      	b.n	800648c <UART_SetConfig+0x348>
 8006304:	2310      	movs	r3, #16
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e0c0      	b.n	800648c <UART_SetConfig+0x348>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a44      	ldr	r2, [pc, #272]	; (8006420 <UART_SetConfig+0x2dc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d125      	bne.n	8006360 <UART_SetConfig+0x21c>
 8006314:	4b3e      	ldr	r3, [pc, #248]	; (8006410 <UART_SetConfig+0x2cc>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006322:	d017      	beq.n	8006354 <UART_SetConfig+0x210>
 8006324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006328:	d817      	bhi.n	800635a <UART_SetConfig+0x216>
 800632a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800632e:	d00b      	beq.n	8006348 <UART_SetConfig+0x204>
 8006330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006334:	d811      	bhi.n	800635a <UART_SetConfig+0x216>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <UART_SetConfig+0x1fe>
 800633a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633e:	d006      	beq.n	800634e <UART_SetConfig+0x20a>
 8006340:	e00b      	b.n	800635a <UART_SetConfig+0x216>
 8006342:	2300      	movs	r3, #0
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e0a1      	b.n	800648c <UART_SetConfig+0x348>
 8006348:	2302      	movs	r3, #2
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e09e      	b.n	800648c <UART_SetConfig+0x348>
 800634e:	2304      	movs	r3, #4
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e09b      	b.n	800648c <UART_SetConfig+0x348>
 8006354:	2308      	movs	r3, #8
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e098      	b.n	800648c <UART_SetConfig+0x348>
 800635a:	2310      	movs	r3, #16
 800635c:	77fb      	strb	r3, [r7, #31]
 800635e:	e095      	b.n	800648c <UART_SetConfig+0x348>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a2f      	ldr	r2, [pc, #188]	; (8006424 <UART_SetConfig+0x2e0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d125      	bne.n	80063b6 <UART_SetConfig+0x272>
 800636a:	4b29      	ldr	r3, [pc, #164]	; (8006410 <UART_SetConfig+0x2cc>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006370:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006378:	d017      	beq.n	80063aa <UART_SetConfig+0x266>
 800637a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800637e:	d817      	bhi.n	80063b0 <UART_SetConfig+0x26c>
 8006380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006384:	d00b      	beq.n	800639e <UART_SetConfig+0x25a>
 8006386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638a:	d811      	bhi.n	80063b0 <UART_SetConfig+0x26c>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <UART_SetConfig+0x254>
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006394:	d006      	beq.n	80063a4 <UART_SetConfig+0x260>
 8006396:	e00b      	b.n	80063b0 <UART_SetConfig+0x26c>
 8006398:	2301      	movs	r3, #1
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e076      	b.n	800648c <UART_SetConfig+0x348>
 800639e:	2302      	movs	r3, #2
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e073      	b.n	800648c <UART_SetConfig+0x348>
 80063a4:	2304      	movs	r3, #4
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e070      	b.n	800648c <UART_SetConfig+0x348>
 80063aa:	2308      	movs	r3, #8
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e06d      	b.n	800648c <UART_SetConfig+0x348>
 80063b0:	2310      	movs	r3, #16
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e06a      	b.n	800648c <UART_SetConfig+0x348>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1b      	ldr	r2, [pc, #108]	; (8006428 <UART_SetConfig+0x2e4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d138      	bne.n	8006432 <UART_SetConfig+0x2ee>
 80063c0:	4b13      	ldr	r3, [pc, #76]	; (8006410 <UART_SetConfig+0x2cc>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063ce:	d017      	beq.n	8006400 <UART_SetConfig+0x2bc>
 80063d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063d4:	d82a      	bhi.n	800642c <UART_SetConfig+0x2e8>
 80063d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063da:	d00b      	beq.n	80063f4 <UART_SetConfig+0x2b0>
 80063dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e0:	d824      	bhi.n	800642c <UART_SetConfig+0x2e8>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <UART_SetConfig+0x2aa>
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ea:	d006      	beq.n	80063fa <UART_SetConfig+0x2b6>
 80063ec:	e01e      	b.n	800642c <UART_SetConfig+0x2e8>
 80063ee:	2300      	movs	r3, #0
 80063f0:	77fb      	strb	r3, [r7, #31]
 80063f2:	e04b      	b.n	800648c <UART_SetConfig+0x348>
 80063f4:	2302      	movs	r3, #2
 80063f6:	77fb      	strb	r3, [r7, #31]
 80063f8:	e048      	b.n	800648c <UART_SetConfig+0x348>
 80063fa:	2304      	movs	r3, #4
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e045      	b.n	800648c <UART_SetConfig+0x348>
 8006400:	2308      	movs	r3, #8
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e042      	b.n	800648c <UART_SetConfig+0x348>
 8006406:	bf00      	nop
 8006408:	efff69f3 	.word	0xefff69f3
 800640c:	40011000 	.word	0x40011000
 8006410:	40023800 	.word	0x40023800
 8006414:	40004400 	.word	0x40004400
 8006418:	40004800 	.word	0x40004800
 800641c:	40004c00 	.word	0x40004c00
 8006420:	40005000 	.word	0x40005000
 8006424:	40011400 	.word	0x40011400
 8006428:	40007800 	.word	0x40007800
 800642c:	2310      	movs	r3, #16
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e02c      	b.n	800648c <UART_SetConfig+0x348>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a72      	ldr	r2, [pc, #456]	; (8006600 <UART_SetConfig+0x4bc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d125      	bne.n	8006488 <UART_SetConfig+0x344>
 800643c:	4b71      	ldr	r3, [pc, #452]	; (8006604 <UART_SetConfig+0x4c0>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006446:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800644a:	d017      	beq.n	800647c <UART_SetConfig+0x338>
 800644c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006450:	d817      	bhi.n	8006482 <UART_SetConfig+0x33e>
 8006452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006456:	d00b      	beq.n	8006470 <UART_SetConfig+0x32c>
 8006458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800645c:	d811      	bhi.n	8006482 <UART_SetConfig+0x33e>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <UART_SetConfig+0x326>
 8006462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006466:	d006      	beq.n	8006476 <UART_SetConfig+0x332>
 8006468:	e00b      	b.n	8006482 <UART_SetConfig+0x33e>
 800646a:	2300      	movs	r3, #0
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e00d      	b.n	800648c <UART_SetConfig+0x348>
 8006470:	2302      	movs	r3, #2
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e00a      	b.n	800648c <UART_SetConfig+0x348>
 8006476:	2304      	movs	r3, #4
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e007      	b.n	800648c <UART_SetConfig+0x348>
 800647c:	2308      	movs	r3, #8
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e004      	b.n	800648c <UART_SetConfig+0x348>
 8006482:	2310      	movs	r3, #16
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e001      	b.n	800648c <UART_SetConfig+0x348>
 8006488:	2310      	movs	r3, #16
 800648a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006494:	d15b      	bne.n	800654e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006496:	7ffb      	ldrb	r3, [r7, #31]
 8006498:	2b08      	cmp	r3, #8
 800649a:	d828      	bhi.n	80064ee <UART_SetConfig+0x3aa>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <UART_SetConfig+0x360>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080064d9 	.word	0x080064d9
 80064b0:	080064ef 	.word	0x080064ef
 80064b4:	080064df 	.word	0x080064df
 80064b8:	080064ef 	.word	0x080064ef
 80064bc:	080064ef 	.word	0x080064ef
 80064c0:	080064ef 	.word	0x080064ef
 80064c4:	080064e7 	.word	0x080064e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c8:	f7fd f848 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80064cc:	61b8      	str	r0, [r7, #24]
        break;
 80064ce:	e013      	b.n	80064f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d0:	f7fd f858 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 80064d4:	61b8      	str	r0, [r7, #24]
        break;
 80064d6:	e00f      	b.n	80064f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d8:	4b4b      	ldr	r3, [pc, #300]	; (8006608 <UART_SetConfig+0x4c4>)
 80064da:	61bb      	str	r3, [r7, #24]
        break;
 80064dc:	e00c      	b.n	80064f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064de:	f7fc ff2b 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80064e2:	61b8      	str	r0, [r7, #24]
        break;
 80064e4:	e008      	b.n	80064f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ea:	61bb      	str	r3, [r7, #24]
        break;
 80064ec:	e004      	b.n	80064f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	77bb      	strb	r3, [r7, #30]
        break;
 80064f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d074      	beq.n	80065e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	005a      	lsls	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	441a      	add	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006512:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	2b0f      	cmp	r3, #15
 8006518:	d916      	bls.n	8006548 <UART_SetConfig+0x404>
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006520:	d212      	bcs.n	8006548 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f023 030f 	bic.w	r3, r3, #15
 800652a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	b29b      	uxth	r3, r3
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	b29a      	uxth	r2, r3
 8006538:	89fb      	ldrh	r3, [r7, #14]
 800653a:	4313      	orrs	r3, r2
 800653c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	89fa      	ldrh	r2, [r7, #14]
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	e04f      	b.n	80065e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	77bb      	strb	r3, [r7, #30]
 800654c:	e04c      	b.n	80065e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800654e:	7ffb      	ldrb	r3, [r7, #31]
 8006550:	2b08      	cmp	r3, #8
 8006552:	d828      	bhi.n	80065a6 <UART_SetConfig+0x462>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <UART_SetConfig+0x418>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	08006581 	.word	0x08006581
 8006560:	08006589 	.word	0x08006589
 8006564:	08006591 	.word	0x08006591
 8006568:	080065a7 	.word	0x080065a7
 800656c:	08006597 	.word	0x08006597
 8006570:	080065a7 	.word	0x080065a7
 8006574:	080065a7 	.word	0x080065a7
 8006578:	080065a7 	.word	0x080065a7
 800657c:	0800659f 	.word	0x0800659f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006580:	f7fc ffec 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8006584:	61b8      	str	r0, [r7, #24]
        break;
 8006586:	e013      	b.n	80065b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006588:	f7fc fffc 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 800658c:	61b8      	str	r0, [r7, #24]
        break;
 800658e:	e00f      	b.n	80065b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006590:	4b1d      	ldr	r3, [pc, #116]	; (8006608 <UART_SetConfig+0x4c4>)
 8006592:	61bb      	str	r3, [r7, #24]
        break;
 8006594:	e00c      	b.n	80065b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006596:	f7fc fecf 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 800659a:	61b8      	str	r0, [r7, #24]
        break;
 800659c:	e008      	b.n	80065b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a2:	61bb      	str	r3, [r7, #24]
        break;
 80065a4:	e004      	b.n	80065b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	77bb      	strb	r3, [r7, #30]
        break;
 80065ae:	bf00      	nop
    }

    if (pclk != 0U)
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d018      	beq.n	80065e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	085a      	lsrs	r2, r3, #1
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	441a      	add	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b0f      	cmp	r3, #15
 80065ce:	d909      	bls.n	80065e4 <UART_SetConfig+0x4a0>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d6:	d205      	bcs.n	80065e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	e001      	b.n	80065e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80065f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40007c00 	.word	0x40007c00
 8006604:	40023800 	.word	0x40023800
 8006608:	00f42400 	.word	0x00f42400

0800660c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01a      	beq.n	8006722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800670a:	d10a      	bne.n	8006722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
  }
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af02      	add	r7, sp, #8
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006760:	f7fb fa52 	bl	8001c08 <HAL_GetTick>
 8006764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b08      	cmp	r3, #8
 8006772:	d10e      	bne.n	8006792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f81b 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e011      	b.n	80067b6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b09c      	sub	sp, #112	; 0x70
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	4613      	mov	r3, r2
 80067cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ce:	e0a7      	b.n	8006920 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	f000 80a3 	beq.w	8006920 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7fb fa15 	bl	8001c08 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80067ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d13f      	bne.n	8006870 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006804:	667b      	str	r3, [r7, #100]	; 0x64
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006810:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006814:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800681c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e6      	bne.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	663b      	str	r3, [r7, #96]	; 0x60
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006842:	64ba      	str	r2, [r7, #72]	; 0x48
 8006844:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e068      	b.n	8006942 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d050      	beq.n	8006920 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800688c:	d148      	bne.n	8006920 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006896:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b6:	637b      	str	r3, [r7, #52]	; 0x34
 80068b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e6      	bne.n	8006898 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	613b      	str	r3, [r7, #16]
   return(result);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3308      	adds	r3, #8
 80068e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068ea:	623a      	str	r2, [r7, #32]
 80068ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	69f9      	ldr	r1, [r7, #28]
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e5      	bne.n	80068ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e010      	b.n	8006942 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69da      	ldr	r2, [r3, #28]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	4013      	ands	r3, r2
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	429a      	cmp	r2, r3
 800692e:	bf0c      	ite	eq
 8006930:	2301      	moveq	r3, #1
 8006932:	2300      	movne	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	429a      	cmp	r2, r3
 800693c:	f43f af48 	beq.w	80067d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3770      	adds	r7, #112	; 0x70
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800694c:	b480      	push	{r7}
 800694e:	b097      	sub	sp, #92	; 0x5c
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	4613      	mov	r3, r2
 8006958:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	88fa      	ldrh	r2, [r7, #6]
 800696c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	d10e      	bne.n	800699e <UART_Start_Receive_IT+0x52>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d105      	bne.n	8006994 <UART_Start_Receive_IT+0x48>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800698e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006992:	e02d      	b.n	80069f0 <UART_Start_Receive_IT+0xa4>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	22ff      	movs	r2, #255	; 0xff
 8006998:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800699c:	e028      	b.n	80069f0 <UART_Start_Receive_IT+0xa4>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10d      	bne.n	80069c2 <UART_Start_Receive_IT+0x76>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d104      	bne.n	80069b8 <UART_Start_Receive_IT+0x6c>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	22ff      	movs	r2, #255	; 0xff
 80069b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069b6:	e01b      	b.n	80069f0 <UART_Start_Receive_IT+0xa4>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	227f      	movs	r2, #127	; 0x7f
 80069bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069c0:	e016      	b.n	80069f0 <UART_Start_Receive_IT+0xa4>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ca:	d10d      	bne.n	80069e8 <UART_Start_Receive_IT+0x9c>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <UART_Start_Receive_IT+0x92>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	227f      	movs	r2, #127	; 0x7f
 80069d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069dc:	e008      	b.n	80069f0 <UART_Start_Receive_IT+0xa4>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	223f      	movs	r2, #63	; 0x3f
 80069e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069e6:	e003      	b.n	80069f0 <UART_Start_Receive_IT+0xa4>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2222      	movs	r2, #34	; 0x22
 80069fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3308      	adds	r3, #8
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	657b      	str	r3, [r7, #84]	; 0x54
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a20:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e5      	bne.n	8006a00 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3c:	d107      	bne.n	8006a4e <UART_Start_Receive_IT+0x102>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a21      	ldr	r2, [pc, #132]	; (8006ad0 <UART_Start_Receive_IT+0x184>)
 8006a4a:	669a      	str	r2, [r3, #104]	; 0x68
 8006a4c:	e002      	b.n	8006a54 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a20      	ldr	r2, [pc, #128]	; (8006ad4 <UART_Start_Receive_IT+0x188>)
 8006a52:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d019      	beq.n	8006a90 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e6      	bne.n	8006a5c <UART_Start_Receive_IT+0x110>
 8006a8e:	e018      	b.n	8006ac2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f043 0320 	orr.w	r3, r3, #32
 8006aa4:	653b      	str	r3, [r7, #80]	; 0x50
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aae:	623b      	str	r3, [r7, #32]
 8006ab0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	69f9      	ldr	r1, [r7, #28]
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	375c      	adds	r7, #92	; 0x5c
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	08006d87 	.word	0x08006d87
 8006ad4:	08006c21 	.word	0x08006c21

08006ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b095      	sub	sp, #84	; 0x54
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006af4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afe:	643b      	str	r3, [r7, #64]	; 0x40
 8006b00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e6      	bne.n	8006ae0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3308      	adds	r3, #8
 8006b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d118      	bne.n	8006b80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f023 0310 	bic.w	r3, r3, #16
 8006b62:	647b      	str	r3, [r7, #68]	; 0x44
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e6      	bne.n	8006b4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b94:	bf00      	nop
 8006b96:	3754      	adds	r7, #84	; 0x54
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff faaa 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be8:	61fb      	str	r3, [r7, #28]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6979      	ldr	r1, [r7, #20]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e6      	bne.n	8006bd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff fa76 	bl	8006104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c18:	bf00      	nop
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b096      	sub	sp, #88	; 0x58
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c38:	2b22      	cmp	r3, #34	; 0x22
 8006c3a:	f040 8098 	bne.w	8006d6e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c48:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c4c:	b2d9      	uxtb	r1, r3
 8006c4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c58:	400a      	ands	r2, r1
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d17b      	bne.n	8006d7e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e6      	bne.n	8006c86 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	f023 0301 	bic.w	r3, r3, #1
 8006cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cd8:	633a      	str	r2, [r7, #48]	; 0x30
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e5      	bne.n	8006cb8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d12e      	bne.n	8006d66 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0310 	bic.w	r3, r3, #16
 8006d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	69b9      	ldr	r1, [r7, #24]
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e6      	bne.n	8006d0e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d103      	bne.n	8006d56 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2210      	movs	r2, #16
 8006d54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff f9e4 	bl	800612c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d64:	e00b      	b.n	8006d7e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fa f8ac 	bl	8000ec4 <HAL_UART_RxCpltCallback>
}
 8006d6c:	e007      	b.n	8006d7e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0208 	orr.w	r2, r2, #8
 8006d7c:	619a      	str	r2, [r3, #24]
}
 8006d7e:	bf00      	nop
 8006d80:	3758      	adds	r7, #88	; 0x58
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b096      	sub	sp, #88	; 0x58
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d9e:	2b22      	cmp	r3, #34	; 0x22
 8006da0:	f040 8098 	bne.w	8006ed4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006db4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006db8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc8:	1c9a      	adds	r2, r3, #2
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d17b      	bne.n	8006ee4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e6      	bne.n	8006dec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3308      	adds	r3, #8
 8006e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f023 0301 	bic.w	r3, r3, #1
 8006e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e5      	bne.n	8006e1e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d12e      	bne.n	8006ecc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f023 0310 	bic.w	r3, r3, #16
 8006e88:	647b      	str	r3, [r7, #68]	; 0x44
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e6      	bne.n	8006e74 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d103      	bne.n	8006ebc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2210      	movs	r2, #16
 8006eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff f931 	bl	800612c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eca:	e00b      	b.n	8006ee4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7f9 fff9 	bl	8000ec4 <HAL_UART_RxCpltCallback>
}
 8006ed2:	e007      	b.n	8006ee4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0208 	orr.w	r2, r2, #8
 8006ee2:	619a      	str	r2, [r3, #24]
}
 8006ee4:	bf00      	nop
 8006ee6:	3758      	adds	r7, #88	; 0x58
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_strtol_l.constprop.0>:
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef2:	d001      	beq.n	8006ef8 <_strtol_l.constprop.0+0xc>
 8006ef4:	2b24      	cmp	r3, #36	; 0x24
 8006ef6:	d906      	bls.n	8006f06 <_strtol_l.constprop.0+0x1a>
 8006ef8:	f000 f8ac 	bl	8007054 <__errno>
 8006efc:	2316      	movs	r3, #22
 8006efe:	6003      	str	r3, [r0, #0]
 8006f00:	2000      	movs	r0, #0
 8006f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006fec <_strtol_l.constprop.0+0x100>
 8006f0a:	460d      	mov	r5, r1
 8006f0c:	462e      	mov	r6, r5
 8006f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f12:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006f16:	f017 0708 	ands.w	r7, r7, #8
 8006f1a:	d1f7      	bne.n	8006f0c <_strtol_l.constprop.0+0x20>
 8006f1c:	2c2d      	cmp	r4, #45	; 0x2d
 8006f1e:	d132      	bne.n	8006f86 <_strtol_l.constprop.0+0x9a>
 8006f20:	782c      	ldrb	r4, [r5, #0]
 8006f22:	2701      	movs	r7, #1
 8006f24:	1cb5      	adds	r5, r6, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d05b      	beq.n	8006fe2 <_strtol_l.constprop.0+0xf6>
 8006f2a:	2b10      	cmp	r3, #16
 8006f2c:	d109      	bne.n	8006f42 <_strtol_l.constprop.0+0x56>
 8006f2e:	2c30      	cmp	r4, #48	; 0x30
 8006f30:	d107      	bne.n	8006f42 <_strtol_l.constprop.0+0x56>
 8006f32:	782c      	ldrb	r4, [r5, #0]
 8006f34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006f38:	2c58      	cmp	r4, #88	; 0x58
 8006f3a:	d14d      	bne.n	8006fd8 <_strtol_l.constprop.0+0xec>
 8006f3c:	786c      	ldrb	r4, [r5, #1]
 8006f3e:	2310      	movs	r3, #16
 8006f40:	3502      	adds	r5, #2
 8006f42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006f46:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f4a:	f04f 0e00 	mov.w	lr, #0
 8006f4e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006f52:	4676      	mov	r6, lr
 8006f54:	fb03 8a19 	mls	sl, r3, r9, r8
 8006f58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006f5c:	f1bc 0f09 	cmp.w	ip, #9
 8006f60:	d816      	bhi.n	8006f90 <_strtol_l.constprop.0+0xa4>
 8006f62:	4664      	mov	r4, ip
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	dd24      	ble.n	8006fb2 <_strtol_l.constprop.0+0xc6>
 8006f68:	f1be 3fff 	cmp.w	lr, #4294967295
 8006f6c:	d008      	beq.n	8006f80 <_strtol_l.constprop.0+0x94>
 8006f6e:	45b1      	cmp	r9, r6
 8006f70:	d31c      	bcc.n	8006fac <_strtol_l.constprop.0+0xc0>
 8006f72:	d101      	bne.n	8006f78 <_strtol_l.constprop.0+0x8c>
 8006f74:	45a2      	cmp	sl, r4
 8006f76:	db19      	blt.n	8006fac <_strtol_l.constprop.0+0xc0>
 8006f78:	fb06 4603 	mla	r6, r6, r3, r4
 8006f7c:	f04f 0e01 	mov.w	lr, #1
 8006f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f84:	e7e8      	b.n	8006f58 <_strtol_l.constprop.0+0x6c>
 8006f86:	2c2b      	cmp	r4, #43	; 0x2b
 8006f88:	bf04      	itt	eq
 8006f8a:	782c      	ldrbeq	r4, [r5, #0]
 8006f8c:	1cb5      	addeq	r5, r6, #2
 8006f8e:	e7ca      	b.n	8006f26 <_strtol_l.constprop.0+0x3a>
 8006f90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006f94:	f1bc 0f19 	cmp.w	ip, #25
 8006f98:	d801      	bhi.n	8006f9e <_strtol_l.constprop.0+0xb2>
 8006f9a:	3c37      	subs	r4, #55	; 0x37
 8006f9c:	e7e2      	b.n	8006f64 <_strtol_l.constprop.0+0x78>
 8006f9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006fa2:	f1bc 0f19 	cmp.w	ip, #25
 8006fa6:	d804      	bhi.n	8006fb2 <_strtol_l.constprop.0+0xc6>
 8006fa8:	3c57      	subs	r4, #87	; 0x57
 8006faa:	e7db      	b.n	8006f64 <_strtol_l.constprop.0+0x78>
 8006fac:	f04f 3eff 	mov.w	lr, #4294967295
 8006fb0:	e7e6      	b.n	8006f80 <_strtol_l.constprop.0+0x94>
 8006fb2:	f1be 3fff 	cmp.w	lr, #4294967295
 8006fb6:	d105      	bne.n	8006fc4 <_strtol_l.constprop.0+0xd8>
 8006fb8:	2322      	movs	r3, #34	; 0x22
 8006fba:	6003      	str	r3, [r0, #0]
 8006fbc:	4646      	mov	r6, r8
 8006fbe:	b942      	cbnz	r2, 8006fd2 <_strtol_l.constprop.0+0xe6>
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	e79e      	b.n	8006f02 <_strtol_l.constprop.0+0x16>
 8006fc4:	b107      	cbz	r7, 8006fc8 <_strtol_l.constprop.0+0xdc>
 8006fc6:	4276      	negs	r6, r6
 8006fc8:	2a00      	cmp	r2, #0
 8006fca:	d0f9      	beq.n	8006fc0 <_strtol_l.constprop.0+0xd4>
 8006fcc:	f1be 0f00 	cmp.w	lr, #0
 8006fd0:	d000      	beq.n	8006fd4 <_strtol_l.constprop.0+0xe8>
 8006fd2:	1e69      	subs	r1, r5, #1
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	e7f3      	b.n	8006fc0 <_strtol_l.constprop.0+0xd4>
 8006fd8:	2430      	movs	r4, #48	; 0x30
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1b1      	bne.n	8006f42 <_strtol_l.constprop.0+0x56>
 8006fde:	2308      	movs	r3, #8
 8006fe0:	e7af      	b.n	8006f42 <_strtol_l.constprop.0+0x56>
 8006fe2:	2c30      	cmp	r4, #48	; 0x30
 8006fe4:	d0a5      	beq.n	8006f32 <_strtol_l.constprop.0+0x46>
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	e7ab      	b.n	8006f42 <_strtol_l.constprop.0+0x56>
 8006fea:	bf00      	nop
 8006fec:	08007a4d 	.word	0x08007a4d

08006ff0 <strtol>:
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	460a      	mov	r2, r1
 8006ff4:	4601      	mov	r1, r0
 8006ff6:	4802      	ldr	r0, [pc, #8]	; (8007000 <strtol+0x10>)
 8006ff8:	6800      	ldr	r0, [r0, #0]
 8006ffa:	f7ff bf77 	b.w	8006eec <_strtol_l.constprop.0>
 8006ffe:	bf00      	nop
 8007000:	2000007c 	.word	0x2000007c

08007004 <siprintf>:
 8007004:	b40e      	push	{r1, r2, r3}
 8007006:	b500      	push	{lr}
 8007008:	b09c      	sub	sp, #112	; 0x70
 800700a:	ab1d      	add	r3, sp, #116	; 0x74
 800700c:	9002      	str	r0, [sp, #8]
 800700e:	9006      	str	r0, [sp, #24]
 8007010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007014:	4809      	ldr	r0, [pc, #36]	; (800703c <siprintf+0x38>)
 8007016:	9107      	str	r1, [sp, #28]
 8007018:	9104      	str	r1, [sp, #16]
 800701a:	4909      	ldr	r1, [pc, #36]	; (8007040 <siprintf+0x3c>)
 800701c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007020:	9105      	str	r1, [sp, #20]
 8007022:	6800      	ldr	r0, [r0, #0]
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	a902      	add	r1, sp, #8
 8007028:	f000 f992 	bl	8007350 <_svfiprintf_r>
 800702c:	9b02      	ldr	r3, [sp, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	b01c      	add	sp, #112	; 0x70
 8007034:	f85d eb04 	ldr.w	lr, [sp], #4
 8007038:	b003      	add	sp, #12
 800703a:	4770      	bx	lr
 800703c:	2000007c 	.word	0x2000007c
 8007040:	ffff0208 	.word	0xffff0208

08007044 <memset>:
 8007044:	4402      	add	r2, r0
 8007046:	4603      	mov	r3, r0
 8007048:	4293      	cmp	r3, r2
 800704a:	d100      	bne.n	800704e <memset+0xa>
 800704c:	4770      	bx	lr
 800704e:	f803 1b01 	strb.w	r1, [r3], #1
 8007052:	e7f9      	b.n	8007048 <memset+0x4>

08007054 <__errno>:
 8007054:	4b01      	ldr	r3, [pc, #4]	; (800705c <__errno+0x8>)
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	2000007c 	.word	0x2000007c

08007060 <__libc_init_array>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	4d0d      	ldr	r5, [pc, #52]	; (8007098 <__libc_init_array+0x38>)
 8007064:	4c0d      	ldr	r4, [pc, #52]	; (800709c <__libc_init_array+0x3c>)
 8007066:	1b64      	subs	r4, r4, r5
 8007068:	10a4      	asrs	r4, r4, #2
 800706a:	2600      	movs	r6, #0
 800706c:	42a6      	cmp	r6, r4
 800706e:	d109      	bne.n	8007084 <__libc_init_array+0x24>
 8007070:	4d0b      	ldr	r5, [pc, #44]	; (80070a0 <__libc_init_array+0x40>)
 8007072:	4c0c      	ldr	r4, [pc, #48]	; (80070a4 <__libc_init_array+0x44>)
 8007074:	f000 fcbc 	bl	80079f0 <_init>
 8007078:	1b64      	subs	r4, r4, r5
 800707a:	10a4      	asrs	r4, r4, #2
 800707c:	2600      	movs	r6, #0
 800707e:	42a6      	cmp	r6, r4
 8007080:	d105      	bne.n	800708e <__libc_init_array+0x2e>
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	f855 3b04 	ldr.w	r3, [r5], #4
 8007088:	4798      	blx	r3
 800708a:	3601      	adds	r6, #1
 800708c:	e7ee      	b.n	800706c <__libc_init_array+0xc>
 800708e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007092:	4798      	blx	r3
 8007094:	3601      	adds	r6, #1
 8007096:	e7f2      	b.n	800707e <__libc_init_array+0x1e>
 8007098:	08007b88 	.word	0x08007b88
 800709c:	08007b88 	.word	0x08007b88
 80070a0:	08007b88 	.word	0x08007b88
 80070a4:	08007b8c 	.word	0x08007b8c

080070a8 <__retarget_lock_acquire_recursive>:
 80070a8:	4770      	bx	lr

080070aa <__retarget_lock_release_recursive>:
 80070aa:	4770      	bx	lr

080070ac <_free_r>:
 80070ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ae:	2900      	cmp	r1, #0
 80070b0:	d044      	beq.n	800713c <_free_r+0x90>
 80070b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070b6:	9001      	str	r0, [sp, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f1a1 0404 	sub.w	r4, r1, #4
 80070be:	bfb8      	it	lt
 80070c0:	18e4      	addlt	r4, r4, r3
 80070c2:	f000 f8df 	bl	8007284 <__malloc_lock>
 80070c6:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <_free_r+0x94>)
 80070c8:	9801      	ldr	r0, [sp, #4]
 80070ca:	6813      	ldr	r3, [r2, #0]
 80070cc:	b933      	cbnz	r3, 80070dc <_free_r+0x30>
 80070ce:	6063      	str	r3, [r4, #4]
 80070d0:	6014      	str	r4, [r2, #0]
 80070d2:	b003      	add	sp, #12
 80070d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070d8:	f000 b8da 	b.w	8007290 <__malloc_unlock>
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d908      	bls.n	80070f2 <_free_r+0x46>
 80070e0:	6825      	ldr	r5, [r4, #0]
 80070e2:	1961      	adds	r1, r4, r5
 80070e4:	428b      	cmp	r3, r1
 80070e6:	bf01      	itttt	eq
 80070e8:	6819      	ldreq	r1, [r3, #0]
 80070ea:	685b      	ldreq	r3, [r3, #4]
 80070ec:	1949      	addeq	r1, r1, r5
 80070ee:	6021      	streq	r1, [r4, #0]
 80070f0:	e7ed      	b.n	80070ce <_free_r+0x22>
 80070f2:	461a      	mov	r2, r3
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	b10b      	cbz	r3, 80070fc <_free_r+0x50>
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	d9fa      	bls.n	80070f2 <_free_r+0x46>
 80070fc:	6811      	ldr	r1, [r2, #0]
 80070fe:	1855      	adds	r5, r2, r1
 8007100:	42a5      	cmp	r5, r4
 8007102:	d10b      	bne.n	800711c <_free_r+0x70>
 8007104:	6824      	ldr	r4, [r4, #0]
 8007106:	4421      	add	r1, r4
 8007108:	1854      	adds	r4, r2, r1
 800710a:	42a3      	cmp	r3, r4
 800710c:	6011      	str	r1, [r2, #0]
 800710e:	d1e0      	bne.n	80070d2 <_free_r+0x26>
 8007110:	681c      	ldr	r4, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	6053      	str	r3, [r2, #4]
 8007116:	440c      	add	r4, r1
 8007118:	6014      	str	r4, [r2, #0]
 800711a:	e7da      	b.n	80070d2 <_free_r+0x26>
 800711c:	d902      	bls.n	8007124 <_free_r+0x78>
 800711e:	230c      	movs	r3, #12
 8007120:	6003      	str	r3, [r0, #0]
 8007122:	e7d6      	b.n	80070d2 <_free_r+0x26>
 8007124:	6825      	ldr	r5, [r4, #0]
 8007126:	1961      	adds	r1, r4, r5
 8007128:	428b      	cmp	r3, r1
 800712a:	bf04      	itt	eq
 800712c:	6819      	ldreq	r1, [r3, #0]
 800712e:	685b      	ldreq	r3, [r3, #4]
 8007130:	6063      	str	r3, [r4, #4]
 8007132:	bf04      	itt	eq
 8007134:	1949      	addeq	r1, r1, r5
 8007136:	6021      	streq	r1, [r4, #0]
 8007138:	6054      	str	r4, [r2, #4]
 800713a:	e7ca      	b.n	80070d2 <_free_r+0x26>
 800713c:	b003      	add	sp, #12
 800713e:	bd30      	pop	{r4, r5, pc}
 8007140:	20000478 	.word	0x20000478

08007144 <sbrk_aligned>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	4e0e      	ldr	r6, [pc, #56]	; (8007180 <sbrk_aligned+0x3c>)
 8007148:	460c      	mov	r4, r1
 800714a:	6831      	ldr	r1, [r6, #0]
 800714c:	4605      	mov	r5, r0
 800714e:	b911      	cbnz	r1, 8007156 <sbrk_aligned+0x12>
 8007150:	f000 fba6 	bl	80078a0 <_sbrk_r>
 8007154:	6030      	str	r0, [r6, #0]
 8007156:	4621      	mov	r1, r4
 8007158:	4628      	mov	r0, r5
 800715a:	f000 fba1 	bl	80078a0 <_sbrk_r>
 800715e:	1c43      	adds	r3, r0, #1
 8007160:	d00a      	beq.n	8007178 <sbrk_aligned+0x34>
 8007162:	1cc4      	adds	r4, r0, #3
 8007164:	f024 0403 	bic.w	r4, r4, #3
 8007168:	42a0      	cmp	r0, r4
 800716a:	d007      	beq.n	800717c <sbrk_aligned+0x38>
 800716c:	1a21      	subs	r1, r4, r0
 800716e:	4628      	mov	r0, r5
 8007170:	f000 fb96 	bl	80078a0 <_sbrk_r>
 8007174:	3001      	adds	r0, #1
 8007176:	d101      	bne.n	800717c <sbrk_aligned+0x38>
 8007178:	f04f 34ff 	mov.w	r4, #4294967295
 800717c:	4620      	mov	r0, r4
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	2000047c 	.word	0x2000047c

08007184 <_malloc_r>:
 8007184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007188:	1ccd      	adds	r5, r1, #3
 800718a:	f025 0503 	bic.w	r5, r5, #3
 800718e:	3508      	adds	r5, #8
 8007190:	2d0c      	cmp	r5, #12
 8007192:	bf38      	it	cc
 8007194:	250c      	movcc	r5, #12
 8007196:	2d00      	cmp	r5, #0
 8007198:	4607      	mov	r7, r0
 800719a:	db01      	blt.n	80071a0 <_malloc_r+0x1c>
 800719c:	42a9      	cmp	r1, r5
 800719e:	d905      	bls.n	80071ac <_malloc_r+0x28>
 80071a0:	230c      	movs	r3, #12
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	2600      	movs	r6, #0
 80071a6:	4630      	mov	r0, r6
 80071a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007280 <_malloc_r+0xfc>
 80071b0:	f000 f868 	bl	8007284 <__malloc_lock>
 80071b4:	f8d8 3000 	ldr.w	r3, [r8]
 80071b8:	461c      	mov	r4, r3
 80071ba:	bb5c      	cbnz	r4, 8007214 <_malloc_r+0x90>
 80071bc:	4629      	mov	r1, r5
 80071be:	4638      	mov	r0, r7
 80071c0:	f7ff ffc0 	bl	8007144 <sbrk_aligned>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	4604      	mov	r4, r0
 80071c8:	d155      	bne.n	8007276 <_malloc_r+0xf2>
 80071ca:	f8d8 4000 	ldr.w	r4, [r8]
 80071ce:	4626      	mov	r6, r4
 80071d0:	2e00      	cmp	r6, #0
 80071d2:	d145      	bne.n	8007260 <_malloc_r+0xdc>
 80071d4:	2c00      	cmp	r4, #0
 80071d6:	d048      	beq.n	800726a <_malloc_r+0xe6>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	4631      	mov	r1, r6
 80071dc:	4638      	mov	r0, r7
 80071de:	eb04 0903 	add.w	r9, r4, r3
 80071e2:	f000 fb5d 	bl	80078a0 <_sbrk_r>
 80071e6:	4581      	cmp	r9, r0
 80071e8:	d13f      	bne.n	800726a <_malloc_r+0xe6>
 80071ea:	6821      	ldr	r1, [r4, #0]
 80071ec:	1a6d      	subs	r5, r5, r1
 80071ee:	4629      	mov	r1, r5
 80071f0:	4638      	mov	r0, r7
 80071f2:	f7ff ffa7 	bl	8007144 <sbrk_aligned>
 80071f6:	3001      	adds	r0, #1
 80071f8:	d037      	beq.n	800726a <_malloc_r+0xe6>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	442b      	add	r3, r5
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	f8d8 3000 	ldr.w	r3, [r8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d038      	beq.n	800727a <_malloc_r+0xf6>
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	42a2      	cmp	r2, r4
 800720c:	d12b      	bne.n	8007266 <_malloc_r+0xe2>
 800720e:	2200      	movs	r2, #0
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	e00f      	b.n	8007234 <_malloc_r+0xb0>
 8007214:	6822      	ldr	r2, [r4, #0]
 8007216:	1b52      	subs	r2, r2, r5
 8007218:	d41f      	bmi.n	800725a <_malloc_r+0xd6>
 800721a:	2a0b      	cmp	r2, #11
 800721c:	d917      	bls.n	800724e <_malloc_r+0xca>
 800721e:	1961      	adds	r1, r4, r5
 8007220:	42a3      	cmp	r3, r4
 8007222:	6025      	str	r5, [r4, #0]
 8007224:	bf18      	it	ne
 8007226:	6059      	strne	r1, [r3, #4]
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	bf08      	it	eq
 800722c:	f8c8 1000 	streq.w	r1, [r8]
 8007230:	5162      	str	r2, [r4, r5]
 8007232:	604b      	str	r3, [r1, #4]
 8007234:	4638      	mov	r0, r7
 8007236:	f104 060b 	add.w	r6, r4, #11
 800723a:	f000 f829 	bl	8007290 <__malloc_unlock>
 800723e:	f026 0607 	bic.w	r6, r6, #7
 8007242:	1d23      	adds	r3, r4, #4
 8007244:	1af2      	subs	r2, r6, r3
 8007246:	d0ae      	beq.n	80071a6 <_malloc_r+0x22>
 8007248:	1b9b      	subs	r3, r3, r6
 800724a:	50a3      	str	r3, [r4, r2]
 800724c:	e7ab      	b.n	80071a6 <_malloc_r+0x22>
 800724e:	42a3      	cmp	r3, r4
 8007250:	6862      	ldr	r2, [r4, #4]
 8007252:	d1dd      	bne.n	8007210 <_malloc_r+0x8c>
 8007254:	f8c8 2000 	str.w	r2, [r8]
 8007258:	e7ec      	b.n	8007234 <_malloc_r+0xb0>
 800725a:	4623      	mov	r3, r4
 800725c:	6864      	ldr	r4, [r4, #4]
 800725e:	e7ac      	b.n	80071ba <_malloc_r+0x36>
 8007260:	4634      	mov	r4, r6
 8007262:	6876      	ldr	r6, [r6, #4]
 8007264:	e7b4      	b.n	80071d0 <_malloc_r+0x4c>
 8007266:	4613      	mov	r3, r2
 8007268:	e7cc      	b.n	8007204 <_malloc_r+0x80>
 800726a:	230c      	movs	r3, #12
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	4638      	mov	r0, r7
 8007270:	f000 f80e 	bl	8007290 <__malloc_unlock>
 8007274:	e797      	b.n	80071a6 <_malloc_r+0x22>
 8007276:	6025      	str	r5, [r4, #0]
 8007278:	e7dc      	b.n	8007234 <_malloc_r+0xb0>
 800727a:	605b      	str	r3, [r3, #4]
 800727c:	deff      	udf	#255	; 0xff
 800727e:	bf00      	nop
 8007280:	20000478 	.word	0x20000478

08007284 <__malloc_lock>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__malloc_lock+0x8>)
 8007286:	f7ff bf0f 	b.w	80070a8 <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	20000474 	.word	0x20000474

08007290 <__malloc_unlock>:
 8007290:	4801      	ldr	r0, [pc, #4]	; (8007298 <__malloc_unlock+0x8>)
 8007292:	f7ff bf0a 	b.w	80070aa <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	20000474 	.word	0x20000474

0800729c <__ssputs_r>:
 800729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	688e      	ldr	r6, [r1, #8]
 80072a2:	461f      	mov	r7, r3
 80072a4:	42be      	cmp	r6, r7
 80072a6:	680b      	ldr	r3, [r1, #0]
 80072a8:	4682      	mov	sl, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	4690      	mov	r8, r2
 80072ae:	d82c      	bhi.n	800730a <__ssputs_r+0x6e>
 80072b0:	898a      	ldrh	r2, [r1, #12]
 80072b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072b6:	d026      	beq.n	8007306 <__ssputs_r+0x6a>
 80072b8:	6965      	ldr	r5, [r4, #20]
 80072ba:	6909      	ldr	r1, [r1, #16]
 80072bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072c0:	eba3 0901 	sub.w	r9, r3, r1
 80072c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072c8:	1c7b      	adds	r3, r7, #1
 80072ca:	444b      	add	r3, r9
 80072cc:	106d      	asrs	r5, r5, #1
 80072ce:	429d      	cmp	r5, r3
 80072d0:	bf38      	it	cc
 80072d2:	461d      	movcc	r5, r3
 80072d4:	0553      	lsls	r3, r2, #21
 80072d6:	d527      	bpl.n	8007328 <__ssputs_r+0x8c>
 80072d8:	4629      	mov	r1, r5
 80072da:	f7ff ff53 	bl	8007184 <_malloc_r>
 80072de:	4606      	mov	r6, r0
 80072e0:	b360      	cbz	r0, 800733c <__ssputs_r+0xa0>
 80072e2:	6921      	ldr	r1, [r4, #16]
 80072e4:	464a      	mov	r2, r9
 80072e6:	f000 faeb 	bl	80078c0 <memcpy>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	6126      	str	r6, [r4, #16]
 80072f8:	6165      	str	r5, [r4, #20]
 80072fa:	444e      	add	r6, r9
 80072fc:	eba5 0509 	sub.w	r5, r5, r9
 8007300:	6026      	str	r6, [r4, #0]
 8007302:	60a5      	str	r5, [r4, #8]
 8007304:	463e      	mov	r6, r7
 8007306:	42be      	cmp	r6, r7
 8007308:	d900      	bls.n	800730c <__ssputs_r+0x70>
 800730a:	463e      	mov	r6, r7
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	4632      	mov	r2, r6
 8007310:	4641      	mov	r1, r8
 8007312:	f000 faab 	bl	800786c <memmove>
 8007316:	68a3      	ldr	r3, [r4, #8]
 8007318:	1b9b      	subs	r3, r3, r6
 800731a:	60a3      	str	r3, [r4, #8]
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	4433      	add	r3, r6
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	2000      	movs	r0, #0
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	462a      	mov	r2, r5
 800732a:	f000 fad7 	bl	80078dc <_realloc_r>
 800732e:	4606      	mov	r6, r0
 8007330:	2800      	cmp	r0, #0
 8007332:	d1e0      	bne.n	80072f6 <__ssputs_r+0x5a>
 8007334:	6921      	ldr	r1, [r4, #16]
 8007336:	4650      	mov	r0, sl
 8007338:	f7ff feb8 	bl	80070ac <_free_r>
 800733c:	230c      	movs	r3, #12
 800733e:	f8ca 3000 	str.w	r3, [sl]
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	e7e9      	b.n	8007324 <__ssputs_r+0x88>

08007350 <_svfiprintf_r>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	4698      	mov	r8, r3
 8007356:	898b      	ldrh	r3, [r1, #12]
 8007358:	061b      	lsls	r3, r3, #24
 800735a:	b09d      	sub	sp, #116	; 0x74
 800735c:	4607      	mov	r7, r0
 800735e:	460d      	mov	r5, r1
 8007360:	4614      	mov	r4, r2
 8007362:	d50e      	bpl.n	8007382 <_svfiprintf_r+0x32>
 8007364:	690b      	ldr	r3, [r1, #16]
 8007366:	b963      	cbnz	r3, 8007382 <_svfiprintf_r+0x32>
 8007368:	2140      	movs	r1, #64	; 0x40
 800736a:	f7ff ff0b 	bl	8007184 <_malloc_r>
 800736e:	6028      	str	r0, [r5, #0]
 8007370:	6128      	str	r0, [r5, #16]
 8007372:	b920      	cbnz	r0, 800737e <_svfiprintf_r+0x2e>
 8007374:	230c      	movs	r3, #12
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	e0d0      	b.n	8007520 <_svfiprintf_r+0x1d0>
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	616b      	str	r3, [r5, #20]
 8007382:	2300      	movs	r3, #0
 8007384:	9309      	str	r3, [sp, #36]	; 0x24
 8007386:	2320      	movs	r3, #32
 8007388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800738c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007390:	2330      	movs	r3, #48	; 0x30
 8007392:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007538 <_svfiprintf_r+0x1e8>
 8007396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800739a:	f04f 0901 	mov.w	r9, #1
 800739e:	4623      	mov	r3, r4
 80073a0:	469a      	mov	sl, r3
 80073a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073a6:	b10a      	cbz	r2, 80073ac <_svfiprintf_r+0x5c>
 80073a8:	2a25      	cmp	r2, #37	; 0x25
 80073aa:	d1f9      	bne.n	80073a0 <_svfiprintf_r+0x50>
 80073ac:	ebba 0b04 	subs.w	fp, sl, r4
 80073b0:	d00b      	beq.n	80073ca <_svfiprintf_r+0x7a>
 80073b2:	465b      	mov	r3, fp
 80073b4:	4622      	mov	r2, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	4638      	mov	r0, r7
 80073ba:	f7ff ff6f 	bl	800729c <__ssputs_r>
 80073be:	3001      	adds	r0, #1
 80073c0:	f000 80a9 	beq.w	8007516 <_svfiprintf_r+0x1c6>
 80073c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073c6:	445a      	add	r2, fp
 80073c8:	9209      	str	r2, [sp, #36]	; 0x24
 80073ca:	f89a 3000 	ldrb.w	r3, [sl]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80a1 	beq.w	8007516 <_svfiprintf_r+0x1c6>
 80073d4:	2300      	movs	r3, #0
 80073d6:	f04f 32ff 	mov.w	r2, #4294967295
 80073da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073de:	f10a 0a01 	add.w	sl, sl, #1
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	9307      	str	r3, [sp, #28]
 80073e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ea:	931a      	str	r3, [sp, #104]	; 0x68
 80073ec:	4654      	mov	r4, sl
 80073ee:	2205      	movs	r2, #5
 80073f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f4:	4850      	ldr	r0, [pc, #320]	; (8007538 <_svfiprintf_r+0x1e8>)
 80073f6:	f7f8 ff13 	bl	8000220 <memchr>
 80073fa:	9a04      	ldr	r2, [sp, #16]
 80073fc:	b9d8      	cbnz	r0, 8007436 <_svfiprintf_r+0xe6>
 80073fe:	06d0      	lsls	r0, r2, #27
 8007400:	bf44      	itt	mi
 8007402:	2320      	movmi	r3, #32
 8007404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007408:	0711      	lsls	r1, r2, #28
 800740a:	bf44      	itt	mi
 800740c:	232b      	movmi	r3, #43	; 0x2b
 800740e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007412:	f89a 3000 	ldrb.w	r3, [sl]
 8007416:	2b2a      	cmp	r3, #42	; 0x2a
 8007418:	d015      	beq.n	8007446 <_svfiprintf_r+0xf6>
 800741a:	9a07      	ldr	r2, [sp, #28]
 800741c:	4654      	mov	r4, sl
 800741e:	2000      	movs	r0, #0
 8007420:	f04f 0c0a 	mov.w	ip, #10
 8007424:	4621      	mov	r1, r4
 8007426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800742a:	3b30      	subs	r3, #48	; 0x30
 800742c:	2b09      	cmp	r3, #9
 800742e:	d94d      	bls.n	80074cc <_svfiprintf_r+0x17c>
 8007430:	b1b0      	cbz	r0, 8007460 <_svfiprintf_r+0x110>
 8007432:	9207      	str	r2, [sp, #28]
 8007434:	e014      	b.n	8007460 <_svfiprintf_r+0x110>
 8007436:	eba0 0308 	sub.w	r3, r0, r8
 800743a:	fa09 f303 	lsl.w	r3, r9, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	9304      	str	r3, [sp, #16]
 8007442:	46a2      	mov	sl, r4
 8007444:	e7d2      	b.n	80073ec <_svfiprintf_r+0x9c>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	1d19      	adds	r1, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9103      	str	r1, [sp, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	bfbb      	ittet	lt
 8007452:	425b      	neglt	r3, r3
 8007454:	f042 0202 	orrlt.w	r2, r2, #2
 8007458:	9307      	strge	r3, [sp, #28]
 800745a:	9307      	strlt	r3, [sp, #28]
 800745c:	bfb8      	it	lt
 800745e:	9204      	strlt	r2, [sp, #16]
 8007460:	7823      	ldrb	r3, [r4, #0]
 8007462:	2b2e      	cmp	r3, #46	; 0x2e
 8007464:	d10c      	bne.n	8007480 <_svfiprintf_r+0x130>
 8007466:	7863      	ldrb	r3, [r4, #1]
 8007468:	2b2a      	cmp	r3, #42	; 0x2a
 800746a:	d134      	bne.n	80074d6 <_svfiprintf_r+0x186>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	1d1a      	adds	r2, r3, #4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	9203      	str	r2, [sp, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	bfb8      	it	lt
 8007478:	f04f 33ff 	movlt.w	r3, #4294967295
 800747c:	3402      	adds	r4, #2
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007548 <_svfiprintf_r+0x1f8>
 8007484:	7821      	ldrb	r1, [r4, #0]
 8007486:	2203      	movs	r2, #3
 8007488:	4650      	mov	r0, sl
 800748a:	f7f8 fec9 	bl	8000220 <memchr>
 800748e:	b138      	cbz	r0, 80074a0 <_svfiprintf_r+0x150>
 8007490:	9b04      	ldr	r3, [sp, #16]
 8007492:	eba0 000a 	sub.w	r0, r0, sl
 8007496:	2240      	movs	r2, #64	; 0x40
 8007498:	4082      	lsls	r2, r0
 800749a:	4313      	orrs	r3, r2
 800749c:	3401      	adds	r4, #1
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a4:	4825      	ldr	r0, [pc, #148]	; (800753c <_svfiprintf_r+0x1ec>)
 80074a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074aa:	2206      	movs	r2, #6
 80074ac:	f7f8 feb8 	bl	8000220 <memchr>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d038      	beq.n	8007526 <_svfiprintf_r+0x1d6>
 80074b4:	4b22      	ldr	r3, [pc, #136]	; (8007540 <_svfiprintf_r+0x1f0>)
 80074b6:	bb1b      	cbnz	r3, 8007500 <_svfiprintf_r+0x1b0>
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	3307      	adds	r3, #7
 80074bc:	f023 0307 	bic.w	r3, r3, #7
 80074c0:	3308      	adds	r3, #8
 80074c2:	9303      	str	r3, [sp, #12]
 80074c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c6:	4433      	add	r3, r6
 80074c8:	9309      	str	r3, [sp, #36]	; 0x24
 80074ca:	e768      	b.n	800739e <_svfiprintf_r+0x4e>
 80074cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80074d0:	460c      	mov	r4, r1
 80074d2:	2001      	movs	r0, #1
 80074d4:	e7a6      	b.n	8007424 <_svfiprintf_r+0xd4>
 80074d6:	2300      	movs	r3, #0
 80074d8:	3401      	adds	r4, #1
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	4619      	mov	r1, r3
 80074de:	f04f 0c0a 	mov.w	ip, #10
 80074e2:	4620      	mov	r0, r4
 80074e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074e8:	3a30      	subs	r2, #48	; 0x30
 80074ea:	2a09      	cmp	r2, #9
 80074ec:	d903      	bls.n	80074f6 <_svfiprintf_r+0x1a6>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0c6      	beq.n	8007480 <_svfiprintf_r+0x130>
 80074f2:	9105      	str	r1, [sp, #20]
 80074f4:	e7c4      	b.n	8007480 <_svfiprintf_r+0x130>
 80074f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80074fa:	4604      	mov	r4, r0
 80074fc:	2301      	movs	r3, #1
 80074fe:	e7f0      	b.n	80074e2 <_svfiprintf_r+0x192>
 8007500:	ab03      	add	r3, sp, #12
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	462a      	mov	r2, r5
 8007506:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <_svfiprintf_r+0x1f4>)
 8007508:	a904      	add	r1, sp, #16
 800750a:	4638      	mov	r0, r7
 800750c:	f3af 8000 	nop.w
 8007510:	1c42      	adds	r2, r0, #1
 8007512:	4606      	mov	r6, r0
 8007514:	d1d6      	bne.n	80074c4 <_svfiprintf_r+0x174>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	065b      	lsls	r3, r3, #25
 800751a:	f53f af2d 	bmi.w	8007378 <_svfiprintf_r+0x28>
 800751e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007520:	b01d      	add	sp, #116	; 0x74
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	ab03      	add	r3, sp, #12
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	462a      	mov	r2, r5
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <_svfiprintf_r+0x1f4>)
 800752e:	a904      	add	r1, sp, #16
 8007530:	4638      	mov	r0, r7
 8007532:	f000 f879 	bl	8007628 <_printf_i>
 8007536:	e7eb      	b.n	8007510 <_svfiprintf_r+0x1c0>
 8007538:	08007b4d 	.word	0x08007b4d
 800753c:	08007b57 	.word	0x08007b57
 8007540:	00000000 	.word	0x00000000
 8007544:	0800729d 	.word	0x0800729d
 8007548:	08007b53 	.word	0x08007b53

0800754c <_printf_common>:
 800754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	4616      	mov	r6, r2
 8007552:	4699      	mov	r9, r3
 8007554:	688a      	ldr	r2, [r1, #8]
 8007556:	690b      	ldr	r3, [r1, #16]
 8007558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800755c:	4293      	cmp	r3, r2
 800755e:	bfb8      	it	lt
 8007560:	4613      	movlt	r3, r2
 8007562:	6033      	str	r3, [r6, #0]
 8007564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007568:	4607      	mov	r7, r0
 800756a:	460c      	mov	r4, r1
 800756c:	b10a      	cbz	r2, 8007572 <_printf_common+0x26>
 800756e:	3301      	adds	r3, #1
 8007570:	6033      	str	r3, [r6, #0]
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	0699      	lsls	r1, r3, #26
 8007576:	bf42      	ittt	mi
 8007578:	6833      	ldrmi	r3, [r6, #0]
 800757a:	3302      	addmi	r3, #2
 800757c:	6033      	strmi	r3, [r6, #0]
 800757e:	6825      	ldr	r5, [r4, #0]
 8007580:	f015 0506 	ands.w	r5, r5, #6
 8007584:	d106      	bne.n	8007594 <_printf_common+0x48>
 8007586:	f104 0a19 	add.w	sl, r4, #25
 800758a:	68e3      	ldr	r3, [r4, #12]
 800758c:	6832      	ldr	r2, [r6, #0]
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	42ab      	cmp	r3, r5
 8007592:	dc26      	bgt.n	80075e2 <_printf_common+0x96>
 8007594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007598:	1e13      	subs	r3, r2, #0
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	bf18      	it	ne
 800759e:	2301      	movne	r3, #1
 80075a0:	0692      	lsls	r2, r2, #26
 80075a2:	d42b      	bmi.n	80075fc <_printf_common+0xb0>
 80075a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075a8:	4649      	mov	r1, r9
 80075aa:	4638      	mov	r0, r7
 80075ac:	47c0      	blx	r8
 80075ae:	3001      	adds	r0, #1
 80075b0:	d01e      	beq.n	80075f0 <_printf_common+0xa4>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	6922      	ldr	r2, [r4, #16]
 80075b6:	f003 0306 	and.w	r3, r3, #6
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	bf02      	ittt	eq
 80075be:	68e5      	ldreq	r5, [r4, #12]
 80075c0:	6833      	ldreq	r3, [r6, #0]
 80075c2:	1aed      	subeq	r5, r5, r3
 80075c4:	68a3      	ldr	r3, [r4, #8]
 80075c6:	bf0c      	ite	eq
 80075c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075cc:	2500      	movne	r5, #0
 80075ce:	4293      	cmp	r3, r2
 80075d0:	bfc4      	itt	gt
 80075d2:	1a9b      	subgt	r3, r3, r2
 80075d4:	18ed      	addgt	r5, r5, r3
 80075d6:	2600      	movs	r6, #0
 80075d8:	341a      	adds	r4, #26
 80075da:	42b5      	cmp	r5, r6
 80075dc:	d11a      	bne.n	8007614 <_printf_common+0xc8>
 80075de:	2000      	movs	r0, #0
 80075e0:	e008      	b.n	80075f4 <_printf_common+0xa8>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4652      	mov	r2, sl
 80075e6:	4649      	mov	r1, r9
 80075e8:	4638      	mov	r0, r7
 80075ea:	47c0      	blx	r8
 80075ec:	3001      	adds	r0, #1
 80075ee:	d103      	bne.n	80075f8 <_printf_common+0xac>
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f8:	3501      	adds	r5, #1
 80075fa:	e7c6      	b.n	800758a <_printf_common+0x3e>
 80075fc:	18e1      	adds	r1, r4, r3
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	2030      	movs	r0, #48	; 0x30
 8007602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007606:	4422      	add	r2, r4
 8007608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800760c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007610:	3302      	adds	r3, #2
 8007612:	e7c7      	b.n	80075a4 <_printf_common+0x58>
 8007614:	2301      	movs	r3, #1
 8007616:	4622      	mov	r2, r4
 8007618:	4649      	mov	r1, r9
 800761a:	4638      	mov	r0, r7
 800761c:	47c0      	blx	r8
 800761e:	3001      	adds	r0, #1
 8007620:	d0e6      	beq.n	80075f0 <_printf_common+0xa4>
 8007622:	3601      	adds	r6, #1
 8007624:	e7d9      	b.n	80075da <_printf_common+0x8e>
	...

08007628 <_printf_i>:
 8007628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	7e0f      	ldrb	r7, [r1, #24]
 800762e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007630:	2f78      	cmp	r7, #120	; 0x78
 8007632:	4691      	mov	r9, r2
 8007634:	4680      	mov	r8, r0
 8007636:	460c      	mov	r4, r1
 8007638:	469a      	mov	sl, r3
 800763a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800763e:	d807      	bhi.n	8007650 <_printf_i+0x28>
 8007640:	2f62      	cmp	r7, #98	; 0x62
 8007642:	d80a      	bhi.n	800765a <_printf_i+0x32>
 8007644:	2f00      	cmp	r7, #0
 8007646:	f000 80d4 	beq.w	80077f2 <_printf_i+0x1ca>
 800764a:	2f58      	cmp	r7, #88	; 0x58
 800764c:	f000 80c0 	beq.w	80077d0 <_printf_i+0x1a8>
 8007650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007658:	e03a      	b.n	80076d0 <_printf_i+0xa8>
 800765a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800765e:	2b15      	cmp	r3, #21
 8007660:	d8f6      	bhi.n	8007650 <_printf_i+0x28>
 8007662:	a101      	add	r1, pc, #4	; (adr r1, 8007668 <_printf_i+0x40>)
 8007664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007668:	080076c1 	.word	0x080076c1
 800766c:	080076d5 	.word	0x080076d5
 8007670:	08007651 	.word	0x08007651
 8007674:	08007651 	.word	0x08007651
 8007678:	08007651 	.word	0x08007651
 800767c:	08007651 	.word	0x08007651
 8007680:	080076d5 	.word	0x080076d5
 8007684:	08007651 	.word	0x08007651
 8007688:	08007651 	.word	0x08007651
 800768c:	08007651 	.word	0x08007651
 8007690:	08007651 	.word	0x08007651
 8007694:	080077d9 	.word	0x080077d9
 8007698:	08007701 	.word	0x08007701
 800769c:	08007793 	.word	0x08007793
 80076a0:	08007651 	.word	0x08007651
 80076a4:	08007651 	.word	0x08007651
 80076a8:	080077fb 	.word	0x080077fb
 80076ac:	08007651 	.word	0x08007651
 80076b0:	08007701 	.word	0x08007701
 80076b4:	08007651 	.word	0x08007651
 80076b8:	08007651 	.word	0x08007651
 80076bc:	0800779b 	.word	0x0800779b
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	1d1a      	adds	r2, r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	602a      	str	r2, [r5, #0]
 80076c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076d0:	2301      	movs	r3, #1
 80076d2:	e09f      	b.n	8007814 <_printf_i+0x1ec>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	682b      	ldr	r3, [r5, #0]
 80076d8:	0607      	lsls	r7, r0, #24
 80076da:	f103 0104 	add.w	r1, r3, #4
 80076de:	6029      	str	r1, [r5, #0]
 80076e0:	d501      	bpl.n	80076e6 <_printf_i+0xbe>
 80076e2:	681e      	ldr	r6, [r3, #0]
 80076e4:	e003      	b.n	80076ee <_printf_i+0xc6>
 80076e6:	0646      	lsls	r6, r0, #25
 80076e8:	d5fb      	bpl.n	80076e2 <_printf_i+0xba>
 80076ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076ee:	2e00      	cmp	r6, #0
 80076f0:	da03      	bge.n	80076fa <_printf_i+0xd2>
 80076f2:	232d      	movs	r3, #45	; 0x2d
 80076f4:	4276      	negs	r6, r6
 80076f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076fa:	485a      	ldr	r0, [pc, #360]	; (8007864 <_printf_i+0x23c>)
 80076fc:	230a      	movs	r3, #10
 80076fe:	e012      	b.n	8007726 <_printf_i+0xfe>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	6820      	ldr	r0, [r4, #0]
 8007704:	1d19      	adds	r1, r3, #4
 8007706:	6029      	str	r1, [r5, #0]
 8007708:	0605      	lsls	r5, r0, #24
 800770a:	d501      	bpl.n	8007710 <_printf_i+0xe8>
 800770c:	681e      	ldr	r6, [r3, #0]
 800770e:	e002      	b.n	8007716 <_printf_i+0xee>
 8007710:	0641      	lsls	r1, r0, #25
 8007712:	d5fb      	bpl.n	800770c <_printf_i+0xe4>
 8007714:	881e      	ldrh	r6, [r3, #0]
 8007716:	4853      	ldr	r0, [pc, #332]	; (8007864 <_printf_i+0x23c>)
 8007718:	2f6f      	cmp	r7, #111	; 0x6f
 800771a:	bf0c      	ite	eq
 800771c:	2308      	moveq	r3, #8
 800771e:	230a      	movne	r3, #10
 8007720:	2100      	movs	r1, #0
 8007722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007726:	6865      	ldr	r5, [r4, #4]
 8007728:	60a5      	str	r5, [r4, #8]
 800772a:	2d00      	cmp	r5, #0
 800772c:	bfa2      	ittt	ge
 800772e:	6821      	ldrge	r1, [r4, #0]
 8007730:	f021 0104 	bicge.w	r1, r1, #4
 8007734:	6021      	strge	r1, [r4, #0]
 8007736:	b90e      	cbnz	r6, 800773c <_printf_i+0x114>
 8007738:	2d00      	cmp	r5, #0
 800773a:	d04b      	beq.n	80077d4 <_printf_i+0x1ac>
 800773c:	4615      	mov	r5, r2
 800773e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007742:	fb03 6711 	mls	r7, r3, r1, r6
 8007746:	5dc7      	ldrb	r7, [r0, r7]
 8007748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800774c:	4637      	mov	r7, r6
 800774e:	42bb      	cmp	r3, r7
 8007750:	460e      	mov	r6, r1
 8007752:	d9f4      	bls.n	800773e <_printf_i+0x116>
 8007754:	2b08      	cmp	r3, #8
 8007756:	d10b      	bne.n	8007770 <_printf_i+0x148>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	07de      	lsls	r6, r3, #31
 800775c:	d508      	bpl.n	8007770 <_printf_i+0x148>
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	6861      	ldr	r1, [r4, #4]
 8007762:	4299      	cmp	r1, r3
 8007764:	bfde      	ittt	le
 8007766:	2330      	movle	r3, #48	; 0x30
 8007768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800776c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007770:	1b52      	subs	r2, r2, r5
 8007772:	6122      	str	r2, [r4, #16]
 8007774:	f8cd a000 	str.w	sl, [sp]
 8007778:	464b      	mov	r3, r9
 800777a:	aa03      	add	r2, sp, #12
 800777c:	4621      	mov	r1, r4
 800777e:	4640      	mov	r0, r8
 8007780:	f7ff fee4 	bl	800754c <_printf_common>
 8007784:	3001      	adds	r0, #1
 8007786:	d14a      	bne.n	800781e <_printf_i+0x1f6>
 8007788:	f04f 30ff 	mov.w	r0, #4294967295
 800778c:	b004      	add	sp, #16
 800778e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	f043 0320 	orr.w	r3, r3, #32
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	4833      	ldr	r0, [pc, #204]	; (8007868 <_printf_i+0x240>)
 800779c:	2778      	movs	r7, #120	; 0x78
 800779e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	6829      	ldr	r1, [r5, #0]
 80077a6:	061f      	lsls	r7, r3, #24
 80077a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80077ac:	d402      	bmi.n	80077b4 <_printf_i+0x18c>
 80077ae:	065f      	lsls	r7, r3, #25
 80077b0:	bf48      	it	mi
 80077b2:	b2b6      	uxthmi	r6, r6
 80077b4:	07df      	lsls	r7, r3, #31
 80077b6:	bf48      	it	mi
 80077b8:	f043 0320 	orrmi.w	r3, r3, #32
 80077bc:	6029      	str	r1, [r5, #0]
 80077be:	bf48      	it	mi
 80077c0:	6023      	strmi	r3, [r4, #0]
 80077c2:	b91e      	cbnz	r6, 80077cc <_printf_i+0x1a4>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	f023 0320 	bic.w	r3, r3, #32
 80077ca:	6023      	str	r3, [r4, #0]
 80077cc:	2310      	movs	r3, #16
 80077ce:	e7a7      	b.n	8007720 <_printf_i+0xf8>
 80077d0:	4824      	ldr	r0, [pc, #144]	; (8007864 <_printf_i+0x23c>)
 80077d2:	e7e4      	b.n	800779e <_printf_i+0x176>
 80077d4:	4615      	mov	r5, r2
 80077d6:	e7bd      	b.n	8007754 <_printf_i+0x12c>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	6826      	ldr	r6, [r4, #0]
 80077dc:	6961      	ldr	r1, [r4, #20]
 80077de:	1d18      	adds	r0, r3, #4
 80077e0:	6028      	str	r0, [r5, #0]
 80077e2:	0635      	lsls	r5, r6, #24
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	d501      	bpl.n	80077ec <_printf_i+0x1c4>
 80077e8:	6019      	str	r1, [r3, #0]
 80077ea:	e002      	b.n	80077f2 <_printf_i+0x1ca>
 80077ec:	0670      	lsls	r0, r6, #25
 80077ee:	d5fb      	bpl.n	80077e8 <_printf_i+0x1c0>
 80077f0:	8019      	strh	r1, [r3, #0]
 80077f2:	2300      	movs	r3, #0
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	4615      	mov	r5, r2
 80077f8:	e7bc      	b.n	8007774 <_printf_i+0x14c>
 80077fa:	682b      	ldr	r3, [r5, #0]
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	602a      	str	r2, [r5, #0]
 8007800:	681d      	ldr	r5, [r3, #0]
 8007802:	6862      	ldr	r2, [r4, #4]
 8007804:	2100      	movs	r1, #0
 8007806:	4628      	mov	r0, r5
 8007808:	f7f8 fd0a 	bl	8000220 <memchr>
 800780c:	b108      	cbz	r0, 8007812 <_printf_i+0x1ea>
 800780e:	1b40      	subs	r0, r0, r5
 8007810:	6060      	str	r0, [r4, #4]
 8007812:	6863      	ldr	r3, [r4, #4]
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	2300      	movs	r3, #0
 8007818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800781c:	e7aa      	b.n	8007774 <_printf_i+0x14c>
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	462a      	mov	r2, r5
 8007822:	4649      	mov	r1, r9
 8007824:	4640      	mov	r0, r8
 8007826:	47d0      	blx	sl
 8007828:	3001      	adds	r0, #1
 800782a:	d0ad      	beq.n	8007788 <_printf_i+0x160>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	079b      	lsls	r3, r3, #30
 8007830:	d413      	bmi.n	800785a <_printf_i+0x232>
 8007832:	68e0      	ldr	r0, [r4, #12]
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	4298      	cmp	r0, r3
 8007838:	bfb8      	it	lt
 800783a:	4618      	movlt	r0, r3
 800783c:	e7a6      	b.n	800778c <_printf_i+0x164>
 800783e:	2301      	movs	r3, #1
 8007840:	4632      	mov	r2, r6
 8007842:	4649      	mov	r1, r9
 8007844:	4640      	mov	r0, r8
 8007846:	47d0      	blx	sl
 8007848:	3001      	adds	r0, #1
 800784a:	d09d      	beq.n	8007788 <_printf_i+0x160>
 800784c:	3501      	adds	r5, #1
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	9903      	ldr	r1, [sp, #12]
 8007852:	1a5b      	subs	r3, r3, r1
 8007854:	42ab      	cmp	r3, r5
 8007856:	dcf2      	bgt.n	800783e <_printf_i+0x216>
 8007858:	e7eb      	b.n	8007832 <_printf_i+0x20a>
 800785a:	2500      	movs	r5, #0
 800785c:	f104 0619 	add.w	r6, r4, #25
 8007860:	e7f5      	b.n	800784e <_printf_i+0x226>
 8007862:	bf00      	nop
 8007864:	08007b5e 	.word	0x08007b5e
 8007868:	08007b6f 	.word	0x08007b6f

0800786c <memmove>:
 800786c:	4288      	cmp	r0, r1
 800786e:	b510      	push	{r4, lr}
 8007870:	eb01 0402 	add.w	r4, r1, r2
 8007874:	d902      	bls.n	800787c <memmove+0x10>
 8007876:	4284      	cmp	r4, r0
 8007878:	4623      	mov	r3, r4
 800787a:	d807      	bhi.n	800788c <memmove+0x20>
 800787c:	1e43      	subs	r3, r0, #1
 800787e:	42a1      	cmp	r1, r4
 8007880:	d008      	beq.n	8007894 <memmove+0x28>
 8007882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800788a:	e7f8      	b.n	800787e <memmove+0x12>
 800788c:	4402      	add	r2, r0
 800788e:	4601      	mov	r1, r0
 8007890:	428a      	cmp	r2, r1
 8007892:	d100      	bne.n	8007896 <memmove+0x2a>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800789a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789e:	e7f7      	b.n	8007890 <memmove+0x24>

080078a0 <_sbrk_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d06      	ldr	r5, [pc, #24]	; (80078bc <_sbrk_r+0x1c>)
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7f9 fcf6 	bl	800129c <_sbrk>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_sbrk_r+0x1a>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_sbrk_r+0x1a>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	20000470 	.word	0x20000470

080078c0 <memcpy>:
 80078c0:	440a      	add	r2, r1
 80078c2:	4291      	cmp	r1, r2
 80078c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078c8:	d100      	bne.n	80078cc <memcpy+0xc>
 80078ca:	4770      	bx	lr
 80078cc:	b510      	push	{r4, lr}
 80078ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078d6:	4291      	cmp	r1, r2
 80078d8:	d1f9      	bne.n	80078ce <memcpy+0xe>
 80078da:	bd10      	pop	{r4, pc}

080078dc <_realloc_r>:
 80078dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e0:	4680      	mov	r8, r0
 80078e2:	4614      	mov	r4, r2
 80078e4:	460e      	mov	r6, r1
 80078e6:	b921      	cbnz	r1, 80078f2 <_realloc_r+0x16>
 80078e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ec:	4611      	mov	r1, r2
 80078ee:	f7ff bc49 	b.w	8007184 <_malloc_r>
 80078f2:	b92a      	cbnz	r2, 8007900 <_realloc_r+0x24>
 80078f4:	f7ff fbda 	bl	80070ac <_free_r>
 80078f8:	4625      	mov	r5, r4
 80078fa:	4628      	mov	r0, r5
 80078fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007900:	f000 f81b 	bl	800793a <_malloc_usable_size_r>
 8007904:	4284      	cmp	r4, r0
 8007906:	4607      	mov	r7, r0
 8007908:	d802      	bhi.n	8007910 <_realloc_r+0x34>
 800790a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800790e:	d812      	bhi.n	8007936 <_realloc_r+0x5a>
 8007910:	4621      	mov	r1, r4
 8007912:	4640      	mov	r0, r8
 8007914:	f7ff fc36 	bl	8007184 <_malloc_r>
 8007918:	4605      	mov	r5, r0
 800791a:	2800      	cmp	r0, #0
 800791c:	d0ed      	beq.n	80078fa <_realloc_r+0x1e>
 800791e:	42bc      	cmp	r4, r7
 8007920:	4622      	mov	r2, r4
 8007922:	4631      	mov	r1, r6
 8007924:	bf28      	it	cs
 8007926:	463a      	movcs	r2, r7
 8007928:	f7ff ffca 	bl	80078c0 <memcpy>
 800792c:	4631      	mov	r1, r6
 800792e:	4640      	mov	r0, r8
 8007930:	f7ff fbbc 	bl	80070ac <_free_r>
 8007934:	e7e1      	b.n	80078fa <_realloc_r+0x1e>
 8007936:	4635      	mov	r5, r6
 8007938:	e7df      	b.n	80078fa <_realloc_r+0x1e>

0800793a <_malloc_usable_size_r>:
 800793a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800793e:	1f18      	subs	r0, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	bfbc      	itt	lt
 8007944:	580b      	ldrlt	r3, [r1, r0]
 8007946:	18c0      	addlt	r0, r0, r3
 8007948:	4770      	bx	lr

0800794a <fmaxf>:
 800794a:	b508      	push	{r3, lr}
 800794c:	ed2d 8b02 	vpush	{d8}
 8007950:	eeb0 8a40 	vmov.f32	s16, s0
 8007954:	eef0 8a60 	vmov.f32	s17, s1
 8007958:	f000 f82e 	bl	80079b8 <__fpclassifyf>
 800795c:	b148      	cbz	r0, 8007972 <fmaxf+0x28>
 800795e:	eeb0 0a68 	vmov.f32	s0, s17
 8007962:	f000 f829 	bl	80079b8 <__fpclassifyf>
 8007966:	b130      	cbz	r0, 8007976 <fmaxf+0x2c>
 8007968:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800796c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007970:	dc01      	bgt.n	8007976 <fmaxf+0x2c>
 8007972:	eeb0 8a68 	vmov.f32	s16, s17
 8007976:	eeb0 0a48 	vmov.f32	s0, s16
 800797a:	ecbd 8b02 	vpop	{d8}
 800797e:	bd08      	pop	{r3, pc}

08007980 <fminf>:
 8007980:	b508      	push	{r3, lr}
 8007982:	ed2d 8b02 	vpush	{d8}
 8007986:	eeb0 8a40 	vmov.f32	s16, s0
 800798a:	eef0 8a60 	vmov.f32	s17, s1
 800798e:	f000 f813 	bl	80079b8 <__fpclassifyf>
 8007992:	b148      	cbz	r0, 80079a8 <fminf+0x28>
 8007994:	eeb0 0a68 	vmov.f32	s0, s17
 8007998:	f000 f80e 	bl	80079b8 <__fpclassifyf>
 800799c:	b130      	cbz	r0, 80079ac <fminf+0x2c>
 800799e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80079a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a6:	d401      	bmi.n	80079ac <fminf+0x2c>
 80079a8:	eeb0 8a68 	vmov.f32	s16, s17
 80079ac:	eeb0 0a48 	vmov.f32	s0, s16
 80079b0:	ecbd 8b02 	vpop	{d8}
 80079b4:	bd08      	pop	{r3, pc}
	...

080079b8 <__fpclassifyf>:
 80079b8:	ee10 3a10 	vmov	r3, s0
 80079bc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80079c0:	d00d      	beq.n	80079de <__fpclassifyf+0x26>
 80079c2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80079c6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80079ca:	d30a      	bcc.n	80079e2 <__fpclassifyf+0x2a>
 80079cc:	4b07      	ldr	r3, [pc, #28]	; (80079ec <__fpclassifyf+0x34>)
 80079ce:	1e42      	subs	r2, r0, #1
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d908      	bls.n	80079e6 <__fpclassifyf+0x2e>
 80079d4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80079d8:	4258      	negs	r0, r3
 80079da:	4158      	adcs	r0, r3
 80079dc:	4770      	bx	lr
 80079de:	2002      	movs	r0, #2
 80079e0:	4770      	bx	lr
 80079e2:	2004      	movs	r0, #4
 80079e4:	4770      	bx	lr
 80079e6:	2003      	movs	r0, #3
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	007ffffe 	.word	0x007ffffe

080079f0 <_init>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	bf00      	nop
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr

080079fc <_fini>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr
