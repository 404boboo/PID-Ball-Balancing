
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006054  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006338  08006338  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006338  08006338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006340  08006340  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006348  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000088  080063cc  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080063cc  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012319  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288a  00000000  00000000  00032410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00034ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b66  00000000  00000000  00035b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026968  00000000  00000000  000366ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001374b  00000000  00000000  0005d016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f07bb  00000000  00000000  00070761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f90  00000000  00000000  00160f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00164eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000088 	.word	0x20000088
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006204 	.word	0x08006204

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000008c 	.word	0x2000008c
 8000204:	08006204 	.word	0x08006204

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b970 	b.w	8000b6c <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9e08      	ldr	r6, [sp, #32]
 80008aa:	460d      	mov	r5, r1
 80008ac:	4604      	mov	r4, r0
 80008ae:	460f      	mov	r7, r1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d14a      	bne.n	800094a <__udivmoddi4+0xa6>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4694      	mov	ip, r2
 80008b8:	d965      	bls.n	8000986 <__udivmoddi4+0xe2>
 80008ba:	fab2 f382 	clz	r3, r2
 80008be:	b143      	cbz	r3, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008c4:	f1c3 0220 	rsb	r2, r3, #32
 80008c8:	409f      	lsls	r7, r3
 80008ca:	fa20 f202 	lsr.w	r2, r0, r2
 80008ce:	4317      	orrs	r7, r2
 80008d0:	409c      	lsls	r4, r3
 80008d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008d6:	fa1f f58c 	uxth.w	r5, ip
 80008da:	fbb7 f1fe 	udiv	r1, r7, lr
 80008de:	0c22      	lsrs	r2, r4, #16
 80008e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008e8:	fb01 f005 	mul.w	r0, r1, r5
 80008ec:	4290      	cmp	r0, r2
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x62>
 80008f0:	eb1c 0202 	adds.w	r2, ip, r2
 80008f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008f8:	f080 811c 	bcs.w	8000b34 <__udivmoddi4+0x290>
 80008fc:	4290      	cmp	r0, r2
 80008fe:	f240 8119 	bls.w	8000b34 <__udivmoddi4+0x290>
 8000902:	3902      	subs	r1, #2
 8000904:	4462      	add	r2, ip
 8000906:	1a12      	subs	r2, r2, r0
 8000908:	b2a4      	uxth	r4, r4
 800090a:	fbb2 f0fe 	udiv	r0, r2, lr
 800090e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000912:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000916:	fb00 f505 	mul.w	r5, r0, r5
 800091a:	42a5      	cmp	r5, r4
 800091c:	d90a      	bls.n	8000934 <__udivmoddi4+0x90>
 800091e:	eb1c 0404 	adds.w	r4, ip, r4
 8000922:	f100 32ff 	add.w	r2, r0, #4294967295
 8000926:	f080 8107 	bcs.w	8000b38 <__udivmoddi4+0x294>
 800092a:	42a5      	cmp	r5, r4
 800092c:	f240 8104 	bls.w	8000b38 <__udivmoddi4+0x294>
 8000930:	4464      	add	r4, ip
 8000932:	3802      	subs	r0, #2
 8000934:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000938:	1b64      	subs	r4, r4, r5
 800093a:	2100      	movs	r1, #0
 800093c:	b11e      	cbz	r6, 8000946 <__udivmoddi4+0xa2>
 800093e:	40dc      	lsrs	r4, r3
 8000940:	2300      	movs	r3, #0
 8000942:	e9c6 4300 	strd	r4, r3, [r6]
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	428b      	cmp	r3, r1
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0xbc>
 800094e:	2e00      	cmp	r6, #0
 8000950:	f000 80ed 	beq.w	8000b2e <__udivmoddi4+0x28a>
 8000954:	2100      	movs	r1, #0
 8000956:	e9c6 0500 	strd	r0, r5, [r6]
 800095a:	4608      	mov	r0, r1
 800095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000960:	fab3 f183 	clz	r1, r3
 8000964:	2900      	cmp	r1, #0
 8000966:	d149      	bne.n	80009fc <__udivmoddi4+0x158>
 8000968:	42ab      	cmp	r3, r5
 800096a:	d302      	bcc.n	8000972 <__udivmoddi4+0xce>
 800096c:	4282      	cmp	r2, r0
 800096e:	f200 80f8 	bhi.w	8000b62 <__udivmoddi4+0x2be>
 8000972:	1a84      	subs	r4, r0, r2
 8000974:	eb65 0203 	sbc.w	r2, r5, r3
 8000978:	2001      	movs	r0, #1
 800097a:	4617      	mov	r7, r2
 800097c:	2e00      	cmp	r6, #0
 800097e:	d0e2      	beq.n	8000946 <__udivmoddi4+0xa2>
 8000980:	e9c6 4700 	strd	r4, r7, [r6]
 8000984:	e7df      	b.n	8000946 <__udivmoddi4+0xa2>
 8000986:	b902      	cbnz	r2, 800098a <__udivmoddi4+0xe6>
 8000988:	deff      	udf	#255	; 0xff
 800098a:	fab2 f382 	clz	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8090 	bne.w	8000ab4 <__udivmoddi4+0x210>
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2101      	movs	r1, #1
 80009a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009a4:	fb07 2015 	mls	r0, r7, r5, r2
 80009a8:	0c22      	lsrs	r2, r4, #16
 80009aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ae:	fb0e f005 	mul.w	r0, lr, r5
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x124>
 80009b6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x122>
 80009c0:	4290      	cmp	r0, r2
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2b8>
 80009c6:	4645      	mov	r5, r8
 80009c8:	1a12      	subs	r2, r2, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d0:	fb07 2210 	mls	r2, r7, r0, r2
 80009d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x14e>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x14c>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2c2>
 80009f0:	4610      	mov	r0, r2
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009fa:	e79f      	b.n	800093c <__udivmoddi4+0x98>
 80009fc:	f1c1 0720 	rsb	r7, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a12:	40fd      	lsrs	r5, r7
 8000a14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a1e:	fa1f fe8c 	uxth.w	lr, ip
 8000a22:	fb09 5518 	mls	r5, r9, r8, r5
 8000a26:	0c1c      	lsrs	r4, r3, #16
 8000a28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	fa02 f201 	lsl.w	r2, r2, r1
 8000a36:	fa00 f001 	lsl.w	r0, r0, r1
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b0>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2b4>
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2b4>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4464      	add	r4, ip
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	b29d      	uxth	r5, r3
 8000a58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1da>
 8000a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2ac>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2ac>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4464      	add	r4, ip
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fba3 9502 	umull	r9, r5, r3, r2
 8000a86:	eba4 040e 	sub.w	r4, r4, lr
 8000a8a:	42ac      	cmp	r4, r5
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46ae      	mov	lr, r5
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x29c>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x298>
 8000a94:	b156      	cbz	r6, 8000aac <__udivmoddi4+0x208>
 8000a96:	ebb0 0208 	subs.w	r2, r0, r8
 8000a9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000aa2:	40ca      	lsrs	r2, r1
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	e9c6 7400 	strd	r7, r4, [r6]
 8000aac:	4618      	mov	r0, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	f1c3 0120 	rsb	r1, r3, #32
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ac4:	409d      	lsls	r5, r3
 8000ac6:	432a      	orrs	r2, r5
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ad8:	0c11      	lsrs	r1, r2, #16
 8000ada:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ade:	fb00 f50e 	mul.w	r5, r0, lr
 8000ae2:	428d      	cmp	r5, r1
 8000ae4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x258>
 8000aea:	eb1c 0101 	adds.w	r1, ip, r1
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000af4:	428d      	cmp	r5, r1
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4461      	add	r1, ip
 8000afc:	1b49      	subs	r1, r1, r5
 8000afe:	b292      	uxth	r2, r2
 8000b00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b04:	fb07 1115 	mls	r1, r7, r5, r1
 8000b08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b10:	4291      	cmp	r1, r2
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x282>
 8000b14:	eb1c 0202 	adds.w	r2, ip, r2
 8000b18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000b22:	3d02      	subs	r5, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a52      	subs	r2, r2, r1
 8000b28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0xfc>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4630      	mov	r0, r6
 8000b32:	e708      	b.n	8000946 <__udivmoddi4+0xa2>
 8000b34:	4639      	mov	r1, r7
 8000b36:	e6e6      	b.n	8000906 <__udivmoddi4+0x62>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	e6fb      	b.n	8000934 <__udivmoddi4+0x90>
 8000b3c:	4548      	cmp	r0, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f0>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f0>
 8000b4c:	4645      	mov	r5, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x282>
 8000b50:	462b      	mov	r3, r5
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1da>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x258>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b0>
 8000b5c:	3d02      	subs	r5, #2
 8000b5e:	4462      	add	r2, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x124>
 8000b62:	4608      	mov	r0, r1
 8000b64:	e70a      	b.n	800097c <__udivmoddi4+0xd8>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x14e>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <PID>:
#include "PID_controller.h"
 double kp = 10;
 double ki = 0.038;
 double kd = 500;
void PID(hcsr04_data_t* Sensor ,SERVO_Handle_TypeDef* servo )
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	int setP = 30;
 8000b7a:	231e      	movs	r3, #30
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
	static double priError = 0;
	static double toError = 0;
	float dis = Sensor->distance_cm;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
	float error = setP - dis;
 8000b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b8e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b96:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	//calculating PID values
	double Pvalue = error * kp;
 8000b9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b9c:	f7ff fdc2 	bl	8000724 <__aeabi_f2d>
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <PID+0xec>)
 8000ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba6:	f7ff fb2f 	bl	8000208 <__aeabi_dmul>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Ivalue = toError * ki;
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <PID+0xf0>)
 8000bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <PID+0xf4>)
 8000bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbe:	f7ff fb23 	bl	8000208 <__aeabi_dmul>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double Dvalue = (error - priError) * kd;
 8000bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000bcc:	f7ff fdaa 	bl	8000724 <__aeabi_f2d>
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <PID+0xf8>)
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f7ff fc45 	bl	8000464 <__aeabi_dsub>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <PID+0xfc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f7ff fb0e 	bl	8000208 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double PIDvalue = Pvalue + Ivalue + Dvalue;
 8000bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000bf8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000bfc:	f7ff fc34 	bl	8000468 <__adddf3>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c08:	f7ff fc2e 	bl	8000468 <__adddf3>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	e9c7 2302 	strd	r2, r3, [r7, #8]
	priError = error;//previous error (DValue)
 8000c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c16:	f7ff fd85 	bl	8000724 <__aeabi_f2d>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	4912      	ldr	r1, [pc, #72]	; (8000c68 <PID+0xf8>)
 8000c20:	e9c1 2300 	strd	r2, r3, [r1]
	toError += error;//total error{IValue}
 8000c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c26:	f7ff fd7d 	bl	8000724 <__aeabi_f2d>
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <PID+0xf0>)
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	f7ff fc1a 	bl	8000468 <__adddf3>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	4909      	ldr	r1, [pc, #36]	; (8000c60 <PID+0xf0>)
 8000c3a:	e9c1 2300 	strd	r2, r3, [r1]
	SERVO_WritePosition(servo, PIDvalue);
 8000c3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c42:	f7ff fdc7 	bl	80007d4 <__aeabi_d2f>
 8000c46:	4603      	mov	r3, r0
 8000c48:	ee00 3a10 	vmov	s0, r3
 8000c4c:	6838      	ldr	r0, [r7, #0]
 8000c4e:	f000 f823 	bl	8000c98 <SERVO_WritePosition>
}
 8000c52:	bf00      	nop
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	200000a8 	.word	0x200000a8
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200000b0 	.word	0x200000b0
 8000c6c:	20000010 	.word	0x20000010

08000c70 <SERVO_Init>:
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 90.0f);
 8000c78:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000c94 <SERVO_Init+0x24>
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f80b 	bl	8000c98 <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f9e5 	bl	8001054 <PWM_Init>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	42b40000 	.word	0x42b40000

08000c98 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 120.0f, 160.0f);
 8000ca4:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000d08 <SERVO_WritePosition+0x70>
 8000ca8:	ed97 0a00 	vldr	s0, [r7]
 8000cac:	f005 fa73 	bl	8006196 <fminf>
 8000cb0:	eef0 7a40 	vmov.f32	s15, s0
 8000cb4:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000d0c <SERVO_WritePosition+0x74>
 8000cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cbc:	f005 fa50 	bl	8006160 <fmaxf>
 8000cc0:	eef0 7a40 	vmov.f32	s15, s0
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 120.0f, 160.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cd0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000d0c <SERVO_WritePosition+0x74>
 8000cd4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000cd8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000d10 <SERVO_WritePosition+0x78>
 8000cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cf0:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	ed97 0a03 	vldr	s0, [r7, #12]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f9c2 	bl	8001084 <PWM_WriteDuty>
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	43200000 	.word	0x43200000
 8000d0c:	42f00000 	.word	0x42f00000
 8000d10:	42200000 	.word	0x42200000

08000d14 <HCSR04_Init>:
*@brief: The sensor initiliazing settings.
*@retval: None
*/

void HCSR04_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	htim_echo        = htim1;         // htim Echo pin.
 8000d18:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <HCSR04_Init+0x7c>)
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <HCSR04_Init+0x80>)
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	234c      	movs	r3, #76	; 0x4c
 8000d22:	461a      	mov	r2, r3
 8000d24:	f005 fa0e 	bl	8006144 <memcpy>
	  TIM_Echo         = TIM1;          // TIM Echo pin.
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <HCSR04_Init+0x84>)
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <HCSR04_Init+0x88>)
 8000d2c:	601a      	str	r2, [r3, #0]
		htim_delay       = htim2;	        // htim delay for Trig
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HCSR04_Init+0x8c>)
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HCSR04_Init+0x90>)
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	234c      	movs	r3, #76	; 0x4c
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f005 fa03 	bl	8006144 <memcpy>
		TIM_Delay        = TIM2;          // TIM2 delay for Trig
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HCSR04_Init+0x94>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d44:	601a      	str	r2, [r3, #0]

		GPIO_Trigger     = GPIOA;          // Trigger Port.
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HCSR04_Init+0x98>)
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HCSR04_Init+0x9c>)
 8000d4a:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Trigger = GPIO_PIN_6;    //  Trigger Pin.
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HCSR04_Init+0xa0>)
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	801a      	strh	r2, [r3, #0]
		GPIO_Echo        = GPIOE;         // Echo Port.
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HCSR04_Init+0xa4>)
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HCSR04_Init+0xa8>)
 8000d56:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Echo    = GPIO_PIN_9;   // Echo Pin.
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HCSR04_Init+0xac>)
 8000d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5e:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIO_Trigger, GPIO_PIN_Trigger, GPIO_PIN_RESET);
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HCSR04_Init+0x98>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HCSR04_Init+0xa0>)
 8000d66:	8811      	ldrh	r1, [r2, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fb0e 	bl	800238c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_RESET);
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HCSR04_Init+0xa4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <HCSR04_Init+0xac>)
 8000d76:	8811      	ldrh	r1, [r2, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fb06 	bl	800238c <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim_echo);
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <HCSR04_Init+0x7c>)
 8000d82:	f002 fc8f 	bl	80036a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim_delay);
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <HCSR04_Init+0x8c>)
 8000d88:	f002 fc8c 	bl	80036a4 <HAL_TIM_Base_Start_IT>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000b8 	.word	0x200000b8
 8000d94:	2000016c 	.word	0x2000016c
 8000d98:	20000150 	.word	0x20000150
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	20000104 	.word	0x20000104
 8000da4:	200001b8 	.word	0x200001b8
 8000da8:	20000154 	.word	0x20000154
 8000dac:	20000158 	.word	0x20000158
 8000db0:	40020000 	.word	0x40020000
 8000db4:	20000160 	.word	0x20000160
 8000db8:	2000015c 	.word	0x2000015c
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	20000162 	.word	0x20000162

08000dc4 <HCSR04_TIM_PEC>:
*@brief: HC-SR04 HAL_TIM_PeriodElapsedCallback function
*@param: htim pointer to a TIM_HandleTypeDef structure that contains the configuration information for TIM module.
*@retval: None
*/
void HCSR04_TIM_PEC(TIM_HandleTypeDef *htim)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

	htim_echo        = htim1;         // htim Echo pin.
 8000dcc:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <HCSR04_TIM_PEC+0x98>)
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <HCSR04_TIM_PEC+0x9c>)
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	234c      	movs	r3, #76	; 0x4c
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f005 f9b4 	bl	8006144 <memcpy>
	  TIM_Echo         = TIM1;          // TIM Echo pin.
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HCSR04_TIM_PEC+0xa0>)
 8000dde:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <HCSR04_TIM_PEC+0xa4>)
 8000de0:	601a      	str	r2, [r3, #0]
		htim_delay       = htim2;	        // htim delay for Trig
 8000de2:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <HCSR04_TIM_PEC+0xa8>)
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <HCSR04_TIM_PEC+0xac>)
 8000de6:	4610      	mov	r0, r2
 8000de8:	4619      	mov	r1, r3
 8000dea:	234c      	movs	r3, #76	; 0x4c
 8000dec:	461a      	mov	r2, r3
 8000dee:	f005 f9a9 	bl	8006144 <memcpy>
		TIM_Delay        = TIM2;          // TIM2 delay for Trig
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HCSR04_TIM_PEC+0xb0>)
 8000df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df8:	601a      	str	r2, [r3, #0]

		GPIO_Trigger     = GPIOA;          // Trigger Port.
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HCSR04_TIM_PEC+0xb4>)
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <HCSR04_TIM_PEC+0xb8>)
 8000dfe:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Trigger = GPIO_PIN_6;    //  Trigger Pin.
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HCSR04_TIM_PEC+0xbc>)
 8000e02:	2240      	movs	r2, #64	; 0x40
 8000e04:	801a      	strh	r2, [r3, #0]
		GPIO_Echo        = GPIOE;         // Echo Port.
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HCSR04_TIM_PEC+0xc0>)
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HCSR04_TIM_PEC+0xc4>)
 8000e0a:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Echo    = GPIO_PIN_9;   // Echo Pin.
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HCSR04_TIM_PEC+0xc8>)
 8000e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e12:	801a      	strh	r2, [r3, #0]

	if(htim->Instance == TIM_Delay)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HCSR04_TIM_PEC+0xb0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d105      	bne.n	8000e2c <HCSR04_TIM_PEC+0x68>
		__HAL_TIM_CLEAR_FLAG(&htim_delay, TIM_FLAG_UPDATE);            //Clear TIM_Delay UPDATE event Flag.
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HCSR04_TIM_PEC+0xa8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f06f 0201 	mvn.w	r2, #1
 8000e28:	611a      	str	r2, [r3, #16]
	else if(htim->Instance == TIM_Echo)
		{
			HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_RESET); //Reset Echo
	    __HAL_TIM_CLEAR_FLAG(&htim_echo, TIM_FLAG_UPDATE);           //Clear TIM_Echo UPDATE event Flag.
	  }
}
 8000e2a:	e012      	b.n	8000e52 <HCSR04_TIM_PEC+0x8e>
	else if(htim->Instance == TIM_Echo)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HCSR04_TIM_PEC+0xa0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d10c      	bne.n	8000e52 <HCSR04_TIM_PEC+0x8e>
			HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_RESET); //Reset Echo
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HCSR04_TIM_PEC+0xc0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <HCSR04_TIM_PEC+0xc8>)
 8000e3e:	8811      	ldrh	r1, [r2, #0]
 8000e40:	2200      	movs	r2, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 faa2 	bl	800238c <HAL_GPIO_WritePin>
	    __HAL_TIM_CLEAR_FLAG(&htim_echo, TIM_FLAG_UPDATE);           //Clear TIM_Echo UPDATE event Flag.
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HCSR04_TIM_PEC+0x98>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f06f 0201 	mvn.w	r2, #1
 8000e50:	611a      	str	r2, [r3, #16]
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000b8 	.word	0x200000b8
 8000e60:	2000016c 	.word	0x2000016c
 8000e64:	20000150 	.word	0x20000150
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	20000104 	.word	0x20000104
 8000e70:	200001b8 	.word	0x200001b8
 8000e74:	20000154 	.word	0x20000154
 8000e78:	20000158 	.word	0x20000158
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	20000160 	.word	0x20000160
 8000e84:	2000015c 	.word	0x2000015c
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	20000162 	.word	0x20000162

08000e90 <HCSR04_GetInfo>:
*@param: HCSR04_DATA pointer to hcsr04_data_t structure that contains data for the sensor.
         HCSR04_DATA -> duration: ms, us, distance: mm, cm, m, inch.
*@retval: None
*/
void HCSR04_GetInfo(hcsr04_data_t *HCSR04_DATA)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	static volatile float duration = 0, distance = 0;

	htim_echo        = htim1;         // htim Echo pin.
 8000e98:	4a5a      	ldr	r2, [pc, #360]	; (8001004 <HCSR04_GetInfo+0x174>)
 8000e9a:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <HCSR04_GetInfo+0x178>)
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	234c      	movs	r3, #76	; 0x4c
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	f005 f94e 	bl	8006144 <memcpy>
	  TIM_Echo         = TIM1;          // TIM Echo pin.
 8000ea8:	4b58      	ldr	r3, [pc, #352]	; (800100c <HCSR04_GetInfo+0x17c>)
 8000eaa:	4a59      	ldr	r2, [pc, #356]	; (8001010 <HCSR04_GetInfo+0x180>)
 8000eac:	601a      	str	r2, [r3, #0]
		htim_delay       = htim2;	        // htim delay for Trig
 8000eae:	4a59      	ldr	r2, [pc, #356]	; (8001014 <HCSR04_GetInfo+0x184>)
 8000eb0:	4b59      	ldr	r3, [pc, #356]	; (8001018 <HCSR04_GetInfo+0x188>)
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	234c      	movs	r3, #76	; 0x4c
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f005 f943 	bl	8006144 <memcpy>
		TIM_Delay        = TIM2;          // TIM2 delay for Trig
 8000ebe:	4b57      	ldr	r3, [pc, #348]	; (800101c <HCSR04_GetInfo+0x18c>)
 8000ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec4:	601a      	str	r2, [r3, #0]

		GPIO_Trigger     = GPIOA;          // Trigger Port.
 8000ec6:	4b56      	ldr	r3, [pc, #344]	; (8001020 <HCSR04_GetInfo+0x190>)
 8000ec8:	4a56      	ldr	r2, [pc, #344]	; (8001024 <HCSR04_GetInfo+0x194>)
 8000eca:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Trigger = GPIO_PIN_6;    //  Trigger Pin.
 8000ecc:	4b56      	ldr	r3, [pc, #344]	; (8001028 <HCSR04_GetInfo+0x198>)
 8000ece:	2240      	movs	r2, #64	; 0x40
 8000ed0:	801a      	strh	r2, [r3, #0]
		GPIO_Echo        = GPIOE;         // Echo Port.
 8000ed2:	4b56      	ldr	r3, [pc, #344]	; (800102c <HCSR04_GetInfo+0x19c>)
 8000ed4:	4a56      	ldr	r2, [pc, #344]	; (8001030 <HCSR04_GetInfo+0x1a0>)
 8000ed6:	601a      	str	r2, [r3, #0]
		GPIO_PIN_Echo    = GPIO_PIN_9;   // Echo Pin.
 8000ed8:	4b56      	ldr	r3, [pc, #344]	; (8001034 <HCSR04_GetInfo+0x1a4>)
 8000eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ede:	801a      	strh	r2, [r3, #0]



		HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_SET);        //Set blue led. Used for monitoring
 8000ee0:	4b52      	ldr	r3, [pc, #328]	; (800102c <HCSR04_GetInfo+0x19c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a53      	ldr	r2, [pc, #332]	; (8001034 <HCSR04_GetInfo+0x1a4>)
 8000ee6:	8811      	ldrh	r1, [r2, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fa4e 	bl	800238c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Trigger, GPIO_PIN_Trigger, GPIO_PIN_SET);  //Set trigger pin, orange led. Used for monitoring
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <HCSR04_GetInfo+0x190>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a4c      	ldr	r2, [pc, #304]	; (8001028 <HCSR04_GetInfo+0x198>)
 8000ef6:	8811      	ldrh	r1, [r2, #0]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fa46 	bl	800238c <HAL_GPIO_WritePin>

	  /*----10us delay by default:TIM2-----------------------------*/
    __HAL_TIM_SetCounter(&htim_delay, 0);
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <HCSR04_GetInfo+0x184>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
	  while(__HAL_TIM_GET_FLAG(&htim_delay, TIM_FLAG_UPDATE) != SET)
 8000f08:	bf00      	nop
 8000f0a:	4b42      	ldr	r3, [pc, #264]	; (8001014 <HCSR04_GetInfo+0x184>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d1f8      	bne.n	8000f0a <HCSR04_GetInfo+0x7a>
	  {

	  }
    /*-----------------------------------------------------------*/

    HAL_GPIO_WritePin(GPIO_Trigger, GPIO_PIN_Trigger, GPIO_PIN_RESET); //Reset trigger pin, orange led.
 8000f18:	4b41      	ldr	r3, [pc, #260]	; (8001020 <HCSR04_GetInfo+0x190>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a42      	ldr	r2, [pc, #264]	; (8001028 <HCSR04_GetInfo+0x198>)
 8000f1e:	8811      	ldrh	r1, [r2, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fa32 	bl	800238c <HAL_GPIO_WritePin>


		while(__HAL_TIM_GET_FLAG(&htim_echo,TIM_FLAG_TRIGGER) != RESET && __HAL_TIM_GET_FLAG(&htim_echo, TIM_FLAG_UPDATE) != SET)
 8000f28:	e012      	b.n	8000f50 <HCSR04_GetInfo+0xc0>
		{

			duration = __HAL_TIM_GetCounter(&htim_echo);        //Get TIM_Echo(default:TIM1) counter value(default:us) as long as there is Echo signal(rising edge).
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <HCSR04_GetInfo+0x174>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f38:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <HCSR04_GetInfo+0x1a8>)
 8000f3a:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SetCounter(&htim_echo, 0);                //Reset counter value
 8000f3e:	4b31      	ldr	r3, [pc, #196]	; (8001004 <HCSR04_GetInfo+0x174>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_CLEAR_FLAG(&htim_echo, TIM_FLAG_TRIGGER); //Clear TIM_Echo Trigger Flag.
 8000f46:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <HCSR04_GetInfo+0x174>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f4e:	611a      	str	r2, [r3, #16]
		while(__HAL_TIM_GET_FLAG(&htim_echo,TIM_FLAG_TRIGGER) != RESET && __HAL_TIM_GET_FLAG(&htim_echo, TIM_FLAG_UPDATE) != SET)
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <HCSR04_GetInfo+0x174>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5a:	2b40      	cmp	r3, #64	; 0x40
 8000f5c:	d106      	bne.n	8000f6c <HCSR04_GetInfo+0xdc>
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <HCSR04_GetInfo+0x174>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d1de      	bne.n	8000f2a <HCSR04_GetInfo+0x9a>

		}


		//X=V*t, X=distance_cm, V=0.0343cm/us, t=(transmission + reception time)/2 us
		distance = (duration/2)*(float)0.0343; //sound speed = 343m/s = 0.0343cm/us
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <HCSR04_GetInfo+0x1a8>)
 8000f6e:	ed93 7a00 	vldr	s14, [r3]
 8000f72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800103c <HCSR04_GetInfo+0x1ac>
 8000f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <HCSR04_GetInfo+0x1b0>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]
		distance -= zero_point;                //subtract the zero point and then, the distance(default:cm) equals from the zero point to object.
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <HCSR04_GetInfo+0x1b0>)
 8000f8a:	edd3 7a00 	vldr	s15, [r3]
 8000f8e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001044 <HCSR04_GetInfo+0x1b4>
 8000f92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <HCSR04_GetInfo+0x1b0>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]

	  HCSR04_DATA->distance_cm = distance;
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <HCSR04_GetInfo+0x1b0>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60da      	str	r2, [r3, #12]
		HCSR04_DATA->distance_mm = distance*10;
 8000fa4:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HCSR04_GetInfo+0x1b0>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edc3 7a02 	vstr	s15, [r3, #8]
		HCSR04_DATA->distance_m = distance/100;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HCSR04_GetInfo+0x1b0>)
 8000fba:	ed93 7a00 	vldr	s14, [r3]
 8000fbe:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001048 <HCSR04_GetInfo+0x1b8>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	edc3 7a04 	vstr	s15, [r3, #16]
		HCSR04_DATA->distance_inch = distance/(float)2.54;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HCSR04_GetInfo+0x1b0>)
 8000fce:	ed93 7a00 	vldr	s14, [r3]
 8000fd2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800104c <HCSR04_GetInfo+0x1bc>
 8000fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	edc3 7a05 	vstr	s15, [r3, #20]

		HCSR04_DATA->duration_us = duration;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HCSR04_GetInfo+0x1a8>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	605a      	str	r2, [r3, #4]
		HCSR04_DATA->duration_ms = duration/1000;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HCSR04_GetInfo+0x1a8>)
 8000fea:	ed93 7a00 	vldr	s14, [r3]
 8000fee:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001050 <HCSR04_GetInfo+0x1c0>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200000b8 	.word	0x200000b8
 8001008:	2000016c 	.word	0x2000016c
 800100c:	20000150 	.word	0x20000150
 8001010:	40010000 	.word	0x40010000
 8001014:	20000104 	.word	0x20000104
 8001018:	200001b8 	.word	0x200001b8
 800101c:	20000154 	.word	0x20000154
 8001020:	20000158 	.word	0x20000158
 8001024:	40020000 	.word	0x40020000
 8001028:	20000160 	.word	0x20000160
 800102c:	2000015c 	.word	0x2000015c
 8001030:	40021000 	.word	0x40021000
 8001034:	20000162 	.word	0x20000162
 8001038:	20000164 	.word	0x20000164
 800103c:	3d0c7e28 	.word	0x3d0c7e28
 8001040:	20000168 	.word	0x20000168
 8001044:	00000000 	.word	0x00000000
 8001048:	42c80000 	.word	0x42c80000
 800104c:	40228f5c 	.word	0x40228f5c
 8001050:	447a0000 	.word	0x447a0000

08001054 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f80c 	bl	8001084 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4619      	mov	r1, r3
 8001076:	4610      	mov	r0, r2
 8001078:	f002 fbee 	bl	8003858 <HAL_TIM_PWM_Start>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8001090:	edd7 7a00 	vldr	s15, [r7]
 8001094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	d503      	bpl.n	80010a6 <PWM_WriteDuty+0x22>
    duty = 0.0;
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	e00a      	b.n	80010bc <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 80010a6:	edd7 7a00 	vldr	s15, [r7]
 80010aa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001168 <PWM_WriteDuty+0xe4>
 80010ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	dd01      	ble.n	80010bc <PWM_WriteDuty+0x38>
    duty = 100.0f;
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <PWM_WriteDuty+0xe8>)
 80010ba:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ca:	3301      	adds	r3, #1
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d4:	edd7 7a00 	vldr	s15, [r7]
 80010d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010dc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001168 <PWM_WriteDuty+0xe4>
 80010e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e8:	ee17 3a90 	vmov	r3, s15
 80010ec:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d105      	bne.n	8001102 <PWM_WriteDuty+0x7e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001100:	e02c      	b.n	800115c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d105      	bne.n	8001116 <PWM_WriteDuty+0x92>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001114:	e022      	b.n	800115c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b08      	cmp	r3, #8
 800111c:	d105      	bne.n	800112a <PWM_WriteDuty+0xa6>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001128:	e018      	b.n	800115c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b0c      	cmp	r3, #12
 8001130:	d105      	bne.n	800113e <PWM_WriteDuty+0xba>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800113c:	e00e      	b.n	800115c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b10      	cmp	r3, #16
 8001144:	d105      	bne.n	8001152 <PWM_WriteDuty+0xce>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001150:	e004      	b.n	800115c <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	42c80000 	.word	0x42c80000
 800116c:	42c80000 	.word	0x42c80000

08001170 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM1_Init(void);
static void MX_TIM9_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

    HCSR04_TIM_PEC(htim);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fe23 	bl	8000dc4 <HCSR04_TIM_PEC>

}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_UART_RxCpltCallback+0x48>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d117      	bne.n	80011c8 <HAL_UART_RxCpltCallback+0x40>
  {
	SERVO_WritePosition(&hservo1, 180 - strtol((char*)tx_buffer, 0, 10));
 8001198:	220a      	movs	r2, #10
 800119a:	2100      	movs	r1, #0
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <HAL_UART_RxCpltCallback+0x4c>)
 800119e:	f004 ff95 	bl	80060cc <strtol>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <HAL_UART_RxCpltCallback+0x50>)
 80011b6:	f7ff fd6f 	bl	8000c98 <SERVO_WritePosition>
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 80011ba:	2303      	movs	r3, #3
 80011bc:	b29b      	uxth	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	4904      	ldr	r1, [pc, #16]	; (80011d4 <HAL_UART_RxCpltCallback+0x4c>)
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <HAL_UART_RxCpltCallback+0x48>)
 80011c4:	f003 fcf6 	bl	8004bb4 <HAL_UART_Receive_IT>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000250 	.word	0x20000250
 80011d4:	200002f8 	.word	0x200002f8
 80011d8:	20000018 	.word	0x20000018

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f000 fd03 	bl	8001bea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f83e 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 f9e4 	bl	80015b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011ec:	f000 f9b2 	bl	8001554 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80011f0:	f000 f8a6 	bl	8001340 <MX_TIM1_Init>
  MX_TIM9_Init();
 80011f4:	f000 f94c 	bl	8001490 <MX_TIM9_Init>
  MX_TIM2_Init();
 80011f8:	f000 f8fc 	bl	80013f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HCSR04_Init();
 80011fc:	f7ff fd8a 	bl	8000d14 <HCSR04_Init>
  SERVO_Init(&hservo1);
 8001200:	4811      	ldr	r0, [pc, #68]	; (8001248 <main+0x6c>)
 8001202:	f7ff fd35 	bl	8000c70 <SERVO_Init>
  SERVO_WritePosition(&hservo1, 130.0f);
 8001206:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800124c <main+0x70>
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <main+0x6c>)
 800120c:	f7ff fd44 	bl	8000c98 <SERVO_WritePosition>
 HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8001210:	2303      	movs	r3, #3
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	490e      	ldr	r1, [pc, #56]	; (8001250 <main+0x74>)
 8001218:	480e      	ldr	r0, [pc, #56]	; (8001254 <main+0x78>)
 800121a:	f003 fccb 	bl	8004bb4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HCSR04_GetInfo(&HCSR04_sensor);
 800121e:	480e      	ldr	r0, [pc, #56]	; (8001258 <main+0x7c>)
 8001220:	f7ff fe36 	bl	8000e90 <HCSR04_GetInfo>

      tx_us = HCSR04_sensor.duration_us;  //the time duration(us) of the signal obtained from echo pin (transmission + reception).
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <main+0x7c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <main+0x80>)
 800122a:	6013      	str	r3, [r2, #0]
      dx_cm = HCSR04_sensor.distance_cm;  //the distance in cm.
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <main+0x7c>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <main+0x84>)
 8001232:	6013      	str	r3, [r2, #0]

      HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f000 fd34 	bl	8001ca4 <HAL_Delay>
      PID(&HCSR04_sensor,&hservo1);
 800123c:	4902      	ldr	r1, [pc, #8]	; (8001248 <main+0x6c>)
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <main+0x7c>)
 8001240:	f7ff fc96 	bl	8000b70 <PID>
      HCSR04_GetInfo(&HCSR04_sensor);
 8001244:	e7eb      	b.n	800121e <main+0x42>
 8001246:	bf00      	nop
 8001248:	20000018 	.word	0x20000018
 800124c:	43020000 	.word	0x43020000
 8001250:	200002f8 	.word	0x200002f8
 8001254:	20000250 	.word	0x20000250
 8001258:	200002e0 	.word	0x200002e0
 800125c:	200002d8 	.word	0x200002d8
 8001260:	200002dc 	.word	0x200002dc

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b094      	sub	sp, #80	; 0x50
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	2230      	movs	r2, #48	; 0x30
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f004 ff34 	bl	80060e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001288:	f001 f89a 	bl	80023c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <SystemClock_Config+0xd4>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a29      	ldr	r2, [pc, #164]	; (8001338 <SystemClock_Config+0xd4>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <SystemClock_Config+0xd4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <SystemClock_Config+0xd8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a24      	ldr	r2, [pc, #144]	; (800133c <SystemClock_Config+0xd8>)
 80012aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <SystemClock_Config+0xd8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c6:	2302      	movs	r3, #2
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012d4:	23d8      	movs	r3, #216	; 0xd8
 80012d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d8:	2302      	movs	r3, #2
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012dc:	2309      	movs	r3, #9
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 f8cb 	bl	8002480 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012f0:	f000 faa2 	bl	8001838 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012f4:	f001 f874 	bl	80023e0 <HAL_PWREx_EnableOverDrive>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012fe:	f000 fa9b 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001302:	230f      	movs	r3, #15
 8001304:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001306:	2302      	movs	r3, #2
 8001308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800130e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001312:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001314:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001318:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2107      	movs	r1, #7
 8001320:	4618      	mov	r0, r3
 8001322:	f001 fb51 	bl	80029c8 <HAL_RCC_ClockConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800132c:	f000 fa84 	bl	8001838 <Error_Handler>
  }
}
 8001330:	bf00      	nop
 8001332:	3750      	adds	r7, #80	; 0x50
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000

08001340 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_TIM1_Init+0xac>)
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MX_TIM1_Init+0xb0>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_TIM1_Init+0xac>)
 8001368:	226b      	movs	r2, #107	; 0x6b
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_TIM1_Init+0xac>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_TIM1_Init+0xac>)
 8001374:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM1_Init+0xac>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM1_Init+0xac>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_TIM1_Init+0xac>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <MX_TIM1_Init+0xac>)
 800138e:	f002 f931 	bl	80035f4 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001398:	f000 fa4e 	bl	8001838 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800139c:	2305      	movs	r3, #5
 800139e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013a0:	2350      	movs	r3, #80	; 0x50
 80013a2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	4619      	mov	r1, r3
 80013b2:	480e      	ldr	r0, [pc, #56]	; (80013ec <MX_TIM1_Init+0xac>)
 80013b4:	f002 fe48 	bl	8004048 <HAL_TIM_SlaveConfigSynchro>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013be:	f000 fa3b 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_TIM1_Init+0xac>)
 80013d4:	f003 faf4 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80013de:	f000 fa2b 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000016c 	.word	0x2000016c
 80013f0:	40010000 	.word	0x40010000

080013f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_TIM2_Init+0x94>)
 8001414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001418:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_TIM2_Init+0x94>)
 800141c:	226b      	movs	r2, #107	; 0x6b
 800141e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_TIM2_Init+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_TIM2_Init+0x94>)
 8001428:	4a18      	ldr	r2, [pc, #96]	; (800148c <MX_TIM2_Init+0x98>)
 800142a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_TIM2_Init+0x94>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_TIM2_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_TIM2_Init+0x94>)
 800143a:	f002 f8db 	bl	80035f4 <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001444:	f000 f9f8 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4619      	mov	r1, r3
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <MX_TIM2_Init+0x94>)
 8001456:	f002 fd2d 	bl	8003eb4 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001460:	f000 f9ea 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_TIM2_Init+0x94>)
 8001472:	f003 faa5 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800147c:	f000 f9dc 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200001b8 	.word	0x200001b8
 800148c:	00030d3f 	.word	0x00030d3f

08001490 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <MX_TIM9_Init+0xbc>)
 80014b8:	4a25      	ldr	r2, [pc, #148]	; (8001550 <MX_TIM9_Init+0xc0>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <MX_TIM9_Init+0xbc>)
 80014be:	226b      	movs	r2, #107	; 0x6b
 80014c0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <MX_TIM9_Init+0xbc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <MX_TIM9_Init+0xbc>)
 80014ca:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014ce:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_TIM9_Init+0xbc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_TIM9_Init+0xbc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80014dc:	481b      	ldr	r0, [pc, #108]	; (800154c <MX_TIM9_Init+0xbc>)
 80014de:	f002 f889 	bl	80035f4 <HAL_TIM_Base_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80014e8:	f000 f9a6 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	4619      	mov	r1, r3
 80014f8:	4814      	ldr	r0, [pc, #80]	; (800154c <MX_TIM9_Init+0xbc>)
 80014fa:	f002 fcdb 	bl	8003eb4 <HAL_TIM_ConfigClockSource>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001504:	f000 f998 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001508:	4810      	ldr	r0, [pc, #64]	; (800154c <MX_TIM9_Init+0xbc>)
 800150a:	f002 f943 	bl	8003794 <HAL_TIM_PWM_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001514:	f000 f990 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001518:	2360      	movs	r3, #96	; 0x60
 800151a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	4619      	mov	r1, r3
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM9_Init+0xbc>)
 8001530:	f002 fbac 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800153a:	f000 f97d 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM9_Init+0xbc>)
 8001540:	f000 fa26 	bl	8001990 <HAL_TIM_MspPostInit>

}
 8001544:	bf00      	nop
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000204 	.word	0x20000204
 8001550:	40014000 	.word	0x40014000

08001554 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_USART3_UART_Init+0x58>)
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <MX_USART3_UART_Init+0x5c>)
 800155c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_USART3_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART3_UART_Init+0x58>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART3_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART3_UART_Init+0x58>)
 8001598:	f003 fabe 	bl	8004b18 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015a2:	f000 f949 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000250 	.word	0x20000250
 80015b0:	40004800 	.word	0x40004800

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	; 0x30
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ca:	4b96      	ldr	r3, [pc, #600]	; (8001824 <MX_GPIO_Init+0x270>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a95      	ldr	r2, [pc, #596]	; (8001824 <MX_GPIO_Init+0x270>)
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b93      	ldr	r3, [pc, #588]	; (8001824 <MX_GPIO_Init+0x270>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	4b90      	ldr	r3, [pc, #576]	; (8001824 <MX_GPIO_Init+0x270>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a8f      	ldr	r2, [pc, #572]	; (8001824 <MX_GPIO_Init+0x270>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b8d      	ldr	r3, [pc, #564]	; (8001824 <MX_GPIO_Init+0x270>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	4b8a      	ldr	r3, [pc, #552]	; (8001824 <MX_GPIO_Init+0x270>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a89      	ldr	r2, [pc, #548]	; (8001824 <MX_GPIO_Init+0x270>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b87      	ldr	r3, [pc, #540]	; (8001824 <MX_GPIO_Init+0x270>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b84      	ldr	r3, [pc, #528]	; (8001824 <MX_GPIO_Init+0x270>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a83      	ldr	r2, [pc, #524]	; (8001824 <MX_GPIO_Init+0x270>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b81      	ldr	r3, [pc, #516]	; (8001824 <MX_GPIO_Init+0x270>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4b7e      	ldr	r3, [pc, #504]	; (8001824 <MX_GPIO_Init+0x270>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a7d      	ldr	r2, [pc, #500]	; (8001824 <MX_GPIO_Init+0x270>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b7b      	ldr	r3, [pc, #492]	; (8001824 <MX_GPIO_Init+0x270>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001642:	4b78      	ldr	r3, [pc, #480]	; (8001824 <MX_GPIO_Init+0x270>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a77      	ldr	r2, [pc, #476]	; (8001824 <MX_GPIO_Init+0x270>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b75      	ldr	r3, [pc, #468]	; (8001824 <MX_GPIO_Init+0x270>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800165a:	4b72      	ldr	r3, [pc, #456]	; (8001824 <MX_GPIO_Init+0x270>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a71      	ldr	r2, [pc, #452]	; (8001824 <MX_GPIO_Init+0x270>)
 8001660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b6f      	ldr	r3, [pc, #444]	; (8001824 <MX_GPIO_Init+0x270>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2101      	movs	r1, #1
 8001676:	486c      	ldr	r0, [pc, #432]	; (8001828 <MX_GPIO_Init+0x274>)
 8001678:	f000 fe88 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	486a      	ldr	r0, [pc, #424]	; (800182c <MX_GPIO_Init+0x278>)
 8001682:	f000 fe83 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f244 0181 	movw	r1, #16513	; 0x4081
 800168c:	4868      	ldr	r0, [pc, #416]	; (8001830 <MX_GPIO_Init+0x27c>)
 800168e:	f000 fe7d 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2140      	movs	r1, #64	; 0x40
 8001696:	4867      	ldr	r0, [pc, #412]	; (8001834 <MX_GPIO_Init+0x280>)
 8001698:	f000 fe78 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800169c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	485d      	ldr	r0, [pc, #372]	; (8001828 <MX_GPIO_Init+0x274>)
 80016b4:	f000 fcbe 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b8:	2301      	movs	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	4856      	ldr	r0, [pc, #344]	; (8001828 <MX_GPIO_Init+0x274>)
 80016d0:	f000 fcb0 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016d4:	2332      	movs	r3, #50	; 0x32
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e4:	230b      	movs	r3, #11
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	484e      	ldr	r0, [pc, #312]	; (8001828 <MX_GPIO_Init+0x274>)
 80016f0:	f000 fca0 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016f4:	2386      	movs	r3, #134	; 0x86
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001704:	230b      	movs	r3, #11
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	4847      	ldr	r0, [pc, #284]	; (800182c <MX_GPIO_Init+0x278>)
 8001710:	f000 fc90 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001714:	2308      	movs	r3, #8
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	4841      	ldr	r0, [pc, #260]	; (800182c <MX_GPIO_Init+0x278>)
 8001728:	f000 fc84 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	483a      	ldr	r0, [pc, #232]	; (800182c <MX_GPIO_Init+0x278>)
 8001744:	f000 fc76 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001748:	f244 0381 	movw	r3, #16513	; 0x4081
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4619      	mov	r1, r3
 8001760:	4833      	ldr	r0, [pc, #204]	; (8001830 <MX_GPIO_Init+0x27c>)
 8001762:	f000 fc67 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001778:	230b      	movs	r3, #11
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	482b      	ldr	r0, [pc, #172]	; (8001830 <MX_GPIO_Init+0x27c>)
 8001784:	f000 fc56 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001788:	2340      	movs	r3, #64	; 0x40
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4825      	ldr	r0, [pc, #148]	; (8001834 <MX_GPIO_Init+0x280>)
 80017a0:	f000 fc48 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	481f      	ldr	r0, [pc, #124]	; (8001834 <MX_GPIO_Init+0x280>)
 80017b8:	f000 fc3c 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017ce:	230a      	movs	r3, #10
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4814      	ldr	r0, [pc, #80]	; (800182c <MX_GPIO_Init+0x278>)
 80017da:	f000 fc2b 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <MX_GPIO_Init+0x278>)
 80017f4:	f000 fc1e 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800180a:	230b      	movs	r3, #11
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <MX_GPIO_Init+0x280>)
 8001816:	f000 fc0d 	bl	8002034 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800181a:	bf00      	nop
 800181c:	3730      	adds	r7, #48	; 0x30
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40020800 	.word	0x40020800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40021800 	.word	0x40021800

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	e7fe      	b.n	8001840 <Error_Handler+0x8>
	...

08001844 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_MspInit+0x44>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <HAL_MspInit+0x44>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_MspInit+0x44>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_MspInit+0x44>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <HAL_MspInit+0x44>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_MspInit+0x44>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a35      	ldr	r2, [pc, #212]	; (8001980 <HAL_TIM_Base_MspInit+0xf4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d141      	bne.n	8001932 <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a34      	ldr	r2, [pc, #208]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4823      	ldr	r0, [pc, #140]	; (8001988 <HAL_TIM_Base_MspInit+0xfc>)
 80018fc:	f000 fb9a 	bl	8002034 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2019      	movs	r0, #25
 8001906:	f000 facc 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800190a:	2019      	movs	r0, #25
 800190c:	f000 fae5 	bl	8001eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	201a      	movs	r0, #26
 8001916:	f000 fac4 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800191a:	201a      	movs	r0, #26
 800191c:	f000 fadd 	bl	8001eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	201b      	movs	r0, #27
 8001926:	f000 fabc 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800192a:	201b      	movs	r0, #27
 800192c:	f000 fad5 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001930:	e022      	b.n	8001978 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193a:	d10c      	bne.n	8001956 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
}
 8001954:	e010      	b.n	8001978 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM9)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_TIM_Base_MspInit+0x100>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d10b      	bne.n	8001978 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 8001966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196a:	6453      	str	r3, [r2, #68]	; 0x44
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_TIM_Base_MspInit+0xf8>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	bf00      	nop
 800197a:	3730      	adds	r7, #48	; 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40010000 	.word	0x40010000
 8001984:	40023800 	.word	0x40023800
 8001988:	40021000 	.word	0x40021000
 800198c:	40014000 	.word	0x40014000

08001990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_TIM_MspPostInit+0x64>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d11b      	bne.n	80019ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_TIM_MspPostInit+0x68>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <HAL_TIM_MspPostInit+0x68>)
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_TIM_MspPostInit+0x68>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80019ca:	2320      	movs	r3, #32
 80019cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80019da:	2303      	movs	r3, #3
 80019dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <HAL_TIM_MspPostInit+0x6c>)
 80019e6:	f000 fb25 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80019ea:	bf00      	nop
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40014000 	.word	0x40014000
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0aa      	sub	sp, #168	; 0xa8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	2284      	movs	r2, #132	; 0x84
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f004 fb5d 	bl	80060e0 <memset>
  if(huart->Instance==USART3)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <HAL_UART_MspInit+0xc4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d144      	bne.n	8001aba <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3a:	f107 0310 	add.w	r3, r7, #16
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 f9e8 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a4a:	f7ff fef5 	bl	8001838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a98:	2307      	movs	r3, #7
 8001a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <HAL_UART_MspInit+0xcc>)
 8001aa6:	f000 fac5 	bl	8002034 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	2027      	movs	r0, #39	; 0x27
 8001ab0:	f000 f9f7 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ab4:	2027      	movs	r0, #39	; 0x27
 8001ab6:	f000 fa10 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	37a8      	adds	r7, #168	; 0xa8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40004800 	.word	0x40004800
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020c00 	.word	0x40020c00

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <UsageFault_Handler+0x4>

08001aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1c:	f000 f8a2 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b2a:	f001 ff8f 	bl	8003a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000016c 	.word	0x2000016c

08001b38 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b3e:	f001 ff85 	bl	8003a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000016c 	.word	0x2000016c

08001b4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM1_CC_IRQHandler+0x10>)
 8001b52:	f001 ff7b 	bl	8003a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000016c 	.word	0x2000016c

08001b60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <USART3_IRQHandler+0x10>)
 8001b66:	f003 f869 	bl	8004c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000250 	.word	0x20000250

08001b74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bc2:	f7ff ffd7 	bl	8001b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f004 fa99 	bl	80060fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bca:	f7ff fb07 	bl	80011dc <main>
  bx  lr    
 8001bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001bdc:	08006348 	.word	0x08006348
  ldr r2, =_sbss
 8001be0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001be4:	20000438 	.word	0x20000438

08001be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC_IRQHandler>

08001bea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bee:	2003      	movs	r0, #3
 8001bf0:	f000 f94c 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f000 f805 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfa:	f7ff fe23 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f967 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 f92f 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000028 	.word	0x20000028
 8001c5c:	20000030 	.word	0x20000030
 8001c60:	2000002c 	.word	0x2000002c

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000030 	.word	0x20000030
 8001c88:	200002fc 	.word	0x200002fc

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200002fc 	.word	0x200002fc

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000030 	.word	0x20000030

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <__NVIC_SetPriorityGrouping+0x40>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__NVIC_SetPriorityGrouping+0x40>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00
 8001d30:	05fa0000 	.word	0x05fa0000

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff feb6 	bl	8001c8c <HAL_GetTick>
 8001f20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d008      	beq.n	8001f40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2280      	movs	r2, #128	; 0x80
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e052      	b.n	8001fe6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0216 	bic.w	r2, r2, #22
 8001f4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <HAL_DMA_Abort+0x62>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0208 	bic.w	r2, r2, #8
 8001f7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f90:	e013      	b.n	8001fba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f92:	f7ff fe7b 	bl	8001c8c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d90c      	bls.n	8001fba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e015      	b.n	8001fe6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e4      	bne.n	8001f92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	223f      	movs	r2, #63	; 0x3f
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d004      	beq.n	800200c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e00c      	b.n	8002026 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2205      	movs	r2, #5
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e175      	b.n	8002340 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8164 	bne.w	800233a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x56>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80be 	beq.w	800233a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	4b66      	ldr	r3, [pc, #408]	; (8002358 <HAL_GPIO_Init+0x324>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a65      	ldr	r2, [pc, #404]	; (8002358 <HAL_GPIO_Init+0x324>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_GPIO_Init+0x324>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021d6:	4a61      	ldr	r2, [pc, #388]	; (800235c <HAL_GPIO_Init+0x328>)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	220f      	movs	r2, #15
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_GPIO_Init+0x32c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d037      	beq.n	8002272 <HAL_GPIO_Init+0x23e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a57      	ldr	r2, [pc, #348]	; (8002364 <HAL_GPIO_Init+0x330>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d031      	beq.n	800226e <HAL_GPIO_Init+0x23a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a56      	ldr	r2, [pc, #344]	; (8002368 <HAL_GPIO_Init+0x334>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <HAL_GPIO_Init+0x236>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a55      	ldr	r2, [pc, #340]	; (800236c <HAL_GPIO_Init+0x338>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d025      	beq.n	8002266 <HAL_GPIO_Init+0x232>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a54      	ldr	r2, [pc, #336]	; (8002370 <HAL_GPIO_Init+0x33c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01f      	beq.n	8002262 <HAL_GPIO_Init+0x22e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a53      	ldr	r2, [pc, #332]	; (8002374 <HAL_GPIO_Init+0x340>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_Init+0x22a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_GPIO_Init+0x344>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0x226>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_GPIO_Init+0x348>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_Init+0x222>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_GPIO_Init+0x34c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_Init+0x21e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4f      	ldr	r2, [pc, #316]	; (8002384 <HAL_GPIO_Init+0x350>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_Init+0x21a>
 800224a:	2309      	movs	r3, #9
 800224c:	e012      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800224e:	230a      	movs	r3, #10
 8002250:	e010      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002252:	2308      	movs	r3, #8
 8002254:	e00e      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002256:	2307      	movs	r3, #7
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800225a:	2306      	movs	r3, #6
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002272:	2300      	movs	r3, #0
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002284:	4935      	ldr	r1, [pc, #212]	; (800235c <HAL_GPIO_Init+0x328>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_GPIO_Init+0x354>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a34      	ldr	r2, [pc, #208]	; (8002388 <HAL_GPIO_Init+0x354>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b32      	ldr	r3, [pc, #200]	; (8002388 <HAL_GPIO_Init+0x354>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a29      	ldr	r2, [pc, #164]	; (8002388 <HAL_GPIO_Init+0x354>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_GPIO_Init+0x354>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230a:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <HAL_GPIO_Init+0x354>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_GPIO_Init+0x354>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <HAL_GPIO_Init+0x354>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f ae86 	bls.w	8002054 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40021400 	.word	0x40021400
 8002378:	40021800 	.word	0x40021800
 800237c:	40021c00 	.word	0x40021c00
 8002380:	40022000 	.word	0x40022000
 8002384:	40022400 	.word	0x40022400
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
 8002398:	4613      	mov	r3, r2
 800239a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023a8:	e003      	b.n	80023b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	041a      	lsls	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40007000 	.word	0x40007000

080023e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_PWREx_EnableOverDrive+0x98>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240e:	f7ff fc3d 	bl	8001c8c <HAL_GetTick>
 8002412:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002414:	e009      	b.n	800242a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002416:	f7ff fc39 	bl	8001c8c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002424:	d901      	bls.n	800242a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e022      	b.n	8002470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002436:	d1ee      	bne.n	8002416 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0f      	ldr	r2, [pc, #60]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 800243e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002444:	f7ff fc22 	bl	8001c8c <HAL_GetTick>
 8002448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800244a:	e009      	b.n	8002460 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800244c:	f7ff fc1e 	bl	8001c8c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800245a:	d901      	bls.n	8002460 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e007      	b.n	8002470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800246c:	d1ee      	bne.n	800244c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000

08002480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e291      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8087 	beq.w	80025b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a4:	4b96      	ldr	r3, [pc, #600]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00c      	beq.n	80024ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b0:	4b93      	ldr	r3, [pc, #588]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d112      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62>
 80024bc:	4b90      	ldr	r3, [pc, #576]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c8:	d10b      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ca:	4b8d      	ldr	r3, [pc, #564]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d06c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x130>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d168      	bne.n	80025b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e26b      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x7a>
 80024ec:	4b84      	ldr	r3, [pc, #528]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a83      	ldr	r2, [pc, #524]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e02e      	b.n	8002558 <HAL_RCC_OscConfig+0xd8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x9c>
 8002502:	4b7f      	ldr	r3, [pc, #508]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7e      	ldr	r2, [pc, #504]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b7c      	ldr	r3, [pc, #496]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7b      	ldr	r2, [pc, #492]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xd8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0xc0>
 8002526:	4b76      	ldr	r3, [pc, #472]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a75      	ldr	r2, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b73      	ldr	r3, [pc, #460]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a72      	ldr	r2, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xd8>
 8002540:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6e      	ldr	r2, [pc, #440]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6b      	ldr	r2, [pc, #428]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff fb94 	bl	8001c8c <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fb90 	bl	8001c8c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e21f      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b61      	ldr	r3, [pc, #388]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xe8>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff fb80 	bl	8001c8c <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff fb7c 	bl	8001c8c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e20b      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b57      	ldr	r3, [pc, #348]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x110>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d069      	beq.n	8002692 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x190>
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x17a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1df      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	493d      	ldr	r1, [pc, #244]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e040      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d023      	beq.n	8002660 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a38      	ldr	r2, [pc, #224]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff fb32 	bl	8001c8c <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262c:	f7ff fb2e 	bl	8001c8c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1bd      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4929      	ldr	r1, [pc, #164]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
 800265e:	e018      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a26      	ldr	r2, [pc, #152]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7ff fb0e 	bl	8001c8c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002674:	f7ff fb0a 	bl	8001c8c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e199      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d038      	beq.n	8002710 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d019      	beq.n	80026da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7ff faeb 	bl	8001c8c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ba:	f7ff fae7 	bl	8001c8c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e176      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x23a>
 80026d8:	e01a      	b.n	8002710 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_RCC_OscConfig+0x280>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7ff fad1 	bl	8001c8c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ee:	f7ff facd 	bl	8001c8c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d903      	bls.n	8002704 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e15c      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
 8002700:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	4b91      	ldr	r3, [pc, #580]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ee      	bne.n	80026ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a4 	beq.w	8002866 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271e:	4b8b      	ldr	r3, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10d      	bne.n	8002746 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a87      	ldr	r2, [pc, #540]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b85      	ldr	r3, [pc, #532]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002746:	4b82      	ldr	r3, [pc, #520]	; (8002950 <HAL_RCC_OscConfig+0x4d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d118      	bne.n	8002784 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002752:	4b7f      	ldr	r3, [pc, #508]	; (8002950 <HAL_RCC_OscConfig+0x4d0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7e      	ldr	r2, [pc, #504]	; (8002950 <HAL_RCC_OscConfig+0x4d0>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275e:	f7ff fa95 	bl	8001c8c <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002766:	f7ff fa91 	bl	8001c8c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b64      	cmp	r3, #100	; 0x64
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e120      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002778:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x4d0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x31a>
 800278c:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	e02d      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x33c>
 80027a2:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a69      	ldr	r2, [pc, #420]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a66      	ldr	r2, [pc, #408]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	e01c      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d10c      	bne.n	80027de <HAL_RCC_OscConfig+0x35e>
 80027c4:	4b61      	ldr	r3, [pc, #388]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a60      	ldr	r2, [pc, #384]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	4b5e      	ldr	r3, [pc, #376]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a5d      	ldr	r2, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
 80027dc:	e00b      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
 80027de:	4b5b      	ldr	r3, [pc, #364]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a5a      	ldr	r2, [pc, #360]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	4b58      	ldr	r3, [pc, #352]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a57      	ldr	r2, [pc, #348]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d015      	beq.n	800282a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7ff fa45 	bl	8001c8c <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7ff fa41 	bl	8001c8c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0ce      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	4b4b      	ldr	r3, [pc, #300]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ee      	beq.n	8002806 <HAL_RCC_OscConfig+0x386>
 8002828:	e014      	b.n	8002854 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7ff fa2f 	bl	8001c8c <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff fa2b 	bl	8001c8c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0b8      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	4b40      	ldr	r3, [pc, #256]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ee      	bne.n	8002832 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285a:	4b3c      	ldr	r3, [pc, #240]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a3b      	ldr	r2, [pc, #236]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80a4 	beq.w	80029b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d06b      	beq.n	8002954 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d149      	bne.n	8002918 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800288a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7ff f9fc 	bl	8001c8c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7ff f9f8 	bl	8001c8c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e087      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	3b01      	subs	r3, #1
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	4313      	orrs	r3, r2
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7ff f9cc 	bl	8001c8c <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7ff f9c8 	bl	8001c8c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e057      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x478>
 8002916:	e04f      	b.n	80029b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800291e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f9b2 	bl	8001c8c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff f9ae 	bl	8001c8c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e03d      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x4ac>
 800294a:	e035      	b.n	80029b8 <HAL_RCC_OscConfig+0x538>
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x544>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d028      	beq.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d121      	bne.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d11a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800298a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0d0      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b67      	ldr	r3, [pc, #412]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 020f 	bic.w	r2, r3, #15
 80029f6:	4965      	ldr	r1, [pc, #404]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0b8      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d020      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a28:	4b59      	ldr	r3, [pc, #356]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a58      	ldr	r2, [pc, #352]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a40:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4c:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	494d      	ldr	r1, [pc, #308]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d040      	beq.n	8002aec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d115      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e07f      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e073      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e06b      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4936      	ldr	r1, [pc, #216]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abc:	f7ff f8e6 	bl	8001c8c <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7ff f8e2 	bl	8001c8c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e053      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d210      	bcs.n	8002b1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 020f 	bic.w	r2, r3, #15
 8002b02:	4922      	ldr	r1, [pc, #136]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e032      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4916      	ldr	r1, [pc, #88]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	490e      	ldr	r1, [pc, #56]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b5a:	f000 f821 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	490a      	ldr	r1, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x1cc>)
 8002b6c:	5ccb      	ldrb	r3, [r1, r3]
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1d0>)
 8002b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_ClockConfig+0x1d4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff f842 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023c00 	.word	0x40023c00
 8002b90:	40023800 	.word	0x40023800
 8002b94:	0800621c 	.word	0x0800621c
 8002b98:	20000028 	.word	0x20000028
 8002b9c:	2000002c 	.word	0x2000002c

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba4:	b094      	sub	sp, #80	; 0x50
 8002ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	647b      	str	r3, [r7, #68]	; 0x44
 8002bac:	2300      	movs	r3, #0
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb8:	4b79      	ldr	r3, [pc, #484]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d00d      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	f200 80e1 	bhi.w	8002d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d003      	beq.n	8002bda <HAL_RCC_GetSysClockFreq+0x3a>
 8002bd2:	e0db      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b73      	ldr	r3, [pc, #460]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd8:	e0db      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bda:	4b73      	ldr	r3, [pc, #460]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bde:	e0d8      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be0:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bea:	4b6d      	ldr	r3, [pc, #436]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d063      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c12:	4622      	mov	r2, r4
 8002c14:	462b      	mov	r3, r5
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	0159      	lsls	r1, r3, #5
 8002c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c24:	0150      	lsls	r0, r2, #5
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	1a51      	subs	r1, r2, r1
 8002c2e:	6139      	str	r1, [r7, #16]
 8002c30:	4629      	mov	r1, r5
 8002c32:	eb63 0301 	sbc.w	r3, r3, r1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c44:	4659      	mov	r1, fp
 8002c46:	018b      	lsls	r3, r1, #6
 8002c48:	4651      	mov	r1, sl
 8002c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c4e:	4651      	mov	r1, sl
 8002c50:	018a      	lsls	r2, r1, #6
 8002c52:	4651      	mov	r1, sl
 8002c54:	ebb2 0801 	subs.w	r8, r2, r1
 8002c58:	4659      	mov	r1, fp
 8002c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c72:	4690      	mov	r8, r2
 8002c74:	4699      	mov	r9, r3
 8002c76:	4623      	mov	r3, r4
 8002c78:	eb18 0303 	adds.w	r3, r8, r3
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	462b      	mov	r3, r5
 8002c80:	eb49 0303 	adc.w	r3, r9, r3
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c92:	4629      	mov	r1, r5
 8002c94:	024b      	lsls	r3, r1, #9
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	024a      	lsls	r2, r1, #9
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cb0:	f7fd fde0 	bl	8000874 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cbc:	e058      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	4611      	mov	r1, r2
 8002cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cd8:	4642      	mov	r2, r8
 8002cda:	464b      	mov	r3, r9
 8002cdc:	f04f 0000 	mov.w	r0, #0
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	0159      	lsls	r1, r3, #5
 8002ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cea:	0150      	lsls	r0, r2, #5
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4641      	mov	r1, r8
 8002cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d10:	ebb2 040a 	subs.w	r4, r2, sl
 8002d14:	eb63 050b 	sbc.w	r5, r3, fp
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	00eb      	lsls	r3, r5, #3
 8002d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d26:	00e2      	lsls	r2, r4, #3
 8002d28:	4614      	mov	r4, r2
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	18e3      	adds	r3, r4, r3
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	464b      	mov	r3, r9
 8002d34:	eb45 0303 	adc.w	r3, r5, r3
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d46:	4629      	mov	r1, r5
 8002d48:	028b      	lsls	r3, r1, #10
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d50:	4621      	mov	r1, r4
 8002d52:	028a      	lsls	r2, r1, #10
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	61fa      	str	r2, [r7, #28]
 8002d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d64:	f7fd fd86 	bl	8000874 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d8a:	e002      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3750      	adds	r7, #80	; 0x50
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	00f42400 	.word	0x00f42400
 8002da8:	007a1200 	.word	0x007a1200

08002dac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000028 	.word	0x20000028

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc8:	f7ff fff0 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	0a9b      	lsrs	r3, r3, #10
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	0800622c 	.word	0x0800622c

08002dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df0:	f7ff ffdc 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	0b5b      	lsrs	r3, r3, #13
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	0800622c 	.word	0x0800622c

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e3c:	4b69      	ldr	r3, [pc, #420]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a68      	ldr	r2, [pc, #416]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e46:	6093      	str	r3, [r2, #8]
 8002e48:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	4964      	ldr	r1, [pc, #400]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d017      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e6e:	4b5d      	ldr	r3, [pc, #372]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	4959      	ldr	r1, [pc, #356]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d017      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eaa:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	494a      	ldr	r1, [pc, #296]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 808b 	beq.w	800300e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	4a39      	ldr	r2, [pc, #228]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6413      	str	r3, [r2, #64]	; 0x40
 8002f04:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe feb6 	bl	8001c8c <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f24:	f7fe feb2 	bl	8001c8c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e357      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f42:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d035      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d02e      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d114      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fe7a 	bl	8001c8c <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fe76 	bl	8001c8c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e319      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ee      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fca:	d111      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fda:	400b      	ands	r3, r1
 8002fdc:	4901      	ldr	r1, [pc, #4]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	0ffffcff 	.word	0x0ffffcff
 8002ff0:	4baa      	ldr	r3, [pc, #680]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4aa9      	ldr	r2, [pc, #676]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ffa:	6093      	str	r3, [r2, #8]
 8002ffc:	4ba7      	ldr	r3, [pc, #668]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	49a4      	ldr	r1, [pc, #656]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300a:	4313      	orrs	r3, r2
 800300c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d010      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800301a:	4ba0      	ldr	r3, [pc, #640]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800301c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003020:	4a9e      	ldr	r2, [pc, #632]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003026:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800302a:	4b9c      	ldr	r3, [pc, #624]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	4999      	ldr	r1, [pc, #612]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003048:	4b94      	ldr	r3, [pc, #592]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003056:	4991      	ldr	r1, [pc, #580]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800306a:	4b8c      	ldr	r3, [pc, #560]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003078:	4988      	ldr	r1, [pc, #544]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800308c:	4b83      	ldr	r3, [pc, #524]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309a:	4980      	ldr	r1, [pc, #512]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030ae:	4b7b      	ldr	r3, [pc, #492]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4977      	ldr	r1, [pc, #476]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d0:	4b72      	ldr	r3, [pc, #456]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	496f      	ldr	r1, [pc, #444]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f2:	4b6a      	ldr	r3, [pc, #424]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f023 020c 	bic.w	r2, r3, #12
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003100:	4966      	ldr	r1, [pc, #408]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003114:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	495e      	ldr	r1, [pc, #376]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003136:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003144:	4955      	ldr	r1, [pc, #340]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	494d      	ldr	r1, [pc, #308]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800317a:	4b48      	ldr	r3, [pc, #288]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	4944      	ldr	r1, [pc, #272]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800319c:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	493c      	ldr	r1, [pc, #240]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031cc:	4933      	ldr	r1, [pc, #204]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ee:	492b      	ldr	r1, [pc, #172]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d011      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003210:	4922      	ldr	r1, [pc, #136]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003220:	d101      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003222:	2301      	movs	r3, #1
 8003224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	4912      	ldr	r1, [pc, #72]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003264:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003274:	4909      	ldr	r1, [pc, #36]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d006      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80d9 	beq.w	8003442 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003290:	4b02      	ldr	r3, [pc, #8]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a01      	ldr	r2, [pc, #4]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003296:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800329a:	e001      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800329c:	40023800 	.word	0x40023800
 80032a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a2:	f7fe fcf3 	bl	8001c8c <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032aa:	f7fe fcef 	bl	8001c8c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e194      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032bc:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f0      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d021      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11d      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032dc:	4b64      	ldr	r3, [pc, #400]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	019a      	lsls	r2, r3, #6
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	4957      	ldr	r1, [pc, #348]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003342:	d129      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003344:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003358:	0f1b      	lsrs	r3, r3, #28
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	019a      	lsls	r2, r3, #6
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	071b      	lsls	r3, r3, #28
 8003378:	493d      	ldr	r1, [pc, #244]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003386:	f023 021f 	bic.w	r2, r3, #31
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	3b01      	subs	r3, #1
 8003390:	4937      	ldr	r1, [pc, #220]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01d      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	0e1b      	lsrs	r3, r3, #24
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033b2:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b8:	0f1b      	lsrs	r3, r3, #28
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	019a      	lsls	r2, r3, #6
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	041b      	lsls	r3, r3, #16
 80033cc:	431a      	orrs	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	071b      	lsls	r3, r3, #28
 80033d8:	4925      	ldr	r1, [pc, #148]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d011      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	019a      	lsls	r2, r3, #6
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	071b      	lsls	r3, r3, #28
 8003408:	4919      	ldr	r1, [pc, #100]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800341a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fe fc36 	bl	8001c8c <HAL_GetTick>
 8003420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003424:	f7fe fc32 	bl	8001c8c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0d7      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 80cd 	bne.w	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a08      	ldr	r2, [pc, #32]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003456:	f7fe fc19 	bl	8001c8c <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800345e:	f7fe fc15 	bl	8001c8c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d903      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0ba      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003470:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003480:	d0ed      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02e      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12a      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034aa:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	0f1b      	lsrs	r3, r3, #28
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	019a      	lsls	r2, r3, #6
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	4944      	ldr	r1, [pc, #272]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034e6:	4b42      	ldr	r3, [pc, #264]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	493d      	ldr	r1, [pc, #244]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d022      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003514:	d11d      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	0e1b      	lsrs	r3, r3, #24
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	0f1b      	lsrs	r3, r3, #28
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	019a      	lsls	r2, r3, #6
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	4929      	ldr	r1, [pc, #164]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d028      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	0e1b      	lsrs	r3, r3, #24
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	019a      	lsls	r2, r3, #6
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	431a      	orrs	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	071b      	lsls	r3, r3, #28
 8003592:	4917      	ldr	r1, [pc, #92]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	4911      	ldr	r1, [pc, #68]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035bc:	f7fe fb66 	bl	8001c8c <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035c4:	f7fe fb62 	bl	8001c8c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e007      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e2:	d1ef      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e049      	b.n	800369a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fe f936 	bl	800188c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fd72 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d001      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e054      	b.n	8003766 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <HAL_TIM_Base_Start_IT+0xd0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d022      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e6:	d01d      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a22      	ldr	r2, [pc, #136]	; (8003778 <HAL_TIM_Base_Start_IT+0xd4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d018      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a21      	ldr	r2, [pc, #132]	; (800377c <HAL_TIM_Base_Start_IT+0xd8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_TIM_Base_Start_IT+0xdc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <HAL_TIM_Base_Start_IT+0xe0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d009      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <HAL_TIM_Base_Start_IT+0xe4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1b      	ldr	r2, [pc, #108]	; (800378c <HAL_TIM_Base_Start_IT+0xe8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d115      	bne.n	8003750 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	4b19      	ldr	r3, [pc, #100]	; (8003790 <HAL_TIM_Base_Start_IT+0xec>)
 800372c:	4013      	ands	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b06      	cmp	r3, #6
 8003734:	d015      	beq.n	8003762 <HAL_TIM_Base_Start_IT+0xbe>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d011      	beq.n	8003762 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	e008      	b.n	8003762 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e000      	b.n	8003764 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40010400 	.word	0x40010400
 8003788:	40014000 	.word	0x40014000
 800378c:	40001800 	.word	0x40001800
 8003790:	00010007 	.word	0x00010007

08003794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e049      	b.n	800383a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f841 	bl	8003842 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f000 fca2 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d109      	bne.n	800387c <HAL_TIM_PWM_Start+0x24>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e03c      	b.n	80038f6 <HAL_TIM_PWM_Start+0x9e>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d109      	bne.n	8003896 <HAL_TIM_PWM_Start+0x3e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e02f      	b.n	80038f6 <HAL_TIM_PWM_Start+0x9e>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d109      	bne.n	80038b0 <HAL_TIM_PWM_Start+0x58>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e022      	b.n	80038f6 <HAL_TIM_PWM_Start+0x9e>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	d109      	bne.n	80038ca <HAL_TIM_PWM_Start+0x72>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	bf14      	ite	ne
 80038c2:	2301      	movne	r3, #1
 80038c4:	2300      	moveq	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	e015      	b.n	80038f6 <HAL_TIM_PWM_Start+0x9e>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d109      	bne.n	80038e4 <HAL_TIM_PWM_Start+0x8c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	bf14      	ite	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	2300      	moveq	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e008      	b.n	80038f6 <HAL_TIM_PWM_Start+0x9e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e092      	b.n	8003a24 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_TIM_PWM_Start+0xb6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800390c:	e023      	b.n	8003956 <HAL_TIM_PWM_Start+0xfe>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d104      	bne.n	800391e <HAL_TIM_PWM_Start+0xc6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391c:	e01b      	b.n	8003956 <HAL_TIM_PWM_Start+0xfe>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d104      	bne.n	800392e <HAL_TIM_PWM_Start+0xd6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800392c:	e013      	b.n	8003956 <HAL_TIM_PWM_Start+0xfe>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d104      	bne.n	800393e <HAL_TIM_PWM_Start+0xe6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800393c:	e00b      	b.n	8003956 <HAL_TIM_PWM_Start+0xfe>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b10      	cmp	r3, #16
 8003942:	d104      	bne.n	800394e <HAL_TIM_PWM_Start+0xf6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800394c:	e003      	b.n	8003956 <HAL_TIM_PWM_Start+0xfe>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	6839      	ldr	r1, [r7, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f001 f808 	bl	8004974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a30      	ldr	r2, [pc, #192]	; (8003a2c <HAL_TIM_PWM_Start+0x1d4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_TIM_PWM_Start+0x120>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2f      	ldr	r2, [pc, #188]	; (8003a30 <HAL_TIM_PWM_Start+0x1d8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_TIM_PWM_Start+0x124>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_TIM_PWM_Start+0x126>
 800397c:	2300      	movs	r3, #0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <HAL_TIM_PWM_Start+0x1d4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x18a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d01d      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x18a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <HAL_TIM_PWM_Start+0x1dc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d018      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x18a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <HAL_TIM_PWM_Start+0x1e0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x18a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <HAL_TIM_PWM_Start+0x1e4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x18a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a19      	ldr	r2, [pc, #100]	; (8003a30 <HAL_TIM_PWM_Start+0x1d8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x18a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <HAL_TIM_PWM_Start+0x1e8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x18a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <HAL_TIM_PWM_Start+0x1ec>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d115      	bne.n	8003a0e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <HAL_TIM_PWM_Start+0x1f0>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b06      	cmp	r3, #6
 80039f2:	d015      	beq.n	8003a20 <HAL_TIM_PWM_Start+0x1c8>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fa:	d011      	beq.n	8003a20 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0c:	e008      	b.n	8003a20 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e000      	b.n	8003a22 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40010400 	.word	0x40010400
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40001800 	.word	0x40001800
 8003a48:	00010007 	.word	0x00010007

08003a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d122      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d11b      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0202 	mvn.w	r2, #2
 8003a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fb26 	bl	80040e0 <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fb18 	bl	80040cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fb29 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d122      	bne.n	8003afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d11b      	bne.n	8003afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0204 	mvn.w	r2, #4
 8003acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fafc 	bl	80040e0 <HAL_TIM_IC_CaptureCallback>
 8003ae8:	e005      	b.n	8003af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 faee 	bl	80040cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 faff 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d122      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d11b      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0208 	mvn.w	r2, #8
 8003b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2204      	movs	r2, #4
 8003b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fad2 	bl	80040e0 <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fac4 	bl	80040cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fad5 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d122      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0210 	mvn.w	r2, #16
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 faa8 	bl	80040e0 <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fa9a 	bl	80040cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 faab 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10e      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d107      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0201 	mvn.w	r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fad0 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b80      	cmp	r3, #128	; 0x80
 8003bdc:	d10e      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d107      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 ff7a 	bl	8004af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0a:	d10e      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d107      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 ff6d 	bl	8004b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d10e      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fa59 	bl	8004108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d10e      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d107      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f06f 0220 	mvn.w	r2, #32
 8003c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 ff2d 	bl	8004adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0ff      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b14      	cmp	r3, #20
 8003cb6:	f200 80f0 	bhi.w	8003e9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003e9b 	.word	0x08003e9b
 8003cc8:	08003e9b 	.word	0x08003e9b
 8003ccc:	08003e9b 	.word	0x08003e9b
 8003cd0:	08003d55 	.word	0x08003d55
 8003cd4:	08003e9b 	.word	0x08003e9b
 8003cd8:	08003e9b 	.word	0x08003e9b
 8003cdc:	08003e9b 	.word	0x08003e9b
 8003ce0:	08003d97 	.word	0x08003d97
 8003ce4:	08003e9b 	.word	0x08003e9b
 8003ce8:	08003e9b 	.word	0x08003e9b
 8003cec:	08003e9b 	.word	0x08003e9b
 8003cf0:	08003dd7 	.word	0x08003dd7
 8003cf4:	08003e9b 	.word	0x08003e9b
 8003cf8:	08003e9b 	.word	0x08003e9b
 8003cfc:	08003e9b 	.word	0x08003e9b
 8003d00:	08003e19 	.word	0x08003e19
 8003d04:	08003e9b 	.word	0x08003e9b
 8003d08:	08003e9b 	.word	0x08003e9b
 8003d0c:	08003e9b 	.word	0x08003e9b
 8003d10:	08003e59 	.word	0x08003e59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fa9e 	bl	800425c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0208 	orr.w	r2, r2, #8
 8003d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0204 	bic.w	r2, r2, #4
 8003d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	619a      	str	r2, [r3, #24]
      break;
 8003d52:	e0a5      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 faf0 	bl	8004340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6999      	ldr	r1, [r3, #24]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	021a      	lsls	r2, r3, #8
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	619a      	str	r2, [r3, #24]
      break;
 8003d94:	e084      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fb47 	bl	8004430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0208 	orr.w	r2, r2, #8
 8003db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0204 	bic.w	r2, r2, #4
 8003dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69d9      	ldr	r1, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	61da      	str	r2, [r3, #28]
      break;
 8003dd4:	e064      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fb9d 	bl	800451c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69d9      	ldr	r1, [r3, #28]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	021a      	lsls	r2, r3, #8
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	61da      	str	r2, [r3, #28]
      break;
 8003e16:	e043      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fbd4 	bl	80045cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0208 	orr.w	r2, r2, #8
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e56:	e023      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc06 	bl	8004670 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e98:	e002      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop

08003eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e0b4      	b.n	800403a <HAL_TIM_ConfigClockSource+0x186>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_TIM_ConfigClockSource+0x190>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f08:	d03e      	beq.n	8003f88 <HAL_TIM_ConfigClockSource+0xd4>
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0e:	f200 8087 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	f000 8086 	beq.w	8004026 <HAL_TIM_ConfigClockSource+0x172>
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1e:	d87f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b70      	cmp	r3, #112	; 0x70
 8003f22:	d01a      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0xa6>
 8003f24:	2b70      	cmp	r3, #112	; 0x70
 8003f26:	d87b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b60      	cmp	r3, #96	; 0x60
 8003f2a:	d050      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x11a>
 8003f2c:	2b60      	cmp	r3, #96	; 0x60
 8003f2e:	d877      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b50      	cmp	r3, #80	; 0x50
 8003f32:	d03c      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0xfa>
 8003f34:	2b50      	cmp	r3, #80	; 0x50
 8003f36:	d873      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d058      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x13a>
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d86f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b30      	cmp	r3, #48	; 0x30
 8003f42:	d064      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	2b30      	cmp	r3, #48	; 0x30
 8003f46:	d86b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d060      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d867      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d05c      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d05a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f58:	e062      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f6a:	f000 fce3 	bl	8004934 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	609a      	str	r2, [r3, #8]
      break;
 8003f86:	e04f      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f98:	f000 fccc 	bl	8004934 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003faa:	609a      	str	r2, [r3, #8]
      break;
 8003fac:	e03c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 fc40 	bl	8004840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2150      	movs	r1, #80	; 0x50
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fc99 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e02c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 fc5f 	bl	800489e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2160      	movs	r1, #96	; 0x60
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fc89 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 8003fec:	e01c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 fc20 	bl	8004840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2140      	movs	r1, #64	; 0x40
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fc79 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 800400c:	e00c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f000 fc70 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 800401e:	e003      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      break;
 8004024:	e000      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	fffeff88 	.word	0xfffeff88

08004048 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIM_SlaveConfigSynchro+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e031      	b.n	80040c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fb50 	bl	8004718 <TIM_SlaveTimer_SetConfig>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e018      	b.n	80040c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a40      	ldr	r2, [pc, #256]	; (8004230 <TIM_Base_SetConfig+0x114>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d00f      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a3d      	ldr	r2, [pc, #244]	; (8004234 <TIM_Base_SetConfig+0x118>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a3c      	ldr	r2, [pc, #240]	; (8004238 <TIM_Base_SetConfig+0x11c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a3b      	ldr	r2, [pc, #236]	; (800423c <TIM_Base_SetConfig+0x120>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3a      	ldr	r2, [pc, #232]	; (8004240 <TIM_Base_SetConfig+0x124>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2f      	ldr	r2, [pc, #188]	; (8004230 <TIM_Base_SetConfig+0x114>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d02b      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417c:	d027      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2c      	ldr	r2, [pc, #176]	; (8004234 <TIM_Base_SetConfig+0x118>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d023      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <TIM_Base_SetConfig+0x11c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01f      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2a      	ldr	r2, [pc, #168]	; (800423c <TIM_Base_SetConfig+0x120>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01b      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a29      	ldr	r2, [pc, #164]	; (8004240 <TIM_Base_SetConfig+0x124>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d017      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a28      	ldr	r2, [pc, #160]	; (8004244 <TIM_Base_SetConfig+0x128>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a27      	ldr	r2, [pc, #156]	; (8004248 <TIM_Base_SetConfig+0x12c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00f      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a26      	ldr	r2, [pc, #152]	; (800424c <TIM_Base_SetConfig+0x130>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a25      	ldr	r2, [pc, #148]	; (8004250 <TIM_Base_SetConfig+0x134>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a24      	ldr	r2, [pc, #144]	; (8004254 <TIM_Base_SetConfig+0x138>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a23      	ldr	r2, [pc, #140]	; (8004258 <TIM_Base_SetConfig+0x13c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d108      	bne.n	80041e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0a      	ldr	r2, [pc, #40]	; (8004230 <TIM_Base_SetConfig+0x114>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0xf8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <TIM_Base_SetConfig+0x124>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d103      	bne.n	800421c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	615a      	str	r2, [r3, #20]
}
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40010000 	.word	0x40010000
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800
 800423c:	40000c00 	.word	0x40000c00
 8004240:	40010400 	.word	0x40010400
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800
 8004250:	40001800 	.word	0x40001800
 8004254:	40001c00 	.word	0x40001c00
 8004258:	40002000 	.word	0x40002000

0800425c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f023 0201 	bic.w	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <TIM_OC1_SetConfig+0xd8>)
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f023 0302 	bic.w	r3, r3, #2
 80042a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a21      	ldr	r2, [pc, #132]	; (8004338 <TIM_OC1_SetConfig+0xdc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_OC1_SetConfig+0x64>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a20      	ldr	r2, [pc, #128]	; (800433c <TIM_OC1_SetConfig+0xe0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10c      	bne.n	80042da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f023 0308 	bic.w	r3, r3, #8
 80042c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f023 0304 	bic.w	r3, r3, #4
 80042d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a16      	ldr	r2, [pc, #88]	; (8004338 <TIM_OC1_SetConfig+0xdc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_OC1_SetConfig+0x8e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a15      	ldr	r2, [pc, #84]	; (800433c <TIM_OC1_SetConfig+0xe0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d111      	bne.n	800430e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	621a      	str	r2, [r3, #32]
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	fffeff8f 	.word	0xfffeff8f
 8004338:	40010000 	.word	0x40010000
 800433c:	40010400 	.word	0x40010400

08004340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0210 	bic.w	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <TIM_OC2_SetConfig+0xe4>)
 800436c:	4013      	ands	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0320 	bic.w	r3, r3, #32
 800438a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a23      	ldr	r2, [pc, #140]	; (8004428 <TIM_OC2_SetConfig+0xe8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_OC2_SetConfig+0x68>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a22      	ldr	r2, [pc, #136]	; (800442c <TIM_OC2_SetConfig+0xec>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10d      	bne.n	80043c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a18      	ldr	r2, [pc, #96]	; (8004428 <TIM_OC2_SetConfig+0xe8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_OC2_SetConfig+0x94>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <TIM_OC2_SetConfig+0xec>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d113      	bne.n	80043fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	621a      	str	r2, [r3, #32]
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	feff8fff 	.word	0xfeff8fff
 8004428:	40010000 	.word	0x40010000
 800442c:	40010400 	.word	0x40010400

08004430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <TIM_OC3_SetConfig+0xe0>)
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0303 	bic.w	r3, r3, #3
 8004466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a22      	ldr	r2, [pc, #136]	; (8004514 <TIM_OC3_SetConfig+0xe4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <TIM_OC3_SetConfig+0x66>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a21      	ldr	r2, [pc, #132]	; (8004518 <TIM_OC3_SetConfig+0xe8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10d      	bne.n	80044b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800449c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <TIM_OC3_SetConfig+0xe4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_OC3_SetConfig+0x92>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a16      	ldr	r2, [pc, #88]	; (8004518 <TIM_OC3_SetConfig+0xe8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d113      	bne.n	80044ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	fffeff8f 	.word	0xfffeff8f
 8004514:	40010000 	.word	0x40010000
 8004518:	40010400 	.word	0x40010400

0800451c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <TIM_OC4_SetConfig+0xa4>)
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	031b      	lsls	r3, r3, #12
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <TIM_OC4_SetConfig+0xa8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_OC4_SetConfig+0x68>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <TIM_OC4_SetConfig+0xac>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d109      	bne.n	8004598 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800458a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	feff8fff 	.word	0xfeff8fff
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40010400 	.word	0x40010400

080045cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <TIM_OC5_SetConfig+0x98>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800460c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a12      	ldr	r2, [pc, #72]	; (8004668 <TIM_OC5_SetConfig+0x9c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_OC5_SetConfig+0x5e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a11      	ldr	r2, [pc, #68]	; (800466c <TIM_OC5_SetConfig+0xa0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d109      	bne.n	800463e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	fffeff8f 	.word	0xfffeff8f
 8004668:	40010000 	.word	0x40010000
 800466c:	40010400 	.word	0x40010400

08004670 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4b1c      	ldr	r3, [pc, #112]	; (800470c <TIM_OC6_SetConfig+0x9c>)
 800469c:	4013      	ands	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	051b      	lsls	r3, r3, #20
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a13      	ldr	r2, [pc, #76]	; (8004710 <TIM_OC6_SetConfig+0xa0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d003      	beq.n	80046d0 <TIM_OC6_SetConfig+0x60>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a12      	ldr	r2, [pc, #72]	; (8004714 <TIM_OC6_SetConfig+0xa4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d109      	bne.n	80046e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	feff8fff 	.word	0xfeff8fff
 8004710:	40010000 	.word	0x40010000
 8004714:	40010400 	.word	0x40010400

08004718 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4b3e      	ldr	r3, [pc, #248]	; (800483c <TIM_SlaveTimer_SetConfig+0x124>)
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b70      	cmp	r3, #112	; 0x70
 8004760:	d01a      	beq.n	8004798 <TIM_SlaveTimer_SetConfig+0x80>
 8004762:	2b70      	cmp	r3, #112	; 0x70
 8004764:	d860      	bhi.n	8004828 <TIM_SlaveTimer_SetConfig+0x110>
 8004766:	2b60      	cmp	r3, #96	; 0x60
 8004768:	d054      	beq.n	8004814 <TIM_SlaveTimer_SetConfig+0xfc>
 800476a:	2b60      	cmp	r3, #96	; 0x60
 800476c:	d85c      	bhi.n	8004828 <TIM_SlaveTimer_SetConfig+0x110>
 800476e:	2b50      	cmp	r3, #80	; 0x50
 8004770:	d046      	beq.n	8004800 <TIM_SlaveTimer_SetConfig+0xe8>
 8004772:	2b50      	cmp	r3, #80	; 0x50
 8004774:	d858      	bhi.n	8004828 <TIM_SlaveTimer_SetConfig+0x110>
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d019      	beq.n	80047ae <TIM_SlaveTimer_SetConfig+0x96>
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d854      	bhi.n	8004828 <TIM_SlaveTimer_SetConfig+0x110>
 800477e:	2b30      	cmp	r3, #48	; 0x30
 8004780:	d055      	beq.n	800482e <TIM_SlaveTimer_SetConfig+0x116>
 8004782:	2b30      	cmp	r3, #48	; 0x30
 8004784:	d850      	bhi.n	8004828 <TIM_SlaveTimer_SetConfig+0x110>
 8004786:	2b20      	cmp	r3, #32
 8004788:	d051      	beq.n	800482e <TIM_SlaveTimer_SetConfig+0x116>
 800478a:	2b20      	cmp	r3, #32
 800478c:	d84c      	bhi.n	8004828 <TIM_SlaveTimer_SetConfig+0x110>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04d      	beq.n	800482e <TIM_SlaveTimer_SetConfig+0x116>
 8004792:	2b10      	cmp	r3, #16
 8004794:	d04b      	beq.n	800482e <TIM_SlaveTimer_SetConfig+0x116>
 8004796:	e047      	b.n	8004828 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80047a8:	f000 f8c4 	bl	8004934 <TIM_ETR_SetConfig>
      break;
 80047ac:	e040      	b.n	8004830 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d101      	bne.n	80047ba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e03b      	b.n	8004832 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047e0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
      break;
 80047fe:	e017      	b.n	8004830 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480c:	461a      	mov	r2, r3
 800480e:	f000 f817 	bl	8004840 <TIM_TI1_ConfigInputStage>
      break;
 8004812:	e00d      	b.n	8004830 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004820:	461a      	mov	r2, r3
 8004822:	f000 f83c 	bl	800489e <TIM_TI2_ConfigInputStage>
      break;
 8004826:	e003      	b.n	8004830 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
      break;
 800482c:	e000      	b.n	8004830 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800482e:	bf00      	nop
  }

  return status;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	fffefff8 	.word	0xfffefff8

08004840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f023 0201 	bic.w	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 030a 	bic.w	r3, r3, #10
 800487c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800489e:	b480      	push	{r7}
 80048a0:	b087      	sub	sp, #28
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0210 	bic.w	r2, r3, #16
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	031b      	lsls	r3, r3, #12
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	f043 0307 	orr.w	r3, r3, #7
 8004920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800494e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	021a      	lsls	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	431a      	orrs	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4313      	orrs	r3, r2
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2201      	movs	r2, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	43db      	mvns	r3, r3
 8004996:	401a      	ands	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e06d      	b.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a30      	ldr	r2, [pc, #192]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2f      	ldr	r2, [pc, #188]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d108      	bne.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d022      	beq.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d01d      	beq.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d018      	beq.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00e      	beq.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a16      	ldr	r2, [pc, #88]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d10c      	bne.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40010400 	.word	0x40010400
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40014000 	.word	0x40014000
 8004ad8:	40001800 	.word	0x40001800

08004adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e040      	b.n	8004bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc ff60 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2224      	movs	r2, #36	; 0x24
 8004b44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fb62 	bl	8005220 <UART_SetConfig>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e022      	b.n	8004bac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fdba 	bl	80056e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fe41 	bl	800582c <UART_CheckIdleState>
 8004baa:	4603      	mov	r3, r0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d132      	bne.n	8004c32 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Receive_IT+0x24>
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e02b      	b.n	8004c34 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d018      	beq.n	8004c22 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	623b      	str	r3, [r7, #32]
 8004c10:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	69f9      	ldr	r1, [r7, #28]
 8004c14:	6a3a      	ldr	r2, [r7, #32]
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e6      	bne.n	8004bf0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	461a      	mov	r2, r3
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fefd 	bl	8005a28 <UART_Start_Receive_IT>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	e000      	b.n	8004c34 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
  }
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3728      	adds	r7, #40	; 0x28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b0ba      	sub	sp, #232	; 0xe8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c66:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d115      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00f      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8297 	beq.w	80051c8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
      }
      return;
 8004ca2:	e291      	b.n	80051c8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8117 	beq.w	8004edc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004cbe:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_UART_IRQHandler+0x298>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 810a 	beq.w	8004edc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d011      	beq.n	8004cf8 <HAL_UART_IRQHandler+0xbc>
 8004cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cee:	f043 0201 	orr.w	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d011      	beq.n	8004d28 <HAL_UART_IRQHandler+0xec>
 8004d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00b      	beq.n	8004d28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2202      	movs	r2, #2
 8004d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d1e:	f043 0204 	orr.w	r2, r3, #4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d011      	beq.n	8004d58 <HAL_UART_IRQHandler+0x11c>
 8004d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2204      	movs	r2, #4
 8004d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4e:	f043 0202 	orr.w	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d017      	beq.n	8004d94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2208      	movs	r2, #8
 8004d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8a:	f043 0208 	orr.w	r2, r3, #8
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d012      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x18a>
 8004da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00c      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 81fd 	beq.w	80051cc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d005      	beq.n	8004e1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d04f      	beq.n	8004ebe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fec8 	bl	8005bb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	d141      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3308      	adds	r3, #8
 8004e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1d9      	bne.n	8004e32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d013      	beq.n	8004eae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8a:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <HAL_UART_IRQHandler+0x29c>)
 8004e8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd f8ab 	bl	8001fee <HAL_DMA_Abort_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d017      	beq.n	8004ece <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e00f      	b.n	8004ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f9a0 	bl	80051f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e00b      	b.n	8004ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f99c 	bl	80051f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	e007      	b.n	8004ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f998 	bl	80051f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004ecc:	e17e      	b.n	80051cc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ece:	bf00      	nop
    return;
 8004ed0:	e17c      	b.n	80051cc <HAL_UART_IRQHandler+0x590>
 8004ed2:	bf00      	nop
 8004ed4:	04000120 	.word	0x04000120
 8004ed8:	08005c7d 	.word	0x08005c7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	f040 814c 	bne.w	800517e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8145 	beq.w	800517e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 813e 	beq.w	800517e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2210      	movs	r2, #16
 8004f08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	f040 80b6 	bne.w	8005086 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8150 	beq.w	80051d0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	f080 8148 	bcs.w	80051d0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f54:	f000 8086 	beq.w	8005064 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1da      	bne.n	8004f58 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e1      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005002:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005004:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005008:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e3      	bne.n	8004fde <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005034:	f023 0310 	bic.w	r3, r3, #16
 8005038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005046:	65bb      	str	r3, [r7, #88]	; 0x58
 8005048:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800504c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e4      	bne.n	8005024 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505e:	4618      	mov	r0, r3
 8005060:	f7fc ff55 	bl	8001f0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005076:	b29b      	uxth	r3, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	b29b      	uxth	r3, r3
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8c2 	bl	8005208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005084:	e0a4      	b.n	80051d0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005092:	b29b      	uxth	r3, r3
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8096 	beq.w	80051d4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80050a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8091 	beq.w	80051d4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
 80050d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e4      	bne.n	80050b2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	623b      	str	r3, [r7, #32]
   return(result);
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800510c:	633a      	str	r2, [r7, #48]	; 0x30
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e3      	bne.n	80050e8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	60fb      	str	r3, [r7, #12]
   return(result);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f023 0310 	bic.w	r3, r3, #16
 8005148:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	69b9      	ldr	r1, [r7, #24]
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	617b      	str	r3, [r7, #20]
   return(result);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e4      	bne.n	8005134 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f846 	bl	8005208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800517c:	e02a      	b.n	80051d4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00e      	beq.n	80051a8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800518a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01c      	beq.n	80051d8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
    }
    return;
 80051a6:	e017      	b.n	80051d8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d012      	beq.n	80051da <HAL_UART_IRQHandler+0x59e>
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00c      	beq.n	80051da <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fd71 	bl	8005ca8 <UART_EndTransmit_IT>
    return;
 80051c6:	e008      	b.n	80051da <HAL_UART_IRQHandler+0x59e>
      return;
 80051c8:	bf00      	nop
 80051ca:	e006      	b.n	80051da <HAL_UART_IRQHandler+0x59e>
    return;
 80051cc:	bf00      	nop
 80051ce:	e004      	b.n	80051da <HAL_UART_IRQHandler+0x59e>
      return;
 80051d0:	bf00      	nop
 80051d2:	e002      	b.n	80051da <HAL_UART_IRQHandler+0x59e>
      return;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <HAL_UART_IRQHandler+0x59e>
    return;
 80051d8:	bf00      	nop
  }

}
 80051da:	37e8      	adds	r7, #232	; 0xe8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4ba6      	ldr	r3, [pc, #664]	; (80054e4 <UART_SetConfig+0x2c4>)
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	6979      	ldr	r1, [r7, #20]
 8005254:	430b      	orrs	r3, r1
 8005256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	430a      	orrs	r2, r1
 8005290:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a94      	ldr	r2, [pc, #592]	; (80054e8 <UART_SetConfig+0x2c8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d120      	bne.n	80052de <UART_SetConfig+0xbe>
 800529c:	4b93      	ldr	r3, [pc, #588]	; (80054ec <UART_SetConfig+0x2cc>)
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d816      	bhi.n	80052d8 <UART_SetConfig+0xb8>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <UART_SetConfig+0x90>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	080052c1 	.word	0x080052c1
 80052b4:	080052cd 	.word	0x080052cd
 80052b8:	080052c7 	.word	0x080052c7
 80052bc:	080052d3 	.word	0x080052d3
 80052c0:	2301      	movs	r3, #1
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e150      	b.n	8005568 <UART_SetConfig+0x348>
 80052c6:	2302      	movs	r3, #2
 80052c8:	77fb      	strb	r3, [r7, #31]
 80052ca:	e14d      	b.n	8005568 <UART_SetConfig+0x348>
 80052cc:	2304      	movs	r3, #4
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e14a      	b.n	8005568 <UART_SetConfig+0x348>
 80052d2:	2308      	movs	r3, #8
 80052d4:	77fb      	strb	r3, [r7, #31]
 80052d6:	e147      	b.n	8005568 <UART_SetConfig+0x348>
 80052d8:	2310      	movs	r3, #16
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e144      	b.n	8005568 <UART_SetConfig+0x348>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a83      	ldr	r2, [pc, #524]	; (80054f0 <UART_SetConfig+0x2d0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d132      	bne.n	800534e <UART_SetConfig+0x12e>
 80052e8:	4b80      	ldr	r3, [pc, #512]	; (80054ec <UART_SetConfig+0x2cc>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d828      	bhi.n	8005348 <UART_SetConfig+0x128>
 80052f6:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <UART_SetConfig+0xdc>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005349 	.word	0x08005349
 8005304:	08005349 	.word	0x08005349
 8005308:	08005349 	.word	0x08005349
 800530c:	0800533d 	.word	0x0800533d
 8005310:	08005349 	.word	0x08005349
 8005314:	08005349 	.word	0x08005349
 8005318:	08005349 	.word	0x08005349
 800531c:	08005337 	.word	0x08005337
 8005320:	08005349 	.word	0x08005349
 8005324:	08005349 	.word	0x08005349
 8005328:	08005349 	.word	0x08005349
 800532c:	08005343 	.word	0x08005343
 8005330:	2300      	movs	r3, #0
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e118      	b.n	8005568 <UART_SetConfig+0x348>
 8005336:	2302      	movs	r3, #2
 8005338:	77fb      	strb	r3, [r7, #31]
 800533a:	e115      	b.n	8005568 <UART_SetConfig+0x348>
 800533c:	2304      	movs	r3, #4
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	e112      	b.n	8005568 <UART_SetConfig+0x348>
 8005342:	2308      	movs	r3, #8
 8005344:	77fb      	strb	r3, [r7, #31]
 8005346:	e10f      	b.n	8005568 <UART_SetConfig+0x348>
 8005348:	2310      	movs	r3, #16
 800534a:	77fb      	strb	r3, [r7, #31]
 800534c:	e10c      	b.n	8005568 <UART_SetConfig+0x348>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a68      	ldr	r2, [pc, #416]	; (80054f4 <UART_SetConfig+0x2d4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d120      	bne.n	800539a <UART_SetConfig+0x17a>
 8005358:	4b64      	ldr	r3, [pc, #400]	; (80054ec <UART_SetConfig+0x2cc>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005362:	2b30      	cmp	r3, #48	; 0x30
 8005364:	d013      	beq.n	800538e <UART_SetConfig+0x16e>
 8005366:	2b30      	cmp	r3, #48	; 0x30
 8005368:	d814      	bhi.n	8005394 <UART_SetConfig+0x174>
 800536a:	2b20      	cmp	r3, #32
 800536c:	d009      	beq.n	8005382 <UART_SetConfig+0x162>
 800536e:	2b20      	cmp	r3, #32
 8005370:	d810      	bhi.n	8005394 <UART_SetConfig+0x174>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <UART_SetConfig+0x15c>
 8005376:	2b10      	cmp	r3, #16
 8005378:	d006      	beq.n	8005388 <UART_SetConfig+0x168>
 800537a:	e00b      	b.n	8005394 <UART_SetConfig+0x174>
 800537c:	2300      	movs	r3, #0
 800537e:	77fb      	strb	r3, [r7, #31]
 8005380:	e0f2      	b.n	8005568 <UART_SetConfig+0x348>
 8005382:	2302      	movs	r3, #2
 8005384:	77fb      	strb	r3, [r7, #31]
 8005386:	e0ef      	b.n	8005568 <UART_SetConfig+0x348>
 8005388:	2304      	movs	r3, #4
 800538a:	77fb      	strb	r3, [r7, #31]
 800538c:	e0ec      	b.n	8005568 <UART_SetConfig+0x348>
 800538e:	2308      	movs	r3, #8
 8005390:	77fb      	strb	r3, [r7, #31]
 8005392:	e0e9      	b.n	8005568 <UART_SetConfig+0x348>
 8005394:	2310      	movs	r3, #16
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e0e6      	b.n	8005568 <UART_SetConfig+0x348>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a56      	ldr	r2, [pc, #344]	; (80054f8 <UART_SetConfig+0x2d8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d120      	bne.n	80053e6 <UART_SetConfig+0x1c6>
 80053a4:	4b51      	ldr	r3, [pc, #324]	; (80054ec <UART_SetConfig+0x2cc>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053ae:	2bc0      	cmp	r3, #192	; 0xc0
 80053b0:	d013      	beq.n	80053da <UART_SetConfig+0x1ba>
 80053b2:	2bc0      	cmp	r3, #192	; 0xc0
 80053b4:	d814      	bhi.n	80053e0 <UART_SetConfig+0x1c0>
 80053b6:	2b80      	cmp	r3, #128	; 0x80
 80053b8:	d009      	beq.n	80053ce <UART_SetConfig+0x1ae>
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d810      	bhi.n	80053e0 <UART_SetConfig+0x1c0>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <UART_SetConfig+0x1a8>
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d006      	beq.n	80053d4 <UART_SetConfig+0x1b4>
 80053c6:	e00b      	b.n	80053e0 <UART_SetConfig+0x1c0>
 80053c8:	2300      	movs	r3, #0
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e0cc      	b.n	8005568 <UART_SetConfig+0x348>
 80053ce:	2302      	movs	r3, #2
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e0c9      	b.n	8005568 <UART_SetConfig+0x348>
 80053d4:	2304      	movs	r3, #4
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e0c6      	b.n	8005568 <UART_SetConfig+0x348>
 80053da:	2308      	movs	r3, #8
 80053dc:	77fb      	strb	r3, [r7, #31]
 80053de:	e0c3      	b.n	8005568 <UART_SetConfig+0x348>
 80053e0:	2310      	movs	r3, #16
 80053e2:	77fb      	strb	r3, [r7, #31]
 80053e4:	e0c0      	b.n	8005568 <UART_SetConfig+0x348>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a44      	ldr	r2, [pc, #272]	; (80054fc <UART_SetConfig+0x2dc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d125      	bne.n	800543c <UART_SetConfig+0x21c>
 80053f0:	4b3e      	ldr	r3, [pc, #248]	; (80054ec <UART_SetConfig+0x2cc>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053fe:	d017      	beq.n	8005430 <UART_SetConfig+0x210>
 8005400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005404:	d817      	bhi.n	8005436 <UART_SetConfig+0x216>
 8005406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800540a:	d00b      	beq.n	8005424 <UART_SetConfig+0x204>
 800540c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005410:	d811      	bhi.n	8005436 <UART_SetConfig+0x216>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <UART_SetConfig+0x1fe>
 8005416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800541a:	d006      	beq.n	800542a <UART_SetConfig+0x20a>
 800541c:	e00b      	b.n	8005436 <UART_SetConfig+0x216>
 800541e:	2300      	movs	r3, #0
 8005420:	77fb      	strb	r3, [r7, #31]
 8005422:	e0a1      	b.n	8005568 <UART_SetConfig+0x348>
 8005424:	2302      	movs	r3, #2
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e09e      	b.n	8005568 <UART_SetConfig+0x348>
 800542a:	2304      	movs	r3, #4
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e09b      	b.n	8005568 <UART_SetConfig+0x348>
 8005430:	2308      	movs	r3, #8
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e098      	b.n	8005568 <UART_SetConfig+0x348>
 8005436:	2310      	movs	r3, #16
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e095      	b.n	8005568 <UART_SetConfig+0x348>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2f      	ldr	r2, [pc, #188]	; (8005500 <UART_SetConfig+0x2e0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d125      	bne.n	8005492 <UART_SetConfig+0x272>
 8005446:	4b29      	ldr	r3, [pc, #164]	; (80054ec <UART_SetConfig+0x2cc>)
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005454:	d017      	beq.n	8005486 <UART_SetConfig+0x266>
 8005456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800545a:	d817      	bhi.n	800548c <UART_SetConfig+0x26c>
 800545c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005460:	d00b      	beq.n	800547a <UART_SetConfig+0x25a>
 8005462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005466:	d811      	bhi.n	800548c <UART_SetConfig+0x26c>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <UART_SetConfig+0x254>
 800546c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005470:	d006      	beq.n	8005480 <UART_SetConfig+0x260>
 8005472:	e00b      	b.n	800548c <UART_SetConfig+0x26c>
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e076      	b.n	8005568 <UART_SetConfig+0x348>
 800547a:	2302      	movs	r3, #2
 800547c:	77fb      	strb	r3, [r7, #31]
 800547e:	e073      	b.n	8005568 <UART_SetConfig+0x348>
 8005480:	2304      	movs	r3, #4
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e070      	b.n	8005568 <UART_SetConfig+0x348>
 8005486:	2308      	movs	r3, #8
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e06d      	b.n	8005568 <UART_SetConfig+0x348>
 800548c:	2310      	movs	r3, #16
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e06a      	b.n	8005568 <UART_SetConfig+0x348>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <UART_SetConfig+0x2e4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d138      	bne.n	800550e <UART_SetConfig+0x2ee>
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <UART_SetConfig+0x2cc>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054aa:	d017      	beq.n	80054dc <UART_SetConfig+0x2bc>
 80054ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054b0:	d82a      	bhi.n	8005508 <UART_SetConfig+0x2e8>
 80054b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b6:	d00b      	beq.n	80054d0 <UART_SetConfig+0x2b0>
 80054b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054bc:	d824      	bhi.n	8005508 <UART_SetConfig+0x2e8>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <UART_SetConfig+0x2aa>
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	d006      	beq.n	80054d6 <UART_SetConfig+0x2b6>
 80054c8:	e01e      	b.n	8005508 <UART_SetConfig+0x2e8>
 80054ca:	2300      	movs	r3, #0
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e04b      	b.n	8005568 <UART_SetConfig+0x348>
 80054d0:	2302      	movs	r3, #2
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e048      	b.n	8005568 <UART_SetConfig+0x348>
 80054d6:	2304      	movs	r3, #4
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e045      	b.n	8005568 <UART_SetConfig+0x348>
 80054dc:	2308      	movs	r3, #8
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e042      	b.n	8005568 <UART_SetConfig+0x348>
 80054e2:	bf00      	nop
 80054e4:	efff69f3 	.word	0xefff69f3
 80054e8:	40011000 	.word	0x40011000
 80054ec:	40023800 	.word	0x40023800
 80054f0:	40004400 	.word	0x40004400
 80054f4:	40004800 	.word	0x40004800
 80054f8:	40004c00 	.word	0x40004c00
 80054fc:	40005000 	.word	0x40005000
 8005500:	40011400 	.word	0x40011400
 8005504:	40007800 	.word	0x40007800
 8005508:	2310      	movs	r3, #16
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e02c      	b.n	8005568 <UART_SetConfig+0x348>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a72      	ldr	r2, [pc, #456]	; (80056dc <UART_SetConfig+0x4bc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d125      	bne.n	8005564 <UART_SetConfig+0x344>
 8005518:	4b71      	ldr	r3, [pc, #452]	; (80056e0 <UART_SetConfig+0x4c0>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005522:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005526:	d017      	beq.n	8005558 <UART_SetConfig+0x338>
 8005528:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800552c:	d817      	bhi.n	800555e <UART_SetConfig+0x33e>
 800552e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005532:	d00b      	beq.n	800554c <UART_SetConfig+0x32c>
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005538:	d811      	bhi.n	800555e <UART_SetConfig+0x33e>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <UART_SetConfig+0x326>
 800553e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005542:	d006      	beq.n	8005552 <UART_SetConfig+0x332>
 8005544:	e00b      	b.n	800555e <UART_SetConfig+0x33e>
 8005546:	2300      	movs	r3, #0
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e00d      	b.n	8005568 <UART_SetConfig+0x348>
 800554c:	2302      	movs	r3, #2
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e00a      	b.n	8005568 <UART_SetConfig+0x348>
 8005552:	2304      	movs	r3, #4
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e007      	b.n	8005568 <UART_SetConfig+0x348>
 8005558:	2308      	movs	r3, #8
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e004      	b.n	8005568 <UART_SetConfig+0x348>
 800555e:	2310      	movs	r3, #16
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e001      	b.n	8005568 <UART_SetConfig+0x348>
 8005564:	2310      	movs	r3, #16
 8005566:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005570:	d15b      	bne.n	800562a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005572:	7ffb      	ldrb	r3, [r7, #31]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d828      	bhi.n	80055ca <UART_SetConfig+0x3aa>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <UART_SetConfig+0x360>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055a5 	.word	0x080055a5
 8005584:	080055ad 	.word	0x080055ad
 8005588:	080055b5 	.word	0x080055b5
 800558c:	080055cb 	.word	0x080055cb
 8005590:	080055bb 	.word	0x080055bb
 8005594:	080055cb 	.word	0x080055cb
 8005598:	080055cb 	.word	0x080055cb
 800559c:	080055cb 	.word	0x080055cb
 80055a0:	080055c3 	.word	0x080055c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a4:	f7fd fc0e 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80055a8:	61b8      	str	r0, [r7, #24]
        break;
 80055aa:	e013      	b.n	80055d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ac:	f7fd fc1e 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 80055b0:	61b8      	str	r0, [r7, #24]
        break;
 80055b2:	e00f      	b.n	80055d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b4:	4b4b      	ldr	r3, [pc, #300]	; (80056e4 <UART_SetConfig+0x4c4>)
 80055b6:	61bb      	str	r3, [r7, #24]
        break;
 80055b8:	e00c      	b.n	80055d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ba:	f7fd faf1 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 80055be:	61b8      	str	r0, [r7, #24]
        break;
 80055c0:	e008      	b.n	80055d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c6:	61bb      	str	r3, [r7, #24]
        break;
 80055c8:	e004      	b.n	80055d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	77bb      	strb	r3, [r7, #30]
        break;
 80055d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d074      	beq.n	80056c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	005a      	lsls	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	085b      	lsrs	r3, r3, #1
 80055e4:	441a      	add	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b0f      	cmp	r3, #15
 80055f4:	d916      	bls.n	8005624 <UART_SetConfig+0x404>
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fc:	d212      	bcs.n	8005624 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f023 030f 	bic.w	r3, r3, #15
 8005606:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	b29b      	uxth	r3, r3
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	b29a      	uxth	r2, r3
 8005614:	89fb      	ldrh	r3, [r7, #14]
 8005616:	4313      	orrs	r3, r2
 8005618:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	89fa      	ldrh	r2, [r7, #14]
 8005620:	60da      	str	r2, [r3, #12]
 8005622:	e04f      	b.n	80056c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	77bb      	strb	r3, [r7, #30]
 8005628:	e04c      	b.n	80056c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800562a:	7ffb      	ldrb	r3, [r7, #31]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d828      	bhi.n	8005682 <UART_SetConfig+0x462>
 8005630:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <UART_SetConfig+0x418>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	0800565d 	.word	0x0800565d
 800563c:	08005665 	.word	0x08005665
 8005640:	0800566d 	.word	0x0800566d
 8005644:	08005683 	.word	0x08005683
 8005648:	08005673 	.word	0x08005673
 800564c:	08005683 	.word	0x08005683
 8005650:	08005683 	.word	0x08005683
 8005654:	08005683 	.word	0x08005683
 8005658:	0800567b 	.word	0x0800567b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800565c:	f7fd fbb2 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8005660:	61b8      	str	r0, [r7, #24]
        break;
 8005662:	e013      	b.n	800568c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7fd fbc2 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 8005668:	61b8      	str	r0, [r7, #24]
        break;
 800566a:	e00f      	b.n	800568c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800566c:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <UART_SetConfig+0x4c4>)
 800566e:	61bb      	str	r3, [r7, #24]
        break;
 8005670:	e00c      	b.n	800568c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005672:	f7fd fa95 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8005676:	61b8      	str	r0, [r7, #24]
        break;
 8005678:	e008      	b.n	800568c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567e:	61bb      	str	r3, [r7, #24]
        break;
 8005680:	e004      	b.n	800568c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	77bb      	strb	r3, [r7, #30]
        break;
 800568a:	bf00      	nop
    }

    if (pclk != 0U)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	085a      	lsrs	r2, r3, #1
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	441a      	add	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b0f      	cmp	r3, #15
 80056aa:	d909      	bls.n	80056c0 <UART_SetConfig+0x4a0>
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d205      	bcs.n	80056c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60da      	str	r2, [r3, #12]
 80056be:	e001      	b.n	80056c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40007c00 	.word	0x40007c00
 80056e0:	40023800 	.word	0x40023800
 80056e4:	00f42400 	.word	0x00f42400

080056e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01a      	beq.n	80057fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e6:	d10a      	bne.n	80057fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	605a      	str	r2, [r3, #4]
  }
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af02      	add	r7, sp, #8
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800583c:	f7fc fa26 	bl	8001c8c <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b08      	cmp	r3, #8
 800584e:	d10e      	bne.n	800586e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f81b 	bl	800589a <UART_WaitOnFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e011      	b.n	8005892 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b09c      	sub	sp, #112	; 0x70
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058aa:	e0a7      	b.n	80059fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	f000 80a3 	beq.w	80059fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b6:	f7fc f9e9 	bl	8001c8c <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <UART_WaitOnFlagUntilTimeout+0x32>
 80058c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d13f      	bne.n	800594c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058e0:	667b      	str	r3, [r7, #100]	; 0x64
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e6      	bne.n	80058cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	663b      	str	r3, [r7, #96]	; 0x60
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800591e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800592c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e5      	bne.n	80058fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e068      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d050      	beq.n	80059fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005968:	d148      	bne.n	80059fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005972:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005988:	66fb      	str	r3, [r7, #108]	; 0x6c
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
 8005994:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e6      	bne.n	8005974 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3308      	adds	r3, #8
 80059ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	613b      	str	r3, [r7, #16]
   return(result);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3308      	adds	r3, #8
 80059c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059c6:	623a      	str	r2, [r7, #32]
 80059c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	69f9      	ldr	r1, [r7, #28]
 80059cc:	6a3a      	ldr	r2, [r7, #32]
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e5      	bne.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e010      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	f43f af48 	beq.w	80058ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3770      	adds	r7, #112	; 0x70
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b097      	sub	sp, #92	; 0x5c
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	4613      	mov	r3, r2
 8005a34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	88fa      	ldrh	r2, [r7, #6]
 8005a48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5a:	d10e      	bne.n	8005a7a <UART_Start_Receive_IT+0x52>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <UART_Start_Receive_IT+0x48>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a6e:	e02d      	b.n	8005acc <UART_Start_Receive_IT+0xa4>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	22ff      	movs	r2, #255	; 0xff
 8005a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a78:	e028      	b.n	8005acc <UART_Start_Receive_IT+0xa4>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10d      	bne.n	8005a9e <UART_Start_Receive_IT+0x76>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <UART_Start_Receive_IT+0x6c>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	22ff      	movs	r2, #255	; 0xff
 8005a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a92:	e01b      	b.n	8005acc <UART_Start_Receive_IT+0xa4>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	227f      	movs	r2, #127	; 0x7f
 8005a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a9c:	e016      	b.n	8005acc <UART_Start_Receive_IT+0xa4>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aa6:	d10d      	bne.n	8005ac4 <UART_Start_Receive_IT+0x9c>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <UART_Start_Receive_IT+0x92>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	227f      	movs	r2, #127	; 0x7f
 8005ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ab8:	e008      	b.n	8005acc <UART_Start_Receive_IT+0xa4>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	223f      	movs	r2, #63	; 0x3f
 8005abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ac2:	e003      	b.n	8005acc <UART_Start_Receive_IT+0xa4>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2222      	movs	r2, #34	; 0x22
 8005ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	f043 0301 	orr.w	r3, r3, #1
 8005af2:	657b      	str	r3, [r7, #84]	; 0x54
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3308      	adds	r3, #8
 8005afa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005afc:	64ba      	str	r2, [r7, #72]	; 0x48
 8005afe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e5      	bne.n	8005adc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b18:	d107      	bne.n	8005b2a <UART_Start_Receive_IT+0x102>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d103      	bne.n	8005b2a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a21      	ldr	r2, [pc, #132]	; (8005bac <UART_Start_Receive_IT+0x184>)
 8005b26:	669a      	str	r2, [r3, #104]	; 0x68
 8005b28:	e002      	b.n	8005b30 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <UART_Start_Receive_IT+0x188>)
 8005b2e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d019      	beq.n	8005b6c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b56:	637b      	str	r3, [r7, #52]	; 0x34
 8005b58:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e6      	bne.n	8005b38 <UART_Start_Receive_IT+0x110>
 8005b6a:	e018      	b.n	8005b9e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f043 0320 	orr.w	r3, r3, #32
 8005b80:	653b      	str	r3, [r7, #80]	; 0x50
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8a:	623b      	str	r3, [r7, #32]
 8005b8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	69f9      	ldr	r1, [r7, #28]
 8005b90:	6a3a      	ldr	r2, [r7, #32]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e6      	bne.n	8005b6c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	375c      	adds	r7, #92	; 0x5c
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	08005e63 	.word	0x08005e63
 8005bb0:	08005cfd 	.word	0x08005cfd

08005bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b095      	sub	sp, #84	; 0x54
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bda:	643b      	str	r3, [r7, #64]	; 0x40
 8005bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e6      	bne.n	8005bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e5      	bne.n	8005bee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d118      	bne.n	8005c5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f023 0310 	bic.w	r3, r3, #16
 8005c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6979      	ldr	r1, [r7, #20]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	613b      	str	r3, [r7, #16]
   return(result);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e6      	bne.n	8005c2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c70:	bf00      	nop
 8005c72:	3754      	adds	r7, #84	; 0x54
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff faaa 	bl	80051f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	613b      	str	r3, [r7, #16]
   return(result);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e6      	bne.n	8005cb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff fa76 	bl	80051e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cf4:	bf00      	nop
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b096      	sub	sp, #88	; 0x58
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d0a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d14:	2b22      	cmp	r3, #34	; 0x22
 8005d16:	f040 8098 	bne.w	8005e4a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005d28:	b2d9      	uxtb	r1, r3
 8005d2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	400a      	ands	r2, r1
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d17b      	bne.n	8005e5a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d76:	653b      	str	r3, [r7, #80]	; 0x50
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
 8005d82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e6      	bne.n	8005d62 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	623b      	str	r3, [r7, #32]
   return(result);
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005db4:	633a      	str	r2, [r7, #48]	; 0x30
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e5      	bne.n	8005d94 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d12e      	bne.n	8005e42 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0310 	bic.w	r3, r3, #16
 8005dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	69b9      	ldr	r1, [r7, #24]
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	617b      	str	r3, [r7, #20]
   return(result);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e6      	bne.n	8005dea <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d103      	bne.n	8005e32 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2210      	movs	r2, #16
 8005e30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff f9e4 	bl	8005208 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e40:	e00b      	b.n	8005e5a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fb f9a0 	bl	8001188 <HAL_UART_RxCpltCallback>
}
 8005e48:	e007      	b.n	8005e5a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	699a      	ldr	r2, [r3, #24]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0208 	orr.w	r2, r2, #8
 8005e58:	619a      	str	r2, [r3, #24]
}
 8005e5a:	bf00      	nop
 8005e5c:	3758      	adds	r7, #88	; 0x58
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b096      	sub	sp, #88	; 0x58
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e7a:	2b22      	cmp	r3, #34	; 0x22
 8005e7c:	f040 8098 	bne.w	8005fb0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e90:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005e94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005e98:	4013      	ands	r3, r2
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e9e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	1c9a      	adds	r2, r3, #2
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d17b      	bne.n	8005fc0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e6      	bne.n	8005ec8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d12e      	bne.n	8005fa8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f023 0310 	bic.w	r3, r3, #16
 8005f64:	647b      	str	r3, [r7, #68]	; 0x44
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e6      	bne.n	8005f50 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b10      	cmp	r3, #16
 8005f8e:	d103      	bne.n	8005f98 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2210      	movs	r2, #16
 8005f96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff f931 	bl	8005208 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fa6:	e00b      	b.n	8005fc0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fb f8ed 	bl	8001188 <HAL_UART_RxCpltCallback>
}
 8005fae:	e007      	b.n	8005fc0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0208 	orr.w	r2, r2, #8
 8005fbe:	619a      	str	r2, [r3, #24]
}
 8005fc0:	bf00      	nop
 8005fc2:	3758      	adds	r7, #88	; 0x58
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <_strtol_l.constprop.0>:
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fce:	d001      	beq.n	8005fd4 <_strtol_l.constprop.0+0xc>
 8005fd0:	2b24      	cmp	r3, #36	; 0x24
 8005fd2:	d906      	bls.n	8005fe2 <_strtol_l.constprop.0+0x1a>
 8005fd4:	f000 f88c 	bl	80060f0 <__errno>
 8005fd8:	2316      	movs	r3, #22
 8005fda:	6003      	str	r3, [r0, #0]
 8005fdc:	2000      	movs	r0, #0
 8005fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80060c8 <_strtol_l.constprop.0+0x100>
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	462e      	mov	r6, r5
 8005fea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005ff2:	f017 0708 	ands.w	r7, r7, #8
 8005ff6:	d1f7      	bne.n	8005fe8 <_strtol_l.constprop.0+0x20>
 8005ff8:	2c2d      	cmp	r4, #45	; 0x2d
 8005ffa:	d132      	bne.n	8006062 <_strtol_l.constprop.0+0x9a>
 8005ffc:	782c      	ldrb	r4, [r5, #0]
 8005ffe:	2701      	movs	r7, #1
 8006000:	1cb5      	adds	r5, r6, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d05b      	beq.n	80060be <_strtol_l.constprop.0+0xf6>
 8006006:	2b10      	cmp	r3, #16
 8006008:	d109      	bne.n	800601e <_strtol_l.constprop.0+0x56>
 800600a:	2c30      	cmp	r4, #48	; 0x30
 800600c:	d107      	bne.n	800601e <_strtol_l.constprop.0+0x56>
 800600e:	782c      	ldrb	r4, [r5, #0]
 8006010:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006014:	2c58      	cmp	r4, #88	; 0x58
 8006016:	d14d      	bne.n	80060b4 <_strtol_l.constprop.0+0xec>
 8006018:	786c      	ldrb	r4, [r5, #1]
 800601a:	2310      	movs	r3, #16
 800601c:	3502      	adds	r5, #2
 800601e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006022:	f108 38ff 	add.w	r8, r8, #4294967295
 8006026:	f04f 0e00 	mov.w	lr, #0
 800602a:	fbb8 f9f3 	udiv	r9, r8, r3
 800602e:	4676      	mov	r6, lr
 8006030:	fb03 8a19 	mls	sl, r3, r9, r8
 8006034:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006038:	f1bc 0f09 	cmp.w	ip, #9
 800603c:	d816      	bhi.n	800606c <_strtol_l.constprop.0+0xa4>
 800603e:	4664      	mov	r4, ip
 8006040:	42a3      	cmp	r3, r4
 8006042:	dd24      	ble.n	800608e <_strtol_l.constprop.0+0xc6>
 8006044:	f1be 3fff 	cmp.w	lr, #4294967295
 8006048:	d008      	beq.n	800605c <_strtol_l.constprop.0+0x94>
 800604a:	45b1      	cmp	r9, r6
 800604c:	d31c      	bcc.n	8006088 <_strtol_l.constprop.0+0xc0>
 800604e:	d101      	bne.n	8006054 <_strtol_l.constprop.0+0x8c>
 8006050:	45a2      	cmp	sl, r4
 8006052:	db19      	blt.n	8006088 <_strtol_l.constprop.0+0xc0>
 8006054:	fb06 4603 	mla	r6, r6, r3, r4
 8006058:	f04f 0e01 	mov.w	lr, #1
 800605c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006060:	e7e8      	b.n	8006034 <_strtol_l.constprop.0+0x6c>
 8006062:	2c2b      	cmp	r4, #43	; 0x2b
 8006064:	bf04      	itt	eq
 8006066:	782c      	ldrbeq	r4, [r5, #0]
 8006068:	1cb5      	addeq	r5, r6, #2
 800606a:	e7ca      	b.n	8006002 <_strtol_l.constprop.0+0x3a>
 800606c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006070:	f1bc 0f19 	cmp.w	ip, #25
 8006074:	d801      	bhi.n	800607a <_strtol_l.constprop.0+0xb2>
 8006076:	3c37      	subs	r4, #55	; 0x37
 8006078:	e7e2      	b.n	8006040 <_strtol_l.constprop.0+0x78>
 800607a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800607e:	f1bc 0f19 	cmp.w	ip, #25
 8006082:	d804      	bhi.n	800608e <_strtol_l.constprop.0+0xc6>
 8006084:	3c57      	subs	r4, #87	; 0x57
 8006086:	e7db      	b.n	8006040 <_strtol_l.constprop.0+0x78>
 8006088:	f04f 3eff 	mov.w	lr, #4294967295
 800608c:	e7e6      	b.n	800605c <_strtol_l.constprop.0+0x94>
 800608e:	f1be 3fff 	cmp.w	lr, #4294967295
 8006092:	d105      	bne.n	80060a0 <_strtol_l.constprop.0+0xd8>
 8006094:	2322      	movs	r3, #34	; 0x22
 8006096:	6003      	str	r3, [r0, #0]
 8006098:	4646      	mov	r6, r8
 800609a:	b942      	cbnz	r2, 80060ae <_strtol_l.constprop.0+0xe6>
 800609c:	4630      	mov	r0, r6
 800609e:	e79e      	b.n	8005fde <_strtol_l.constprop.0+0x16>
 80060a0:	b107      	cbz	r7, 80060a4 <_strtol_l.constprop.0+0xdc>
 80060a2:	4276      	negs	r6, r6
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	d0f9      	beq.n	800609c <_strtol_l.constprop.0+0xd4>
 80060a8:	f1be 0f00 	cmp.w	lr, #0
 80060ac:	d000      	beq.n	80060b0 <_strtol_l.constprop.0+0xe8>
 80060ae:	1e69      	subs	r1, r5, #1
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	e7f3      	b.n	800609c <_strtol_l.constprop.0+0xd4>
 80060b4:	2430      	movs	r4, #48	; 0x30
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1b1      	bne.n	800601e <_strtol_l.constprop.0+0x56>
 80060ba:	2308      	movs	r3, #8
 80060bc:	e7af      	b.n	800601e <_strtol_l.constprop.0+0x56>
 80060be:	2c30      	cmp	r4, #48	; 0x30
 80060c0:	d0a5      	beq.n	800600e <_strtol_l.constprop.0+0x46>
 80060c2:	230a      	movs	r3, #10
 80060c4:	e7ab      	b.n	800601e <_strtol_l.constprop.0+0x56>
 80060c6:	bf00      	nop
 80060c8:	08006235 	.word	0x08006235

080060cc <strtol>:
 80060cc:	4613      	mov	r3, r2
 80060ce:	460a      	mov	r2, r1
 80060d0:	4601      	mov	r1, r0
 80060d2:	4802      	ldr	r0, [pc, #8]	; (80060dc <strtol+0x10>)
 80060d4:	6800      	ldr	r0, [r0, #0]
 80060d6:	f7ff bf77 	b.w	8005fc8 <_strtol_l.constprop.0>
 80060da:	bf00      	nop
 80060dc:	20000080 	.word	0x20000080

080060e0 <memset>:
 80060e0:	4402      	add	r2, r0
 80060e2:	4603      	mov	r3, r0
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d100      	bne.n	80060ea <memset+0xa>
 80060e8:	4770      	bx	lr
 80060ea:	f803 1b01 	strb.w	r1, [r3], #1
 80060ee:	e7f9      	b.n	80060e4 <memset+0x4>

080060f0 <__errno>:
 80060f0:	4b01      	ldr	r3, [pc, #4]	; (80060f8 <__errno+0x8>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000080 	.word	0x20000080

080060fc <__libc_init_array>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4d0d      	ldr	r5, [pc, #52]	; (8006134 <__libc_init_array+0x38>)
 8006100:	4c0d      	ldr	r4, [pc, #52]	; (8006138 <__libc_init_array+0x3c>)
 8006102:	1b64      	subs	r4, r4, r5
 8006104:	10a4      	asrs	r4, r4, #2
 8006106:	2600      	movs	r6, #0
 8006108:	42a6      	cmp	r6, r4
 800610a:	d109      	bne.n	8006120 <__libc_init_array+0x24>
 800610c:	4d0b      	ldr	r5, [pc, #44]	; (800613c <__libc_init_array+0x40>)
 800610e:	4c0c      	ldr	r4, [pc, #48]	; (8006140 <__libc_init_array+0x44>)
 8006110:	f000 f878 	bl	8006204 <_init>
 8006114:	1b64      	subs	r4, r4, r5
 8006116:	10a4      	asrs	r4, r4, #2
 8006118:	2600      	movs	r6, #0
 800611a:	42a6      	cmp	r6, r4
 800611c:	d105      	bne.n	800612a <__libc_init_array+0x2e>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	f855 3b04 	ldr.w	r3, [r5], #4
 8006124:	4798      	blx	r3
 8006126:	3601      	adds	r6, #1
 8006128:	e7ee      	b.n	8006108 <__libc_init_array+0xc>
 800612a:	f855 3b04 	ldr.w	r3, [r5], #4
 800612e:	4798      	blx	r3
 8006130:	3601      	adds	r6, #1
 8006132:	e7f2      	b.n	800611a <__libc_init_array+0x1e>
 8006134:	08006340 	.word	0x08006340
 8006138:	08006340 	.word	0x08006340
 800613c:	08006340 	.word	0x08006340
 8006140:	08006344 	.word	0x08006344

08006144 <memcpy>:
 8006144:	440a      	add	r2, r1
 8006146:	4291      	cmp	r1, r2
 8006148:	f100 33ff 	add.w	r3, r0, #4294967295
 800614c:	d100      	bne.n	8006150 <memcpy+0xc>
 800614e:	4770      	bx	lr
 8006150:	b510      	push	{r4, lr}
 8006152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800615a:	4291      	cmp	r1, r2
 800615c:	d1f9      	bne.n	8006152 <memcpy+0xe>
 800615e:	bd10      	pop	{r4, pc}

08006160 <fmaxf>:
 8006160:	b508      	push	{r3, lr}
 8006162:	ed2d 8b02 	vpush	{d8}
 8006166:	eeb0 8a40 	vmov.f32	s16, s0
 800616a:	eef0 8a60 	vmov.f32	s17, s1
 800616e:	f000 f82d 	bl	80061cc <__fpclassifyf>
 8006172:	b148      	cbz	r0, 8006188 <fmaxf+0x28>
 8006174:	eeb0 0a68 	vmov.f32	s0, s17
 8006178:	f000 f828 	bl	80061cc <__fpclassifyf>
 800617c:	b130      	cbz	r0, 800618c <fmaxf+0x2c>
 800617e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006186:	dc01      	bgt.n	800618c <fmaxf+0x2c>
 8006188:	eeb0 8a68 	vmov.f32	s16, s17
 800618c:	eeb0 0a48 	vmov.f32	s0, s16
 8006190:	ecbd 8b02 	vpop	{d8}
 8006194:	bd08      	pop	{r3, pc}

08006196 <fminf>:
 8006196:	b508      	push	{r3, lr}
 8006198:	ed2d 8b02 	vpush	{d8}
 800619c:	eeb0 8a40 	vmov.f32	s16, s0
 80061a0:	eef0 8a60 	vmov.f32	s17, s1
 80061a4:	f000 f812 	bl	80061cc <__fpclassifyf>
 80061a8:	b148      	cbz	r0, 80061be <fminf+0x28>
 80061aa:	eeb0 0a68 	vmov.f32	s0, s17
 80061ae:	f000 f80d 	bl	80061cc <__fpclassifyf>
 80061b2:	b130      	cbz	r0, 80061c2 <fminf+0x2c>
 80061b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80061b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061bc:	d401      	bmi.n	80061c2 <fminf+0x2c>
 80061be:	eeb0 8a68 	vmov.f32	s16, s17
 80061c2:	eeb0 0a48 	vmov.f32	s0, s16
 80061c6:	ecbd 8b02 	vpop	{d8}
 80061ca:	bd08      	pop	{r3, pc}

080061cc <__fpclassifyf>:
 80061cc:	ee10 3a10 	vmov	r3, s0
 80061d0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80061d4:	d00d      	beq.n	80061f2 <__fpclassifyf+0x26>
 80061d6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80061da:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80061de:	d30a      	bcc.n	80061f6 <__fpclassifyf+0x2a>
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <__fpclassifyf+0x34>)
 80061e2:	1e42      	subs	r2, r0, #1
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d908      	bls.n	80061fa <__fpclassifyf+0x2e>
 80061e8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80061ec:	4258      	negs	r0, r3
 80061ee:	4158      	adcs	r0, r3
 80061f0:	4770      	bx	lr
 80061f2:	2002      	movs	r0, #2
 80061f4:	4770      	bx	lr
 80061f6:	2004      	movs	r0, #4
 80061f8:	4770      	bx	lr
 80061fa:	2003      	movs	r0, #3
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	007ffffe 	.word	0x007ffffe

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
