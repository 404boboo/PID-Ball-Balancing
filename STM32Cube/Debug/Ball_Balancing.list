
Ball_Balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007508  08007508  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007510  08007510  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08007518  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200000a0  080075b8  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  080075b8  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001780b  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032c9  00000000  00000000  0003791e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  0003abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e38  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a84  00000000  00000000  0003cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019148  00000000  00000000  000646f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2597  00000000  00000000  0007d83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f08  00000000  00000000  0016fdd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00174cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a0 	.word	0x200000a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080073a8 	.word	0x080073a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000a4 	.word	0x200000a4
 8000204:	080073a8 	.word	0x080073a8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b970 	b.w	8000b7c <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9e08      	ldr	r6, [sp, #32]
 80008ba:	460d      	mov	r5, r1
 80008bc:	4604      	mov	r4, r0
 80008be:	460f      	mov	r7, r1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d14a      	bne.n	800095a <__udivmoddi4+0xa6>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4694      	mov	ip, r2
 80008c8:	d965      	bls.n	8000996 <__udivmoddi4+0xe2>
 80008ca:	fab2 f382 	clz	r3, r2
 80008ce:	b143      	cbz	r3, 80008e2 <__udivmoddi4+0x2e>
 80008d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008d4:	f1c3 0220 	rsb	r2, r3, #32
 80008d8:	409f      	lsls	r7, r3
 80008da:	fa20 f202 	lsr.w	r2, r0, r2
 80008de:	4317      	orrs	r7, r2
 80008e0:	409c      	lsls	r4, r3
 80008e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008e6:	fa1f f58c 	uxth.w	r5, ip
 80008ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80008ee:	0c22      	lsrs	r2, r4, #16
 80008f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f8:	fb01 f005 	mul.w	r0, r1, r5
 80008fc:	4290      	cmp	r0, r2
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x62>
 8000900:	eb1c 0202 	adds.w	r2, ip, r2
 8000904:	f101 37ff 	add.w	r7, r1, #4294967295
 8000908:	f080 811c 	bcs.w	8000b44 <__udivmoddi4+0x290>
 800090c:	4290      	cmp	r0, r2
 800090e:	f240 8119 	bls.w	8000b44 <__udivmoddi4+0x290>
 8000912:	3902      	subs	r1, #2
 8000914:	4462      	add	r2, ip
 8000916:	1a12      	subs	r2, r2, r0
 8000918:	b2a4      	uxth	r4, r4
 800091a:	fbb2 f0fe 	udiv	r0, r2, lr
 800091e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000922:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000926:	fb00 f505 	mul.w	r5, r0, r5
 800092a:	42a5      	cmp	r5, r4
 800092c:	d90a      	bls.n	8000944 <__udivmoddi4+0x90>
 800092e:	eb1c 0404 	adds.w	r4, ip, r4
 8000932:	f100 32ff 	add.w	r2, r0, #4294967295
 8000936:	f080 8107 	bcs.w	8000b48 <__udivmoddi4+0x294>
 800093a:	42a5      	cmp	r5, r4
 800093c:	f240 8104 	bls.w	8000b48 <__udivmoddi4+0x294>
 8000940:	4464      	add	r4, ip
 8000942:	3802      	subs	r0, #2
 8000944:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000948:	1b64      	subs	r4, r4, r5
 800094a:	2100      	movs	r1, #0
 800094c:	b11e      	cbz	r6, 8000956 <__udivmoddi4+0xa2>
 800094e:	40dc      	lsrs	r4, r3
 8000950:	2300      	movs	r3, #0
 8000952:	e9c6 4300 	strd	r4, r3, [r6]
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	428b      	cmp	r3, r1
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0xbc>
 800095e:	2e00      	cmp	r6, #0
 8000960:	f000 80ed 	beq.w	8000b3e <__udivmoddi4+0x28a>
 8000964:	2100      	movs	r1, #0
 8000966:	e9c6 0500 	strd	r0, r5, [r6]
 800096a:	4608      	mov	r0, r1
 800096c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000970:	fab3 f183 	clz	r1, r3
 8000974:	2900      	cmp	r1, #0
 8000976:	d149      	bne.n	8000a0c <__udivmoddi4+0x158>
 8000978:	42ab      	cmp	r3, r5
 800097a:	d302      	bcc.n	8000982 <__udivmoddi4+0xce>
 800097c:	4282      	cmp	r2, r0
 800097e:	f200 80f8 	bhi.w	8000b72 <__udivmoddi4+0x2be>
 8000982:	1a84      	subs	r4, r0, r2
 8000984:	eb65 0203 	sbc.w	r2, r5, r3
 8000988:	2001      	movs	r0, #1
 800098a:	4617      	mov	r7, r2
 800098c:	2e00      	cmp	r6, #0
 800098e:	d0e2      	beq.n	8000956 <__udivmoddi4+0xa2>
 8000990:	e9c6 4700 	strd	r4, r7, [r6]
 8000994:	e7df      	b.n	8000956 <__udivmoddi4+0xa2>
 8000996:	b902      	cbnz	r2, 800099a <__udivmoddi4+0xe6>
 8000998:	deff      	udf	#255	; 0xff
 800099a:	fab2 f382 	clz	r3, r2
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f040 8090 	bne.w	8000ac4 <__udivmoddi4+0x210>
 80009a4:	1a8a      	subs	r2, r1, r2
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2101      	movs	r1, #1
 80009b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009b4:	fb07 2015 	mls	r0, r7, r5, r2
 80009b8:	0c22      	lsrs	r2, r4, #16
 80009ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009be:	fb0e f005 	mul.w	r0, lr, r5
 80009c2:	4290      	cmp	r0, r2
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x124>
 80009c6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x122>
 80009d0:	4290      	cmp	r0, r2
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2b8>
 80009d6:	4645      	mov	r5, r8
 80009d8:	1a12      	subs	r2, r2, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e0:	fb07 2210 	mls	r2, r7, r0, r2
 80009e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x14e>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x14c>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2c2>
 8000a00:	4610      	mov	r0, r2
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a0a:	e79f      	b.n	800094c <__udivmoddi4+0x98>
 8000a0c:	f1c1 0720 	rsb	r7, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a1e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a22:	40fd      	lsrs	r5, r7
 8000a24:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a28:	4323      	orrs	r3, r4
 8000a2a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a2e:	fa1f fe8c 	uxth.w	lr, ip
 8000a32:	fb09 5518 	mls	r5, r9, r8, r5
 8000a36:	0c1c      	lsrs	r4, r3, #16
 8000a38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a3c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a40:	42a5      	cmp	r5, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	fa00 f001 	lsl.w	r0, r0, r1
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b0>
 8000a4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2b4>
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2b4>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4464      	add	r4, ip
 8000a64:	1b64      	subs	r4, r4, r5
 8000a66:	b29d      	uxth	r5, r3
 8000a68:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a6c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a70:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a74:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a78:	45a6      	cmp	lr, r4
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1da>
 8000a7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a80:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2ac>
 8000a86:	45a6      	cmp	lr, r4
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2ac>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	4464      	add	r4, ip
 8000a8e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a92:	fba3 9502 	umull	r9, r5, r3, r2
 8000a96:	eba4 040e 	sub.w	r4, r4, lr
 8000a9a:	42ac      	cmp	r4, r5
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46ae      	mov	lr, r5
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x29c>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x298>
 8000aa4:	b156      	cbz	r6, 8000abc <__udivmoddi4+0x208>
 8000aa6:	ebb0 0208 	subs.w	r2, r0, r8
 8000aaa:	eb64 040e 	sbc.w	r4, r4, lr
 8000aae:	fa04 f707 	lsl.w	r7, r4, r7
 8000ab2:	40ca      	lsrs	r2, r1
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	e9c6 7400 	strd	r7, r4, [r6]
 8000abc:	4618      	mov	r0, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac4:	f1c3 0120 	rsb	r1, r3, #32
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ad4:	409d      	lsls	r5, r3
 8000ad6:	432a      	orrs	r2, r5
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae8:	0c11      	lsrs	r1, r2, #16
 8000aea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aee:	fb00 f50e 	mul.w	r5, r0, lr
 8000af2:	428d      	cmp	r5, r1
 8000af4:	fa04 f403 	lsl.w	r4, r4, r3
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x258>
 8000afa:	eb1c 0101 	adds.w	r1, ip, r1
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b04:	428d      	cmp	r5, r1
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4461      	add	r1, ip
 8000b0c:	1b49      	subs	r1, r1, r5
 8000b0e:	b292      	uxth	r2, r2
 8000b10:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b14:	fb07 1115 	mls	r1, r7, r5, r1
 8000b18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b1c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b20:	4291      	cmp	r1, r2
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x282>
 8000b24:	eb1c 0202 	adds.w	r2, ip, r2
 8000b28:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2a8>
 8000b2e:	4291      	cmp	r1, r2
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2a8>
 8000b32:	3d02      	subs	r5, #2
 8000b34:	4462      	add	r2, ip
 8000b36:	1a52      	subs	r2, r2, r1
 8000b38:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0xfc>
 8000b3e:	4631      	mov	r1, r6
 8000b40:	4630      	mov	r0, r6
 8000b42:	e708      	b.n	8000956 <__udivmoddi4+0xa2>
 8000b44:	4639      	mov	r1, r7
 8000b46:	e6e6      	b.n	8000916 <__udivmoddi4+0x62>
 8000b48:	4610      	mov	r0, r2
 8000b4a:	e6fb      	b.n	8000944 <__udivmoddi4+0x90>
 8000b4c:	4548      	cmp	r0, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f0>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f0>
 8000b5c:	4645      	mov	r5, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x282>
 8000b60:	462b      	mov	r3, r5
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1da>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x258>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b0>
 8000b6c:	3d02      	subs	r5, #2
 8000b6e:	4462      	add	r2, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x124>
 8000b72:	4608      	mov	r0, r1
 8000b74:	e70a      	b.n	800098c <__udivmoddi4+0xd8>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x14e>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <PID>:
#include "PID_controller.h"
 double kp = 10;
 double ki = 0.038;
 double kd = 500;
void PID(SERVO_Handle_TypeDef* servo,float average_distance , int setP)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b8c:	6079      	str	r1, [r7, #4]

	static double priError = 0;
	static double toError = 0;
	float dis = average_distance;
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
	float error = setP - dis;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ba4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	//calculating PID values
	double Pvalue = error * kp;
 8000ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000baa:	f7ff fdc3 	bl	8000734 <__aeabi_f2d>
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <PID+0xe8>)
 8000bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb4:	f7ff fb30 	bl	8000218 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Ivalue = toError * ki;
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <PID+0xec>)
 8000bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <PID+0xf0>)
 8000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bcc:	f7ff fb24 	bl	8000218 <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dvalue = (error - priError) * kd;
 8000bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bda:	f7ff fdab 	bl	8000734 <__aeabi_f2d>
 8000bde:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <PID+0xf4>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	f7ff fc46 	bl	8000474 <__aeabi_dsub>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <PID+0xf8>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb0f 	bl	8000218 <__aeabi_dmul>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double PIDvalue = Pvalue + Ivalue + Dvalue;
 8000c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000c0a:	f7ff fc35 	bl	8000478 <__adddf3>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c16:	f7ff fc2f 	bl	8000478 <__adddf3>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	priError = error;//previous error (DValue)
 8000c22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c24:	f7ff fd86 	bl	8000734 <__aeabi_f2d>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4911      	ldr	r1, [pc, #68]	; (8000c74 <PID+0xf4>)
 8000c2e:	e9c1 2300 	strd	r2, r3, [r1]
	toError += error;//total error{IValue}
 8000c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c34:	f7ff fd7e 	bl	8000734 <__aeabi_f2d>
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <PID+0xec>)
 8000c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3e:	f7ff fc1b 	bl	8000478 <__adddf3>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	4909      	ldr	r1, [pc, #36]	; (8000c6c <PID+0xec>)
 8000c48:	e9c1 2300 	strd	r2, r3, [r1]
	SERVO_WritePosition(servo, PIDvalue);
 8000c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c50:	f7ff fdc8 	bl	80007e4 <__aeabi_d2f>
 8000c54:	4603      	mov	r3, r0
 8000c56:	ee00 3a10 	vmov	s0, r3
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f000 f822 	bl	8000ca4 <SERVO_WritePosition>
}
 8000c60:	bf00      	nop
 8000c62:	3738      	adds	r7, #56	; 0x38
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	200000c0 	.word	0x200000c0
 8000c70:	20000008 	.word	0x20000008
 8000c74:	200000c8 	.word	0x200000c8
 8000c78:	20000010 	.word	0x20000010

08000c7c <SERVO_Init>:
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/

void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 90.0f);
 8000c84:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000ca0 <SERVO_Init+0x24>
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 f80b 	bl	8000ca4 <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fa13 	bl	80010bc <PWM_Init>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	42b40000 	.word	0x42b40000

08000ca4 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 30.0f, 60.0f);
 8000cb0:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000d14 <SERVO_WritePosition+0x70>
 8000cb4:	ed97 0a00 	vldr	s0, [r7]
 8000cb8:	f006 fb3f 	bl	800733a <fminf>
 8000cbc:	eef0 7a40 	vmov.f32	s15, s0
 8000cc0:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8000cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc8:	f006 fb1c 	bl	8007304 <fmaxf>
 8000ccc:	eef0 7a40 	vmov.f32	s15, s0
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 120.0f, 160.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cdc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000d18 <SERVO_WritePosition+0x74>
 8000ce0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000ce4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000d1c <SERVO_WritePosition+0x78>
 8000ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000cf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cfc:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f9f0 	bl	80010ec <PWM_WriteDuty>
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	42700000 	.word	0x42700000
 8000d18:	42f00000 	.word	0x42f00000
 8000d1c:	42200000 	.word	0x42200000

08000d20 <hc_sr04_init>:
/* Public variables ----------------------------------------------------------*/

/*Private functions------------------------------------------------*/

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2104      	movs	r1, #4
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 fc10 	bl	800456c <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	4619      	mov	r1, r3
 8000d56:	4610      	mov	r0, r2
 8000d58:	f003 faac 	bl	80042b4 <HAL_TIM_PWM_Start>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <hc_sr04_convert_us_to_cm>:

uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <hc_sr04_convert_us_to_cm+0x20>)
 8000d70:	fba2 2303 	umull	r2, r3, r2, r3
 8000d74:	095b      	lsrs	r3, r3, #5
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	8d3dcb09 	.word	0x8d3dcb09

08000d88 <position>:
int position(float dis1, float dis2, float pos)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d92:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d96:	ed87 1a01 	vstr	s2, [r7, #4]
 pos = 0;
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
if (dis1<29){
 8000da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000da4:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db0:	d502      	bpl.n	8000db8 <position+0x30>
    pos = dis1;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e037      	b.n	8000e28 <position+0xa0>
}
else if(dis1 >=29 )
 8000db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dbc:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc8:	db08      	blt.n	8000ddc <position+0x54>
{
    pos = 60- dis2;
 8000dca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000e40 <position+0xb8>
 8000dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000dda:	e025      	b.n	8000e28 <position+0xa0>
}
else if (dis1>= 29 && dis1 <= 31 && dis2 >= 29 && dis2 <= 31){
 8000ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000de0:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dec:	db1c      	blt.n	8000e28 <position+0xa0>
 8000dee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000df2:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8000df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfe:	d813      	bhi.n	8000e28 <position+0xa0>
 8000e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e04:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	db0a      	blt.n	8000e28 <position+0xa0>
 8000e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e16:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8000e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e22:	d801      	bhi.n	8000e28 <position+0xa0>
    pos = 30;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <position+0xbc>)
 8000e26:	607b      	str	r3, [r7, #4]
}
return pos;
 8000e28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e30:	ee17 3a90 	vmov	r3, s15
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	42700000 	.word	0x42700000
 8000e44:	41f00000 	.word	0x41f00000

08000e48 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(htim);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f003 f93b 	bl	80040d8 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000e62:	bf00      	nop
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d3f9      	bcc.n	8000e64 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f003 f9a1 	bl	80041b8 <HAL_TIM_Base_Stop>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000e90:	78bb      	ldrb	r3, [r7, #2]
 8000e92:	f023 030f 	bic.w	r3, r3, #15
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f043 030c 	orr.w	r3, r3, #12
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <__lcd_i2c_write+0xac>)
 8000ea6:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <__lcd_i2c_write+0xac>)
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <__lcd_i2c_write+0xac>)
 8000eae:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000eb0:	78bb      	ldrb	r3, [r7, #2]
 8000eb2:	f023 030f 	bic.w	r3, r3, #15
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <__lcd_i2c_write+0xac>)
 8000ec6:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000ec8:	78bb      	ldrb	r3, [r7, #2]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f043 030c 	orr.w	r3, r3, #12
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <__lcd_i2c_write+0xac>)
 8000edc:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <__lcd_i2c_write+0xac>)
 8000ee0:	78da      	ldrb	r2, [r3, #3]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <__lcd_i2c_write+0xac>)
 8000ee4:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000ee6:	78bb      	ldrb	r3, [r7, #2]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__lcd_i2c_write+0xac>)
 8000efa:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	889b      	ldrh	r3, [r3, #4]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	b299      	uxth	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2306      	movs	r3, #6
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <__lcd_i2c_write+0xac>)
 8000f12:	f001 fc89 	bl	8002828 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2132      	movs	r1, #50	; 0x32
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff93 	bl	8000e48 <__lcd_delay_us>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000d0 	.word	0x200000d0

08000f30 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2100      	movs	r1, #0
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff9c 	bl	8000e80 <__lcd_i2c_write>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff8c 	bl	8000e80 <__lcd_i2c_write>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  __lcd_delay(hlcd->Timer, 15.2);  // >15 ms
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff61 	bl	8000e48 <__lcd_delay_us>

  // 4-bit mode
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000f86:	2103      	movs	r1, #3
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ffd1 	bl	8000f30 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 4.1 ms
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	f241 0103 	movw	r1, #4099	; 0x1003
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff56 	bl	8000e48 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffc6 	bl	8000f30 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 0.1 ms
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f241 0103 	movw	r1, #4099	; 0x1003
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff4b 	bl	8000e48 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffbb 	bl	8000f30 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, 0x02);  // 0001
 8000fba:	2102      	movs	r1, #2
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffb7 	bl	8000f30 <__lcd_i2c_write_command>

  hlcd->IsInitialized = 1;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	741a      	strb	r2, [r3, #16]

  __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8000fc8:	2128      	movs	r1, #40	; 0x28
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <__lcd_i2c_write_command>

  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                      // Clear screen
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffac 	bl	8000f30 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 1.6);                                         // > 1.52 ms
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff31 	bl	8000e48 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D | LCD_OPT_B); // LCD on, Cursor off, On blink
 8000fe6:	210d      	movs	r1, #13
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffa1 	bl	8000f30 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);       // Cursor increment on
 8000fee:	2106      	movs	r1, #6
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff9d 	bl	8000f30 <__lcd_i2c_write_command>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 8000ffe:	b590      	push	{r4, r7, lr}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e00a      	b.n	8001024 <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff99 	bl	8000f50 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	3301      	adds	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	7bfc      	ldrb	r4, [r7, #15]
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f7ff f8ee 	bl	8000208 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	429c      	cmp	r4, r3
 8001030:	d3ed      	bcc.n	800100e <LCD_I2C_printStr+0x10>
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}

0800103c <LCD_I2C_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
 8001048:	4613      	mov	r3, r2
 800104a:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <LCD_I2C_SetCursor+0x30>)
 8001050:	5cd2      	ldrb	r2, [r2, r3]
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	4413      	add	r3, r2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3b80      	subs	r3, #128	; 0x80
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff66 	bl	8000f30 <__lcd_i2c_write_command>
  #endif
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	080073e8 	.word	0x080073e8

08001070 <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	460b      	mov	r3, r1
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	3340      	adds	r3, #64	; 0x40
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4619      	mov	r1, r3
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f7ff ff50 	bl	8000f30 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 8001090:	2300      	movs	r3, #0
 8001092:	75fb      	strb	r3, [r7, #23]
 8001094:	e00a      	b.n	80010ac <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ff55 	bl	8000f50 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	3301      	adds	r3, #1
 80010aa:	75fb      	strb	r3, [r7, #23]
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	2b07      	cmp	r3, #7
 80010b0:	d9f1      	bls.n	8001096 <LCD_I2C_DefineChar+0x26>
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f80c 	bl	80010ec <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f003 f8e8 	bl	80042b4 <HAL_TIM_PWM_Start>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80010f8:	edd7 7a00 	vldr	s15, [r7]
 80010fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	d503      	bpl.n	800110e <PWM_WriteDuty+0x22>
    duty = 0.0;
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	e00a      	b.n	8001124 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800110e:	edd7 7a00 	vldr	s15, [r7]
 8001112:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80011d0 <PWM_WriteDuty+0xe4>
 8001116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	dd01      	ble.n	8001124 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <PWM_WriteDuty+0xe8>)
 8001122:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	3301      	adds	r3, #1
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800113c:	edd7 7a00 	vldr	s15, [r7]
 8001140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001144:	eddf 6a22 	vldr	s13, [pc, #136]	; 80011d0 <PWM_WriteDuty+0xe4>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d105      	bne.n	800116a <PWM_WriteDuty+0x7e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001168:	e02c      	b.n	80011c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b04      	cmp	r3, #4
 8001170:	d105      	bne.n	800117e <PWM_WriteDuty+0x92>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800117c:	e022      	b.n	80011c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b08      	cmp	r3, #8
 8001184:	d105      	bne.n	8001192 <PWM_WriteDuty+0xa6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001190:	e018      	b.n	80011c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b0c      	cmp	r3, #12
 8001198:	d105      	bne.n	80011a6 <PWM_WriteDuty+0xba>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011a4:	e00e      	b.n	80011c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b10      	cmp	r3, #16
 80011ac:	d105      	bne.n	80011ba <PWM_WriteDuty+0xce>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80011b8:	e004      	b.n	80011c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	42c80000 	.word	0x42c80000
 80011d4:	42c80000 	.word	0x42c80000

080011d8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM9_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]


}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_UART_RxCpltCallback>:
  * @param  huart UART handle.
  * @retval None
  */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_UART_RxCpltCallback+0x7c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d117      	bne.n	800122c <HAL_UART_RxCpltCallback+0x40>
  {
	SERVO_WritePosition(&hservo1, 180 - strtol((char*)tx_buffer, 0, 10));
 80011fc:	220a      	movs	r2, #10
 80011fe:	2100      	movs	r1, #0
 8001200:	481a      	ldr	r0, [pc, #104]	; (800126c <HAL_UART_RxCpltCallback+0x80>)
 8001202:	f006 f843 	bl	800728c <strtol>
 8001206:	4603      	mov	r3, r0
 8001208:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001214:	eeb0 0a67 	vmov.f32	s0, s15
 8001218:	4815      	ldr	r0, [pc, #84]	; (8001270 <HAL_UART_RxCpltCallback+0x84>)
 800121a:	f7ff fd43 	bl	8000ca4 <SERVO_WritePosition>
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 800121e:	2303      	movs	r3, #3
 8001220:	b29b      	uxth	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	4911      	ldr	r1, [pc, #68]	; (800126c <HAL_UART_RxCpltCallback+0x80>)
 8001226:	4810      	ldr	r0, [pc, #64]	; (8001268 <HAL_UART_RxCpltCallback+0x7c>)
 8001228:	f004 fda4 	bl	8005d74 <HAL_UART_Receive_IT>
  }
  text[i] = character;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_UART_RxCpltCallback+0x88>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <HAL_UART_RxCpltCallback+0x8c>)
 8001232:	7811      	ldrb	r1, [r2, #0]
 8001234:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_UART_RxCpltCallback+0x90>)
 8001236:	54d1      	strb	r1, [r2, r3]
    i = (i >= user_len - 1)? 0 :(i+1);
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_RxCpltCallback+0x94>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_UART_RxCpltCallback+0x88>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d903      	bls.n	800124e <HAL_UART_RxCpltCallback+0x62>
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_UART_RxCpltCallback+0x88>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_UART_RxCpltCallback+0x64>
 800124e:	2300      	movs	r3, #0
 8001250:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_UART_RxCpltCallback+0x88>)
 8001252:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart3, &character, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <HAL_UART_RxCpltCallback+0x8c>)
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <HAL_UART_RxCpltCallback+0x7c>)
 800125a:	f004 fd8b 	bl	8005d74 <HAL_UART_Receive_IT>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000025c 	.word	0x2000025c
 800126c:	20000314 	.word	0x20000314
 8001270:	20000030 	.word	0x20000030
 8001274:	2000031c 	.word	0x2000031c
 8001278:	20000318 	.word	0x20000318
 800127c:	20000320 	.word	0x20000320
 8001280:	20000040 	.word	0x20000040

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128a:	f000 ff06 	bl	800209a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128e:	f000 f87b 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001292:	f000 fb15 	bl	80018c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001296:	f000 fae3 	bl	8001860 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800129a:	f000 f8e3 	bl	8001464 <MX_TIM1_Init>
  MX_TIM9_Init();
 800129e:	f000 fa7d 	bl	800179c <MX_TIM9_Init>
  MX_TIM2_Init();
 80012a2:	f000 f983 	bl	80015ac <MX_TIM2_Init>
  MX_TIM3_Init();
 80012a6:	f000 f9db 	bl	8001660 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start Sensor 1 & 2
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 80012aa:	2308      	movs	r3, #8
 80012ac:	4a28      	ldr	r2, [pc, #160]	; (8001350 <main+0xcc>)
 80012ae:	4929      	ldr	r1, [pc, #164]	; (8001354 <main+0xd0>)
 80012b0:	4829      	ldr	r0, [pc, #164]	; (8001358 <main+0xd4>)
 80012b2:	f7ff fd35 	bl	8000d20 <hc_sr04_init>
  hc_sr04_init(&distance_sensor2, &htim3, &htim2, TIM_CHANNEL_3);
 80012b6:	2308      	movs	r3, #8
 80012b8:	4a25      	ldr	r2, [pc, #148]	; (8001350 <main+0xcc>)
 80012ba:	4928      	ldr	r1, [pc, #160]	; (800135c <main+0xd8>)
 80012bc:	4828      	ldr	r0, [pc, #160]	; (8001360 <main+0xdc>)
 80012be:	f7ff fd2f 	bl	8000d20 <hc_sr04_init>

  SERVO_Init(&hservo1);
 80012c2:	4828      	ldr	r0, [pc, #160]	; (8001364 <main+0xe0>)
 80012c4:	f7ff fcda 	bl	8000c7c <SERVO_Init>
  SERVO_WritePosition(&hservo1, 30.0f);
 80012c8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80012cc:	4825      	ldr	r0, [pc, #148]	; (8001364 <main+0xe0>)
 80012ce:	f7ff fce9 	bl	8000ca4 <SERVO_WritePosition>

 uint8_t begining[] = {
 80012d2:	4a25      	ldr	r2, [pc, #148]	; (8001368 <main+0xe4>)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012dc:	e883 0003 	stmia.w	r3, {r0, r1}
        0B11000,
        0B11110,
        0B11110,
        0B11000};

  uint8_t end[] = {
 80012e0:	4a22      	ldr	r2, [pc, #136]	; (800136c <main+0xe8>)
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ea:	e883 0003 	stmia.w	r3, {r0, r1}
        0B00011,
        0B00011,
        0B00011,
        0B00011};

  uint8_t Ball[] = {
 80012ee:	4a20      	ldr	r2, [pc, #128]	; (8001370 <main+0xec>)
 80012f0:	463b      	mov	r3, r7
 80012f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f6:	e883 0003 	stmia.w	r3, {r0, r1}
       0B11111,
       0B01110,
       0B00000};


  LCD_I2C_Init(&hlcd3);
 80012fa:	481e      	ldr	r0, [pc, #120]	; (8001374 <main+0xf0>)
 80012fc:	f7ff fe38 	bl	8000f70 <LCD_I2C_Init>
  LCD_I2C_printStr(&hlcd3, "Position: ");
 8001300:	491d      	ldr	r1, [pc, #116]	; (8001378 <main+0xf4>)
 8001302:	481c      	ldr	r0, [pc, #112]	; (8001374 <main+0xf0>)
 8001304:	f7ff fe7b 	bl	8000ffe <LCD_I2C_printStr>

  LCD_I2C_DefineChar(&hlcd3, 1, begining);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	461a      	mov	r2, r3
 800130e:	2101      	movs	r1, #1
 8001310:	4818      	ldr	r0, [pc, #96]	; (8001374 <main+0xf0>)
 8001312:	f7ff fead 	bl	8001070 <LCD_I2C_DefineChar>
  LCD_I2C_DefineChar(&hlcd3, 2, end);
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	461a      	mov	r2, r3
 800131c:	2102      	movs	r1, #2
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <main+0xf0>)
 8001320:	f7ff fea6 	bl	8001070 <LCD_I2C_DefineChar>
  LCD_I2C_DefineChar(&hlcd3, 3, Ball);
 8001324:	463b      	mov	r3, r7
 8001326:	461a      	mov	r2, r3
 8001328:	2103      	movs	r1, #3
 800132a:	4812      	ldr	r0, [pc, #72]	; (8001374 <main+0xf0>)
 800132c:	f7ff fea0 	bl	8001070 <LCD_I2C_DefineChar>
  //LCD_I2C_printCustomChar(&hlcd3, 2);

  //LCD_I2C_SetCursor(&hlcd3, 1, 2);
  //LCD_I2C_printCustomChar(&hlcd3, 3);

  LCD_I2C_SetCursor(&hlcd3, 0, 14);
 8001330:	220e      	movs	r2, #14
 8001332:	2100      	movs	r1, #0
 8001334:	480f      	ldr	r0, [pc, #60]	; (8001374 <main+0xf0>)
 8001336:	f7ff fe81 	bl	800103c <LCD_I2C_SetCursor>
  LCD_I2C_printStr(&hlcd3, "cm");
 800133a:	4910      	ldr	r1, [pc, #64]	; (800137c <main+0xf8>)
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <main+0xf0>)
 800133e:	f7ff fe5e 	bl	8000ffe <LCD_I2C_printStr>

  HAL_UART_Receive_IT(&huart3, &character, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	490e      	ldr	r1, [pc, #56]	; (8001380 <main+0xfc>)
 8001346:	480f      	ldr	r0, [pc, #60]	; (8001384 <main+0x100>)
 8001348:	f004 fd14 	bl	8005d74 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800134c:	e7fe      	b.n	800134c <main+0xc8>
 800134e:	bf00      	nop
 8001350:	20000178 	.word	0x20000178
 8001354:	2000012c 	.word	0x2000012c
 8001358:	200002f4 	.word	0x200002f4
 800135c:	200001c4 	.word	0x200001c4
 8001360:	20000304 	.word	0x20000304
 8001364:	20000030 	.word	0x20000030
 8001368:	080073d0 	.word	0x080073d0
 800136c:	080073d8 	.word	0x080073d8
 8001370:	080073e0 	.word	0x080073e0
 8001374:	20000018 	.word	0x20000018
 8001378:	080073c0 	.word	0x080073c0
 800137c:	080073cc 	.word	0x080073cc
 8001380:	20000318 	.word	0x20000318
 8001384:	2000025c 	.word	0x2000025c

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	; 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f005 ff82 	bl	80072a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013ac:	f001 fd22 	bl	8002df4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <SystemClock_Config+0xd4>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a29      	ldr	r2, [pc, #164]	; (800145c <SystemClock_Config+0xd4>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <SystemClock_Config+0xd4>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <SystemClock_Config+0xd8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <SystemClock_Config+0xd8>)
 80013ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <SystemClock_Config+0xd8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013f4:	2304      	movs	r3, #4
 80013f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80013f8:	23d8      	movs	r3, #216	; 0xd8
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001400:	2309      	movs	r3, #9
 8001402:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fd53 	bl	8002eb4 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001414:	f000 fc04 	bl	8001c20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001418:	f001 fcfc 	bl	8002e14 <HAL_PWREx_EnableOverDrive>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001422:	f000 fbfd 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	230f      	movs	r3, #15
 8001428:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	2302      	movs	r3, #2
 800142c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001432:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001436:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001438:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800143c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2107      	movs	r1, #7
 8001444:	4618      	mov	r0, r3
 8001446:	f001 ffd9 	bl	80033fc <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001450:	f000 fbe6 	bl	8001c20 <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3750      	adds	r7, #80	; 0x50
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000

08001464 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b090      	sub	sp, #64	; 0x40
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001496:	463b      	mov	r3, r7
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014a2:	4a41      	ldr	r2, [pc, #260]	; (80015a8 <MX_TIM1_Init+0x144>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014a8:	226b      	movs	r2, #107	; 0x6b
 80014aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014cc:	4835      	ldr	r0, [pc, #212]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014ce:	f002 fdab 	bl	8004028 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80014d8:	f000 fba2 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e6:	4619      	mov	r1, r3
 80014e8:	482e      	ldr	r0, [pc, #184]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014ea:	f003 fc5f 	bl	8004dac <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80014f4:	f000 fb94 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80014f8:	482a      	ldr	r0, [pc, #168]	; (80015a4 <MX_TIM1_Init+0x140>)
 80014fa:	f002 ffd5 	bl	80044a8 <HAL_TIM_IC_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001504:	f000 fb8c 	bl	8001c20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001508:	2304      	movs	r3, #4
 800150a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800150c:	2350      	movs	r3, #80	; 0x50
 800150e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4820      	ldr	r0, [pc, #128]	; (80015a4 <MX_TIM1_Init+0x140>)
 8001524:	f003 fd0c 	bl	8004f40 <HAL_TIM_SlaveConfigSynchro>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800152e:	f000 fb77 	bl	8001c20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001536:	2301      	movs	r3, #1
 8001538:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	4816      	ldr	r0, [pc, #88]	; (80015a4 <MX_TIM1_Init+0x140>)
 800154c:	f003 fa7d 	bl	8004a4a <HAL_TIM_IC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001556:	f000 fb63 	bl	8001c20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800155a:	2302      	movs	r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800155e:	2302      	movs	r3, #2
 8001560:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2204      	movs	r2, #4
 8001568:	4619      	mov	r1, r3
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <MX_TIM1_Init+0x140>)
 800156c:	f003 fa6d 	bl	8004a4a <HAL_TIM_IC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001576:	f000 fb53 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_TIM1_Init+0x140>)
 800158c:	f004 faf8 	bl	8005b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001596:	f000 fb43 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3740      	adds	r7, #64	; 0x40
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000012c 	.word	0x2000012c
 80015a8:	40010000 	.word	0x40010000

080015ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015be:	463b      	mov	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <MX_TIM2_Init+0xac>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_TIM2_Init+0xac>)
 80015da:	226b      	movs	r2, #107	; 0x6b
 80015dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_TIM2_Init+0xac>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM2_Init+0xac>)
 80015e6:	4a1d      	ldr	r2, [pc, #116]	; (800165c <MX_TIM2_Init+0xb0>)
 80015e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_TIM2_Init+0xac>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_TIM2_Init+0xac>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <MX_TIM2_Init+0xac>)
 80015f8:	f002 fe05 	bl	8004206 <HAL_TIM_PWM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001602:	f000 fb0d 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4810      	ldr	r0, [pc, #64]	; (8001658 <MX_TIM2_Init+0xac>)
 8001616:	f004 fab3 	bl	8005b80 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001620:	f000 fafe 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001624:	2360      	movs	r3, #96	; 0x60
 8001626:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001628:	230a      	movs	r3, #10
 800162a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2208      	movs	r2, #8
 8001638:	4619      	mov	r1, r3
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM2_Init+0xac>)
 800163c:	f003 faa2 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001646:	f000 faeb 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM2_Init+0xac>)
 800164c:	f000 fbde 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000178 	.word	0x20000178
 800165c:	00030d3f 	.word	0x00030d3f

08001660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b090      	sub	sp, #64	; 0x40
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169c:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <MX_TIM3_Init+0x134>)
 800169e:	4a3e      	ldr	r2, [pc, #248]	; (8001798 <MX_TIM3_Init+0x138>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 80016a2:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <MX_TIM3_Init+0x134>)
 80016a4:	226b      	movs	r2, #107	; 0x6b
 80016a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <MX_TIM3_Init+0x134>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <MX_TIM3_Init+0x134>)
 80016b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <MX_TIM3_Init+0x134>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <MX_TIM3_Init+0x134>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c2:	4834      	ldr	r0, [pc, #208]	; (8001794 <MX_TIM3_Init+0x134>)
 80016c4:	f002 fcb0 	bl	8004028 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80016ce:	f000 faa7 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016dc:	4619      	mov	r1, r3
 80016de:	482d      	ldr	r0, [pc, #180]	; (8001794 <MX_TIM3_Init+0x134>)
 80016e0:	f003 fb64 	bl	8004dac <HAL_TIM_ConfigClockSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80016ea:	f000 fa99 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016ee:	4829      	ldr	r0, [pc, #164]	; (8001794 <MX_TIM3_Init+0x134>)
 80016f0:	f002 feda 	bl	80044a8 <HAL_TIM_IC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80016fa:	f000 fa91 	bl	8001c20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016fe:	2304      	movs	r3, #4
 8001700:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001702:	2350      	movs	r3, #80	; 0x50
 8001704:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	481e      	ldr	r0, [pc, #120]	; (8001794 <MX_TIM3_Init+0x134>)
 800171a:	f003 fc11 	bl	8004f40 <HAL_TIM_SlaveConfigSynchro>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001724:	f000 fa7c 	bl	8001c20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800172c:	2301      	movs	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2200      	movs	r2, #0
 800173e:	4619      	mov	r1, r3
 8001740:	4814      	ldr	r0, [pc, #80]	; (8001794 <MX_TIM3_Init+0x134>)
 8001742:	f003 f982 	bl	8004a4a <HAL_TIM_IC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800174c:	f000 fa68 	bl	8001c20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001750:	2302      	movs	r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001754:	2302      	movs	r3, #2
 8001756:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2204      	movs	r2, #4
 800175e:	4619      	mov	r1, r3
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <MX_TIM3_Init+0x134>)
 8001762:	f003 f972 	bl	8004a4a <HAL_TIM_IC_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 800176c:	f000 fa58 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_TIM3_Init+0x134>)
 800177e:	f004 f9ff 	bl	8005b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8001788:	f000 fa4a 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	3740      	adds	r7, #64	; 0x40
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200001c4 	.word	0x200001c4
 8001798:	40000400 	.word	0x40000400

0800179c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <MX_TIM9_Init+0xbc>)
 80017c4:	4a25      	ldr	r2, [pc, #148]	; (800185c <MX_TIM9_Init+0xc0>)
 80017c6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <MX_TIM9_Init+0xbc>)
 80017ca:	226b      	movs	r2, #107	; 0x6b
 80017cc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <MX_TIM9_Init+0xbc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <MX_TIM9_Init+0xbc>)
 80017d6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017da:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_TIM9_Init+0xbc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_TIM9_Init+0xbc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80017e8:	481b      	ldr	r0, [pc, #108]	; (8001858 <MX_TIM9_Init+0xbc>)
 80017ea:	f002 fc1d 	bl	8004028 <HAL_TIM_Base_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f000 fa14 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	4619      	mov	r1, r3
 8001804:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_TIM9_Init+0xbc>)
 8001806:	f003 fad1 	bl	8004dac <HAL_TIM_ConfigClockSource>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001810:	f000 fa06 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001814:	4810      	ldr	r0, [pc, #64]	; (8001858 <MX_TIM9_Init+0xbc>)
 8001816:	f002 fcf6 	bl	8004206 <HAL_TIM_PWM_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001820:	f000 f9fe 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001824:	2360      	movs	r3, #96	; 0x60
 8001826:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM9_Init+0xbc>)
 800183c:	f003 f9a2 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001846:	f000 f9eb 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM9_Init+0xbc>)
 800184c:	f000 fade 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8001850:	bf00      	nop
 8001852:	3730      	adds	r7, #48	; 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000210 	.word	0x20000210
 800185c:	40014000 	.word	0x40014000

08001860 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <MX_USART3_UART_Init+0x5c>)
 8001868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 800186c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_USART3_UART_Init+0x58>)
 80018a4:	f004 fa18 	bl	8005cd8 <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018ae:	f000 f9b7 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000025c 	.word	0x2000025c
 80018bc:	40004800 	.word	0x40004800

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018d6:	4b95      	ldr	r3, [pc, #596]	; (8001b2c <MX_GPIO_Init+0x26c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a94      	ldr	r2, [pc, #592]	; (8001b2c <MX_GPIO_Init+0x26c>)
 80018dc:	f043 0310 	orr.w	r3, r3, #16
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b92      	ldr	r3, [pc, #584]	; (8001b2c <MX_GPIO_Init+0x26c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ee:	4b8f      	ldr	r3, [pc, #572]	; (8001b2c <MX_GPIO_Init+0x26c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a8e      	ldr	r2, [pc, #568]	; (8001b2c <MX_GPIO_Init+0x26c>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b8c      	ldr	r3, [pc, #560]	; (8001b2c <MX_GPIO_Init+0x26c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a88      	ldr	r2, [pc, #544]	; (8001b2c <MX_GPIO_Init+0x26c>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b86      	ldr	r3, [pc, #536]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b83      	ldr	r3, [pc, #524]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a82      	ldr	r2, [pc, #520]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b80      	ldr	r3, [pc, #512]	; (8001b2c <MX_GPIO_Init+0x26c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a7c      	ldr	r2, [pc, #496]	; (8001b2c <MX_GPIO_Init+0x26c>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800194e:	4b77      	ldr	r3, [pc, #476]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a76      	ldr	r2, [pc, #472]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b74      	ldr	r3, [pc, #464]	; (8001b2c <MX_GPIO_Init+0x26c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001966:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a70      	ldr	r2, [pc, #448]	; (8001b2c <MX_GPIO_Init+0x26c>)
 800196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <MX_GPIO_Init+0x26c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2101      	movs	r1, #1
 8001982:	486b      	ldr	r0, [pc, #428]	; (8001b30 <MX_GPIO_Init+0x270>)
 8001984:	f000 ff36 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f244 0181 	movw	r1, #16513	; 0x4081
 800198e:	4869      	ldr	r0, [pc, #420]	; (8001b34 <MX_GPIO_Init+0x274>)
 8001990:	f000 ff30 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2140      	movs	r1, #64	; 0x40
 8001998:	4867      	ldr	r0, [pc, #412]	; (8001b38 <MX_GPIO_Init+0x278>)
 800199a:	f000 ff2b 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800199e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	485e      	ldr	r0, [pc, #376]	; (8001b30 <MX_GPIO_Init+0x270>)
 80019b6:	f000 fd71 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	4857      	ldr	r0, [pc, #348]	; (8001b30 <MX_GPIO_Init+0x270>)
 80019d2:	f000 fd63 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019d6:	2332      	movs	r3, #50	; 0x32
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019e6:	230b      	movs	r3, #11
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	484f      	ldr	r0, [pc, #316]	; (8001b30 <MX_GPIO_Init+0x270>)
 80019f2:	f000 fd53 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019f6:	2386      	movs	r3, #134	; 0x86
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a06:	230b      	movs	r3, #11
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	484a      	ldr	r0, [pc, #296]	; (8001b3c <MX_GPIO_Init+0x27c>)
 8001a12:	f000 fd43 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a16:	2308      	movs	r3, #8
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4844      	ldr	r0, [pc, #272]	; (8001b3c <MX_GPIO_Init+0x27c>)
 8001a2a:	f000 fd37 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a2e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	483b      	ldr	r0, [pc, #236]	; (8001b34 <MX_GPIO_Init+0x274>)
 8001a48:	f000 fd28 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a5e:	230b      	movs	r3, #11
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	4832      	ldr	r0, [pc, #200]	; (8001b34 <MX_GPIO_Init+0x274>)
 8001a6a:	f000 fd17 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a6e:	2340      	movs	r3, #64	; 0x40
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	482c      	ldr	r0, [pc, #176]	; (8001b38 <MX_GPIO_Init+0x278>)
 8001a86:	f000 fd09 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4826      	ldr	r0, [pc, #152]	; (8001b38 <MX_GPIO_Init+0x278>)
 8001a9e:	f000 fcfd 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001aa2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4619      	mov	r1, r3
 8001abe:	481f      	ldr	r0, [pc, #124]	; (8001b3c <MX_GPIO_Init+0x27c>)
 8001ac0:	f000 fcec 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4818      	ldr	r0, [pc, #96]	; (8001b3c <MX_GPIO_Init+0x27c>)
 8001ada:	f000 fcdf 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ade:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001af0:	230b      	movs	r3, #11
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	480f      	ldr	r0, [pc, #60]	; (8001b38 <MX_GPIO_Init+0x278>)
 8001afc:	f000 fcce 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b06:	2312      	movs	r3, #18
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b12:	2304      	movs	r3, #4
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_GPIO_Init+0x274>)
 8001b1e:	f000 fcbd 	bl	800249c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	; 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020800 	.word	0x40020800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40021800 	.word	0x40021800
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a2b      	ldr	r2, [pc, #172]	; (8001bfc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d111      	bne.n	8001b76 <HAL_TIM_IC_CaptureCallback+0x36>
	{
		uint32_t echo_us;
          // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001b52:	2104      	movs	r1, #4
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f003 fa35 	bl	8004fc4 <HAL_TIM_ReadCapturedValue>
 8001b5a:	60f8      	str	r0, [r7, #12]
		dx_cm = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff f901 	bl	8000d64 <hc_sr04_convert_us_to_cm>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	ee07 2a90 	vmov	s15, r2
 8001b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001b72:	edc3 7a00 	vstr	s15, [r3]
	}

	if(TIM3 == htim->Instance)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d111      	bne.n	8001ba4 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		uint32_t echo_us;
        // Convert and Assign distance
		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001b80:	2104      	movs	r1, #4
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f003 fa1e 	bl	8004fc4 <HAL_TIM_ReadCapturedValue>
 8001b88:	60b8      	str	r0, [r7, #8]
		dx_cm2 = distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8001b8a:	68b8      	ldr	r0, [r7, #8]
 8001b8c:	f7ff f8ea 	bl	8000d64 <hc_sr04_convert_us_to_cm>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	ee07 2a90 	vmov	s15, r2
 8001b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001ba0:	edc3 7a00 	vstr	s15, [r3]
	}

	    // Calculate average distance or perform any other processing
	    average_distance = position(dx_cm, dx_cm2, pos);
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001bac:	ed93 7a00 	vldr	s14, [r3]
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001bb2:	edd3 6a00 	vldr	s13, [r3]
 8001bb6:	eeb0 1a66 	vmov.f32	s2, s13
 8001bba:	eef0 0a47 	vmov.f32	s1, s14
 8001bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc2:	f7ff f8e1 	bl	8000d88 <position>
 8001bc6:	ee07 0a90 	vmov	s15, r0
 8001bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
	    PID(&hservo1,average_distance,setP);
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fdab 	bl	8000734 <__aeabi_f2d>
 8001bde:	4604      	mov	r4, r0
 8001be0:	460d      	mov	r5, r1
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4619      	mov	r1, r3
 8001be8:	ec45 4b10 	vmov	d0, r4, r5
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001bee:	f7fe ffc7 	bl	8000b80 <PID>
	//average_distance = position(dx_cm,dx_cm2,pos);

}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	200002f4 	.word	0x200002f4
 8001c04:	200002e4 	.word	0x200002e4
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	200002e8 	.word	0x200002e8
 8001c10:	200002f0 	.word	0x200002f0
 8001c14:	200002ec 	.word	0x200002ec
 8001c18:	2000002c 	.word	0x2000002c
 8001c1c:	20000030 	.word	0x20000030

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_MspInit+0x44>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_MspInit+0x44>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_MspInit+0x44>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_MspInit+0x44>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_MspInit+0x44>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_MspInit+0x44>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a48      	ldr	r2, [pc, #288]	; (8001db4 <HAL_TIM_Base_MspInit+0x140>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d131      	bne.n	8001cfa <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c96:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	623b      	str	r3, [r7, #32]
 8001cac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a41      	ldr	r2, [pc, #260]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4836      	ldr	r0, [pc, #216]	; (8001dbc <HAL_TIM_Base_MspInit+0x148>)
 8001ce4:	f000 fbda 	bl	800249c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	201b      	movs	r0, #27
 8001cee:	f000 fb0c 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cf2:	201b      	movs	r0, #27
 8001cf4:	f000 fb25 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001cf8:	e058      	b.n	8001dac <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM3)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a30      	ldr	r2, [pc, #192]	; (8001dc0 <HAL_TIM_Base_MspInit+0x14c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d130      	bne.n	8001d66 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d04:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4a25      	ldr	r2, [pc, #148]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6313      	str	r3, [r2, #48]	; 0x30
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d44:	2302      	movs	r3, #2
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	481d      	ldr	r0, [pc, #116]	; (8001dc4 <HAL_TIM_Base_MspInit+0x150>)
 8001d50:	f000 fba4 	bl	800249c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	201d      	movs	r0, #29
 8001d5a:	f000 fad6 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d5e:	201d      	movs	r0, #29
 8001d60:	f000 faef 	bl	8002342 <HAL_NVIC_EnableIRQ>
}
 8001d64:	e022      	b.n	8001dac <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM7)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_TIM_Base_MspInit+0x154>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d10c      	bne.n	8001d8a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d76:	f043 0320 	orr.w	r3, r3, #32
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
}
 8001d88:	e010      	b.n	8001dac <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM9)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <HAL_TIM_Base_MspInit+0x158>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d10b      	bne.n	8001dac <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_TIM_Base_MspInit+0x144>)
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	bf00      	nop
 8001dae:	3738      	adds	r7, #56	; 0x38
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40001400 	.word	0x40001400
 8001dcc:	40014000 	.word	0x40014000

08001dd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de0:	d10b      	bne.n	8001dfa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_TIM_PWM_MspInit+0x38>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_TIM_PWM_MspInit+0x38>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_TIM_PWM_MspInit+0x38>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d11d      	bne.n	8001e6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_TIM_MspPostInit+0xa8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a20      	ldr	r2, [pc, #128]	; (8001eb4 <HAL_TIM_MspPostInit+0xa8>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_TIM_MspPostInit+0xa8>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	4815      	ldr	r0, [pc, #84]	; (8001eb8 <HAL_TIM_MspPostInit+0xac>)
 8001e64:	f000 fb1a 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001e68:	e020      	b.n	8001eac <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM9)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <HAL_TIM_MspPostInit+0xb0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d11b      	bne.n	8001eac <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_TIM_MspPostInit+0xa8>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <HAL_TIM_MspPostInit+0xa8>)
 8001e7a:	f043 0310 	orr.w	r3, r3, #16
 8001e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_TIM_MspPostInit+0xa8>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <HAL_TIM_MspPostInit+0xb4>)
 8001ea8:	f000 faf8 	bl	800249c <HAL_GPIO_Init>
}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40014000 	.word	0x40014000
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0aa      	sub	sp, #168	; 0xa8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2284      	movs	r2, #132	; 0x84
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f005 f9db 	bl	80072a0 <memset>
  if(huart->Instance==USART3)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a26      	ldr	r2, [pc, #152]	; (8001f88 <HAL_UART_MspInit+0xc4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d144      	bne.n	8001f7e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	4618      	mov	r0, r3
 8001f04:	f001 fca0 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f0e:	f7ff fe87 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_UART_MspInit+0xc8>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_UART_MspInit+0xc8>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_UART_MspInit+0xc8>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_UART_MspInit+0xc8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_UART_MspInit+0xc8>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_UART_MspInit+0xc8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f66:	4619      	mov	r1, r3
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <HAL_UART_MspInit+0xcc>)
 8001f6a:	f000 fa97 	bl	800249c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2027      	movs	r0, #39	; 0x27
 8001f74:	f000 f9c9 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f78:	2027      	movs	r0, #39	; 0x27
 8001f7a:	f000 f9e2 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	37a8      	adds	r7, #168	; 0xa8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40004800 	.word	0x40004800
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020c00 	.word	0x40020c00

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f898 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM1_CC_IRQHandler+0x10>)
 8001fee:	f002 fc0d 	bl	800480c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000012c 	.word	0x2000012c

08001ffc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <TIM3_IRQHandler+0x10>)
 8002002:	f002 fc03 	bl	800480c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200001c4 	.word	0x200001c4

08002010 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <USART3_IRQHandler+0x10>)
 8002016:	f003 fef1 	bl	8005dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000025c 	.word	0x2000025c

08002024 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <SystemInit+0x20>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <SystemInit+0x20>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800204e:	490e      	ldr	r1, [pc, #56]	; (8002088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002064:	4c0b      	ldr	r4, [pc, #44]	; (8002094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002072:	f7ff ffd7 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002076:	f005 f921 	bl	80072bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207a:	f7ff f903 	bl	8001284 <main>
  bx  lr    
 800207e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002080:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800208c:	08007518 	.word	0x08007518
  ldr r2, =_sbss
 8002090:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002094:	200004ac 	.word	0x200004ac

08002098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC_IRQHandler>

0800209a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209e:	2003      	movs	r0, #3
 80020a0:	f000 f928 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f000 f805 	bl	80020b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020aa:	f7ff fdbf 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_InitTick+0x54>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x58>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f943 	bl	800235e <HAL_SYSTICK_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00e      	b.n	8002100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d80a      	bhi.n	80020fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f000 f90b 	bl	800230a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_InitTick+0x5c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000044 	.word	0x20000044
 800210c:	2000004c 	.word	0x2000004c
 8002110:	20000048 	.word	0x20000048

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000004c 	.word	0x2000004c
 8002138:	20000370 	.word	0x20000370

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000370 	.word	0x20000370

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <__NVIC_SetPriorityGrouping+0x40>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	4313      	orrs	r3, r2
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x40>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00
 8002198:	05fa0000 	.word	0x05fa0000

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4907      	ldr	r1, [pc, #28]	; (80021f0 <__NVIC_EnableIRQ+0x38>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff29 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff3e 	bl	800219c <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff31 	bl	80021b8 <__NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffa2 	bl	80022b0 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff feda 	bl	800213c <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d008      	beq.n	80023a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e052      	b.n	800244e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0216 	bic.w	r2, r2, #22
 80023b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <HAL_DMA_Abort+0x62>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0208 	bic.w	r2, r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f8:	e013      	b.n	8002422 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023fa:	f7ff fe9f 	bl	800213c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b05      	cmp	r3, #5
 8002406:	d90c      	bls.n	8002422 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2203      	movs	r2, #3
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e015      	b.n	800244e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e4      	bne.n	80023fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	223f      	movs	r2, #63	; 0x3f
 8002436:	409a      	lsls	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d004      	beq.n	8002474 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e00c      	b.n	800248e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2205      	movs	r2, #5
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e175      	b.n	80027a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 8164 	bne.w	80027a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d005      	beq.n	80024f2 <HAL_GPIO_Init+0x56>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d130      	bne.n	8002554 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 0201 	and.w	r2, r3, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b03      	cmp	r3, #3
 800255e:	d017      	beq.n	8002590 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80be 	beq.w	80027a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4a65      	ldr	r2, [pc, #404]	; (80027c0 <HAL_GPIO_Init+0x324>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002630:	6453      	str	r3, [r2, #68]	; 0x44
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800263e:	4a61      	ldr	r2, [pc, #388]	; (80027c4 <HAL_GPIO_Init+0x328>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_GPIO_Init+0x32c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d037      	beq.n	80026da <HAL_GPIO_Init+0x23e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_GPIO_Init+0x330>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d031      	beq.n	80026d6 <HAL_GPIO_Init+0x23a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a56      	ldr	r2, [pc, #344]	; (80027d0 <HAL_GPIO_Init+0x334>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d02b      	beq.n	80026d2 <HAL_GPIO_Init+0x236>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a55      	ldr	r2, [pc, #340]	; (80027d4 <HAL_GPIO_Init+0x338>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d025      	beq.n	80026ce <HAL_GPIO_Init+0x232>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a54      	ldr	r2, [pc, #336]	; (80027d8 <HAL_GPIO_Init+0x33c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01f      	beq.n	80026ca <HAL_GPIO_Init+0x22e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a53      	ldr	r2, [pc, #332]	; (80027dc <HAL_GPIO_Init+0x340>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d019      	beq.n	80026c6 <HAL_GPIO_Init+0x22a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_GPIO_Init+0x344>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_GPIO_Init+0x226>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a51      	ldr	r2, [pc, #324]	; (80027e4 <HAL_GPIO_Init+0x348>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00d      	beq.n	80026be <HAL_GPIO_Init+0x222>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a50      	ldr	r2, [pc, #320]	; (80027e8 <HAL_GPIO_Init+0x34c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <HAL_GPIO_Init+0x21e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <HAL_GPIO_Init+0x350>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_GPIO_Init+0x21a>
 80026b2:	2309      	movs	r3, #9
 80026b4:	e012      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026b6:	230a      	movs	r3, #10
 80026b8:	e010      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026ba:	2308      	movs	r3, #8
 80026bc:	e00e      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026be:	2307      	movs	r3, #7
 80026c0:	e00c      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026c2:	2306      	movs	r3, #6
 80026c4:	e00a      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026c6:	2305      	movs	r3, #5
 80026c8:	e008      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026ca:	2304      	movs	r3, #4
 80026cc:	e006      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026ce:	2303      	movs	r3, #3
 80026d0:	e004      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026da:	2300      	movs	r3, #0
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f002 0203 	and.w	r2, r2, #3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4093      	lsls	r3, r2
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026ec:	4935      	ldr	r1, [pc, #212]	; (80027c4 <HAL_GPIO_Init+0x328>)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3302      	adds	r3, #2
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_GPIO_Init+0x354>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271e:	4a34      	ldr	r2, [pc, #208]	; (80027f0 <HAL_GPIO_Init+0x354>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002724:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_GPIO_Init+0x354>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_GPIO_Init+0x354>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274e:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <HAL_GPIO_Init+0x354>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002772:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_GPIO_Init+0x354>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_GPIO_Init+0x354>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_GPIO_Init+0x354>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3301      	adds	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	f67f ae86 	bls.w	80024bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40021400 	.word	0x40021400
 80027e0:	40021800 	.word	0x40021800
 80027e4:	40021c00 	.word	0x40021c00
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40022400 	.word	0x40022400
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	461a      	mov	r2, r3
 8002834:	460b      	mov	r3, r1
 8002836:	817b      	strh	r3, [r7, #10]
 8002838:	4613      	mov	r3, r2
 800283a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b20      	cmp	r3, #32
 8002846:	f040 80da 	bne.w	80029fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_I2C_Master_Transmit+0x30>
 8002854:	2302      	movs	r3, #2
 8002856:	e0d3      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002860:	f7ff fc6c 	bl	800213c <HAL_GetTick>
 8002864:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	2319      	movs	r3, #25
 800286c:	2201      	movs	r2, #1
 800286e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f8f0 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0be      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2221      	movs	r2, #33	; 0x21
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2210      	movs	r2, #16
 800288e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2bff      	cmp	r3, #255	; 0xff
 80028b2:	d90e      	bls.n	80028d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	22ff      	movs	r2, #255	; 0xff
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	8979      	ldrh	r1, [r7, #10]
 80028c2:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <HAL_I2C_Master_Transmit+0x1e0>)
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fa60 	bl	8002d90 <I2C_TransferConfig>
 80028d0:	e06c      	b.n	80029ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	8979      	ldrh	r1, [r7, #10]
 80028e4:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <HAL_I2C_Master_Transmit+0x1e0>)
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fa4f 	bl	8002d90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028f2:	e05b      	b.n	80029ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6a39      	ldr	r1, [r7, #32]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f8ed 	bl	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e07b      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d034      	beq.n	80029ac <HAL_I2C_Master_Transmit+0x184>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d130      	bne.n	80029ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f87f 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e04d      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2bff      	cmp	r3, #255	; 0xff
 800296c:	d90e      	bls.n	800298c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8979      	ldrh	r1, [r7, #10]
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fa03 	bl	8002d90 <I2C_TransferConfig>
 800298a:	e00f      	b.n	80029ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	b2da      	uxtb	r2, r3
 800299c:	8979      	ldrh	r1, [r7, #10]
 800299e:	2300      	movs	r3, #0
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f9f2 	bl	8002d90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d19e      	bne.n	80028f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	6a39      	ldr	r1, [r7, #32]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f8cc 	bl	8002b58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01a      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2220      	movs	r2, #32
 80029d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_I2C_Master_Transmit+0x1e4>)
 80029de:	400b      	ands	r3, r1
 80029e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	80002000 	.word	0x80002000
 8002a0c:	fe00e800 	.word	0xfe00e800

08002a10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d103      	bne.n	8002a2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d007      	beq.n	8002a4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	619a      	str	r2, [r3, #24]
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a68:	e022      	b.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d01e      	beq.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7ff fb63 	bl	800213c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d113      	bne.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e00f      	b.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d0cd      	beq.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae4:	e02c      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f870 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e02a      	b.n	8002b50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d01e      	beq.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b02:	f7ff fb1b 	bl	800213c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d302      	bcc.n	8002b18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d113      	bne.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e007      	b.n	8002b50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d1cb      	bne.n	8002ae6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b64:	e028      	b.n	8002bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f830 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e026      	b.n	8002bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7a:	f7ff fadf 	bl	800213c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d302      	bcc.n	8002b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d113      	bne.n	8002bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e007      	b.n	8002bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d1cf      	bne.n	8002b66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d068      	beq.n	8002cce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2210      	movs	r2, #16
 8002c02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c04:	e049      	b.n	8002c9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d045      	beq.n	8002c9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7ff fa95 	bl	800213c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_IsErrorOccurred+0x54>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d13a      	bne.n	8002c9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c46:	d121      	bne.n	8002c8c <I2C_IsErrorOccurred+0xbc>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c4e:	d01d      	beq.n	8002c8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d01a      	beq.n	8002c8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c66:	f7ff fa69 	bl	800213c <HAL_GetTick>
 8002c6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c6c:	e00e      	b.n	8002c8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c6e:	f7ff fa65 	bl	800213c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b19      	cmp	r3, #25
 8002c7a:	d907      	bls.n	8002c8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c8a:	e006      	b.n	8002c9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d1e9      	bne.n	8002c6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d003      	beq.n	8002cb0 <I2C_IsErrorOccurred+0xe0>
 8002ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0aa      	beq.n	8002c06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01c      	beq.n	8002d7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fe63 	bl	8002a10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <I2C_IsErrorOccurred+0x1bc>)
 8002d56:	400b      	ands	r3, r1
 8002d58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3728      	adds	r7, #40	; 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	fe00e800 	.word	0xfe00e800

08002d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002da8:	7a7b      	ldrb	r3, [r7, #9]
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	0d5b      	lsrs	r3, r3, #21
 8002dca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <I2C_TransferConfig+0x60>)
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	ea02 0103 	and.w	r1, r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	03ff63ff 	.word	0x03ff63ff

08002df4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40007000 	.word	0x40007000

08002e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_PWREx_EnableOverDrive+0x98>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <HAL_PWREx_EnableOverDrive+0x98>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_PWREx_EnableOverDrive+0x98>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e42:	f7ff f97b 	bl	800213c <HAL_GetTick>
 8002e46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e48:	e009      	b.n	8002e5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e4a:	f7ff f977 	bl	800213c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e58:	d901      	bls.n	8002e5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e022      	b.n	8002ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e78:	f7ff f960 	bl	800213c <HAL_GetTick>
 8002e7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e7e:	e009      	b.n	8002e94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e80:	f7ff f95c 	bl	800213c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e8e:	d901      	bls.n	8002e94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e007      	b.n	8002ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea0:	d1ee      	bne.n	8002e80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40007000 	.word	0x40007000

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e291      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8087 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed8:	4b96      	ldr	r3, [pc, #600]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d00c      	beq.n	8002efe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee4:	4b93      	ldr	r3, [pc, #588]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d112      	bne.n	8002f16 <HAL_RCC_OscConfig+0x62>
 8002ef0:	4b90      	ldr	r3, [pc, #576]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efe:	4b8d      	ldr	r3, [pc, #564]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d06c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x130>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d168      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e26b      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x7a>
 8002f20:	4b84      	ldr	r3, [pc, #528]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a83      	ldr	r2, [pc, #524]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e02e      	b.n	8002f8c <HAL_RCC_OscConfig+0xd8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x9c>
 8002f36:	4b7f      	ldr	r3, [pc, #508]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7e      	ldr	r2, [pc, #504]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b7c      	ldr	r3, [pc, #496]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7b      	ldr	r2, [pc, #492]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e01d      	b.n	8002f8c <HAL_RCC_OscConfig+0xd8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0xc0>
 8002f5a:	4b76      	ldr	r3, [pc, #472]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a75      	ldr	r2, [pc, #468]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b73      	ldr	r3, [pc, #460]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a72      	ldr	r2, [pc, #456]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0xd8>
 8002f74:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6e      	ldr	r2, [pc, #440]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b6c      	ldr	r3, [pc, #432]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6b      	ldr	r2, [pc, #428]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7ff f8d2 	bl	800213c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7ff f8ce 	bl	800213c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e21f      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b61      	ldr	r3, [pc, #388]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe8>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7ff f8be 	bl	800213c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7ff f8ba 	bl	800213c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e20b      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	4b57      	ldr	r3, [pc, #348]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x110>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d069      	beq.n	80030c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff2:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b08      	cmp	r3, #8
 8003008:	d11c      	bne.n	8003044 <HAL_RCC_OscConfig+0x190>
 800300a:	4b4a      	ldr	r3, [pc, #296]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d116      	bne.n	8003044 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_RCC_OscConfig+0x17a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e1df      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b41      	ldr	r3, [pc, #260]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	493d      	ldr	r1, [pc, #244]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	e040      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d023      	beq.n	8003094 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304c:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7ff f870 	bl	800213c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003060:	f7ff f86c 	bl	800213c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e1bd      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003072:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4929      	ldr	r1, [pc, #164]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
 8003092:	e018      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a26      	ldr	r2, [pc, #152]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7ff f84c 	bl	800213c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a8:	f7ff f848 	bl	800213c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e199      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d038      	beq.n	8003144 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d019      	beq.n	800310e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030de:	4a15      	ldr	r2, [pc, #84]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7ff f829 	bl	800213c <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ee:	f7ff f825 	bl	800213c <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e176      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x23a>
 800310c:	e01a      	b.n	8003144 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7ff f80f 	bl	800213c <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	e00a      	b.n	8003138 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003122:	f7ff f80b 	bl	800213c <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d903      	bls.n	8003138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e15c      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
 8003134:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	4b91      	ldr	r3, [pc, #580]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 800313a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ee      	bne.n	8003122 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80a4 	beq.w	800329a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003152:	4b8b      	ldr	r3, [pc, #556]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10d      	bne.n	800317a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	4b88      	ldr	r3, [pc, #544]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4a87      	ldr	r2, [pc, #540]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	; 0x40
 800316a:	4b85      	ldr	r3, [pc, #532]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317a:	4b82      	ldr	r3, [pc, #520]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d118      	bne.n	80031b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003186:	4b7f      	ldr	r3, [pc, #508]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7e      	ldr	r2, [pc, #504]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe ffd3 	bl	800213c <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7fe ffcf 	bl	800213c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b64      	cmp	r3, #100	; 0x64
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e120      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ac:	4b75      	ldr	r3, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x31a>
 80031c0:	4b6f      	ldr	r3, [pc, #444]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a6e      	ldr	r2, [pc, #440]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	e02d      	b.n	800322a <HAL_RCC_OscConfig+0x376>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x33c>
 80031d6:	4b6a      	ldr	r3, [pc, #424]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a69      	ldr	r2, [pc, #420]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
 80031e2:	4b67      	ldr	r3, [pc, #412]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a66      	ldr	r2, [pc, #408]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80031e8:	f023 0304 	bic.w	r3, r3, #4
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	e01c      	b.n	800322a <HAL_RCC_OscConfig+0x376>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d10c      	bne.n	8003212 <HAL_RCC_OscConfig+0x35e>
 80031f8:	4b61      	ldr	r3, [pc, #388]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a60      	ldr	r2, [pc, #384]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
 8003204:	4b5e      	ldr	r3, [pc, #376]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a5d      	ldr	r2, [pc, #372]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e00b      	b.n	800322a <HAL_RCC_OscConfig+0x376>
 8003212:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a5a      	ldr	r2, [pc, #360]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	4b58      	ldr	r3, [pc, #352]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a57      	ldr	r2, [pc, #348]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d015      	beq.n	800325e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe ff83 	bl	800213c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fe ff7f 	bl	800213c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0ce      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ee      	beq.n	800323a <HAL_RCC_OscConfig+0x386>
 800325c:	e014      	b.n	8003288 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325e:	f7fe ff6d 	bl	800213c <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fe ff69 	bl	800213c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0b8      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	4b40      	ldr	r3, [pc, #256]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ee      	bne.n	8003266 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003288:	7dfb      	ldrb	r3, [r7, #23]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d105      	bne.n	800329a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328e:	4b3c      	ldr	r3, [pc, #240]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80a4 	beq.w	80033ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d06b      	beq.n	8003388 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d149      	bne.n	800334c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b8:	4b31      	ldr	r3, [pc, #196]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a30      	ldr	r2, [pc, #192]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80032be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe ff3a 	bl	800213c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe ff36 	bl	800213c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e087      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b28      	ldr	r3, [pc, #160]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	019b      	lsls	r3, r3, #6
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	3b01      	subs	r3, #1
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	4313      	orrs	r3, r2
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003316:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a18      	ldr	r2, [pc, #96]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe ff0a 	bl	800213c <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332c:	f7fe ff06 	bl	800213c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e057      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x478>
 800334a:	e04f      	b.n	80033ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe fef0 	bl	800213c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe feec 	bl	800213c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e03d      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x4ac>
 800337e:	e035      	b.n	80033ec <HAL_RCC_OscConfig+0x538>
 8003380:	40023800 	.word	0x40023800
 8003384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_RCC_OscConfig+0x544>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d028      	beq.n	80033e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d121      	bne.n	80033e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d11a      	bne.n	80033e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033b8:	4013      	ands	r3, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d111      	bne.n	80033e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	3b01      	subs	r3, #1
 80033d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800

080033fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0d0      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 020f 	bic.w	r2, r3, #15
 800342a:	4965      	ldr	r1, [pc, #404]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800347a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800347e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d040      	beq.n	8003520 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d115      	bne.n	80034de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e073      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ce:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e06b      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 0203 	bic.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4936      	ldr	r1, [pc, #216]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f0:	f7fe fe24 	bl	800213c <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	e00a      	b.n	800350e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fe fe20 	bl	800213c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e053      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 020c 	and.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	429a      	cmp	r2, r3
 800351e:	d1eb      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d210      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 020f 	bic.w	r2, r3, #15
 8003536:	4922      	ldr	r1, [pc, #136]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f821 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490a      	ldr	r1, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x1cc>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1d0>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1d4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fd80 	bl	80020b4 <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023c00 	.word	0x40023c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	080073ec 	.word	0x080073ec
 80035cc:	20000044 	.word	0x20000044
 80035d0:	20000048 	.word	0x20000048

080035d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d8:	b094      	sub	sp, #80	; 0x50
 80035da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	647b      	str	r3, [r7, #68]	; 0x44
 80035e0:	2300      	movs	r3, #0
 80035e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e4:	2300      	movs	r3, #0
 80035e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ec:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d00d      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x40>
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	f200 80e1 	bhi.w	80037c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x34>
 8003602:	2b04      	cmp	r3, #4
 8003604:	d003      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x3a>
 8003606:	e0db      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800360c:	e0db      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360e:	4b73      	ldr	r3, [pc, #460]	; (80037dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003612:	e0d8      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003614:	4b6f      	ldr	r3, [pc, #444]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800361c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800361e:	4b6d      	ldr	r3, [pc, #436]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d063      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362a:	4b6a      	ldr	r3, [pc, #424]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	2200      	movs	r2, #0
 8003632:	63bb      	str	r3, [r7, #56]	; 0x38
 8003634:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363c:	633b      	str	r3, [r7, #48]	; 0x30
 800363e:	2300      	movs	r3, #0
 8003640:	637b      	str	r3, [r7, #52]	; 0x34
 8003642:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003646:	4622      	mov	r2, r4
 8003648:	462b      	mov	r3, r5
 800364a:	f04f 0000 	mov.w	r0, #0
 800364e:	f04f 0100 	mov.w	r1, #0
 8003652:	0159      	lsls	r1, r3, #5
 8003654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003658:	0150      	lsls	r0, r2, #5
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4621      	mov	r1, r4
 8003660:	1a51      	subs	r1, r2, r1
 8003662:	6139      	str	r1, [r7, #16]
 8003664:	4629      	mov	r1, r5
 8003666:	eb63 0301 	sbc.w	r3, r3, r1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003678:	4659      	mov	r1, fp
 800367a:	018b      	lsls	r3, r1, #6
 800367c:	4651      	mov	r1, sl
 800367e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003682:	4651      	mov	r1, sl
 8003684:	018a      	lsls	r2, r1, #6
 8003686:	4651      	mov	r1, sl
 8003688:	ebb2 0801 	subs.w	r8, r2, r1
 800368c:	4659      	mov	r1, fp
 800368e:	eb63 0901 	sbc.w	r9, r3, r1
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800369e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036a6:	4690      	mov	r8, r2
 80036a8:	4699      	mov	r9, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	eb18 0303 	adds.w	r3, r8, r3
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	462b      	mov	r3, r5
 80036b4:	eb49 0303 	adc.w	r3, r9, r3
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036c6:	4629      	mov	r1, r5
 80036c8:	024b      	lsls	r3, r1, #9
 80036ca:	4621      	mov	r1, r4
 80036cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036d0:	4621      	mov	r1, r4
 80036d2:	024a      	lsls	r2, r1, #9
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036da:	2200      	movs	r2, #0
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036e4:	f7fd f8ce 	bl	8000884 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4613      	mov	r3, r2
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f0:	e058      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	2200      	movs	r2, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	4611      	mov	r1, r2
 80036fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	f04f 0000 	mov.w	r0, #0
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	0159      	lsls	r1, r3, #5
 800371a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371e:	0150      	lsls	r0, r2, #5
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4641      	mov	r1, r8
 8003726:	ebb2 0a01 	subs.w	sl, r2, r1
 800372a:	4649      	mov	r1, r9
 800372c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800373c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003740:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003744:	ebb2 040a 	subs.w	r4, r2, sl
 8003748:	eb63 050b 	sbc.w	r5, r3, fp
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	00eb      	lsls	r3, r5, #3
 8003756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800375a:	00e2      	lsls	r2, r4, #3
 800375c:	4614      	mov	r4, r2
 800375e:	461d      	mov	r5, r3
 8003760:	4643      	mov	r3, r8
 8003762:	18e3      	adds	r3, r4, r3
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	464b      	mov	r3, r9
 8003768:	eb45 0303 	adc.w	r3, r5, r3
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800377a:	4629      	mov	r1, r5
 800377c:	028b      	lsls	r3, r1, #10
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003784:	4621      	mov	r1, r4
 8003786:	028a      	lsls	r2, r1, #10
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378e:	2200      	movs	r2, #0
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	61fa      	str	r2, [r7, #28]
 8003794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003798:	f7fd f874 	bl	8000884 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037be:	e002      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3750      	adds	r7, #80	; 0x50
 80037cc:	46bd      	mov	sp, r7
 80037ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	007a1200 	.word	0x007a1200

080037e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000044 	.word	0x20000044

080037f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037fc:	f7ff fff0 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0a9b      	lsrs	r3, r3, #10
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCC_GetPCLK1Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	080073fc 	.word	0x080073fc

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003824:	f7ff ffdc 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0b5b      	lsrs	r3, r3, #13
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	080073fc 	.word	0x080073fc

08003848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d012      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003870:	4b69      	ldr	r3, [pc, #420]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a68      	ldr	r2, [pc, #416]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003876:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800387a:	6093      	str	r3, [r2, #8]
 800387c:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	4964      	ldr	r1, [pc, #400]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003892:	2301      	movs	r3, #1
 8003894:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d017      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038a2:	4b5d      	ldr	r3, [pc, #372]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	4959      	ldr	r1, [pc, #356]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c0:	d101      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d017      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038de:	4b4e      	ldr	r3, [pc, #312]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	494a      	ldr	r1, [pc, #296]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fc:	d101      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800390a:	2301      	movs	r3, #1
 800390c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800391a:	2301      	movs	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 808b 	beq.w	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800392c:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	4a39      	ldr	r2, [pc, #228]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003936:	6413      	str	r3, [r2, #64]	; 0x40
 8003938:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a34      	ldr	r2, [pc, #208]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800394a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fe fbf4 	bl	800213c <HAL_GetTick>
 8003954:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003958:	f7fe fbf0 	bl	800213c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e357      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003976:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d035      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d02e      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003994:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800399e:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	4a1a      	ldr	r2, [pc, #104]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039b6:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039bc:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d114      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe fbb8 	bl	800213c <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ce:	e00a      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d0:	f7fe fbb4 	bl	800213c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e319      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ee      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fe:	d111      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a0e:	400b      	ands	r3, r1
 8003a10:	4901      	ldr	r1, [pc, #4]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	0ffffcff 	.word	0x0ffffcff
 8003a24:	4baa      	ldr	r3, [pc, #680]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4aa9      	ldr	r2, [pc, #676]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a2e:	6093      	str	r3, [r2, #8]
 8003a30:	4ba7      	ldr	r3, [pc, #668]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	49a4      	ldr	r1, [pc, #656]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d010      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a4e:	4ba0      	ldr	r3, [pc, #640]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a54:	4a9e      	ldr	r2, [pc, #632]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a5e:	4b9c      	ldr	r3, [pc, #624]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	4999      	ldr	r1, [pc, #612]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a7c:	4b94      	ldr	r3, [pc, #592]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8a:	4991      	ldr	r1, [pc, #580]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a9e:	4b8c      	ldr	r3, [pc, #560]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aac:	4988      	ldr	r1, [pc, #544]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac0:	4b83      	ldr	r3, [pc, #524]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ace:	4980      	ldr	r1, [pc, #512]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ae2:	4b7b      	ldr	r3, [pc, #492]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	4977      	ldr	r1, [pc, #476]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b04:	4b72      	ldr	r3, [pc, #456]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	496f      	ldr	r1, [pc, #444]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b26:	4b6a      	ldr	r3, [pc, #424]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f023 020c 	bic.w	r2, r3, #12
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b34:	4966      	ldr	r1, [pc, #408]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b48:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	495e      	ldr	r1, [pc, #376]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b6a:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b78:	4955      	ldr	r1, [pc, #340]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b8c:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	494d      	ldr	r1, [pc, #308]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bae:	4b48      	ldr	r3, [pc, #288]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	4944      	ldr	r1, [pc, #272]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bd0:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	493c      	ldr	r1, [pc, #240]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bf2:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	4933      	ldr	r1, [pc, #204]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c14:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c22:	492b      	ldr	r1, [pc, #172]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d011      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c36:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c44:	4922      	ldr	r1, [pc, #136]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c84:	4912      	ldr	r1, [pc, #72]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca8:	4909      	ldr	r1, [pc, #36]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d006      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80d9 	beq.w	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a01      	ldr	r2, [pc, #4]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cce:	e001      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd6:	f7fe fa31 	bl	800213c <HAL_GetTick>
 8003cda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cde:	f7fe fa2d 	bl	800213c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	; 0x64
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e194      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cf0:	4b6c      	ldr	r3, [pc, #432]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d021      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11d      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d10:	4b64      	ldr	r3, [pc, #400]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d1e:	4b61      	ldr	r3, [pc, #388]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d24:	0e1b      	lsrs	r3, r3, #24
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	019a      	lsls	r2, r3, #6
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	061b      	lsls	r3, r3, #24
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	071b      	lsls	r3, r3, #28
 8003d44:	4957      	ldr	r1, [pc, #348]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d02e      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d76:	d129      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d78:	4b4a      	ldr	r3, [pc, #296]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d86:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8c:	0f1b      	lsrs	r3, r3, #28
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	019a      	lsls	r2, r3, #6
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	071b      	lsls	r3, r3, #28
 8003dac:	493d      	ldr	r1, [pc, #244]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dba:	f023 021f 	bic.w	r2, r3, #31
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	4937      	ldr	r1, [pc, #220]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01d      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dd8:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dde:	0e1b      	lsrs	r3, r3, #24
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dec:	0f1b      	lsrs	r3, r3, #28
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	019a      	lsls	r2, r3, #6
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	431a      	orrs	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	071b      	lsls	r3, r3, #28
 8003e0c:	4925      	ldr	r1, [pc, #148]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d011      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	019a      	lsls	r2, r3, #6
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	061b      	lsls	r3, r3, #24
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	071b      	lsls	r3, r3, #28
 8003e3c:	4919      	ldr	r1, [pc, #100]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fe f974 	bl	800213c <HAL_GetTick>
 8003e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e58:	f7fe f970 	bl	800213c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	; 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0d7      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 80cd 	bne.w	8004018 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8a:	f7fe f957 	bl	800213c <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e92:	f7fe f953 	bl	800213c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b64      	cmp	r3, #100	; 0x64
 8003e9e:	d903      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0ba      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ea4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ea8:	4b5e      	ldr	r3, [pc, #376]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb4:	d0ed      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d02e      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d12a      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ede:	4b51      	ldr	r3, [pc, #324]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003eec:	4b4d      	ldr	r3, [pc, #308]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	0f1b      	lsrs	r3, r3, #28
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	019a      	lsls	r2, r3, #6
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	071b      	lsls	r3, r3, #28
 8003f12:	4944      	ldr	r1, [pc, #272]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f1a:	4b42      	ldr	r3, [pc, #264]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	493d      	ldr	r1, [pc, #244]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d022      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f48:	d11d      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f4a:	4b36      	ldr	r3, [pc, #216]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	0e1b      	lsrs	r3, r3, #24
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f58:	4b32      	ldr	r3, [pc, #200]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	0f1b      	lsrs	r3, r3, #28
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	019a      	lsls	r2, r3, #6
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	431a      	orrs	r2, r3
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	071b      	lsls	r3, r3, #28
 8003f7e:	4929      	ldr	r1, [pc, #164]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d028      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	0e1b      	lsrs	r3, r3, #24
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fa0:	4b20      	ldr	r3, [pc, #128]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	0c1b      	lsrs	r3, r3, #16
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	019a      	lsls	r2, r3, #6
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	071b      	lsls	r3, r3, #28
 8003fc6:	4917      	ldr	r1, [pc, #92]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	4911      	ldr	r1, [pc, #68]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0e      	ldr	r2, [pc, #56]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff0:	f7fe f8a4 	bl	800213c <HAL_GetTick>
 8003ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ff8:	f7fe f8a0 	bl	800213c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e007      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004016:	d1ef      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e049      	b.n	80040ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd fe10 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f001 f80e 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04c      	b.n	800418a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <HAL_TIM_Base_Start+0xc0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d022      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d01d      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a22      	ldr	r2, [pc, #136]	; (800419c <HAL_TIM_Base_Start+0xc4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <HAL_TIM_Base_Start+0xc8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1f      	ldr	r2, [pc, #124]	; (80041a4 <HAL_TIM_Base_Start+0xcc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <HAL_TIM_Base_Start+0xd0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <HAL_TIM_Base_Start+0xd4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIM_Base_Start+0x70>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <HAL_TIM_Base_Start+0xd8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d115      	bne.n	8004174 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <HAL_TIM_Base_Start+0xdc>)
 8004150:	4013      	ands	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d015      	beq.n	8004186 <HAL_TIM_Base_Start+0xae>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004160:	d011      	beq.n	8004186 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004172:	e008      	b.n	8004186 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e000      	b.n	8004188 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40000c00 	.word	0x40000c00
 80041a8:	40010400 	.word	0x40010400
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40001800 	.word	0x40001800
 80041b4:	00010007 	.word	0x00010007

080041b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6a1a      	ldr	r2, [r3, #32]
 80041c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10f      	bne.n	80041f0 <HAL_TIM_Base_Stop+0x38>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a1a      	ldr	r2, [r3, #32]
 80041d6:	f240 4344 	movw	r3, #1092	; 0x444
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_Base_Stop+0x38>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e049      	b.n	80042ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fd fdcf 	bl	8001dd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f000 ff1f 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <HAL_TIM_PWM_Start+0x24>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	e03c      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d109      	bne.n	80042f2 <HAL_TIM_PWM_Start+0x3e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	bf14      	ite	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	2300      	moveq	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	e02f      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d109      	bne.n	800430c <HAL_TIM_PWM_Start+0x58>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e022      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d109      	bne.n	8004326 <HAL_TIM_PWM_Start+0x72>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e015      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b10      	cmp	r3, #16
 800432a:	d109      	bne.n	8004340 <HAL_TIM_PWM_Start+0x8c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e008      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e092      	b.n	8004480 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <HAL_TIM_PWM_Start+0xb6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004368:	e023      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Start+0xc6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004378:	e01b      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d104      	bne.n	800438a <HAL_TIM_PWM_Start+0xd6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004388:	e013      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d104      	bne.n	800439a <HAL_TIM_PWM_Start+0xe6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004398:	e00b      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b10      	cmp	r3, #16
 800439e:	d104      	bne.n	80043aa <HAL_TIM_PWM_Start+0xf6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a8:	e003      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 fbba 	bl	8005b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a30      	ldr	r2, [pc, #192]	; (8004488 <HAL_TIM_PWM_Start+0x1d4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_TIM_PWM_Start+0x120>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a2f      	ldr	r2, [pc, #188]	; (800448c <HAL_TIM_PWM_Start+0x1d8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_PWM_Start+0x124>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <HAL_TIM_PWM_Start+0x126>
 80043d8:	2300      	movs	r3, #0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a25      	ldr	r2, [pc, #148]	; (8004488 <HAL_TIM_PWM_Start+0x1d4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_TIM_PWM_Start+0x18a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d01d      	beq.n	800443e <HAL_TIM_PWM_Start+0x18a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a22      	ldr	r2, [pc, #136]	; (8004490 <HAL_TIM_PWM_Start+0x1dc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_TIM_PWM_Start+0x18a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a20      	ldr	r2, [pc, #128]	; (8004494 <HAL_TIM_PWM_Start+0x1e0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_TIM_PWM_Start+0x18a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <HAL_TIM_PWM_Start+0x1e4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_TIM_PWM_Start+0x18a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_TIM_PWM_Start+0x1d8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_TIM_PWM_Start+0x18a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1b      	ldr	r2, [pc, #108]	; (800449c <HAL_TIM_PWM_Start+0x1e8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_TIM_PWM_Start+0x18a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <HAL_TIM_PWM_Start+0x1ec>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d115      	bne.n	800446a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <HAL_TIM_PWM_Start+0x1f0>)
 8004446:	4013      	ands	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b06      	cmp	r3, #6
 800444e:	d015      	beq.n	800447c <HAL_TIM_PWM_Start+0x1c8>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004456:	d011      	beq.n	800447c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004468:	e008      	b.n	800447c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e000      	b.n	800447e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40010000 	.word	0x40010000
 800448c:	40010400 	.word	0x40010400
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40014000 	.word	0x40014000
 80044a0:	40001800 	.word	0x40001800
 80044a4:	00010007 	.word	0x00010007

080044a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e049      	b.n	800454e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f841 	bl	8004556 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f000 fdce 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <HAL_TIM_IC_Start_IT+0x1e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004586:	b2db      	uxtb	r3, r3
 8004588:	e023      	b.n	80045d2 <HAL_TIM_IC_Start_IT+0x66>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d104      	bne.n	800459a <HAL_TIM_IC_Start_IT+0x2e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004596:	b2db      	uxtb	r3, r3
 8004598:	e01b      	b.n	80045d2 <HAL_TIM_IC_Start_IT+0x66>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d104      	bne.n	80045aa <HAL_TIM_IC_Start_IT+0x3e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	e013      	b.n	80045d2 <HAL_TIM_IC_Start_IT+0x66>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	d104      	bne.n	80045ba <HAL_TIM_IC_Start_IT+0x4e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e00b      	b.n	80045d2 <HAL_TIM_IC_Start_IT+0x66>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d104      	bne.n	80045ca <HAL_TIM_IC_Start_IT+0x5e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	e003      	b.n	80045d2 <HAL_TIM_IC_Start_IT+0x66>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <HAL_TIM_IC_Start_IT+0x78>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	e013      	b.n	800460c <HAL_TIM_IC_Start_IT+0xa0>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d104      	bne.n	80045f4 <HAL_TIM_IC_Start_IT+0x88>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e00b      	b.n	800460c <HAL_TIM_IC_Start_IT+0xa0>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d104      	bne.n	8004604 <HAL_TIM_IC_Start_IT+0x98>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e003      	b.n	800460c <HAL_TIM_IC_Start_IT+0xa0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800460a:	b2db      	uxtb	r3, r3
 800460c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800460e:	7bbb      	ldrb	r3, [r7, #14]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d102      	bne.n	800461a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004614:	7b7b      	ldrb	r3, [r7, #13]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0e2      	b.n	80047e4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_TIM_IC_Start_IT+0xc2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462c:	e023      	b.n	8004676 <HAL_TIM_IC_Start_IT+0x10a>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d104      	bne.n	800463e <HAL_TIM_IC_Start_IT+0xd2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800463c:	e01b      	b.n	8004676 <HAL_TIM_IC_Start_IT+0x10a>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d104      	bne.n	800464e <HAL_TIM_IC_Start_IT+0xe2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464c:	e013      	b.n	8004676 <HAL_TIM_IC_Start_IT+0x10a>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d104      	bne.n	800465e <HAL_TIM_IC_Start_IT+0xf2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800465c:	e00b      	b.n	8004676 <HAL_TIM_IC_Start_IT+0x10a>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b10      	cmp	r3, #16
 8004662:	d104      	bne.n	800466e <HAL_TIM_IC_Start_IT+0x102>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800466c:	e003      	b.n	8004676 <HAL_TIM_IC_Start_IT+0x10a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <HAL_TIM_IC_Start_IT+0x11a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004684:	e013      	b.n	80046ae <HAL_TIM_IC_Start_IT+0x142>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b04      	cmp	r3, #4
 800468a:	d104      	bne.n	8004696 <HAL_TIM_IC_Start_IT+0x12a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004694:	e00b      	b.n	80046ae <HAL_TIM_IC_Start_IT+0x142>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_IC_Start_IT+0x13a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046a4:	e003      	b.n	80046ae <HAL_TIM_IC_Start_IT+0x142>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b0c      	cmp	r3, #12
 80046b2:	d841      	bhi.n	8004738 <HAL_TIM_IC_Start_IT+0x1cc>
 80046b4:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <HAL_TIM_IC_Start_IT+0x150>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	080046f1 	.word	0x080046f1
 80046c0:	08004739 	.word	0x08004739
 80046c4:	08004739 	.word	0x08004739
 80046c8:	08004739 	.word	0x08004739
 80046cc:	08004703 	.word	0x08004703
 80046d0:	08004739 	.word	0x08004739
 80046d4:	08004739 	.word	0x08004739
 80046d8:	08004739 	.word	0x08004739
 80046dc:	08004715 	.word	0x08004715
 80046e0:	08004739 	.word	0x08004739
 80046e4:	08004739 	.word	0x08004739
 80046e8:	08004739 	.word	0x08004739
 80046ec:	08004727 	.word	0x08004727
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0202 	orr.w	r2, r2, #2
 80046fe:	60da      	str	r2, [r3, #12]
      break;
 8004700:	e01d      	b.n	800473e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0204 	orr.w	r2, r2, #4
 8004710:	60da      	str	r2, [r3, #12]
      break;
 8004712:	e014      	b.n	800473e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0208 	orr.w	r2, r2, #8
 8004722:	60da      	str	r2, [r3, #12]
      break;
 8004724:	e00b      	b.n	800473e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0210 	orr.w	r2, r2, #16
 8004734:	60da      	str	r2, [r3, #12]
      break;
 8004736:	e002      	b.n	800473e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	bf00      	nop
  }

  if (status == HAL_OK)
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d14e      	bne.n	80047e2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2201      	movs	r2, #1
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f001 f9f1 	bl	8005b34 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a25      	ldr	r2, [pc, #148]	; (80047ec <HAL_TIM_IC_Start_IT+0x280>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d022      	beq.n	80047a2 <HAL_TIM_IC_Start_IT+0x236>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004764:	d01d      	beq.n	80047a2 <HAL_TIM_IC_Start_IT+0x236>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <HAL_TIM_IC_Start_IT+0x284>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d018      	beq.n	80047a2 <HAL_TIM_IC_Start_IT+0x236>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <HAL_TIM_IC_Start_IT+0x288>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_TIM_IC_Start_IT+0x236>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <HAL_TIM_IC_Start_IT+0x28c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <HAL_TIM_IC_Start_IT+0x236>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <HAL_TIM_IC_Start_IT+0x290>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_TIM_IC_Start_IT+0x236>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <HAL_TIM_IC_Start_IT+0x294>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_TIM_IC_Start_IT+0x236>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a19      	ldr	r2, [pc, #100]	; (8004804 <HAL_TIM_IC_Start_IT+0x298>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d115      	bne.n	80047ce <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <HAL_TIM_IC_Start_IT+0x29c>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b06      	cmp	r3, #6
 80047b2:	d015      	beq.n	80047e0 <HAL_TIM_IC_Start_IT+0x274>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ba:	d011      	beq.n	80047e0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047cc:	e008      	b.n	80047e0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e000      	b.n	80047e2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	40010400 	.word	0x40010400
 8004800:	40014000 	.word	0x40014000
 8004804:	40001800 	.word	0x40001800
 8004808:	00010007 	.word	0x00010007

0800480c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d122      	bne.n	8004868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b02      	cmp	r3, #2
 800482e:	d11b      	bne.n	8004868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0202 	mvn.w	r2, #2
 8004838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd f976 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fbf8 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fbff 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b04      	cmp	r3, #4
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b04      	cmp	r3, #4
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0204 	mvn.w	r2, #4
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd f94c 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fbce 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fbd5 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d122      	bne.n	8004910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0208 	mvn.w	r2, #8
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2204      	movs	r2, #4
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd f922 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fba4 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fbab 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b10      	cmp	r3, #16
 800491c:	d122      	bne.n	8004964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b10      	cmp	r3, #16
 800492a:	d11b      	bne.n	8004964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0210 	mvn.w	r2, #16
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2208      	movs	r2, #8
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd f8f8 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fb7a 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fb81 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0201 	mvn.w	r2, #1
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc fc24 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b80      	cmp	r3, #128	; 0x80
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a8:	2b80      	cmp	r3, #128	; 0x80
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 f97a 	bl	8005cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ca:	d10e      	bne.n	80049ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d107      	bne.n	80049ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 f96d 	bl	8005cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d10e      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d107      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fb2f 	bl	8005074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d10e      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d107      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f06f 0220 	mvn.w	r2, #32
 8004a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 f92d 	bl	8005c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e088      	b.n	8004b7a <HAL_TIM_IC_ConfigChannel+0x130>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11b      	bne.n	8004aae <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004a86:	f000 fe91 	bl	80057ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 020c 	bic.w	r2, r2, #12
 8004a98:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6999      	ldr	r1, [r3, #24]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	619a      	str	r2, [r3, #24]
 8004aac:	e060      	b.n	8004b70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d11c      	bne.n	8004aee <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004ac4:	f000 ff15 	bl	80058f2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ad6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6999      	ldr	r1, [r3, #24]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	021a      	lsls	r2, r3, #8
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	619a      	str	r2, [r3, #24]
 8004aec:	e040      	b.n	8004b70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d11b      	bne.n	8004b2c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004b04:	f000 ff62 	bl	80059cc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 020c 	bic.w	r2, r2, #12
 8004b16:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69d9      	ldr	r1, [r3, #28]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	61da      	str	r2, [r3, #28]
 8004b2a:	e021      	b.n	8004b70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b0c      	cmp	r3, #12
 8004b30:	d11c      	bne.n	8004b6c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004b42:	f000 ff7f 	bl	8005a44 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b54:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69d9      	ldr	r1, [r3, #28]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	021a      	lsls	r2, r3, #8
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	61da      	str	r2, [r3, #28]
 8004b6a:	e001      	b.n	8004b70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e0ff      	b.n	8004da2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b14      	cmp	r3, #20
 8004bae:	f200 80f0 	bhi.w	8004d92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004c0d 	.word	0x08004c0d
 8004bbc:	08004d93 	.word	0x08004d93
 8004bc0:	08004d93 	.word	0x08004d93
 8004bc4:	08004d93 	.word	0x08004d93
 8004bc8:	08004c4d 	.word	0x08004c4d
 8004bcc:	08004d93 	.word	0x08004d93
 8004bd0:	08004d93 	.word	0x08004d93
 8004bd4:	08004d93 	.word	0x08004d93
 8004bd8:	08004c8f 	.word	0x08004c8f
 8004bdc:	08004d93 	.word	0x08004d93
 8004be0:	08004d93 	.word	0x08004d93
 8004be4:	08004d93 	.word	0x08004d93
 8004be8:	08004ccf 	.word	0x08004ccf
 8004bec:	08004d93 	.word	0x08004d93
 8004bf0:	08004d93 	.word	0x08004d93
 8004bf4:	08004d93 	.word	0x08004d93
 8004bf8:	08004d11 	.word	0x08004d11
 8004bfc:	08004d93 	.word	0x08004d93
 8004c00:	08004d93 	.word	0x08004d93
 8004c04:	08004d93 	.word	0x08004d93
 8004c08:	08004d51 	.word	0x08004d51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fad8 	bl	80051c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0208 	orr.w	r2, r2, #8
 8004c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0204 	bic.w	r2, r2, #4
 8004c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6999      	ldr	r1, [r3, #24]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	619a      	str	r2, [r3, #24]
      break;
 8004c4a:	e0a5      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb2a 	bl	80052ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6999      	ldr	r1, [r3, #24]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	021a      	lsls	r2, r3, #8
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	619a      	str	r2, [r3, #24]
      break;
 8004c8c:	e084      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fb81 	bl	800539c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0208 	orr.w	r2, r2, #8
 8004ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0204 	bic.w	r2, r2, #4
 8004cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69d9      	ldr	r1, [r3, #28]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	61da      	str	r2, [r3, #28]
      break;
 8004ccc:	e064      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fbd7 	bl	8005488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69d9      	ldr	r1, [r3, #28]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	021a      	lsls	r2, r3, #8
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	61da      	str	r2, [r3, #28]
      break;
 8004d0e:	e043      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fc0e 	bl	8005538 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0208 	orr.w	r2, r2, #8
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0204 	bic.w	r2, r2, #4
 8004d3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d4e:	e023      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fc40 	bl	80055dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	021a      	lsls	r2, r3, #8
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d90:	e002      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
      break;
 8004d96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop

08004dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e0b4      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x186>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	4b56      	ldr	r3, [pc, #344]	; (8004f3c <HAL_TIM_ConfigClockSource+0x190>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	d03e      	beq.n	8004e80 <HAL_TIM_ConfigClockSource+0xd4>
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	f200 8087 	bhi.w	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	f000 8086 	beq.w	8004f1e <HAL_TIM_ConfigClockSource+0x172>
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d87f      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b70      	cmp	r3, #112	; 0x70
 8004e1a:	d01a      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0xa6>
 8004e1c:	2b70      	cmp	r3, #112	; 0x70
 8004e1e:	d87b      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b60      	cmp	r3, #96	; 0x60
 8004e22:	d050      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e24:	2b60      	cmp	r3, #96	; 0x60
 8004e26:	d877      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b50      	cmp	r3, #80	; 0x50
 8004e2a:	d03c      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e2c:	2b50      	cmp	r3, #80	; 0x50
 8004e2e:	d873      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d058      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x13a>
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d86f      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b30      	cmp	r3, #48	; 0x30
 8004e3a:	d064      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e3c:	2b30      	cmp	r3, #48	; 0x30
 8004e3e:	d86b      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d060      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d867      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d05c      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d05a      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	e062      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e62:	f000 fe47 	bl	8005af4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	609a      	str	r2, [r3, #8]
      break;
 8004e7e:	e04f      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e90:	f000 fe30 	bl	8005af4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea2:	609a      	str	r2, [r3, #8]
      break;
 8004ea4:	e03c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 fcee 	bl	8005894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2150      	movs	r1, #80	; 0x50
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fdfd 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e02c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f000 fd4a 	bl	800596c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2160      	movs	r1, #96	; 0x60
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fded 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8004ee4:	e01c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f000 fcce 	bl	8005894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2140      	movs	r1, #64	; 0x40
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fddd 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8004f04:	e00c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f000 fdd4 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8004f16:	e003      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1c:	e000      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	fffeff88 	.word	0xfffeff88

08004f40 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e031      	b.n	8004fbc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fb8a 	bl	8005684 <TIM_SlaveTimer_SetConfig>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e018      	b.n	8004fbc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f98:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fa8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b0c      	cmp	r3, #12
 8004fd6:	d831      	bhi.n	800503c <HAL_TIM_ReadCapturedValue+0x78>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005015 	.word	0x08005015
 8004fe4:	0800503d 	.word	0x0800503d
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	0800501f 	.word	0x0800501f
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	0800503d 	.word	0x0800503d
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	08005029 	.word	0x08005029
 8005004:	0800503d 	.word	0x0800503d
 8005008:	0800503d 	.word	0x0800503d
 800500c:	0800503d 	.word	0x0800503d
 8005010:	08005033 	.word	0x08005033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	60fb      	str	r3, [r7, #12]

      break;
 800501c:	e00f      	b.n	800503e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	60fb      	str	r3, [r7, #12]

      break;
 8005026:	e00a      	b.n	800503e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	60fb      	str	r3, [r7, #12]

      break;
 8005030:	e005      	b.n	800503e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	60fb      	str	r3, [r7, #12]

      break;
 800503a:	e000      	b.n	800503e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800503c:	bf00      	nop
  }

  return tmpreg;
 800503e:	68fb      	ldr	r3, [r7, #12]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a40      	ldr	r2, [pc, #256]	; (800519c <TIM_Base_SetConfig+0x114>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a6:	d00f      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3d      	ldr	r2, [pc, #244]	; (80051a0 <TIM_Base_SetConfig+0x118>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3c      	ldr	r2, [pc, #240]	; (80051a4 <TIM_Base_SetConfig+0x11c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <TIM_Base_SetConfig+0x120>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a3a      	ldr	r2, [pc, #232]	; (80051ac <TIM_Base_SetConfig+0x124>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d108      	bne.n	80050da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2f      	ldr	r2, [pc, #188]	; (800519c <TIM_Base_SetConfig+0x114>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d02b      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e8:	d027      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <TIM_Base_SetConfig+0x118>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d023      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2b      	ldr	r2, [pc, #172]	; (80051a4 <TIM_Base_SetConfig+0x11c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01f      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <TIM_Base_SetConfig+0x120>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01b      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a29      	ldr	r2, [pc, #164]	; (80051ac <TIM_Base_SetConfig+0x124>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d017      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <TIM_Base_SetConfig+0x128>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <TIM_Base_SetConfig+0x12c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00f      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <TIM_Base_SetConfig+0x130>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a25      	ldr	r2, [pc, #148]	; (80051bc <TIM_Base_SetConfig+0x134>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a24      	ldr	r2, [pc, #144]	; (80051c0 <TIM_Base_SetConfig+0x138>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a23      	ldr	r2, [pc, #140]	; (80051c4 <TIM_Base_SetConfig+0x13c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d108      	bne.n	800514c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <TIM_Base_SetConfig+0x114>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_Base_SetConfig+0xf8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a0c      	ldr	r2, [pc, #48]	; (80051ac <TIM_Base_SetConfig+0x124>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d103      	bne.n	8005188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	615a      	str	r2, [r3, #20]
}
 800518e:	bf00      	nop
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40010000 	.word	0x40010000
 80051a0:	40000400 	.word	0x40000400
 80051a4:	40000800 	.word	0x40000800
 80051a8:	40000c00 	.word	0x40000c00
 80051ac:	40010400 	.word	0x40010400
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40014400 	.word	0x40014400
 80051b8:	40014800 	.word	0x40014800
 80051bc:	40001800 	.word	0x40001800
 80051c0:	40001c00 	.word	0x40001c00
 80051c4:	40002000 	.word	0x40002000

080051c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <TIM_OC1_SetConfig+0xd8>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 0302 	bic.w	r3, r3, #2
 8005210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <TIM_OC1_SetConfig+0xdc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC1_SetConfig+0x64>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <TIM_OC1_SetConfig+0xe0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10c      	bne.n	8005246 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0308 	bic.w	r3, r3, #8
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0304 	bic.w	r3, r3, #4
 8005244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <TIM_OC1_SetConfig+0xdc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_OC1_SetConfig+0x8e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <TIM_OC1_SetConfig+0xe0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d111      	bne.n	800527a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	fffeff8f 	.word	0xfffeff8f
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40010400 	.word	0x40010400

080052ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0210 	bic.w	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <TIM_OC2_SetConfig+0xe4>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 0320 	bic.w	r3, r3, #32
 80052f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a23      	ldr	r2, [pc, #140]	; (8005394 <TIM_OC2_SetConfig+0xe8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_OC2_SetConfig+0x68>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a22      	ldr	r2, [pc, #136]	; (8005398 <TIM_OC2_SetConfig+0xec>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d10d      	bne.n	8005330 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <TIM_OC2_SetConfig+0xe8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC2_SetConfig+0x94>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a17      	ldr	r2, [pc, #92]	; (8005398 <TIM_OC2_SetConfig+0xec>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d113      	bne.n	8005368 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800534e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	feff8fff 	.word	0xfeff8fff
 8005394:	40010000 	.word	0x40010000
 8005398:	40010400 	.word	0x40010400

0800539c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4b2d      	ldr	r3, [pc, #180]	; (800547c <TIM_OC3_SetConfig+0xe0>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a22      	ldr	r2, [pc, #136]	; (8005480 <TIM_OC3_SetConfig+0xe4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_OC3_SetConfig+0x66>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a21      	ldr	r2, [pc, #132]	; (8005484 <TIM_OC3_SetConfig+0xe8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10d      	bne.n	800541e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800541c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <TIM_OC3_SetConfig+0xe4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_OC3_SetConfig+0x92>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a16      	ldr	r2, [pc, #88]	; (8005484 <TIM_OC3_SetConfig+0xe8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d113      	bne.n	8005456 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	621a      	str	r2, [r3, #32]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	fffeff8f 	.word	0xfffeff8f
 8005480:	40010000 	.word	0x40010000
 8005484:	40010400 	.word	0x40010400

08005488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4b1e      	ldr	r3, [pc, #120]	; (800552c <TIM_OC4_SetConfig+0xa4>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	031b      	lsls	r3, r3, #12
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a13      	ldr	r2, [pc, #76]	; (8005530 <TIM_OC4_SetConfig+0xa8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_OC4_SetConfig+0x68>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a12      	ldr	r2, [pc, #72]	; (8005534 <TIM_OC4_SetConfig+0xac>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d109      	bne.n	8005504 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	feff8fff 	.word	0xfeff8fff
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400

08005538 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <TIM_OC5_SetConfig+0x98>)
 8005564:	4013      	ands	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005578:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <TIM_OC5_SetConfig+0x9c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_OC5_SetConfig+0x5e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a11      	ldr	r2, [pc, #68]	; (80055d8 <TIM_OC5_SetConfig+0xa0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d109      	bne.n	80055aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	621a      	str	r2, [r3, #32]
}
 80055c4:	bf00      	nop
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	fffeff8f 	.word	0xfffeff8f
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400

080055dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <TIM_OC6_SetConfig+0x9c>)
 8005608:	4013      	ands	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800561e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	051b      	lsls	r3, r3, #20
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <TIM_OC6_SetConfig+0xa0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_OC6_SetConfig+0x60>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a12      	ldr	r2, [pc, #72]	; (8005680 <TIM_OC6_SetConfig+0xa4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d109      	bne.n	8005650 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005642:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	029b      	lsls	r3, r3, #10
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	feff8fff 	.word	0xfeff8fff
 800567c:	40010000 	.word	0x40010000
 8005680:	40010400 	.word	0x40010400

08005684 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4b3e      	ldr	r3, [pc, #248]	; (80057a8 <TIM_SlaveTimer_SetConfig+0x124>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b70      	cmp	r3, #112	; 0x70
 80056cc:	d01a      	beq.n	8005704 <TIM_SlaveTimer_SetConfig+0x80>
 80056ce:	2b70      	cmp	r3, #112	; 0x70
 80056d0:	d860      	bhi.n	8005794 <TIM_SlaveTimer_SetConfig+0x110>
 80056d2:	2b60      	cmp	r3, #96	; 0x60
 80056d4:	d054      	beq.n	8005780 <TIM_SlaveTimer_SetConfig+0xfc>
 80056d6:	2b60      	cmp	r3, #96	; 0x60
 80056d8:	d85c      	bhi.n	8005794 <TIM_SlaveTimer_SetConfig+0x110>
 80056da:	2b50      	cmp	r3, #80	; 0x50
 80056dc:	d046      	beq.n	800576c <TIM_SlaveTimer_SetConfig+0xe8>
 80056de:	2b50      	cmp	r3, #80	; 0x50
 80056e0:	d858      	bhi.n	8005794 <TIM_SlaveTimer_SetConfig+0x110>
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d019      	beq.n	800571a <TIM_SlaveTimer_SetConfig+0x96>
 80056e6:	2b40      	cmp	r3, #64	; 0x40
 80056e8:	d854      	bhi.n	8005794 <TIM_SlaveTimer_SetConfig+0x110>
 80056ea:	2b30      	cmp	r3, #48	; 0x30
 80056ec:	d055      	beq.n	800579a <TIM_SlaveTimer_SetConfig+0x116>
 80056ee:	2b30      	cmp	r3, #48	; 0x30
 80056f0:	d850      	bhi.n	8005794 <TIM_SlaveTimer_SetConfig+0x110>
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d051      	beq.n	800579a <TIM_SlaveTimer_SetConfig+0x116>
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d84c      	bhi.n	8005794 <TIM_SlaveTimer_SetConfig+0x110>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d04d      	beq.n	800579a <TIM_SlaveTimer_SetConfig+0x116>
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d04b      	beq.n	800579a <TIM_SlaveTimer_SetConfig+0x116>
 8005702:	e047      	b.n	8005794 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005714:	f000 f9ee 	bl	8005af4 <TIM_ETR_SetConfig>
      break;
 8005718:	e040      	b.n	800579c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b05      	cmp	r3, #5
 8005720:	d101      	bne.n	8005726 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e03b      	b.n	800579e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800574c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	4313      	orrs	r3, r2
 8005758:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	621a      	str	r2, [r3, #32]
      break;
 800576a:	e017      	b.n	800579c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005778:	461a      	mov	r2, r3
 800577a:	f000 f88b 	bl	8005894 <TIM_TI1_ConfigInputStage>
      break;
 800577e:	e00d      	b.n	800579c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800578c:	461a      	mov	r2, r3
 800578e:	f000 f8ed 	bl	800596c <TIM_TI2_ConfigInputStage>
      break;
 8005792:	e003      	b.n	800579c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
      break;
 8005798:	e000      	b.n	800579c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800579a:	bf00      	nop
  }

  return status;
 800579c:	7dfb      	ldrb	r3, [r7, #23]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	fffefff8 	.word	0xfffefff8

080057ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 0201 	bic.w	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a28      	ldr	r2, [pc, #160]	; (8005878 <TIM_TI1_SetConfig+0xcc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01b      	beq.n	8005812 <TIM_TI1_SetConfig+0x66>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d017      	beq.n	8005812 <TIM_TI1_SetConfig+0x66>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4a25      	ldr	r2, [pc, #148]	; (800587c <TIM_TI1_SetConfig+0xd0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <TIM_TI1_SetConfig+0x66>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a24      	ldr	r2, [pc, #144]	; (8005880 <TIM_TI1_SetConfig+0xd4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00f      	beq.n	8005812 <TIM_TI1_SetConfig+0x66>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a23      	ldr	r2, [pc, #140]	; (8005884 <TIM_TI1_SetConfig+0xd8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00b      	beq.n	8005812 <TIM_TI1_SetConfig+0x66>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a22      	ldr	r2, [pc, #136]	; (8005888 <TIM_TI1_SetConfig+0xdc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <TIM_TI1_SetConfig+0x66>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a21      	ldr	r2, [pc, #132]	; (800588c <TIM_TI1_SetConfig+0xe0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_TI1_SetConfig+0x66>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a20      	ldr	r2, [pc, #128]	; (8005890 <TIM_TI1_SetConfig+0xe4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d101      	bne.n	8005816 <TIM_TI1_SetConfig+0x6a>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <TIM_TI1_SetConfig+0x6c>
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e003      	b.n	8005836 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800583c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	b2db      	uxtb	r3, r3
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f023 030a 	bic.w	r3, r3, #10
 8005850:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f003 030a 	and.w	r3, r3, #10
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40010000 	.word	0x40010000
 800587c:	40000400 	.word	0x40000400
 8005880:	40000800 	.word	0x40000800
 8005884:	40000c00 	.word	0x40000c00
 8005888:	40010400 	.word	0x40010400
 800588c:	40014000 	.word	0x40014000
 8005890:	40001800 	.word	0x40001800

08005894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0201 	bic.w	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 030a 	bic.w	r3, r3, #10
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b087      	sub	sp, #28
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f023 0210 	bic.w	r2, r3, #16
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	b29b      	uxth	r3, r3
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005944:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	f023 0210 	bic.w	r2, r3, #16
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005996:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	031b      	lsls	r3, r3, #12
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 0303 	bic.w	r3, r3, #3
 80059f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	031b      	lsls	r3, r3, #12
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	031b      	lsls	r3, r3, #12
 8005a9c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	621a      	str	r2, [r3, #32]
}
 8005ab2:	bf00      	nop
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f043 0307 	orr.w	r3, r3, #7
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	021a      	lsls	r2, r3, #8
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2201      	movs	r2, #1
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1a      	ldr	r2, [r3, #32]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	43db      	mvns	r3, r3
 8005b56:	401a      	ands	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1a      	ldr	r2, [r3, #32]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e06d      	b.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a30      	ldr	r2, [pc, #192]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a2f      	ldr	r2, [pc, #188]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d108      	bne.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a20      	ldr	r2, [pc, #128]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d022      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0a:	d01d      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d018      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a15      	ldr	r2, [pc, #84]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10c      	bne.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40010400 	.word	0x40010400
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40001800 	.word	0x40001800

08005c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e040      	b.n	8005d6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fc f8e2 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2224      	movs	r2, #36	; 0x24
 8005d04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0201 	bic.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fb62 	bl	80063e0 <UART_SetConfig>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e022      	b.n	8005d6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fdba 	bl	80068a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fe41 	bl	80069ec <UART_CheckIdleState>
 8005d6a:	4603      	mov	r3, r0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	; 0x28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d132      	bne.n	8005df2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_UART_Receive_IT+0x24>
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e02b      	b.n	8005df4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d018      	beq.n	8005de2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	623b      	str	r3, [r7, #32]
 8005dd0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	69f9      	ldr	r1, [r7, #28]
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e6      	bne.n	8005db0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	461a      	mov	r2, r3
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fefd 	bl	8006be8 <UART_Start_Receive_IT>
 8005dee:	4603      	mov	r3, r0
 8005df0:	e000      	b.n	8005df4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3728      	adds	r7, #40	; 0x28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b0ba      	sub	sp, #232	; 0xe8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e26:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d115      	bne.n	8005e64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00f      	beq.n	8005e64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8297 	beq.w	8006388 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
      }
      return;
 8005e62:	e291      	b.n	8006388 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8117 	beq.w	800609c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e7e:	4b85      	ldr	r3, [pc, #532]	; (8006094 <HAL_UART_IRQHandler+0x298>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 810a 	beq.w	800609c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d011      	beq.n	8005eb8 <HAL_UART_IRQHandler+0xbc>
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d011      	beq.n	8005ee8 <HAL_UART_IRQHandler+0xec>
 8005ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ede:	f043 0204 	orr.w	r2, r3, #4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d011      	beq.n	8005f18 <HAL_UART_IRQHandler+0x11c>
 8005ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00b      	beq.n	8005f18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2204      	movs	r2, #4
 8005f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0e:	f043 0202 	orr.w	r2, r3, #2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d017      	beq.n	8005f54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2208      	movs	r2, #8
 8005f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4a:	f043 0208 	orr.w	r2, r3, #8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d012      	beq.n	8005f86 <HAL_UART_IRQHandler+0x18a>
 8005f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00c      	beq.n	8005f86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f7c:	f043 0220 	orr.w	r2, r3, #32
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 81fd 	beq.w	800638c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00d      	beq.n	8005fba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	d005      	beq.n	8005fde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d04f      	beq.n	800607e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fec8 	bl	8006d74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d141      	bne.n	8006076 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800600c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800601e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800602a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1d9      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006042:	2b00      	cmp	r3, #0
 8006044:	d013      	beq.n	800606e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604a:	4a13      	ldr	r2, [pc, #76]	; (8006098 <HAL_UART_IRQHandler+0x29c>)
 800604c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006052:	4618      	mov	r0, r3
 8006054:	f7fc f9ff 	bl	8002456 <HAL_DMA_Abort_IT>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d017      	beq.n	800608e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006068:	4610      	mov	r0, r2
 800606a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	e00f      	b.n	800608e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f9a0 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006074:	e00b      	b.n	800608e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f99c 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607c:	e007      	b.n	800608e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f998 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800608c:	e17e      	b.n	800638c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608e:	bf00      	nop
    return;
 8006090:	e17c      	b.n	800638c <HAL_UART_IRQHandler+0x590>
 8006092:	bf00      	nop
 8006094:	04000120 	.word	0x04000120
 8006098:	08006e3d 	.word	0x08006e3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	f040 814c 	bne.w	800633e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 8145 	beq.w	800633e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 813e 	beq.w	800633e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2210      	movs	r2, #16
 80060c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b40      	cmp	r3, #64	; 0x40
 80060d6:	f040 80b6 	bne.w	8006246 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8150 	beq.w	8006390 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060fa:	429a      	cmp	r2, r3
 80060fc:	f080 8148 	bcs.w	8006390 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006114:	f000 8086 	beq.w	8006224 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800612c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006146:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800614e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800615a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1da      	bne.n	8006118 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3308      	adds	r3, #8
 8006182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006186:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800618a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800618e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e1      	bne.n	8006162 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3308      	adds	r3, #8
 80061a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3308      	adds	r3, #8
 80061be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e3      	bne.n	800619e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006206:	65bb      	str	r3, [r7, #88]	; 0x58
 8006208:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800620c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e4      	bne.n	80061e4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621e:	4618      	mov	r0, r3
 8006220:	f7fc f8a9 	bl	8002376 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006236:	b29b      	uxth	r3, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	b29b      	uxth	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8c2 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006244:	e0a4      	b.n	8006390 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006252:	b29b      	uxth	r3, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8096 	beq.w	8006394 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8091 	beq.w	8006394 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006294:	647b      	str	r3, [r7, #68]	; 0x44
 8006296:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800629a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e4      	bne.n	8006272 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	623b      	str	r3, [r7, #32]
   return(result);
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062cc:	633a      	str	r2, [r7, #48]	; 0x30
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e3      	bne.n	80062a8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	60fb      	str	r3, [r7, #12]
   return(result);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f023 0310 	bic.w	r3, r3, #16
 8006308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	69b9      	ldr	r1, [r7, #24]
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	617b      	str	r3, [r7, #20]
   return(result);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e4      	bne.n	80062f4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2202      	movs	r2, #2
 800632e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f846 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800633c:	e02a      	b.n	8006394 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800633e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00e      	beq.n	8006368 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800634a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01c      	beq.n	8006398 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
    }
    return;
 8006366:	e017      	b.n	8006398 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d012      	beq.n	800639a <HAL_UART_IRQHandler+0x59e>
 8006374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fd71 	bl	8006e68 <UART_EndTransmit_IT>
    return;
 8006386:	e008      	b.n	800639a <HAL_UART_IRQHandler+0x59e>
      return;
 8006388:	bf00      	nop
 800638a:	e006      	b.n	800639a <HAL_UART_IRQHandler+0x59e>
    return;
 800638c:	bf00      	nop
 800638e:	e004      	b.n	800639a <HAL_UART_IRQHandler+0x59e>
      return;
 8006390:	bf00      	nop
 8006392:	e002      	b.n	800639a <HAL_UART_IRQHandler+0x59e>
      return;
 8006394:	bf00      	nop
 8006396:	e000      	b.n	800639a <HAL_UART_IRQHandler+0x59e>
    return;
 8006398:	bf00      	nop
  }

}
 800639a:	37e8      	adds	r7, #232	; 0xe8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4ba6      	ldr	r3, [pc, #664]	; (80066a4 <UART_SetConfig+0x2c4>)
 800640c:	4013      	ands	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	6979      	ldr	r1, [r7, #20]
 8006414:	430b      	orrs	r3, r1
 8006416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	430a      	orrs	r2, r1
 8006450:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a94      	ldr	r2, [pc, #592]	; (80066a8 <UART_SetConfig+0x2c8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d120      	bne.n	800649e <UART_SetConfig+0xbe>
 800645c:	4b93      	ldr	r3, [pc, #588]	; (80066ac <UART_SetConfig+0x2cc>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d816      	bhi.n	8006498 <UART_SetConfig+0xb8>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <UART_SetConfig+0x90>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006481 	.word	0x08006481
 8006474:	0800648d 	.word	0x0800648d
 8006478:	08006487 	.word	0x08006487
 800647c:	08006493 	.word	0x08006493
 8006480:	2301      	movs	r3, #1
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e150      	b.n	8006728 <UART_SetConfig+0x348>
 8006486:	2302      	movs	r3, #2
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e14d      	b.n	8006728 <UART_SetConfig+0x348>
 800648c:	2304      	movs	r3, #4
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e14a      	b.n	8006728 <UART_SetConfig+0x348>
 8006492:	2308      	movs	r3, #8
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e147      	b.n	8006728 <UART_SetConfig+0x348>
 8006498:	2310      	movs	r3, #16
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e144      	b.n	8006728 <UART_SetConfig+0x348>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a83      	ldr	r2, [pc, #524]	; (80066b0 <UART_SetConfig+0x2d0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d132      	bne.n	800650e <UART_SetConfig+0x12e>
 80064a8:	4b80      	ldr	r3, [pc, #512]	; (80066ac <UART_SetConfig+0x2cc>)
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ae:	f003 030c 	and.w	r3, r3, #12
 80064b2:	2b0c      	cmp	r3, #12
 80064b4:	d828      	bhi.n	8006508 <UART_SetConfig+0x128>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <UART_SetConfig+0xdc>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	08006509 	.word	0x08006509
 80064c4:	08006509 	.word	0x08006509
 80064c8:	08006509 	.word	0x08006509
 80064cc:	080064fd 	.word	0x080064fd
 80064d0:	08006509 	.word	0x08006509
 80064d4:	08006509 	.word	0x08006509
 80064d8:	08006509 	.word	0x08006509
 80064dc:	080064f7 	.word	0x080064f7
 80064e0:	08006509 	.word	0x08006509
 80064e4:	08006509 	.word	0x08006509
 80064e8:	08006509 	.word	0x08006509
 80064ec:	08006503 	.word	0x08006503
 80064f0:	2300      	movs	r3, #0
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e118      	b.n	8006728 <UART_SetConfig+0x348>
 80064f6:	2302      	movs	r3, #2
 80064f8:	77fb      	strb	r3, [r7, #31]
 80064fa:	e115      	b.n	8006728 <UART_SetConfig+0x348>
 80064fc:	2304      	movs	r3, #4
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	e112      	b.n	8006728 <UART_SetConfig+0x348>
 8006502:	2308      	movs	r3, #8
 8006504:	77fb      	strb	r3, [r7, #31]
 8006506:	e10f      	b.n	8006728 <UART_SetConfig+0x348>
 8006508:	2310      	movs	r3, #16
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e10c      	b.n	8006728 <UART_SetConfig+0x348>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a68      	ldr	r2, [pc, #416]	; (80066b4 <UART_SetConfig+0x2d4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d120      	bne.n	800655a <UART_SetConfig+0x17a>
 8006518:	4b64      	ldr	r3, [pc, #400]	; (80066ac <UART_SetConfig+0x2cc>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006522:	2b30      	cmp	r3, #48	; 0x30
 8006524:	d013      	beq.n	800654e <UART_SetConfig+0x16e>
 8006526:	2b30      	cmp	r3, #48	; 0x30
 8006528:	d814      	bhi.n	8006554 <UART_SetConfig+0x174>
 800652a:	2b20      	cmp	r3, #32
 800652c:	d009      	beq.n	8006542 <UART_SetConfig+0x162>
 800652e:	2b20      	cmp	r3, #32
 8006530:	d810      	bhi.n	8006554 <UART_SetConfig+0x174>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <UART_SetConfig+0x15c>
 8006536:	2b10      	cmp	r3, #16
 8006538:	d006      	beq.n	8006548 <UART_SetConfig+0x168>
 800653a:	e00b      	b.n	8006554 <UART_SetConfig+0x174>
 800653c:	2300      	movs	r3, #0
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e0f2      	b.n	8006728 <UART_SetConfig+0x348>
 8006542:	2302      	movs	r3, #2
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e0ef      	b.n	8006728 <UART_SetConfig+0x348>
 8006548:	2304      	movs	r3, #4
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e0ec      	b.n	8006728 <UART_SetConfig+0x348>
 800654e:	2308      	movs	r3, #8
 8006550:	77fb      	strb	r3, [r7, #31]
 8006552:	e0e9      	b.n	8006728 <UART_SetConfig+0x348>
 8006554:	2310      	movs	r3, #16
 8006556:	77fb      	strb	r3, [r7, #31]
 8006558:	e0e6      	b.n	8006728 <UART_SetConfig+0x348>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a56      	ldr	r2, [pc, #344]	; (80066b8 <UART_SetConfig+0x2d8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d120      	bne.n	80065a6 <UART_SetConfig+0x1c6>
 8006564:	4b51      	ldr	r3, [pc, #324]	; (80066ac <UART_SetConfig+0x2cc>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800656e:	2bc0      	cmp	r3, #192	; 0xc0
 8006570:	d013      	beq.n	800659a <UART_SetConfig+0x1ba>
 8006572:	2bc0      	cmp	r3, #192	; 0xc0
 8006574:	d814      	bhi.n	80065a0 <UART_SetConfig+0x1c0>
 8006576:	2b80      	cmp	r3, #128	; 0x80
 8006578:	d009      	beq.n	800658e <UART_SetConfig+0x1ae>
 800657a:	2b80      	cmp	r3, #128	; 0x80
 800657c:	d810      	bhi.n	80065a0 <UART_SetConfig+0x1c0>
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <UART_SetConfig+0x1a8>
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d006      	beq.n	8006594 <UART_SetConfig+0x1b4>
 8006586:	e00b      	b.n	80065a0 <UART_SetConfig+0x1c0>
 8006588:	2300      	movs	r3, #0
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e0cc      	b.n	8006728 <UART_SetConfig+0x348>
 800658e:	2302      	movs	r3, #2
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e0c9      	b.n	8006728 <UART_SetConfig+0x348>
 8006594:	2304      	movs	r3, #4
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e0c6      	b.n	8006728 <UART_SetConfig+0x348>
 800659a:	2308      	movs	r3, #8
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e0c3      	b.n	8006728 <UART_SetConfig+0x348>
 80065a0:	2310      	movs	r3, #16
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e0c0      	b.n	8006728 <UART_SetConfig+0x348>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a44      	ldr	r2, [pc, #272]	; (80066bc <UART_SetConfig+0x2dc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d125      	bne.n	80065fc <UART_SetConfig+0x21c>
 80065b0:	4b3e      	ldr	r3, [pc, #248]	; (80066ac <UART_SetConfig+0x2cc>)
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065be:	d017      	beq.n	80065f0 <UART_SetConfig+0x210>
 80065c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065c4:	d817      	bhi.n	80065f6 <UART_SetConfig+0x216>
 80065c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ca:	d00b      	beq.n	80065e4 <UART_SetConfig+0x204>
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d0:	d811      	bhi.n	80065f6 <UART_SetConfig+0x216>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <UART_SetConfig+0x1fe>
 80065d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065da:	d006      	beq.n	80065ea <UART_SetConfig+0x20a>
 80065dc:	e00b      	b.n	80065f6 <UART_SetConfig+0x216>
 80065de:	2300      	movs	r3, #0
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e0a1      	b.n	8006728 <UART_SetConfig+0x348>
 80065e4:	2302      	movs	r3, #2
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e09e      	b.n	8006728 <UART_SetConfig+0x348>
 80065ea:	2304      	movs	r3, #4
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	e09b      	b.n	8006728 <UART_SetConfig+0x348>
 80065f0:	2308      	movs	r3, #8
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e098      	b.n	8006728 <UART_SetConfig+0x348>
 80065f6:	2310      	movs	r3, #16
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e095      	b.n	8006728 <UART_SetConfig+0x348>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2f      	ldr	r2, [pc, #188]	; (80066c0 <UART_SetConfig+0x2e0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d125      	bne.n	8006652 <UART_SetConfig+0x272>
 8006606:	4b29      	ldr	r3, [pc, #164]	; (80066ac <UART_SetConfig+0x2cc>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006614:	d017      	beq.n	8006646 <UART_SetConfig+0x266>
 8006616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800661a:	d817      	bhi.n	800664c <UART_SetConfig+0x26c>
 800661c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006620:	d00b      	beq.n	800663a <UART_SetConfig+0x25a>
 8006622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006626:	d811      	bhi.n	800664c <UART_SetConfig+0x26c>
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <UART_SetConfig+0x254>
 800662c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006630:	d006      	beq.n	8006640 <UART_SetConfig+0x260>
 8006632:	e00b      	b.n	800664c <UART_SetConfig+0x26c>
 8006634:	2301      	movs	r3, #1
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e076      	b.n	8006728 <UART_SetConfig+0x348>
 800663a:	2302      	movs	r3, #2
 800663c:	77fb      	strb	r3, [r7, #31]
 800663e:	e073      	b.n	8006728 <UART_SetConfig+0x348>
 8006640:	2304      	movs	r3, #4
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e070      	b.n	8006728 <UART_SetConfig+0x348>
 8006646:	2308      	movs	r3, #8
 8006648:	77fb      	strb	r3, [r7, #31]
 800664a:	e06d      	b.n	8006728 <UART_SetConfig+0x348>
 800664c:	2310      	movs	r3, #16
 800664e:	77fb      	strb	r3, [r7, #31]
 8006650:	e06a      	b.n	8006728 <UART_SetConfig+0x348>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <UART_SetConfig+0x2e4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d138      	bne.n	80066ce <UART_SetConfig+0x2ee>
 800665c:	4b13      	ldr	r3, [pc, #76]	; (80066ac <UART_SetConfig+0x2cc>)
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006662:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006666:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800666a:	d017      	beq.n	800669c <UART_SetConfig+0x2bc>
 800666c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006670:	d82a      	bhi.n	80066c8 <UART_SetConfig+0x2e8>
 8006672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006676:	d00b      	beq.n	8006690 <UART_SetConfig+0x2b0>
 8006678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667c:	d824      	bhi.n	80066c8 <UART_SetConfig+0x2e8>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <UART_SetConfig+0x2aa>
 8006682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006686:	d006      	beq.n	8006696 <UART_SetConfig+0x2b6>
 8006688:	e01e      	b.n	80066c8 <UART_SetConfig+0x2e8>
 800668a:	2300      	movs	r3, #0
 800668c:	77fb      	strb	r3, [r7, #31]
 800668e:	e04b      	b.n	8006728 <UART_SetConfig+0x348>
 8006690:	2302      	movs	r3, #2
 8006692:	77fb      	strb	r3, [r7, #31]
 8006694:	e048      	b.n	8006728 <UART_SetConfig+0x348>
 8006696:	2304      	movs	r3, #4
 8006698:	77fb      	strb	r3, [r7, #31]
 800669a:	e045      	b.n	8006728 <UART_SetConfig+0x348>
 800669c:	2308      	movs	r3, #8
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e042      	b.n	8006728 <UART_SetConfig+0x348>
 80066a2:	bf00      	nop
 80066a4:	efff69f3 	.word	0xefff69f3
 80066a8:	40011000 	.word	0x40011000
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40004400 	.word	0x40004400
 80066b4:	40004800 	.word	0x40004800
 80066b8:	40004c00 	.word	0x40004c00
 80066bc:	40005000 	.word	0x40005000
 80066c0:	40011400 	.word	0x40011400
 80066c4:	40007800 	.word	0x40007800
 80066c8:	2310      	movs	r3, #16
 80066ca:	77fb      	strb	r3, [r7, #31]
 80066cc:	e02c      	b.n	8006728 <UART_SetConfig+0x348>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a72      	ldr	r2, [pc, #456]	; (800689c <UART_SetConfig+0x4bc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d125      	bne.n	8006724 <UART_SetConfig+0x344>
 80066d8:	4b71      	ldr	r3, [pc, #452]	; (80068a0 <UART_SetConfig+0x4c0>)
 80066da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066e6:	d017      	beq.n	8006718 <UART_SetConfig+0x338>
 80066e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066ec:	d817      	bhi.n	800671e <UART_SetConfig+0x33e>
 80066ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f2:	d00b      	beq.n	800670c <UART_SetConfig+0x32c>
 80066f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f8:	d811      	bhi.n	800671e <UART_SetConfig+0x33e>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <UART_SetConfig+0x326>
 80066fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006702:	d006      	beq.n	8006712 <UART_SetConfig+0x332>
 8006704:	e00b      	b.n	800671e <UART_SetConfig+0x33e>
 8006706:	2300      	movs	r3, #0
 8006708:	77fb      	strb	r3, [r7, #31]
 800670a:	e00d      	b.n	8006728 <UART_SetConfig+0x348>
 800670c:	2302      	movs	r3, #2
 800670e:	77fb      	strb	r3, [r7, #31]
 8006710:	e00a      	b.n	8006728 <UART_SetConfig+0x348>
 8006712:	2304      	movs	r3, #4
 8006714:	77fb      	strb	r3, [r7, #31]
 8006716:	e007      	b.n	8006728 <UART_SetConfig+0x348>
 8006718:	2308      	movs	r3, #8
 800671a:	77fb      	strb	r3, [r7, #31]
 800671c:	e004      	b.n	8006728 <UART_SetConfig+0x348>
 800671e:	2310      	movs	r3, #16
 8006720:	77fb      	strb	r3, [r7, #31]
 8006722:	e001      	b.n	8006728 <UART_SetConfig+0x348>
 8006724:	2310      	movs	r3, #16
 8006726:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006730:	d15b      	bne.n	80067ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006732:	7ffb      	ldrb	r3, [r7, #31]
 8006734:	2b08      	cmp	r3, #8
 8006736:	d828      	bhi.n	800678a <UART_SetConfig+0x3aa>
 8006738:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x360>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	08006765 	.word	0x08006765
 8006744:	0800676d 	.word	0x0800676d
 8006748:	08006775 	.word	0x08006775
 800674c:	0800678b 	.word	0x0800678b
 8006750:	0800677b 	.word	0x0800677b
 8006754:	0800678b 	.word	0x0800678b
 8006758:	0800678b 	.word	0x0800678b
 800675c:	0800678b 	.word	0x0800678b
 8006760:	08006783 	.word	0x08006783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006764:	f7fd f848 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8006768:	61b8      	str	r0, [r7, #24]
        break;
 800676a:	e013      	b.n	8006794 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800676c:	f7fd f858 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8006770:	61b8      	str	r0, [r7, #24]
        break;
 8006772:	e00f      	b.n	8006794 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006774:	4b4b      	ldr	r3, [pc, #300]	; (80068a4 <UART_SetConfig+0x4c4>)
 8006776:	61bb      	str	r3, [r7, #24]
        break;
 8006778:	e00c      	b.n	8006794 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677a:	f7fc ff2b 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 800677e:	61b8      	str	r0, [r7, #24]
        break;
 8006780:	e008      	b.n	8006794 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006786:	61bb      	str	r3, [r7, #24]
        break;
 8006788:	e004      	b.n	8006794 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	77bb      	strb	r3, [r7, #30]
        break;
 8006792:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d074      	beq.n	8006884 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	005a      	lsls	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	085b      	lsrs	r3, r3, #1
 80067a4:	441a      	add	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b0f      	cmp	r3, #15
 80067b4:	d916      	bls.n	80067e4 <UART_SetConfig+0x404>
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067bc:	d212      	bcs.n	80067e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f023 030f 	bic.w	r3, r3, #15
 80067c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	085b      	lsrs	r3, r3, #1
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	89fb      	ldrh	r3, [r7, #14]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	89fa      	ldrh	r2, [r7, #14]
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	e04f      	b.n	8006884 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	77bb      	strb	r3, [r7, #30]
 80067e8:	e04c      	b.n	8006884 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067ea:	7ffb      	ldrb	r3, [r7, #31]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d828      	bhi.n	8006842 <UART_SetConfig+0x462>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <UART_SetConfig+0x418>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	0800681d 	.word	0x0800681d
 80067fc:	08006825 	.word	0x08006825
 8006800:	0800682d 	.word	0x0800682d
 8006804:	08006843 	.word	0x08006843
 8006808:	08006833 	.word	0x08006833
 800680c:	08006843 	.word	0x08006843
 8006810:	08006843 	.word	0x08006843
 8006814:	08006843 	.word	0x08006843
 8006818:	0800683b 	.word	0x0800683b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800681c:	f7fc ffec 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8006820:	61b8      	str	r0, [r7, #24]
        break;
 8006822:	e013      	b.n	800684c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006824:	f7fc fffc 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8006828:	61b8      	str	r0, [r7, #24]
        break;
 800682a:	e00f      	b.n	800684c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800682c:	4b1d      	ldr	r3, [pc, #116]	; (80068a4 <UART_SetConfig+0x4c4>)
 800682e:	61bb      	str	r3, [r7, #24]
        break;
 8006830:	e00c      	b.n	800684c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006832:	f7fc fecf 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8006836:	61b8      	str	r0, [r7, #24]
        break;
 8006838:	e008      	b.n	800684c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800683a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800683e:	61bb      	str	r3, [r7, #24]
        break;
 8006840:	e004      	b.n	800684c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	77bb      	strb	r3, [r7, #30]
        break;
 800684a:	bf00      	nop
    }

    if (pclk != 0U)
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d018      	beq.n	8006884 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	085a      	lsrs	r2, r3, #1
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	441a      	add	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	fbb2 f3f3 	udiv	r3, r2, r3
 8006864:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b0f      	cmp	r3, #15
 800686a:	d909      	bls.n	8006880 <UART_SetConfig+0x4a0>
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006872:	d205      	bcs.n	8006880 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	60da      	str	r2, [r3, #12]
 800687e:	e001      	b.n	8006884 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006890:	7fbb      	ldrb	r3, [r7, #30]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40007c00 	.word	0x40007c00
 80068a0:	40023800 	.word	0x40023800
 80068a4:	00f42400 	.word	0x00f42400

080068a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f003 0310 	and.w	r3, r3, #16
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01a      	beq.n	80069be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a6:	d10a      	bne.n	80069be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	605a      	str	r2, [r3, #4]
  }
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069fc:	f7fb fb9e 	bl	800213c <HAL_GetTick>
 8006a00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d10e      	bne.n	8006a2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f81b 	bl	8006a5a <UART_WaitOnFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e011      	b.n	8006a52 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b09c      	sub	sp, #112	; 0x70
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a6a:	e0a7      	b.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	f000 80a3 	beq.w	8006bbc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a76:	f7fb fb61 	bl	800213c <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d302      	bcc.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x32>
 8006a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d13f      	bne.n	8006b0c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ab0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e6      	bne.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3308      	adds	r3, #8
 8006adc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ade:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e5      	bne.n	8006abe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e068      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d050      	beq.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b28:	d148      	bne.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	637b      	str	r3, [r7, #52]	; 0x34
 8006b54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e6      	bne.n	8006b34 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	613b      	str	r3, [r7, #16]
   return(result);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b86:	623a      	str	r2, [r7, #32]
 8006b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	69f9      	ldr	r1, [r7, #28]
 8006b8c:	6a3a      	ldr	r2, [r7, #32]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e010      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69da      	ldr	r2, [r3, #28]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	bf0c      	ite	eq
 8006bcc:	2301      	moveq	r3, #1
 8006bce:	2300      	movne	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	f43f af48 	beq.w	8006a6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3770      	adds	r7, #112	; 0x70
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b097      	sub	sp, #92	; 0x5c
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1a:	d10e      	bne.n	8006c3a <UART_Start_Receive_IT+0x52>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <UART_Start_Receive_IT+0x48>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c2e:	e02d      	b.n	8006c8c <UART_Start_Receive_IT+0xa4>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	22ff      	movs	r2, #255	; 0xff
 8006c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c38:	e028      	b.n	8006c8c <UART_Start_Receive_IT+0xa4>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10d      	bne.n	8006c5e <UART_Start_Receive_IT+0x76>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <UART_Start_Receive_IT+0x6c>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	22ff      	movs	r2, #255	; 0xff
 8006c4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c52:	e01b      	b.n	8006c8c <UART_Start_Receive_IT+0xa4>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	227f      	movs	r2, #127	; 0x7f
 8006c58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c5c:	e016      	b.n	8006c8c <UART_Start_Receive_IT+0xa4>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c66:	d10d      	bne.n	8006c84 <UART_Start_Receive_IT+0x9c>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <UART_Start_Receive_IT+0x92>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	227f      	movs	r2, #127	; 0x7f
 8006c74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c78:	e008      	b.n	8006c8c <UART_Start_Receive_IT+0xa4>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	223f      	movs	r2, #63	; 0x3f
 8006c7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c82:	e003      	b.n	8006c8c <UART_Start_Receive_IT+0xa4>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2222      	movs	r2, #34	; 0x22
 8006c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cbc:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e5      	bne.n	8006c9c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd8:	d107      	bne.n	8006cea <UART_Start_Receive_IT+0x102>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d103      	bne.n	8006cea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a21      	ldr	r2, [pc, #132]	; (8006d6c <UART_Start_Receive_IT+0x184>)
 8006ce6:	669a      	str	r2, [r3, #104]	; 0x68
 8006ce8:	e002      	b.n	8006cf0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a20      	ldr	r2, [pc, #128]	; (8006d70 <UART_Start_Receive_IT+0x188>)
 8006cee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d019      	beq.n	8006d2c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d16:	637b      	str	r3, [r7, #52]	; 0x34
 8006d18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1e6      	bne.n	8006cf8 <UART_Start_Receive_IT+0x110>
 8006d2a:	e018      	b.n	8006d5e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f043 0320 	orr.w	r3, r3, #32
 8006d40:	653b      	str	r3, [r7, #80]	; 0x50
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4a:	623b      	str	r3, [r7, #32]
 8006d4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	69f9      	ldr	r1, [r7, #28]
 8006d50:	6a3a      	ldr	r2, [r7, #32]
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e6      	bne.n	8006d2c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	375c      	adds	r7, #92	; 0x5c
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	08007023 	.word	0x08007023
 8006d70:	08006ebd 	.word	0x08006ebd

08006d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b095      	sub	sp, #84	; 0x54
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006da0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e6      	bne.n	8006d7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	f023 0301 	bic.w	r3, r3, #1
 8006dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e5      	bne.n	8006dae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d118      	bne.n	8006e1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f023 0310 	bic.w	r3, r3, #16
 8006dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6979      	ldr	r1, [r7, #20]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	613b      	str	r3, [r7, #16]
   return(result);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e6      	bne.n	8006dea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006e30:	bf00      	nop
 8006e32:	3754      	adds	r7, #84	; 0x54
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff faaa 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	61bb      	str	r3, [r7, #24]
 8006e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6979      	ldr	r1, [r7, #20]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e6      	bne.n	8006e70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fa76 	bl	80063a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb4:	bf00      	nop
 8006eb6:	3720      	adds	r7, #32
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b096      	sub	sp, #88	; 0x58
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ed4:	2b22      	cmp	r3, #34	; 0x22
 8006ed6:	f040 8098 	bne.w	800700a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ee4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ee8:	b2d9      	uxtb	r1, r3
 8006eea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef4:	400a      	ands	r2, r1
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d17b      	bne.n	800701a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f36:	653b      	str	r3, [r7, #80]	; 0x50
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f40:	647b      	str	r3, [r7, #68]	; 0x44
 8006f42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e6      	bne.n	8006f22 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	623b      	str	r3, [r7, #32]
   return(result);
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f74:	633a      	str	r2, [r7, #48]	; 0x30
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d12e      	bne.n	8007002 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0310 	bic.w	r3, r3, #16
 8006fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	69b9      	ldr	r1, [r7, #24]
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e6      	bne.n	8006faa <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b10      	cmp	r3, #16
 8006fe8:	d103      	bne.n	8006ff2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2210      	movs	r2, #16
 8006ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff f9e4 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007000:	e00b      	b.n	800701a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fa f8f2 	bl	80011ec <HAL_UART_RxCpltCallback>
}
 8007008:	e007      	b.n	800701a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699a      	ldr	r2, [r3, #24]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0208 	orr.w	r2, r2, #8
 8007018:	619a      	str	r2, [r3, #24]
}
 800701a:	bf00      	nop
 800701c:	3758      	adds	r7, #88	; 0x58
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b096      	sub	sp, #88	; 0x58
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007030:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800703a:	2b22      	cmp	r3, #34	; 0x22
 800703c:	f040 8098 	bne.w	8007170 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007050:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007054:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007058:	4013      	ands	r3, r2
 800705a:	b29a      	uxth	r2, r3
 800705c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800705e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007064:	1c9a      	adds	r2, r3, #2
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d17b      	bne.n	8007180 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800709c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a6:	643b      	str	r3, [r7, #64]	; 0x40
 80070a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e6      	bne.n	8007088 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e5      	bne.n	80070ba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007106:	2b01      	cmp	r3, #1
 8007108:	d12e      	bne.n	8007168 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	60bb      	str	r3, [r7, #8]
   return(result);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 0310 	bic.w	r3, r3, #16
 8007124:	647b      	str	r3, [r7, #68]	; 0x44
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6979      	ldr	r1, [r7, #20]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	613b      	str	r3, [r7, #16]
   return(result);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e6      	bne.n	8007110 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b10      	cmp	r3, #16
 800714e:	d103      	bne.n	8007158 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2210      	movs	r2, #16
 8007156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff f931 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007166:	e00b      	b.n	8007180 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fa f83f 	bl	80011ec <HAL_UART_RxCpltCallback>
}
 800716e:	e007      	b.n	8007180 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0208 	orr.w	r2, r2, #8
 800717e:	619a      	str	r2, [r3, #24]
}
 8007180:	bf00      	nop
 8007182:	3758      	adds	r7, #88	; 0x58
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <_strtol_l.constprop.0>:
 8007188:	2b01      	cmp	r3, #1
 800718a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800718e:	d001      	beq.n	8007194 <_strtol_l.constprop.0+0xc>
 8007190:	2b24      	cmp	r3, #36	; 0x24
 8007192:	d906      	bls.n	80071a2 <_strtol_l.constprop.0+0x1a>
 8007194:	f000 f88c 	bl	80072b0 <__errno>
 8007198:	2316      	movs	r3, #22
 800719a:	6003      	str	r3, [r0, #0]
 800719c:	2000      	movs	r0, #0
 800719e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007288 <_strtol_l.constprop.0+0x100>
 80071a6:	460d      	mov	r5, r1
 80071a8:	462e      	mov	r6, r5
 80071aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ae:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80071b2:	f017 0708 	ands.w	r7, r7, #8
 80071b6:	d1f7      	bne.n	80071a8 <_strtol_l.constprop.0+0x20>
 80071b8:	2c2d      	cmp	r4, #45	; 0x2d
 80071ba:	d132      	bne.n	8007222 <_strtol_l.constprop.0+0x9a>
 80071bc:	782c      	ldrb	r4, [r5, #0]
 80071be:	2701      	movs	r7, #1
 80071c0:	1cb5      	adds	r5, r6, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d05b      	beq.n	800727e <_strtol_l.constprop.0+0xf6>
 80071c6:	2b10      	cmp	r3, #16
 80071c8:	d109      	bne.n	80071de <_strtol_l.constprop.0+0x56>
 80071ca:	2c30      	cmp	r4, #48	; 0x30
 80071cc:	d107      	bne.n	80071de <_strtol_l.constprop.0+0x56>
 80071ce:	782c      	ldrb	r4, [r5, #0]
 80071d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80071d4:	2c58      	cmp	r4, #88	; 0x58
 80071d6:	d14d      	bne.n	8007274 <_strtol_l.constprop.0+0xec>
 80071d8:	786c      	ldrb	r4, [r5, #1]
 80071da:	2310      	movs	r3, #16
 80071dc:	3502      	adds	r5, #2
 80071de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80071e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80071e6:	f04f 0e00 	mov.w	lr, #0
 80071ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80071ee:	4676      	mov	r6, lr
 80071f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80071f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80071f8:	f1bc 0f09 	cmp.w	ip, #9
 80071fc:	d816      	bhi.n	800722c <_strtol_l.constprop.0+0xa4>
 80071fe:	4664      	mov	r4, ip
 8007200:	42a3      	cmp	r3, r4
 8007202:	dd24      	ble.n	800724e <_strtol_l.constprop.0+0xc6>
 8007204:	f1be 3fff 	cmp.w	lr, #4294967295
 8007208:	d008      	beq.n	800721c <_strtol_l.constprop.0+0x94>
 800720a:	45b1      	cmp	r9, r6
 800720c:	d31c      	bcc.n	8007248 <_strtol_l.constprop.0+0xc0>
 800720e:	d101      	bne.n	8007214 <_strtol_l.constprop.0+0x8c>
 8007210:	45a2      	cmp	sl, r4
 8007212:	db19      	blt.n	8007248 <_strtol_l.constprop.0+0xc0>
 8007214:	fb06 4603 	mla	r6, r6, r3, r4
 8007218:	f04f 0e01 	mov.w	lr, #1
 800721c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007220:	e7e8      	b.n	80071f4 <_strtol_l.constprop.0+0x6c>
 8007222:	2c2b      	cmp	r4, #43	; 0x2b
 8007224:	bf04      	itt	eq
 8007226:	782c      	ldrbeq	r4, [r5, #0]
 8007228:	1cb5      	addeq	r5, r6, #2
 800722a:	e7ca      	b.n	80071c2 <_strtol_l.constprop.0+0x3a>
 800722c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007230:	f1bc 0f19 	cmp.w	ip, #25
 8007234:	d801      	bhi.n	800723a <_strtol_l.constprop.0+0xb2>
 8007236:	3c37      	subs	r4, #55	; 0x37
 8007238:	e7e2      	b.n	8007200 <_strtol_l.constprop.0+0x78>
 800723a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800723e:	f1bc 0f19 	cmp.w	ip, #25
 8007242:	d804      	bhi.n	800724e <_strtol_l.constprop.0+0xc6>
 8007244:	3c57      	subs	r4, #87	; 0x57
 8007246:	e7db      	b.n	8007200 <_strtol_l.constprop.0+0x78>
 8007248:	f04f 3eff 	mov.w	lr, #4294967295
 800724c:	e7e6      	b.n	800721c <_strtol_l.constprop.0+0x94>
 800724e:	f1be 3fff 	cmp.w	lr, #4294967295
 8007252:	d105      	bne.n	8007260 <_strtol_l.constprop.0+0xd8>
 8007254:	2322      	movs	r3, #34	; 0x22
 8007256:	6003      	str	r3, [r0, #0]
 8007258:	4646      	mov	r6, r8
 800725a:	b942      	cbnz	r2, 800726e <_strtol_l.constprop.0+0xe6>
 800725c:	4630      	mov	r0, r6
 800725e:	e79e      	b.n	800719e <_strtol_l.constprop.0+0x16>
 8007260:	b107      	cbz	r7, 8007264 <_strtol_l.constprop.0+0xdc>
 8007262:	4276      	negs	r6, r6
 8007264:	2a00      	cmp	r2, #0
 8007266:	d0f9      	beq.n	800725c <_strtol_l.constprop.0+0xd4>
 8007268:	f1be 0f00 	cmp.w	lr, #0
 800726c:	d000      	beq.n	8007270 <_strtol_l.constprop.0+0xe8>
 800726e:	1e69      	subs	r1, r5, #1
 8007270:	6011      	str	r1, [r2, #0]
 8007272:	e7f3      	b.n	800725c <_strtol_l.constprop.0+0xd4>
 8007274:	2430      	movs	r4, #48	; 0x30
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1b1      	bne.n	80071de <_strtol_l.constprop.0+0x56>
 800727a:	2308      	movs	r3, #8
 800727c:	e7af      	b.n	80071de <_strtol_l.constprop.0+0x56>
 800727e:	2c30      	cmp	r4, #48	; 0x30
 8007280:	d0a5      	beq.n	80071ce <_strtol_l.constprop.0+0x46>
 8007282:	230a      	movs	r3, #10
 8007284:	e7ab      	b.n	80071de <_strtol_l.constprop.0+0x56>
 8007286:	bf00      	nop
 8007288:	08007405 	.word	0x08007405

0800728c <strtol>:
 800728c:	4613      	mov	r3, r2
 800728e:	460a      	mov	r2, r1
 8007290:	4601      	mov	r1, r0
 8007292:	4802      	ldr	r0, [pc, #8]	; (800729c <strtol+0x10>)
 8007294:	6800      	ldr	r0, [r0, #0]
 8007296:	f7ff bf77 	b.w	8007188 <_strtol_l.constprop.0>
 800729a:	bf00      	nop
 800729c:	2000009c 	.word	0x2000009c

080072a0 <memset>:
 80072a0:	4402      	add	r2, r0
 80072a2:	4603      	mov	r3, r0
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d100      	bne.n	80072aa <memset+0xa>
 80072a8:	4770      	bx	lr
 80072aa:	f803 1b01 	strb.w	r1, [r3], #1
 80072ae:	e7f9      	b.n	80072a4 <memset+0x4>

080072b0 <__errno>:
 80072b0:	4b01      	ldr	r3, [pc, #4]	; (80072b8 <__errno+0x8>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	2000009c 	.word	0x2000009c

080072bc <__libc_init_array>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	4d0d      	ldr	r5, [pc, #52]	; (80072f4 <__libc_init_array+0x38>)
 80072c0:	4c0d      	ldr	r4, [pc, #52]	; (80072f8 <__libc_init_array+0x3c>)
 80072c2:	1b64      	subs	r4, r4, r5
 80072c4:	10a4      	asrs	r4, r4, #2
 80072c6:	2600      	movs	r6, #0
 80072c8:	42a6      	cmp	r6, r4
 80072ca:	d109      	bne.n	80072e0 <__libc_init_array+0x24>
 80072cc:	4d0b      	ldr	r5, [pc, #44]	; (80072fc <__libc_init_array+0x40>)
 80072ce:	4c0c      	ldr	r4, [pc, #48]	; (8007300 <__libc_init_array+0x44>)
 80072d0:	f000 f86a 	bl	80073a8 <_init>
 80072d4:	1b64      	subs	r4, r4, r5
 80072d6:	10a4      	asrs	r4, r4, #2
 80072d8:	2600      	movs	r6, #0
 80072da:	42a6      	cmp	r6, r4
 80072dc:	d105      	bne.n	80072ea <__libc_init_array+0x2e>
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e4:	4798      	blx	r3
 80072e6:	3601      	adds	r6, #1
 80072e8:	e7ee      	b.n	80072c8 <__libc_init_array+0xc>
 80072ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ee:	4798      	blx	r3
 80072f0:	3601      	adds	r6, #1
 80072f2:	e7f2      	b.n	80072da <__libc_init_array+0x1e>
 80072f4:	08007510 	.word	0x08007510
 80072f8:	08007510 	.word	0x08007510
 80072fc:	08007510 	.word	0x08007510
 8007300:	08007514 	.word	0x08007514

08007304 <fmaxf>:
 8007304:	b508      	push	{r3, lr}
 8007306:	ed2d 8b02 	vpush	{d8}
 800730a:	eeb0 8a40 	vmov.f32	s16, s0
 800730e:	eef0 8a60 	vmov.f32	s17, s1
 8007312:	f000 f82d 	bl	8007370 <__fpclassifyf>
 8007316:	b148      	cbz	r0, 800732c <fmaxf+0x28>
 8007318:	eeb0 0a68 	vmov.f32	s0, s17
 800731c:	f000 f828 	bl	8007370 <__fpclassifyf>
 8007320:	b130      	cbz	r0, 8007330 <fmaxf+0x2c>
 8007322:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732a:	dc01      	bgt.n	8007330 <fmaxf+0x2c>
 800732c:	eeb0 8a68 	vmov.f32	s16, s17
 8007330:	eeb0 0a48 	vmov.f32	s0, s16
 8007334:	ecbd 8b02 	vpop	{d8}
 8007338:	bd08      	pop	{r3, pc}

0800733a <fminf>:
 800733a:	b508      	push	{r3, lr}
 800733c:	ed2d 8b02 	vpush	{d8}
 8007340:	eeb0 8a40 	vmov.f32	s16, s0
 8007344:	eef0 8a60 	vmov.f32	s17, s1
 8007348:	f000 f812 	bl	8007370 <__fpclassifyf>
 800734c:	b148      	cbz	r0, 8007362 <fminf+0x28>
 800734e:	eeb0 0a68 	vmov.f32	s0, s17
 8007352:	f000 f80d 	bl	8007370 <__fpclassifyf>
 8007356:	b130      	cbz	r0, 8007366 <fminf+0x2c>
 8007358:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800735c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007360:	d401      	bmi.n	8007366 <fminf+0x2c>
 8007362:	eeb0 8a68 	vmov.f32	s16, s17
 8007366:	eeb0 0a48 	vmov.f32	s0, s16
 800736a:	ecbd 8b02 	vpop	{d8}
 800736e:	bd08      	pop	{r3, pc}

08007370 <__fpclassifyf>:
 8007370:	ee10 3a10 	vmov	r3, s0
 8007374:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8007378:	d00d      	beq.n	8007396 <__fpclassifyf+0x26>
 800737a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800737e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007382:	d30a      	bcc.n	800739a <__fpclassifyf+0x2a>
 8007384:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <__fpclassifyf+0x34>)
 8007386:	1e42      	subs	r2, r0, #1
 8007388:	429a      	cmp	r2, r3
 800738a:	d908      	bls.n	800739e <__fpclassifyf+0x2e>
 800738c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8007390:	4258      	negs	r0, r3
 8007392:	4158      	adcs	r0, r3
 8007394:	4770      	bx	lr
 8007396:	2002      	movs	r0, #2
 8007398:	4770      	bx	lr
 800739a:	2004      	movs	r0, #4
 800739c:	4770      	bx	lr
 800739e:	2003      	movs	r0, #3
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	007ffffe 	.word	0x007ffffe

080073a8 <_init>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	bf00      	nop
 80073ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ae:	bc08      	pop	{r3}
 80073b0:	469e      	mov	lr, r3
 80073b2:	4770      	bx	lr

080073b4 <_fini>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr
